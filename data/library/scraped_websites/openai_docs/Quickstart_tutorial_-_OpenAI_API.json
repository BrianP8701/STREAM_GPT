{
    "metadata": {
        "type": "web",
        "url": "https://platform.openai.com/docs/quickstart/next-steps",
        "title": "Quickstart tutorial - OpenAI API",
        "description": "Explore resources, tutorials, API docs, and dynamic examples to get the most out of OpenAI's developer platform."
    },
    "text": "[](https://platform.openai.com/docs/quickstart/developer-quickstart)\n\n## [Developer quickstart](https://platform.openai.com/docs/quickstart/developer-quickstart)\n\n[](https://platform.openai.com/docs/quickstart/get-up-and-running-with-the-openai-api)\n\n## [Get up and running with the OpenAI API](https://platform.openai.com/docs/quickstart/get-up-and-running-with-the-openai-api)\n\nThe OpenAI API provides a simple interface for developers to create an intelligence layer in their applications, powered by OpenAI's state of the art models. The Chat Completions endpoint powers ChatGPT and provides a simple way to take text as input and use a model like GPT-4 to generate an output.\n\n[\n\nWant to jump straight to the code?\n\nSkip the quickstart and dive into the API reference.\n\n\n\n](https://platform.openai.com/docs/api-reference)\n\nThis quickstart is designed to help get your local development environment setup and send your first API request. If you are an experienced developer or want to just dive into using the OpenAI API, the [API reference](https://platform.openai.com/docs/api-reference) of [GPT guide](https://platform.openai.com/docs/guides/gpt) are a great place to start. Throughout this quickstart, you will learn:\n\n*   How to setup your development environment\n*   How to install the latest SDKs\n*   Some of the basic concepts of the OpenAI API\n*   How to send your first API request\n\nIf you run into any challenges or have questions getting started, please join our [developer forum](https://community.openai.com/).\n\n[](https://platform.openai.com/docs/quickstart/account-setup)\n\n## [Account setup](https://platform.openai.com/docs/quickstart/account-setup)\n\nFirst, create an [OpenAI account](https://platform.openai.com/signup) or [sign in](https://platform.openai.com/login). Next, navigate to the [API key page](https://platform.openai.com/account/api-keys) and \"Create new secret key\", optionally naming the key. Make sure to save this somewhere safe and do not share it with anyone.\n\n[](https://platform.openai.com/docs/quickstart/quickstart-language-selection)\n\n## [Quickstart language selection](https://platform.openai.com/docs/quickstart/quickstart-language-selection)\n\nSelect the tool or language you want to get started using the OpenAI API with.\n\nPython is a popular programming language that is commonly used for data applications, web development, and many other programming tasks due to its ease of use. OpenAI provides a custom [Python library](https://github.com/openai/openai-python) which makes working with the OpenAI API in Python simple and efficient.\n\n[](https://platform.openai.com/docs/quickstart/step-1-setup-python)\n\n## [Step 1: Setup Python](https://platform.openai.com/docs/quickstart/step-1-setup-python)\n\nTo use the OpenAI Python library, you will need to ensure you have Python installed. Some computers come with Python pre-installed while others require that you set it up yourself. To test if you have Python installed, you can navigate to your Terminal or Command line:\n\n*   MacOS: **Open Terminal**: You can find it in the Applications folder or search for it using Spotlight (Command + Space).\n*   Windows: **Open Command Prompt**: You can find it by searching \"cmd\" in the start menu.\n\nNext, enter the word `python` and then press return/enter. If you enter into the Python interpreter, then you have Python installed on your computer already and you can go to the next step. If you get an error message that says something like \"Error: command python not found\", you likely need to install Python and make it available in your terminal / command line.\n\nTo download Python, head to the [official Python website](https://www.python.org/downloads/) and download the latest version. To use the OpenAI Python library, you need at least Python 3.7.1 or newer. If you are installing Python for the first time, you can follow the [official Python installation guide for beginners](https://wiki.python.org/moin/BeginnersGuide/Download).\n\nSetup a virtual environment (optional)\n\nOnce you have Python installed, it is a good practice to create a virtual python environment to install the OpenAI Python library. Virtual environments provide a clean working space for your Python packages to be installed so that you do not have conflicts with other libraries you install for other projects. You are not required to use a virtual environment, so skip to step 3 if you do not want to set one up.\n\nTo create a virtual environment, Python supplies a built in [venv module](https://docs.python.org/3/tutorial/venv.html) which provides the basic functionality needed for the virtual environment setup. Running the command below will create a virtual environment named \"openai-env\" inside the current folder you have selected in your terminal / command line:\n\n```\npython -m venv openai-env\n```\n\nOnce you\u2019ve created the virtual environment, you need to activate it. On Windows, run:\n\n```\nopenai-env\\Scripts\\activate\n```\n\nOn Unix or MacOS, run:\n\n```\nsource openai-env/bin/activate\n```\n\nYou should see the terminal / command line interface change slightly after you active the virtual environment, it should now show \"openai-env\" to the left of the cursor input section. For more details on working wit virtual environments, please refer to the [official Python documentation](https://docs.python.org/3/tutorial/venv.html#creating-virtual-environments).\n\nInstall the OpenAI Python library\n\nOnce you have Python 3.7.1 or newer installed and (optionally) a virtual environment setup, the OpenAI Python library can be installed. From the terminal / command line, run:\n\n```\npip install --upgrade openai\n```\n\nOnce this completes, running `pip list` will show you the Python libraries you have installed in your current environment, which should confirm that the OpenAI Python library was successfully installed.\n\n[](https://platform.openai.com/docs/quickstart/step-2-setup-your-api-key)\n\n## [Step 2: Setup your API key](https://platform.openai.com/docs/quickstart/step-2-setup-your-api-key)\n\nSetup your API key for all projects (recommended)\n\nThe main advantage to making your API key accessible for all projects is that the Python library will automatically detect it and use it without having to write any code.\n\n1.  **Open Terminal**: You can find it in the Applications folder or search for it using Spotlight (Command + Space).\n    \n2.  **Edit Bash Profile**: Use the command `nano ~/.bash_profile` or `nano ~/.zshrc` (for newer MacOS versions) to open the profile file in a text editor.\n    \n3.  **Add Environment Variable**: In the editor, add the line below, replacing `your-api-key-here` with your actual API key:\n    \n    ```\n    export OPENAI_API_KEY='your-api-key-here'\n    ```\n    \n4.  **Save and Exit**: Press Ctrl+O to write the changes, followed by Ctrl+X to close the editor.\n    \n5.  **Load Your Profile**: Use the command `source ~/.bash_profile` or `source ~/.zshrc` to load the updated profile.\n    \n6.  **Verification**: Verify the setup by typing `echo $OPENAI_API_KEY` in the terminal. It should display your API key.\n    \n\n1.  **Open Command Prompt**: You can find it by searching \"cmd\" in the start menu.\n    \n2.  **Set environment variable in the current session**: To set the environment variable in the current session, use the command below, replacing `your-api-key-here` with your actual API key:\n    \n    ```\n    setx OPENAI_API_KEY \"your-api-key-here\"\n    ```\n    \n    This command will set the OPENAI\\_API\\_KEY environment variable for the current session.\n    \n3.  **Permanent setup**: To make the setup permanent, add the variable through the system properties as follows:\n    \n    *   Right-click on 'This PC' or 'My Computer' and select 'Properties'.\n    *   Click on 'Advanced system settings'.\n    *   Click the 'Environment Variables' button.\n    *   In the 'System variables' section, click 'New...' and enter OPENAI\\_API\\_KEY as the variable name and your API key as the variable value.\n4.  **Verification**: To verify the setup, reopen the command prompt and type the command below. It should display your API key: `echo %OPENAI_API_KEY%`\n    \n\nSetup your API key for a single project\n\nIf you only want your API key to be accessible to a single project, you can create a local `.env` file which contains the API key and then explicitly use that API key with the Python code shown in the steps to come.\n\nStart by going to the project folder you want to create the `.env` file in.\n\nIn order for your **.env** file to be ignored by version control, create a **.gitignore** file in the root of your project directory. Add a line with **.env** on it which will make sure your API key or other secrets are not accidentally shared via version control.\n\nOnce you create the `.gitignore` and `.env` files using the terminal or an integrated development environment (IDE), copy your secret API key and set it as the `OPENAI_API_KEY` in your `.env` file. If you haven't created a secret key yet, you can do so on the [API key page](https://platform.openai.com/account/api-keys).\n\nThe `.env` file should look like the following:\n\n```\n# Once you add your API key below, make sure to not share it with anyone! The API key should remain private.\nOPENAI_API_KEY=abc123\n```\n\nThe API key can be imported by running the code below:\n\n```\n1\n2\n3\nimport os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n```\n\n[](https://platform.openai.com/docs/quickstart/step-3-sending-your-first-api-request)\n\n## [Step 3: Sending your first API request](https://platform.openai.com/docs/quickstart/step-3-sending-your-first-api-request)\n\nAfter you have Python configured and an API key setup, the final step is to send a request to the OpenAI API using the Python library. To do this, create a file named `openai-test.py` using th terminal or an IDE.\n\nInside the file, copy and paste one of the examples below:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nimport os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\ncompletion = openai.ChatCompletion.create(\n  model=\"gpt-3.5-turbo\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a poetic assistant, skilled in explaining complex programming concepts with creative flair.\"},\n    {\"role\": \"user\", \"content\": \"Compose a poem that explains the concept of recursion in programming.\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n```\n\nTo run the code, enter `python openai-test.py` into the terminal / command line.\n\nThe [Chat Completions](https://platform.openai.com/docs/api-reference/chat/create) example highlights just one area of strength for our models: creative ability. Explaining recursion (the programming topic) in a well formatted poem is something both the best developers and best poets would struggle with. In this case, `gpt-3.5-turbo` does it effortlessly.\n\n[](https://platform.openai.com/docs/quickstart/next-steps)\n\n## [Next steps](https://platform.openai.com/docs/quickstart/next-steps)\n\nNow that you have made you first OpenAI API request, it is time to explore what else is possible:\n\n*   For more detailed information on our models and the API, see our [GPT guide](https://platform.openai.com/docs/guides/gpt).\n*   Visit the [OpenAI Cookbook](https://cookbook.openai.com/) for in-depth example API use-cases, as well as code snippets for common tasks.\n*   Wondering what GPT models are capable of? Check out our library of [example prompts](https://platform.openai.com/examples).\n*   Want to try the API without writing any code? Start experimenting in the [Playground](https://platform.openai.com/playground).\n*   Keep our [usage policies](https://openai.com/policies/usage-policies) in mind as you start building."
}