{
    "metadata": {
        "type": "repo",
        "path": "src/threads/VideoStream.py"
    },
    "text": "'''\n    VideoStream is responsible for the video.\n    \n    Upon calling start(), VideoStream opens the video file and simulates the video stream.\n    The frame_router() routes the frames to the appropriate places as they stream in.\n'''\nimport time\nimport cv2\nimport src.helpers.helper_functions as helpers\nimport src.variables.global_vars as GV\n\nclass VideoStream:\n    def __init__(self, video_path):\n        self.video_path = video_path\n\n    def start(self):\n        helpers.print_text('Video stream beginning', 'blue')\n        self._open_video_file()\n        self._simulate_video_stream()\n\n    def _open_video_file(self):\n        self.cam = cv2.VideoCapture(self.video_path)\n        GV.start_time = time.time()\n        GV.video_start_event.set()\n        self.target_time = GV.start_time + 1/30\n\n    def _simulate_video_stream(self):\n        while True:\n            ret, frame = self.cam.read()\n            if not ret:\n                break\n            self._frame_router(frame)\n            GV.global_frame_index += 1\n            self._ensure_correct_video_speed()\n        self.cam.release()\n        helpers.print_text('Video stream ended', 'red')\n\n    def _frame_router(self, frame):\n        if not GV.tracking: # save video frames for initialization\n            try: GV.initialization_video_buffer.append([GV.global_frame_index,  frame])\n            except: pass\n        self._update_video_buffer(frame) # update video buffer for YOLO_thread\n        GV.video_queue.put(frame) # send frame to tracking thread\n\n    # Updates the video buffer used for YOLO_thread\n    def _update_video_buffer(self, frame):\n        if len(GV.yolo_video_buffer) < 30:\n            GV.yolo_video_buffer.append([GV.global_frame_index, frame])\n        else:\n            GV.yolo_video_buffer.pop(0)\n            GV.yolo_video_buffer.append([GV.global_frame_index, frame])\n\n    def _ensure_correct_video_speed(self):\n        sleep_time = self.target_time - time.time()\n        if sleep_time > 0:\n            time.sleep(sleep_time)\n        self.target_time += 1/30"
}