{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/evaluation/Deepeval.html",
        "title": "LlamaIndex + DeepEval Integration - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "Toggle table of contents sidebar\n\n## LlamaIndex + DeepEval Integration[\uf0c1](#llamaindex-deepeval-integration \"Permalink to this heading\")\n\nThis code tutorial shows how you can easily integrate LlamaIndex with DeepEval. DeepEval makes it easy to unit-test your LLMs.\n\nYou can read more about the DeepEval framework here: https://docs.confident-ai.com/docs/framework\n\nFeel free to check out our repository here: https://github.com/confident-ai/deepeval\n\n![Framework](https://docs.confident-ai.com/assets/images/llm-evaluation-framework-example-b02144720026b6d49b1e04d8a99d3d33.png)\n\n## Set-up and Installation[\uf0c1](#set-up-and-installation \"Permalink to this heading\")\n\nWe recommend setting up and installing via pip!\n\n!pip install -q -q llama-index\n!pip install -U -q deepeval\n\nThis step is optional and only if you want a server-hosted dashboard! (Psst I think you should!)\n\n## Testing for factual consistency[\uf0c1](#testing-for-factual-consistency \"Permalink to this heading\")\n\nfrom llama\\_index.response.schema import Response\nfrom typing import List\nfrom llama\\_index.schema import Document\nfrom deepeval.metrics.factual\\_consistency import FactualConsistencyMetric\n\n## Setting Up The Evaluator[\uf0c1](#setting-up-the-evaluator \"Permalink to this heading\")\n\nSetting up the evaluator.\n\nfrom llama\\_index import (\n    TreeIndex,\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    LLMPredictor,\n    ServiceContext,\n    Response,\n)\nfrom llama\\_index.llms import OpenAI\nfrom llama\\_index.evaluation import FaithfulnessEvaluator\n\nimport os\nimport openai\n\napi\\_key \\= \"sk-XXX\"\nopenai.api\\_key \\= api\\_key\n\ngpt4 \\= OpenAI(temperature\\=0, model\\=\"gpt-4\", api\\_key\\=api\\_key)\nservice\\_context\\_gpt4 \\= ServiceContext.from\\_defaults(llm\\=gpt4)\nevaluator\\_gpt4 \\= FaithfulnessEvaluator(service\\_context\\=service\\_context\\_gpt4)\n\n### Getting a LlamaHub Loader[\uf0c1](#getting-a-llamahub-loader \"Permalink to this heading\")\n\nfrom llama\\_index import download\\_loader\n\nWikipediaReader \\= download\\_loader(\"WikipediaReader\")\n\nloader \\= WikipediaReader()\ndocuments \\= loader.load\\_data(pages\\=\\[\"Tokyo\"\\])\n\ntree\\_index \\= TreeIndex.from\\_documents(documents\\=documents)\nvector\\_index \\= VectorStoreIndex.from\\_documents(\n    documents, service\\_context\\=service\\_context\\_gpt4\n)\n\nWe then build an evaluator based on the `BaseEvaluator` class that requires an `evaluate` method.\n\nIn this example, we show you how to write a factual consistency check.\n\nfrom typing import Any, Optional, Sequence\nfrom llama\\_index.evaluation.base import BaseEvaluator, EvaluationResult\n\nclass FactualConsistencyEvaluator(BaseEvaluator):\n    def evaluate(\n        self,\n        query: Optional\\[str\\] \\= None,\n        contexts: Optional\\[Sequence\\[str\\]\\] \\= None,\n        response: Optional\\[str\\] \\= None,\n        \\*\\*kwargs: Any,\n    ) \\-> EvaluationResult:\n        \"\"\"Evaluate factual consistency metrics\"\"\"\n        if response is None or contexts is None:\n            raise ValueError('Please provide \"response\" and \"contexts\".')\n        metric \\= FactualConsistencyMetric()\n        context \\= \" \".join(\\[d for d in contexts\\])\n        score \\= metric.measure(output\\=response, context\\=context)\n        return EvaluationResult(\n            response\\=response,\n            contexts\\=contexts,\n            passing\\=metric.is\\_successful(),\n            score\\=score,\n        )\n\nevaluator \\= FactualConsistencyEvaluator()\n\nquery\\_engine \\= tree\\_index.as\\_query\\_engine()\nresponse \\= query\\_engine.query(\"How did Tokyo get its name?\")\neval\\_result \\= evaluator.evaluate\\_response(response\\=response)\n\n/usr/local/lib/python3.10/dist-packages/transformers/convert\\_slow\\_tokenizer.py:470: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n  warnings.warn(\n\n{'success': True, 'score': 0.97732705}\n\n/usr/local/lib/python3.10/dist-packages/deepeval/metrics/metric.py:42: UserWarning: API key is not set. Please set it by visiting https://app.confident-ai.com\n  warnings.warn(\n\n## Other Metrics[\uf0c1](#other-metrics \"Permalink to this heading\")\n\nWe recommend using other metrics to help give more confidence to various prompt iterations, LLM outputs etc. We think ML-assisted approaches are required to give performance for these models.\n\n*   Overall Score: https://docs.confident-ai.com/docs/measuring\\_llm\\_performance/overall\\_score\n    \n*   Answer Relevancy: https://docs.confident-ai.com/docs/measuring\\_llm\\_performance/answer\\_relevancy\n    \n*   Bias: https://docs.confident-ai.com/docs/measuring\\_llm\\_performance/debias"
}