{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/query_engine/CustomRetrievers.html",
        "title": "Retriever Query Engine with Custom Retrievers - Simple Hybrid Search - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\nIn this tutorial, we show you how to define a very simple version of hybrid search!\n\nCombine keyword lookup retrieval with vector retrieval using \u201cAND\u201d and \u201cOR\u201d conditions.\n\n## Setup[\uf0c1](#setup \"Permalink to this heading\")\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleKeywordTableIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    StorageContext,\n)\nfrom IPython.display import Markdown, display\n\nINFO:numexpr.utils:Note: NumExpr detected 16 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nNote: NumExpr detected 16 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nINFO:numexpr.utils:NumExpr defaulting to 8 threads.\nNumExpr defaulting to 8 threads.\n\n/home/loganm/miniconda3/envs/llama-index/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user\\_install.html\n  from .autonotebook import tqdm as notebook\\_tqdm\n\n## Load Data[\uf0c1](#load-data \"Permalink to this heading\")\n\nWe first show how to convert a Document into a set of Nodes, and insert into a DocumentStore.\n\n\\# load documents\ndocuments \\= SimpleDirectoryReader(\"../data/paul\\_graham\").load\\_data()\n\n\\# initialize service context (set chunk size)\nservice\\_context \\= ServiceContext.from\\_defaults(chunk\\_size\\=1024)\nnode\\_parser \\= service\\_context.node\\_parser\n\nnodes \\= node\\_parser.get\\_nodes\\_from\\_documents(documents)\n\n\\# initialize storage context (by default it's in-memory)\nstorage\\_context \\= StorageContext.from\\_defaults()\nstorage\\_context.docstore.add\\_documents(nodes)\n\n## Define Vector Index and Keyword Table Index over Same Data[\uf0c1](#define-vector-index-and-keyword-table-index-over-same-data \"Permalink to this heading\")\n\nWe build a vector index and keyword index over the same DocumentStore\n\nvector\\_index \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\nkeyword\\_index \\= SimpleKeywordTableIndex(nodes, storage\\_context\\=storage\\_context)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 17050 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 17050 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 0 tokens\n\n## Define Custom Retriever[\uf0c1](#define-custom-retriever \"Permalink to this heading\")\n\nWe now define a custom retriever class that can implement basic hybrid search with both keyword lookup and semantic search.\n\n*   setting \u201cAND\u201d means we take the intersection of the two retrieved sets\n    \n*   setting \u201cOR\u201d means we take the union\n    \n\n\\# import QueryBundle\nfrom llama\\_index import QueryBundle\n\n\\# import NodeWithScore\nfrom llama\\_index.schema import NodeWithScore\n\n\\# Retrievers\nfrom llama\\_index.retrievers import (\n    BaseRetriever,\n    VectorIndexRetriever,\n    KeywordTableSimpleRetriever,\n)\n\nfrom typing import List\n\nclass CustomRetriever(BaseRetriever):\n    \"\"\"Custom retriever that performs both semantic search and hybrid search.\"\"\"\n\n    def \\_\\_init\\_\\_(\n        self,\n        vector\\_retriever: VectorIndexRetriever,\n        keyword\\_retriever: KeywordTableSimpleRetriever,\n        mode: str \\= \"AND\",\n    ) \\-> None:\n        \"\"\"Init params.\"\"\"\n\n        self.\\_vector\\_retriever \\= vector\\_retriever\n        self.\\_keyword\\_retriever \\= keyword\\_retriever\n        if mode not in (\"AND\", \"OR\"):\n            raise ValueError(\"Invalid mode.\")\n        self.\\_mode \\= mode\n\n    def \\_retrieve(self, query\\_bundle: QueryBundle) \\-> List\\[NodeWithScore\\]:\n        \"\"\"Retrieve nodes given query.\"\"\"\n\n        vector\\_nodes \\= self.\\_vector\\_retriever.retrieve(query\\_bundle)\n        keyword\\_nodes \\= self.\\_keyword\\_retriever.retrieve(query\\_bundle)\n\n        vector\\_ids \\= {n.node.node\\_id for n in vector\\_nodes}\n        keyword\\_ids \\= {n.node.node\\_id for n in keyword\\_nodes}\n\n        combined\\_dict \\= {n.node.node\\_id: n for n in vector\\_nodes}\n        combined\\_dict.update({n.node.node\\_id: n for n in keyword\\_nodes})\n\n        if self.\\_mode \\== \"AND\":\n            retrieve\\_ids \\= vector\\_ids.intersection(keyword\\_ids)\n        else:\n            retrieve\\_ids \\= vector\\_ids.union(keyword\\_ids)\n\n        retrieve\\_nodes \\= \\[combined\\_dict\\[rid\\] for rid in retrieve\\_ids\\]\n        return retrieve\\_nodes\n\n## Plugin Retriever into Query Engine[\uf0c1](#plugin-retriever-into-query-engine \"Permalink to this heading\")\n\nPlugin retriever into a query engine, and run some queries\n\nfrom llama\\_index import get\\_response\\_synthesizer\nfrom llama\\_index.query\\_engine import RetrieverQueryEngine\n\n\\# define custom retriever\nvector\\_retriever \\= VectorIndexRetriever(index\\=vector\\_index, similarity\\_top\\_k\\=2)\nkeyword\\_retriever \\= KeywordTableSimpleRetriever(index\\=keyword\\_index)\ncustom\\_retriever \\= CustomRetriever(vector\\_retriever, keyword\\_retriever)\n\n\\# define response synthesizer\nresponse\\_synthesizer \\= get\\_response\\_synthesizer()\n\n\\# assemble query engine\ncustom\\_query\\_engine \\= RetrieverQueryEngine(\n    retriever\\=custom\\_retriever,\n    response\\_synthesizer\\=response\\_synthesizer,\n)\n\n\\# vector query engine\nvector\\_query\\_engine \\= RetrieverQueryEngine(\n    retriever\\=vector\\_retriever,\n    response\\_synthesizer\\=response\\_synthesizer,\n)\n\\# keyword query engine\nkeyword\\_query\\_engine \\= RetrieverQueryEngine(\n    retriever\\=keyword\\_retriever,\n    response\\_synthesizer\\=response\\_synthesizer,\n)\n\nresponse \\= custom\\_query\\_engine.query(\n    \"What did the author do during his time at YC?\"\n)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 12 tokens\n> \\[retrieve\\] Total embedding token usage: 12 tokens\nINFO:llama\\_index.indices.keyword\\_table.retrievers:> Starting query: What did the author do during his time at YC?\n> Starting query: What did the author do during his time at YC?\nINFO:llama\\_index.indices.keyword\\_table.retrievers:query keywords: \\['time', 'yc', 'author'\\]\nquery keywords: \\['time', 'yc', 'author'\\]\nINFO:llama\\_index.indices.keyword\\_table.retrievers:> Extracted keywords: \\['time', 'yc'\\]\n> Extracted keywords: \\['time', 'yc'\\]\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total LLM token usage: 1919 tokens\n> \\[get\\_response\\] Total LLM token usage: 1919 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total embedding token usage: 0 tokens\n> \\[get\\_response\\] Total embedding token usage: 0 tokens\n\nThe author worked on YC, wrote essays, worked on a new version of Arc, wrote Hacker News in Arc, wrote YC's internal software in Arc, and dealt with disputes between cofounders, figuring out when people were lying to them, and fighting with people who maltreated the startups.\n\n\\# hybrid search can allow us to not retrieve nodes that are irrelevant\n\\# Yale is never mentioned in the essay\nresponse \\= custom\\_query\\_engine.query(\n    \"What did the author do during his time at Yale?\"\n)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 11 tokens\n> \\[retrieve\\] Total embedding token usage: 11 tokens\nINFO:llama\\_index.indices.keyword\\_table.retrievers:> Starting query: What did the author do during his time at Yale?\n> Starting query: What did the author do during his time at Yale?\nINFO:llama\\_index.indices.keyword\\_table.retrievers:query keywords: \\['yale', 'time', 'author'\\]\nquery keywords: \\['yale', 'time', 'author'\\]\nINFO:llama\\_index.indices.keyword\\_table.retrievers:> Extracted keywords: \\['time'\\]\n> Extracted keywords: \\['time'\\]\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total LLM token usage: 0 tokens\n> \\[get\\_response\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total embedding token usage: 0 tokens\n> \\[get\\_response\\] Total embedding token usage: 0 tokens\n\nprint(str(response))\nlen(response.source\\_nodes)\n\n\\# in contrast, vector search will return an answer\nresponse \\= vector\\_query\\_engine.query(\n    \"What did the author do during his time at Yale?\"\n)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 11 tokens\n> \\[retrieve\\] Total embedding token usage: 11 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total LLM token usage: 1871 tokens\n> \\[get\\_response\\] Total LLM token usage: 1871 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total embedding token usage: 0 tokens\n> \\[get\\_response\\] Total embedding token usage: 0 tokens\n\nprint(str(response))\nlen(response.source\\_nodes)\n\nThe author did not attend Yale. The context information provided is about the author's work before and after college."
}