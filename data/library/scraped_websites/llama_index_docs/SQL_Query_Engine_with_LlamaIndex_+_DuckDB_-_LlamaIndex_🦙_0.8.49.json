{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/index_structs/struct_indices/duckdb_sql_query.html",
        "title": "SQL Query Engine with LlamaIndex + DuckDB - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "Toggle table of contents sidebar\n\nThis guide showcases the core LlamaIndex SQL capabilities with DuckDB.\n\nWe go through some core LlamaIndex data structures, including the `NLSQLTableQueryEngine` and `SQLTableRetrieverQueryEngine`.\n\n!pip install duckdb duckdb-engine\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\nfrom llama\\_index import (\n    SQLDatabase,\n    SimpleDirectoryReader,\n    WikipediaReader,\n    Document,\n)\nfrom llama\\_index.indices.struct\\_store import (\n    NLSQLTableQueryEngine,\n    SQLTableRetrieverQueryEngine,\n)\n\nfrom IPython.display import Markdown, display\n\n## Basic Text-to-SQL with our `NLSQLTableQueryEngine`[\uf0c1](#basic-text-to-sql-with-our-nlsqltablequeryengine \"Permalink to this heading\")\n\nIn this initial example, we walk through populating a SQL database with some test datapoints, and querying it with our text-to-SQL capabilities.\n\n### Create Database Schema + Test Data[\uf0c1](#create-database-schema-test-data \"Permalink to this heading\")\n\nWe use sqlalchemy, a popular SQL database toolkit, to connect to DuckDB and create an empty `city_stats` Table. We then populate it with some test data.\n\nfrom sqlalchemy import (\n    create\\_engine,\n    MetaData,\n    Table,\n    Column,\n    String,\n    Integer,\n    select,\n    column,\n)\n\nengine \\= create\\_engine(\"duckdb:///:memory:\")\n\\# uncomment to make this work with MotherDuck\n\\# engine = create\\_engine(\"duckdb:///md:llama-index\")\nmetadata\\_obj \\= MetaData()\n\n\\# create city SQL table\ntable\\_name \\= \"city\\_stats\"\ncity\\_stats\\_table \\= Table(\n    table\\_name,\n    metadata\\_obj,\n    Column(\"city\\_name\", String(16), primary\\_key\\=True),\n    Column(\"population\", Integer),\n    Column(\"country\", String(16), nullable\\=False),\n)\n\nmetadata\\_obj.create\\_all(engine)\n\n\\# print tables\nmetadata\\_obj.tables.keys()\n\ndict\\_keys(\\['city\\_stats'\\])\n\nWe introduce some test data into the `city_stats` table\n\nfrom sqlalchemy import insert\n\nrows \\= \\[\n    {\"city\\_name\": \"Toronto\", \"population\": 2930000, \"country\": \"Canada\"},\n    {\"city\\_name\": \"Tokyo\", \"population\": 13960000, \"country\": \"Japan\"},\n    {\n        \"city\\_name\": \"Chicago\",\n        \"population\": 2679000,\n        \"country\": \"United States\",\n    },\n    {\"city\\_name\": \"Seoul\", \"population\": 9776000, \"country\": \"South Korea\"},\n\\]\nfor row in rows:\n    stmt \\= insert(city\\_stats\\_table).values(\\*\\*row)\n    with engine.begin() as connection:\n        cursor \\= connection.execute(stmt)\n\nwith engine.connect() as connection:\n    cursor \\= connection.exec\\_driver\\_sql(\"SELECT \\* FROM city\\_stats\")\n    print(cursor.fetchall())\n\n\\[('Toronto', 2930000, 'Canada'), ('Tokyo', 13960000, 'Japan'), ('Chicago', 2679000, 'United States'), ('Seoul', 9776000, 'South Korea')\\]\n\n### Create SQLDatabase Object[\uf0c1](#create-sqldatabase-object \"Permalink to this heading\")\n\nWe first define our SQLDatabase abstraction (a light wrapper around SQLAlchemy).\n\nfrom llama\\_index import SQLDatabase\n\nsql\\_database \\= SQLDatabase(engine, include\\_tables\\=\\[\"city\\_stats\"\\])\n\n/Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages/duckdb\\_engine/\\_\\_init\\_\\_.py:162: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n### Query Index[\uf0c1](#query-index \"Permalink to this heading\")\n\nHere we demonstrate the capabilities of `NLSQLTableQueryEngine`, which performs text-to-SQL.\n\n1.  We construct a `NLSQLTableQueryEngine` and pass in our SQL database object.\n    \n2.  We run queries against the query engine.\n    \n\nquery\\_engine \\= NLSQLTableQueryEngine(sql\\_database)\n\nresponse \\= query\\_engine.query(\"Which city has the highest population?\")\n\nINFO:llama\\_index.indices.struct\\_store.sql\\_query:> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR), population (INTEGER), country (VARCHAR) and foreign keys: .\n> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR), population (INTEGER), country (VARCHAR) and foreign keys: .\n\n/Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages/langchain/sql\\_database.py:238: UserWarning: This method is deprecated - please use \\`get\\_usable\\_table\\_names\\`.\n  warnings.warn(\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total LLM token usage: 332 tokens\n> \\[query\\] Total LLM token usage: 332 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total embedding token usage: 0 tokens\n> \\[query\\] Total embedding token usage: 0 tokens\n\n' Tokyo has the highest population, with 13,960,000 people.'\n\n{'result': \\[('Tokyo', 13960000)\\],\n 'sql\\_query': 'SELECT city\\_name, population \\\\nFROM city\\_stats \\\\nORDER BY population DESC \\\\nLIMIT 1;'}\n\n## Advanced Text-to-SQL with our `SQLTableRetrieverQueryEngine`[\uf0c1](#advanced-text-to-sql-with-our-sqltableretrieverqueryengine \"Permalink to this heading\")\n\nIn this guide, we tackle the setting where you have a large number of tables in your database, and putting all the table schemas into the prompt may overflow the text-to-SQL prompt.\n\nWe first index the schemas with our `ObjectIndex`, and then use our `SQLTableRetrieverQueryEngine` abstraction on top.\n\nengine \\= create\\_engine(\"duckdb:///:memory:\")\n\\# uncomment to make this work with MotherDuck\n\\# engine = create\\_engine(\"duckdb:///md:llama-index\")\nmetadata\\_obj \\= MetaData()\n\n\\# create city SQL table\ntable\\_name \\= \"city\\_stats\"\ncity\\_stats\\_table \\= Table(\n    table\\_name,\n    metadata\\_obj,\n    Column(\"city\\_name\", String(16), primary\\_key\\=True),\n    Column(\"population\", Integer),\n    Column(\"country\", String(16), nullable\\=False),\n)\nall\\_table\\_names \\= \\[\"city\\_stats\"\\]\n\\# create a ton of dummy tables\nn \\= 100\nfor i in range(n):\n    tmp\\_table\\_name \\= f\"tmp\\_table\\_{i}\"\n    tmp\\_table \\= Table(\n        tmp\\_table\\_name,\n        metadata\\_obj,\n        Column(f\"tmp\\_field\\_{i}\\_1\", String(16), primary\\_key\\=True),\n        Column(f\"tmp\\_field\\_{i}\\_2\", Integer),\n        Column(f\"tmp\\_field\\_{i}\\_3\", String(16), nullable\\=False),\n    )\n    all\\_table\\_names.append(f\"tmp\\_table\\_{i}\")\n\nmetadata\\_obj.create\\_all(engine)\n\n\\# insert dummy data\nfrom sqlalchemy import insert\n\nrows \\= \\[\n    {\"city\\_name\": \"Toronto\", \"population\": 2930000, \"country\": \"Canada\"},\n    {\"city\\_name\": \"Tokyo\", \"population\": 13960000, \"country\": \"Japan\"},\n    {\n        \"city\\_name\": \"Chicago\",\n        \"population\": 2679000,\n        \"country\": \"United States\",\n    },\n    {\"city\\_name\": \"Seoul\", \"population\": 9776000, \"country\": \"South Korea\"},\n\\]\nfor row in rows:\n    stmt \\= insert(city\\_stats\\_table).values(\\*\\*row)\n    with engine.begin() as connection:\n        cursor \\= connection.execute(stmt)\n\nsql\\_database \\= SQLDatabase(engine, include\\_tables\\=\\[\"city\\_stats\"\\])\n\n### Construct Object Index[\uf0c1](#construct-object-index \"Permalink to this heading\")\n\nfrom llama\\_index.indices.struct\\_store import SQLTableRetrieverQueryEngine\nfrom llama\\_index.objects import (\n    SQLTableNodeMapping,\n    ObjectIndex,\n    SQLTableSchema,\n)\nfrom llama\\_index import VectorStoreIndex\n\ntable\\_node\\_mapping \\= SQLTableNodeMapping(sql\\_database)\n\ntable\\_schema\\_objs \\= \\[\\]\nfor table\\_name in all\\_table\\_names:\n    table\\_schema\\_objs.append(SQLTableSchema(table\\_name\\=table\\_name))\n\nobj\\_index \\= ObjectIndex.from\\_objects(\n    table\\_schema\\_objs,\n    table\\_node\\_mapping,\n    VectorStoreIndex,\n)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 6343 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 6343 tokens\n\n### Query Index with `SQLTableRetrieverQueryEngine`[\uf0c1](#query-index-with-sqltableretrieverqueryengine \"Permalink to this heading\")\n\nquery\\_engine \\= SQLTableRetrieverQueryEngine(\n    sql\\_database,\n    obj\\_index.as\\_retriever(similarity\\_top\\_k\\=1),\n)\n\nresponse \\= query\\_engine.query(\"Which city has the highest population?\")\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 7 tokens\n> \\[retrieve\\] Total embedding token usage: 7 tokens\nINFO:llama\\_index.indices.struct\\_store.sql\\_query:> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR), population (INTEGER), country (VARCHAR) and foreign keys: .\n> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR), population (INTEGER), country (VARCHAR) and foreign keys: .\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total LLM token usage: 337 tokens\n> \\[query\\] Total LLM token usage: 337 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total embedding token usage: 0 tokens\n> \\[query\\] Total embedding token usage: 0 tokens\n\nResponse(response=' The city with the highest population is Tokyo, with a population of 13,960,000.', source\\_nodes=\\[\\], metadata={'result': \\[('Tokyo', 13960000)\\], 'sql\\_query': 'SELECT city\\_name, population \\\\nFROM city\\_stats \\\\nORDER BY population DESC \\\\nLIMIT 1;'})"
}