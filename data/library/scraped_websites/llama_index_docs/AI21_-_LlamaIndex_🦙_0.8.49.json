{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/llm/ai21.html",
        "title": "AI21 - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "an American computer scientist, essayist, and venture capitalist. He is best known for his work on Lisp, programming language design, and entrepreneurship. Graham has written several books on these topics, including \"Hackers and Painters\" and \"On Lisp.\" He is also the co-founder of Y Combinator, a venture capital firm that invests in early-stage technology companies.\n\n\\---------------------------------------------------------------------------\nUnauthorized                              Traceback (most recent call last)\n/home/amit/Desktop/projects/lindex/llama\\_index/docs/examples/llm/ai21.ipynb Cell 14 line 9\n      <a href\\='vscode-notebook-cell:/home/amit/Desktop/projects/lindex/llama\\_index/docs/examples/llm/ai21.ipynb#X42sZmlsZQ%3D%3D?line=5'\\>6</a\\> resp \\= llm\\_good.complete(\"Paul Graham is \")\n      <a href\\='vscode-notebook-cell:/home/amit/Desktop/projects/lindex/llama\\_index/docs/examples/llm/ai21.ipynb#X42sZmlsZQ%3D%3D?line=6'\\>7</a\\> print(resp)\n\\----> <a href\\='vscode-notebook-cell:/home/amit/Desktop/projects/lindex/llama\\_index/docs/examples/llm/ai21.ipynb#X42sZmlsZQ%3D%3D?line=8'\\>9</a\\> resp \\= llm\\_bad.complete(\"Paul Graham is \")\n     <a href\\='vscode-notebook-cell:/home/amit/Desktop/projects/lindex/llama\\_index/docs/examples/llm/ai21.ipynb#X42sZmlsZQ%3D%3D?line=9'\\>10</a\\> print(resp)\n\nFile ~/Desktop/projects/lindex/llama\\_index/llama\\_index/llms/base.py:312, in llm\\_completion\\_callback.<locals>.wrap.<locals>.wrapped\\_llm\\_predict(\\_self, \\*args, \\*\\*kwargs)\n    302 with wrapper\\_logic(\\_self) as callback\\_manager:\n    303     event\\_id \\= callback\\_manager.on\\_event\\_start(\n    304         CBEventType.LLM,\n    305         payload\\={\n   (...)\n    309         },\n    310     )\n\\--> 312     f\\_return\\_val \\= f(\\_self, \\*args, \\*\\*kwargs)\n    313     if isinstance(f\\_return\\_val, Generator):\n    314         \\# intercept the generator and add a callback to the end\n    315         def wrapped\\_gen() \\-> CompletionResponseGen:\n\nFile ~/Desktop/projects/lindex/llama\\_index/llama\\_index/llms/ai21.py:104, in AI21.complete(self, prompt, \\*\\*kwargs)\n    100 import ai21\n    102 ai21.api\\_key \\= self.\\_api\\_key\n\\--> 104 response \\= ai21.Completion.execute(\\*\\*all\\_kwargs, prompt\\=prompt)\n    106 return CompletionResponse(\n    107     text\\=response\\[\"completions\"\\]\\[0\\]\\[\"data\"\\]\\[\"text\"\\], raw\\=response.\\_\\_dict\\_\\_\n    108 )\n\nFile ~/.cache/pypoetry/virtualenvs/llama-index-2x1vjWb5-py3.10/lib/python3.10/site-packages/ai21/modules/resources/nlp\\_task.py:22, in NLPTask.execute(cls, \\*\\*params)\n     20     return cls.\\_execute\\_sm(destination\\=destination, params\\=params)\n     21 if isinstance(destination, AI21Destination):\n\\---> 22     return cls.\\_execute\\_studio\\_api(params)\n     24 raise WrongInputTypeException(key\\=DESTINATION\\_KEY, expected\\_type\\=Destination, given\\_type\\=type(destination))\n\nFile ~/.cache/pypoetry/virtualenvs/llama-index-2x1vjWb5-py3.10/lib/python3.10/site-packages/ai21/modules/completion.py:69, in Completion.\\_execute\\_studio\\_api(cls, params)\n     65     url \\= f'{url}/{custom\\_model}'\n     67 url \\= f'{url}/{cls.MODULE\\_NAME}'\n\\---> 69 return execute\\_studio\\_request(task\\_url\\=url, params\\=params)\n\nFile ~/.cache/pypoetry/virtualenvs/llama-index-2x1vjWb5-py3.10/lib/python3.10/site-packages/ai21/modules/resources/execution\\_utils.py:11, in execute\\_studio\\_request(task\\_url, params, method)\n      9 def execute\\_studio\\_request(task\\_url: str, params, method: str \\= 'POST'):\n     10     client \\= AI21StudioClient(\\*\\*params)\n\\---> 11     return client.execute\\_http\\_request(method\\=method, url\\=task\\_url, params\\=params)\n\nFile ~/.cache/pypoetry/virtualenvs/llama-index-2x1vjWb5-py3.10/lib/python3.10/site-packages/ai21/ai21\\_studio\\_client.py:52, in AI21StudioClient.execute\\_http\\_request(self, method, url, params, files)\n     51 def execute\\_http\\_request(self, method: str, url: str, params: Optional\\[Dict\\] \\= None, files\\=None):\n\\---> 52     response \\= self.http\\_client.execute\\_http\\_request(method\\=method, url\\=url, params\\=params, files\\=files)\n     53     return convert\\_to\\_ai21\\_object(response)\n\nFile ~/.cache/pypoetry/virtualenvs/llama-index-2x1vjWb5-py3.10/lib/python3.10/site-packages/ai21/http\\_client.py:84, in HttpClient.execute\\_http\\_request(self, method, url, params, files, auth)\n     82 if response.status\\_code != 200:\n     83     log\\_error(f'Calling {method} {url} failed with a non-200 response code: {response.status\\_code}')\n\\---> 84     handle\\_non\\_success\\_response(response.status\\_code, response.text)\n     86 return response.json()\n\nFile ~/.cache/pypoetry/virtualenvs/llama-index-2x1vjWb5-py3.10/lib/python3.10/site-packages/ai21/http\\_client.py:23, in handle\\_non\\_success\\_response(status\\_code, response\\_text)\n     21     raise BadRequest(details\\=response\\_text)\n     22 if status\\_code \\== 401:\n\\---> 23     raise Unauthorized(details\\=response\\_text)\n     24 if status\\_code \\== 422:\n     25     raise UnprocessableEntity(details\\=response\\_text)\n\nUnauthorized: Failed with http status code: 401 (Unauthorized). Details: {\"detail\":\"Forbidden: Bad or missing API token.\"}"
}