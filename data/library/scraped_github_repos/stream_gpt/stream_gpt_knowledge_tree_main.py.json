{
    "metadata": {
        "type": "repo",
        "path": "stream_gpt/knowledge_tree/main.py"
    },
    "text": "'''\n    This is the primary file that an end user will stay in to interact with the knowledge tree.\n'''\nimport stream_gpt.knowledge_tree.tree.tree_class as knowledge_tree\nfrom stream_gpt.knowledge_tree.tree import construct_tree, chunk_text\n\ndef add_document_to_tree(tree: knowledge_tree.Global_Knowledge_Tree, text, text_name, prompt):\n    '''\n        This method breaks your text into chunks, and adds these chunks to \n        a hierarchal knowledge tree.\n\n        Args:\n        - tree      (string): Path to the JSON file that contains the tree\n        - text      (string): The actual text you want to be saved in the tree\n        - text_name (string): Unique name of the text you want to be saved in the tree\n        - prompt    (string): Describe how you want the text to be saved in the tree\n\n        Returns:\n        - Path in the knowledge tree to the document that was just added\n    '''\n    \n    # First we need to turn the text into its own knowledge tree, and then add it as a branch to the main tree\n    chunks = chunk_text.basic_chunk_text(text, chunk_char_size=6000) # Breaks the text into a list of chunks\n    subtree = construct_tree.Basic_Construct_Tree_From_Chunked_Document(chunks, text_name, prompt).tree # Creates a hierarchal knowledge tree representing the given text\n    return subtree\n    \ndef cleanup_and_reorganize_tree(tree):\n    '''\n        This method takes a knowledge tree and reorganizes it so that it is \n        more robust and token efficient. This method should be called periodically.\n        \n        Args:\n        - tree   (string): Path to the JSON file that contains the tree\n\n        Returns:\n        - None\n    '''\n    None\n\ndef get_context_from_tree(tree, messages):\n    '''\n        This method takes a knowledge tree and a list of messages and returns\n        relevant context and the original primary source that will best assist\n        the user and the AI.\n        \n        Args:\n        - tree      (string): Path to the JSON file that contains the tree\n        - messages  (list): List of messages from the user and the AI\n\n        Returns:\n        - context   (string): Context from the knowledge tree that best assists the user and the AI\n        - source    (string): Path in the knowledge tree to the document used in context\n    '''\n    None"
}