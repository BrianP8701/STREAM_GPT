{
    "metadata": {
        "type": "repo",
        "path": "src/threads/Tracker.py"
    },
    "text": "'''\n    Tracker is the main class that handles the entire tracking process.\n    It is responsible for starting all the threads.\n'''\nimport threading\nimport src.helpers.helper_functions as helpers\nimport src.helpers.gcode_functions as g\nimport src.variables.constants as c\nimport src.variables.global_vars as GV\nimport src.helpers.drawing_functions as d\nimport src.helpers.preprocessing as preprocessing\nimport src.helpers.inference as inference\nfrom src.YOLOv8.inference import Inference\nimport src.MobileNetv3.inference as Mobilenet\nimport cv2\nimport time\nimport queue\nimport gc\nfrom src.threads.VideoStream import VideoStream\nfrom src.threads.SignalStream import SignalStream\nfrom src.threads.ErrorCorrection import ErrorCorrection\nfrom src.threads.Initialization import Initialization\nfrom src.threads.Analytics import Analytics\nfrom src.threads.Output import Output\nfrom src.threads.MistakeDataCollection import MistakeDataCollection\nfrom src.threads.MeasureMetrics import MeasureMetrics\n\nclass Tracker:\n    def __init__(self, video_path, gcode_path, signals_path, json_path, display_video=False, display_fps=6, save_video=False, save_fps=6, save_path=None, resolution_percentage=40):\n        self.video_path = video_path\n        self.gcode_path = gcode_path\n        self.signals_path = signals_path\n        self.Initialization = Initialization(self.gcode_path)\n        self.Error_Correction = ErrorCorrection()\n        self.Video_Stream = VideoStream(self.video_path)\n        self.Signal_Stream = SignalStream(self.signals_path, self.Error_Correction)\n        self.Output = Output(display_video, display_fps, save_video, save_path, save_fps, resolution_percentage)\n        self.Mistake_Data_Collection = MistakeDataCollection()\n        self.Meausre_Metrics = MeasureMetrics(json_path, speed=True, ram=True)\n\n    def start(self):\n    \n        threading.Thread(target=self.Video_Stream.start, args=()).start()\n        threading.Thread(target=self.Signal_Stream.start, args=()).start()\n        threading.Thread(target=self.Initialization.start, args=()).start()\n        threading.Thread(target=self.Meausre_Metrics.start, args=()).start()\n        threading.Thread(target=self.Mistake_Data_Collection.data_stream, args=(), daemon=True).start()\n        Output.start(self.Output)"
}