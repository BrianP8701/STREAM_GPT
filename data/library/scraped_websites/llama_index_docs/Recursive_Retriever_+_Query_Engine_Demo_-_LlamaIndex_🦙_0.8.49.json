{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/query_engine/pdf_tables/recursive_retriever.html",
        "title": "Recursive Retriever + Query Engine Demo - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\nIn this demo, we walk through a use case of showcasing our \u201cRecursiveRetriever\u201d module over hierarchical data.\n\nThe concept of recursive retrieval is that we not only explore the directly most relevant nodes, but also explore node relationships to additional retrievers/query engines and execute them. For instance, a node may represent a concise summary of a structured table, and link to a SQL/Pandas query engine over that structured table. Then if the node is retrieved, we want to also query the underlying query engine for the answer.\n\nThis can be especially useful for documents with hierarchical relationships. In this example, we walk through a Wikipedia article about billionaires (in PDF form), which contains both text and a variety of embedded structured tables. We first create a Pandas query engine over each table, but also represent each table by an `IndexNode` (stores a link to the query engine); this Node is stored along with other Nodes in a vector store.\n\nDuring query-time, if an `IndexNode` is fetched, then the underlying query engine/retriever will be queried.\n\n**Notes about Setup**\n\nWe use `camelot` to extract text-based tables from PDFs.\n\nimport camelot\nfrom llama\\_index import Document, SummaryIndex\n\n\\# https://en.wikipedia.org/wiki/The\\_World%27s\\_Billionaires\nfrom llama\\_index import VectorStoreIndex, ServiceContext, LLMPredictor\nfrom llama\\_index.query\\_engine import PandasQueryEngine, RetrieverQueryEngine\nfrom llama\\_index.retrievers import RecursiveRetriever\nfrom llama\\_index.schema import IndexNode\nfrom llama\\_index.llms import OpenAI\n\nfrom llama\\_hub.file.pymu\\_pdf.base import PyMuPDFReader\nfrom pathlib import Path\nfrom typing import List\n\n## Load in Document (and Tables)[\uf0c1](#load-in-document-and-tables \"Permalink to this heading\")\n\nWe use our `PyMuPDFReader` to read in the main text of the document.\n\nWe also use `camelot` to extract some structured tables from the document\n\nfile\\_path \\= \"billionaires\\_page.pdf\"\n\n\\# initialize PDF reader\nreader \\= PyMuPDFReader()\n\ndocs \\= reader.load(file\\_path)\n\n\\# use camelot to parse tables\ndef get\\_tables(path: str, pages: List\\[int\\]):\n    table\\_dfs \\= \\[\\]\n    for page in pages:\n        table\\_list \\= camelot.read\\_pdf(path, pages\\=str(page))\n        table\\_df \\= table\\_list\\[0\\].df\n        table\\_df \\= (\n            table\\_df.rename(columns\\=table\\_df.iloc\\[0\\])\n            .drop(table\\_df.index\\[0\\])\n            .reset\\_index(drop\\=True)\n        )\n        table\\_dfs.append(table\\_df)\n    return table\\_dfs\n\ntable\\_dfs \\= get\\_tables(file\\_path, pages\\=\\[3, 25\\])\n\n\\# shows list of top billionaires in 2023\ntable\\_dfs\\[0\\]\n\n|     | No. | Name | Net worth\\\\n(USD) | Age | Nationality | Primary source(s) of wealth |\n| --- | --- | --- | --- | --- | --- | --- |\n| 0   | 1   | Bernard Arnault &\\\\nfamily | $211\u00a0billion | 74  | France | LVMH |\n| 1   | 2   | Elon Musk | $180\u00a0billion | 51  | United\\\\nStates | Tesla, SpaceX, X Corp. |\n| 2   | 3   | Jeff Bezos | $114\u00a0billion | 59  | United\\\\nStates | Amazon |\n| 3   | 4   | Larry Ellison | $107\u00a0billion | 78  | United\\\\nStates | Oracle Corporation |\n| 4   | 5   | Warren Buffett | $106\u00a0billion | 92  | United\\\\nStates | Berkshire Hathaway |\n| 5   | 6   | Bill Gates | $104\u00a0billion | 67  | United\\\\nStates | Microsoft |\n| 6   | 7   | Michael Bloomberg | $94.5\u00a0billion | 81  | United\\\\nStates | Bloomberg L.P. |\n| 7   | 8   | Carlos Slim & family | $93\u00a0billion | 83  | Mexico | Telmex, Am\u00e9rica M\u00f3vil, Grupo\\\\nCarso |\n| 8   | 9   | Mukesh Ambani | $83.4\u00a0billion | 65  | India | Reliance Industries |\n| 9   | 10  | Steve Ballmer | $80.7\u00a0billion | 67  | United\\\\nStates | Microsoft |\n\n\\# shows list of top billionaires\ntable\\_dfs\\[1\\]\n\n|     | Year | Number of billionaires | Group's combined net worth |\n| --- | --- | --- | --- |\n| 0   | 2023\\[2\\] | 2,640 | $12.2 trillion |\n| 1   | 2022\\[6\\] | 2,668 | $12.7 trillion |\n| 2   | 2021\\[11\\] | 2,755 | $13.1 trillion |\n| 3   | 2020 | 2,095 | $8.0 trillion |\n| 4   | 2019 | 2,153 | $8.7 trillion |\n| 5   | 2018 | 2,208 | $9.1 trillion |\n| 6   | 2017 | 2,043 | $7.7 trillion |\n| 7   | 2016 | 1,810 | $6.5 trillion |\n| 8   | 2015\\[18\\] | 1,826 | $7.1 trillion |\n| 9   | 2014\\[67\\] | 1,645 | $6.4 trillion |\n| 10  | 2013\\[68\\] | 1,426 | $5.4 trillion |\n| 11  | 2012 | 1,226 | $4.6 trillion |\n| 12  | 2011 | 1,210 | $4.5 trillion |\n| 13  | 2010 | 1,011 | $3.6 trillion |\n| 14  | 2009 | 793 | $2.4 trillion |\n| 15  | 2008 | 1,125 | $4.4 trillion |\n| 16  | 2007 | 946 | $3.5 trillion |\n| 17  | 2006 | 793 | $2.6 trillion |\n| 18  | 2005 | 691 | $2.2 trillion |\n| 19  | 2004 | 587 | $1.9 trillion |\n| 20  | 2003 | 476 | $1.4 trillion |\n| 21  | 2002 | 497 | $1.5 trillion |\n| 22  | 2001 | 538 | $1.8 trillion |\n| 23  | 2000 | 470 | $898 billion |\n| 24  | Sources: Forbes.\\[18\\]\\[67\\]\\[66\\]\\[68\\] |     |     |\n\n## Create Pandas Query Engines[\uf0c1](#create-pandas-query-engines \"Permalink to this heading\")\n\nWe create a pandas query engine over each structured table.\n\nThese can be executed on their own to answer queries about each table.\n\n\\# define query engines over these tables\nllm \\= OpenAI(model\\=\"gpt-4\")\n\nservice\\_context \\= ServiceContext.from\\_defaults(llm\\=llm)\ndf\\_query\\_engines \\= \\[\n    PandasQueryEngine(table\\_df, service\\_context\\=service\\_context)\n    for table\\_df in table\\_dfs\n\\]\n\nresponse \\= df\\_query\\_engines\\[0\\].query(\n    \"What's the net worth of the second richest billionaire in 2023?\"\n)\nprint(str(response))\n\nresponse \\= df\\_query\\_engines\\[1\\].query(\n    \"How many billionaires were there in 2009?\"\n)\nprint(str(response))\n\n## Build Vector Index[\uf0c1](#build-vector-index \"Permalink to this heading\")\n\nBuild vector index over the chunked document as well as over the additional `IndexNode` objects linked to the tables.\n\nllm \\= OpenAI(temperature\\=0, model\\=\"gpt-4\")\n\nservice\\_context \\= ServiceContext.from\\_defaults(\n    llm\\=llm,\n)\n\ndoc\\_nodes \\= service\\_context.node\\_parser.get\\_nodes\\_from\\_documents(docs)\n\n\\# define index nodes\nsummaries \\= \\[\n    (\n        \"This node provides information about the world's richest billionaires\"\n        \" in 2023\"\n    ),\n    (\n        \"This node provides information on the number of billionaires and\"\n        \" their combined net worth from 2000 to 2023.\"\n    ),\n\\]\n\ndf\\_nodes \\= \\[\n    IndexNode(text\\=summary, index\\_id\\=f\"pandas{idx}\")\n    for idx, summary in enumerate(summaries)\n\\]\n\ndf\\_id\\_query\\_engine\\_mapping \\= {\n    f\"pandas{idx}\": df\\_query\\_engine\n    for idx, df\\_query\\_engine in enumerate(df\\_query\\_engines)\n}\n\n\\# construct top-level vector index + query engine\nvector\\_index \\= VectorStoreIndex(doc\\_nodes + df\\_nodes)\nvector\\_retriever \\= vector\\_index.as\\_retriever(similarity\\_top\\_k\\=1)\n\n## Use `RecursiveRetriever` in our `RetrieverQueryEngine`[\uf0c1](#use-recursiveretriever-in-our-retrieverqueryengine \"Permalink to this heading\")\n\nWe define a `RecursiveRetriever` object to recursively retrieve/query nodes. We then put this in our `RetrieverQueryEngine` along with a `ResponseSynthesizer` to synthesize a response.\n\nWe pass in mappings from id to retriever and id to query engine. We then pass in a root id representing the retriever we query first.\n\n\\# baseline vector index (that doesn't include the extra df nodes).\n\\# used to benchmark\nvector\\_index0 \\= VectorStoreIndex(doc\\_nodes)\nvector\\_query\\_engine0 \\= vector\\_index0.as\\_query\\_engine()\n\nfrom llama\\_index.retrievers import RecursiveRetriever\nfrom llama\\_index.query\\_engine import RetrieverQueryEngine\nfrom llama\\_index.response\\_synthesizers import get\\_response\\_synthesizer\n\nrecursive\\_retriever \\= RecursiveRetriever(\n    \"vector\",\n    retriever\\_dict\\={\"vector\": vector\\_retriever},\n    query\\_engine\\_dict\\=df\\_id\\_query\\_engine\\_mapping,\n    verbose\\=True,\n)\n\nresponse\\_synthesizer \\= get\\_response\\_synthesizer(\n    \\# service\\_context=service\\_context,\n    response\\_mode\\=\"compact\"\n)\n\nquery\\_engine \\= RetrieverQueryEngine.from\\_args(\n    recursive\\_retriever, response\\_synthesizer\\=response\\_synthesizer\n)\n\nresponse \\= query\\_engine.query(\n    \"What's the net worth of the second richest billionaire in 2023?\"\n)\n\nRetrieving with query id None: What's the net worth of the second richest billionaire in 2023?\nRetrieved node with id, entering: pandas0\nRetrieving with query id pandas0: What's the net worth of the second richest billionaire in 2023?\nGot response: $180\u00a0billion\n\nresponse.source\\_nodes\\[0\\].node.get\\_content()\n\n\"Query: What's the net worth of the second richest billionaire in 2023?\\\\nResponse: $180\\\\xa0billion\"\n\nresponse \\= query\\_engine.query(\"How many billionaires were there in 2009?\")\n\nRetrieving with query id None: How many billionaires were there in 2009?\nRetrieved node with id, entering: pandas1\nRetrieving with query id pandas1: How many billionaires were there in 2009?\nGot response: 793\n\nresponse \\= vector\\_query\\_engine0.query(\n    \"How many billionaires were there in 2009?\"\n)\n\nprint(response.source\\_nodes\\[0\\].node.get\\_content())\n\nBased on the context information, it is not possible to determine the exact number of billionaires in 2009. The provided information only mentions the number of billionaires in 2013 and 2014.\n\nresponse.source\\_nodes\\[0\\].node.get\\_content()\n\nresponse \\= query\\_engine.query(\n    \"Which billionaires are excluded from this list?\"\n)\n\nRoyal families and dictators whose wealth is contingent on a position are excluded from this list."
}