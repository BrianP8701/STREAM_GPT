{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/data_connectors/WeaviateDemo.html",
        "title": "Weaviate Reader - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## Weaviate Reader[\uf0c1](#weaviate-reader \"Permalink to this heading\")\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\nimport weaviate\nfrom llama\\_index.readers.weaviate import WeaviateReader\n\n\\# See https://weaviate.io/developers/weaviate/current/client-libraries/python.html\n\\# for more details on authentication\nresource\\_owner\\_config \\= weaviate.AuthClientPassword(\n    username\\=\"<username>\",\n    password\\=\"<password>\",\n)\n\n\\# initialize reader\nreader \\= WeaviateReader(\n    \"https://<cluster-id>.semi.network/\",\n    auth\\_client\\_secret\\=resource\\_owner\\_config,\n)\n\nYou have two options for the Weaviate reader: 1) directly specify the class\\_name and properties, or 2) input the raw graphql\\_query. Examples are shown below.\n\n\\# 1) load data using class\\_name and properties\n\\# docs = reader.load\\_data(\n\\#    class\\_name=\"Author\", properties=\\[\"name\", \"description\"\\], separate\\_documents=True\n\\# )\n\ndocuments \\= reader.load\\_data(\n    class\\_name\\=\"<class\\_name>\",\n    properties\\=\\[\"property1\", \"property2\", \"...\"\\],\n    separate\\_documents\\=True,\n)\n\n\\# 2) example GraphQL query\n\\# query = \"\"\"\n\\# {\n\\#   Get {\n\\#     Author {\n\\#       name\n\\#       description\n\\#     }\n\\#   }\n\\# }\n\\# \"\"\"\n\\# docs = reader.load\\_data(graphql\\_query=query, separate\\_documents=True)\n\nquery \\= \"\"\"\n{\n  Get {\n    <class\\_name> {\n      <property1>\n      <property2>\n      ...\n    }\n  }\n}\n\"\"\"\n\ndocuments \\= reader.load\\_data(graphql\\_query\\=query, separate\\_documents\\=True)\n\n## Create index[\uf0c1](#create-index \"Permalink to this heading\")\n\nindex \\= SummaryIndex.from\\_documents(documents)\n\n\\# set Logging to DEBUG for more detailed outputs\nquery\\_engine \\= index.as\\_query\\_engine()\nresponse \\= query\\_engine.query(\"<query\\_text>\")\n\ndisplay(Markdown(f\"<b>{response}</b>\"))"
}