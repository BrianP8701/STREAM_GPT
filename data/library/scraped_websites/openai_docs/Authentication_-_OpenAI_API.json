{
    "metadata": {
        "type": "web",
        "url": "https://platform.openai.com/docs/plugins/authentication/user-level",
        "title": "Authentication - OpenAI API",
        "description": "Explore resources, tutorials, API docs, and dynamic examples to get the most out of OpenAI's developer platform."
    },
    "text": "[](https://platform.openai.com/docs/plugins/authentication/plugin-authentication)\n\n## [Plugin authentication](https://platform.openai.com/docs/plugins/authentication/plugin-authentication)\n\nPlugins offer numerous authentication schemas to accommodate various use cases. To specify the authentication schema for your plugin, use the manifest file. Our [plugin domain policy](https://platform.openai.com/docs/plugins/production/domain-verification-and-security) outlines our strategy for addressing domain security issues. For examples of available authentication options, refer to the [examples section](https://platform.openai.com/docs/plugins/examples), which showcases all the different choices.\n\nThe `ai-plugin.json` file requires an `auth` schema to be set. Even if you elect to use no authentication, it is still required to specify `\"auth\": { \"type\": \"none\" }`.\n\nWe support only localhost development without authentication; if you want to use service, user, or OAuth authentication, you need to set up a remote server.\n\n[](https://platform.openai.com/docs/plugins/authentication/service-level)\n\n## [Service level](https://platform.openai.com/docs/plugins/authentication/service-level)\n\nWe suggest service level auth as it gives developers control over how their plugin is being used but also doesn't introduce overhead for users.\n\nIf you want to specifically enable OpenAI plugins to work with your API, you can provide a client secret during the plugin installation flow. This means that all traffic from OpenAI plugins will be authenticated but not on a user level. This flow benefits from a simple end user experience but less control from an API perspective.\n\n*   To start, select \"Develop your own plugin\" in the ChatGPT plugin store, and enter the domain where your plugin is hosted.\n*   In `ai-plugin.json`, set `auth.type` to `\"service_http\"` as is shown in our [service level auth example](https://platform.openai.com/docs/plugins/examples/example-plugins).\n*   You will be prompted for your service access token, which is a string specified in your code.\n    *   We securely store an encrypted copy of your service access token to enable plugin installation without additional authentication.\n    *   The service access token is sent in the `Authorization` header for plugin requests.\n*   Once you add your service access token into the ChatGPT UI, you will be presented with a verification token.\n*   Add the verification token to your `ai-plugin.json` file under the auth section as shown below.\n\n```\n1\n2\n3\n4\n5\n6\n7\n\"auth\": {\n  \"type\": \"service_http\",\n  \"authorization_type\": \"bearer\",\n  \"verification_tokens\": {\n    \"openai\": \"Replace_this_string_with_the_verification_token_generated_in_the_ChatGPT_UI\"\n  }\n},\n```\n\nThe verification tokens are designed to support multiple applications. You can simply add the additional applications you want your plugin to support:\n\n```\n1\n2\n3\n4\n\"verification_tokens\": {\n    \"openai\": \"Replace_this_string_with_the_verification_token_generated_in_the_ChatGPT_UI\",\n    \"other_service\": \"abc123\"\n  }\n```\n\n[](https://platform.openai.com/docs/plugins/authentication/oauth)\n\n## [OAuth](https://platform.openai.com/docs/plugins/authentication/oauth)\n\nThe plugin protocol is compatible with OAuth. A simple example of the OAuth flow we are expecting should look something like the following:\n\n*   To start, select \"Develop your own plugin\" in the ChatGPT plugin store, and enter the domain where your plugin is hosted (cannot be localhost).\n*   In `ai-plugin.json`, set `auth.type` to `\"oauth\"` as is shown in our [OAuth example](https://platform.openai.com/docs/plugins/examples/example-plugins).\n*   Then, you will be prompted to enter the OAuth client ID and client secret.\n    *   The client ID and secret can be simple text strings but should [follow OAuth best practices](https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/).\n    *   We store an encrypted version of the client secret, while the client ID is available to end users.\n*   Once you add your client ID and client secret into the ChatGPT UI, you will be presented with a verification token.\n*   Add the verification token to your `ai-plugin.json` file under the auth section as shown below.\n*   OAuth requests will include the following information: `request={'grant_type': 'authorization_code', 'client_id': 'id_set_by_developer', 'client_secret': 'secret_set_by_developer', 'code': 'abc123', 'redirect_uri': 'https://chat.openai.com/aip/plugin-some_plugin_id/oauth/callback'}`\n*   In order for someone to use a plugin with OAuth, they will need to install the plugin and then be presented with a \"Sign in with\" button in the ChatGPT UI.\n*   The `authorization_url` endpoint should return a response that looks like: `{ \"access_token\": \"example_token\", \"token_type\": \"bearer\", \"refresh_token\": \"example_token\", \"expires_in\": 59 }`\n*   During the user sign in process, ChatGPT makes a request to your `authorization_url` using the specified `authorization_content_type`, we expect to get back an access token and optionally a [refresh token](https://auth0.com/learn/refresh-tokens) which we use to periodically fetch a new access token.\n*   Each time a user makes a request to the plugin, the user\u2019s token will be passed in the Authorization header: (\u201cAuthorization\u201d: \u201c\\[Bearer/Basic\\]\\[user\u2019s token\\]\u201d).\n\nWe require that OAuth applications make use of the [state parameter](https://auth0.com/docs/secure/attack-protection/state-parameters#set-and-compare-state-parameter-values) for security reasons.\n\nBelow is an example of what the OAuth configuration inside of the `ai-plugin.json` file might look like:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"auth\": {\n  \"type\": \"oauth\",\n  \"client_url\": \"https://example.com/authorize\",\n  \"scope\": \"\",\n  \"authorization_url\": \"https://example.com/auth/\",\n  \"authorization_content_type\": \"application/json\",\n  \"verification_tokens\": {\n    \"openai\": \"Replace_this_string_with_the_verification_token_generated_in_the_ChatGPT_UI\"\n  }\n},\n```\n\nTo better understand the URL structure for OAuth, here is a short description of the fields:\n\n*   When you set up your plugin with ChatGPT, you will be asked to provide your OAuth `client_id` and `client_secret`.\n*   When a user logs into the plugin, ChatGPT will direct the user\u2019s browser to `\"[client_url]?response_type=code&client_id=[client_id]&scope=[scope]&state=xyz123&redirect_uri=https%3A%2F%2Fchat.openai.com%2Faip%2F[plugin_id]%2Foauth%2Fcallback\"`\n*   The `plugin_id` is passed via the request made to your OAuth endpoint (note that it is not visible in the ChatGPT UI today but may be in the future). You can inspect the request there to see the `plugin_id`. We expect the `state` to be passed along when you redirect back to `redirect_uri`. If the `state` doesn't match the initial `state`, or has expired, the authentication flow will fail.\n*   After your plugin redirects back to the given `redirect_uri`, ChatGPT will complete the OAuth flow by making a POST request to the `authorization_url` with content type `authorization_content_type` and parameters `{ \u201cgrant_type\u201d: \u201cauthorization_code\u201d, \u201cclient_id\u201d: [client_id], \u201cclient_secret\u201d: [client_secret], \u201ccode\u201d: [the code that was returned with the redirect], \u201credirect_uri\u201d: [the same redirect uri as before] }`.\n\n[](https://platform.openai.com/docs/plugins/authentication/no-authentication)\n\n## [No authentication](https://platform.openai.com/docs/plugins/authentication/no-authentication)\n\nWe do not recommend the use of \"no authentication\", consider using \"service authentication\".\n\nWe support no-auth flow for applications that do not require authentication, where a user is able to send requests directly to your API without any restrictions. This is particularly useful if you have an open API that you want to make available to everyone, as it allows traffic from sources other than just OpenAI plugin requests.\n\n```\n1\n2\n3\n\"auth\": {\n  \"type\": \"none\"\n},\n```\n\n[](https://platform.openai.com/docs/plugins/authentication/user-level)\n\n## [User level](https://platform.openai.com/docs/plugins/authentication/user-level)\n\nDue to current UI limitations, we are not allowing plugins with \"user authentication\" into the plugin store. We expect this may change in the future.\n\nJust like how a user might already be using your API, we allow user level authentication through enabling end users to copy and paste their secret API key into the ChatGPT UI during plugin install. While we encrypt the secret key when we store it in our database, we do not recommend this approach given the poor user experience.\n\n*   To start, a user pastes in their access token when installing the plugin\n*   We store an encrypted version of the token\n*   We then pass it in the Authorization header when making requests to the plugin (\u201cAuthorization\u201d: \u201c\\[Bearer/Basic\\]\\[user\u2019s token\\]\u201d)\n\n```\n1\n2\n3\n4\n\"auth\": {\n  \"type\": \"user_http\",\n  \"authorization_type\": \"bearer\",\n},\n```"
}