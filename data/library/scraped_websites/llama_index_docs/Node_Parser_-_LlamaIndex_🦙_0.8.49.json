{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/api_reference/service_context/node_parser.html",
        "title": "Node Parser - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "{\n   \"title\": \"HierarchicalNodeParser\",\n   \"description\": \"Hierarchical node parser.\\\\n\\\\nSplits a document into a recursive hierarchy Nodes using a TextSplitter.\\\\n\\\\nNOTE: this will return a hierarchy of nodes in a flat list, where there will be\\\\noverlap between parent nodes (e.g. with a bigger chunk size), and child nodes\\\\nper parent (e.g. with a smaller chunk size).\\\\n\\\\nFor instance, this may return a list of nodes like:\\\\n- list of top-level nodes with chunk size 2048\\\\n- list of second-level nodes, where each node is a child of a top-level node,\\\\n    chunk size 512\\\\n- list of third-level nodes, where each node is a child of a second-level node,\\\\n    chunk size 128\\\\n\\\\nArgs:\\\\n    text\\_splitter (Optional\\[TextSplitter\\]): text splitter\\\\n    include\\_metadata (bool): whether to include metadata in nodes\\\\n    include\\_prev\\_next\\_rel (bool): whether to include prev/next relationships\",\n   \"type\": \"object\",\n   \"properties\": {\n      \"chunk\\_sizes\": {\n         \"title\": \"Chunk Sizes\",\n         \"description\": \"The chunk sizes to use when splitting documents, in order of level.\",\n         \"type\": \"array\",\n         \"items\": {\n            \"type\": \"integer\"\n         }\n      },\n      \"text\\_splitter\\_ids\": {\n         \"title\": \"Text Splitter Ids\",\n         \"description\": \"List of ids for the text splitters to use when splitting documents, in order of level (first id used for first level, etc.).\",\n         \"type\": \"array\",\n         \"items\": {\n            \"type\": \"string\"\n         }\n      },\n      \"text\\_splitter\\_map\": {\n         \"title\": \"Text Splitter Map\",\n         \"description\": \"Map of text splitter id to text splitter.\",\n         \"type\": \"object\",\n         \"additionalProperties\": {\n            \"$ref\": \"#/definitions/TextSplitter\"\n         }\n      },\n      \"include\\_metadata\": {\n         \"title\": \"Include Metadata\",\n         \"description\": \"Whether or not to consider metadata when splitting.\",\n         \"default\": true,\n         \"type\": \"boolean\"\n      },\n      \"include\\_prev\\_next\\_rel\": {\n         \"title\": \"Include Prev Next Rel\",\n         \"description\": \"Include prev/next node relationships.\",\n         \"default\": true,\n         \"type\": \"boolean\"\n      },\n      \"metadata\\_extractor\": {\n         \"title\": \"Metadata Extractor\",\n         \"description\": \"Metadata extraction pipeline to apply to nodes.\",\n         \"allOf\": \\[\n            {\n               \"$ref\": \"#/definitions/MetadataExtractor\"\n            }\n         \\]\n      },\n      \"callback\\_manager\": {\n         \"title\": \"Callback Manager\"\n      }\n   },\n   \"required\": \\[\n      \"text\\_splitter\\_map\"\n   \\],\n   \"definitions\": {\n      \"TextSplitter\": {\n         \"title\": \"TextSplitter\",\n         \"description\": \"Helper class that provides a standard way to create an ABC using\\\\ninheritance.\",\n         \"type\": \"object\",\n         \"properties\": {}\n      },\n      \"MetadataMode\": {\n         \"title\": \"MetadataMode\",\n         \"description\": \"An enumeration.\",\n         \"enum\": \\[\n            \"1\",\n            \"2\",\n            \"3\",\n            \"4\"\n         \\],\n         \"type\": \"string\"\n      },\n      \"MetadataFeatureExtractor\": {\n         \"title\": \"MetadataFeatureExtractor\",\n         \"description\": \"Base interface for feature extractor.\",\n         \"type\": \"object\",\n         \"properties\": {\n            \"is\\_text\\_node\\_only\": {\n               \"title\": \"Is Text Node Only\",\n               \"default\": true,\n               \"type\": \"boolean\"\n            },\n            \"show\\_progress\": {\n               \"title\": \"Show Progress\",\n               \"default\": true,\n               \"type\": \"boolean\"\n            },\n            \"metadata\\_mode\": {\n               \"default\": \"1\",\n               \"allOf\": \\[\n                  {\n                     \"$ref\": \"#/definitions/MetadataMode\"\n                  }\n               \\]\n            }\n         }\n      },\n      \"MetadataExtractor\": {\n         \"title\": \"MetadataExtractor\",\n         \"description\": \"Metadata extractor.\",\n         \"type\": \"object\",\n         \"properties\": {\n            \"extractors\": {\n               \"title\": \"Extractors\",\n               \"description\": \"Metadta feature extractors to apply to each node.\",\n               \"type\": \"array\",\n               \"items\": {\n                  \"$ref\": \"#/definitions/MetadataFeatureExtractor\"\n               }\n            },\n            \"node\\_text\\_template\": {\n               \"title\": \"Node Text Template\",\n               \"description\": \"Template to represent how node text is mixed with metadata text.\",\n               \"default\": \"\\[Excerpt from document\\]\\\\n{metadata\\_str}\\\\nExcerpt:\\\\n-----\\\\n{content}\\\\n-----\\\\n\",\n               \"type\": \"string\"\n            },\n            \"disable\\_template\\_rewrite\": {\n               \"title\": \"Disable Template Rewrite\",\n               \"description\": \"Disable the node template rewrite.\",\n               \"default\": false,\n               \"type\": \"boolean\"\n            },\n            \"in\\_place\": {\n               \"title\": \"In Place\",\n               \"description\": \"Whether to process nodes in place.\",\n               \"default\": true,\n               \"type\": \"boolean\"\n            }\n         }\n      }\n   }\n}"
}