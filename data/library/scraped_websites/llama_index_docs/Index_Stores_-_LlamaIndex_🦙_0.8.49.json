{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/core_modules/data_modules/storage/index_stores.html",
        "title": "Index Stores - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## Index Stores[\uf0c1](#index-stores \"Permalink to this heading\")\n\nIndex stores contains lightweight index metadata (i.e. additional state information created when building an index).\n\nSee the [API Reference](https://docs.llamaindex.ai/en/stable/api_reference/storage/index_store.html) for more details.\n\n## Simple Index Store[\uf0c1](#simple-index-store \"Permalink to this heading\")\n\nBy default, LlamaIndex uses a simple index store backed by an in-memory key-value store. They can be persisted to (and loaded from) disk by calling `index_store.persist()` (and `SimpleIndexStore.from_persist_path(...)` respectively).\n\n## MongoDB Index Store[\uf0c1](#mongodb-index-store \"Permalink to this heading\")\n\nSimilarly to document stores, we can also use `MongoDB` as the storage backend of the index store.\n\nfrom llama\\_index.storage.index\\_store import MongoIndexStore\nfrom llama\\_index import VectorStoreIndex\n\n\\# create (or load) index store\nindex\\_store \\= MongoIndexStore.from\\_uri(uri\\=\"<mongodb+srv://...>\")\n\n\\# create storage context\nstorage\\_context \\= StorageContext.from\\_defaults(index\\_store\\=index\\_store)\n\n\\# build index\nindex \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\n\n\\# or alternatively, load index\nfrom llama\\_index import load\\_index\\_from\\_storage\nindex \\= load\\_index\\_from\\_storage(storage\\_context)\n\nUnder the hood, `MongoIndexStore` connects to a fixed MongoDB database and initializes new collections (or loads existing collections) for your index metadata.\n\n> Note: You can configure the `db_name` and `namespace` when instantiating `MongoIndexStore`, otherwise they default to `db_name=\"db_docstore\"` and `namespace=\"docstore\"`.\n\nNote that it\u2019s not necessary to call `storage_context.persist()` (or `index_store.persist()`) when using an `MongoIndexStore` since data is persisted by default.\n\nYou can easily reconnect to your MongoDB collection and reload the index by re-initializing a `MongoIndexStore` with an existing `db_name` and `collection_name`.\n\nA more complete example can be found here\n\n## Redis Index Store[\uf0c1](#redis-index-store \"Permalink to this heading\")\n\nWe support Redis as an alternative document store backend that persists data as `Node` objects are ingested.\n\nfrom llama\\_index.storage.index\\_store import RedisIndexStore\nfrom llama\\_index import VectorStoreIndex\n\n\\# create (or load) docstore and add nodes\nindex\\_store \\= RedisIndexStore.from\\_host\\_and\\_port(\n  host\\=\"127.0.0.1\",\n  port\\=\"6379\",\n  namespace\\='llama\\_index'\n)\n\n\\# create storage context\nstorage\\_context \\= StorageContext.from\\_defaults(index\\_store\\=index\\_store)\n\n\\# build index\nindex \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\n\n\\# or alternatively, load index\nfrom llama\\_index import load\\_index\\_from\\_storage\nindex \\= load\\_index\\_from\\_storage(storage\\_context)\n\nUnder the hood, `RedisIndexStore` connects to a redis database and adds your nodes to a namespace stored under `{namespace}/index`.\n\n> Note: You can configure the `namespace` when instantiating `RedisIndexStore`, otherwise it defaults `namespace=\"index_store\"`.\n\nYou can easily reconnect to your Redis client and reload the index by re-initializing a `RedisIndexStore` with an existing `host`, `port`, and `namespace`.\n\nA more complete example can be found here"
}