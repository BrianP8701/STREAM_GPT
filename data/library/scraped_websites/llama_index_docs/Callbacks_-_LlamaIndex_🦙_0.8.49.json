{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/api_reference/callbacks.html",
        "title": "Callbacks - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "Toggle table of contents sidebar\n\n## Callbacks[\uf0c1](#module-llama_index.callbacks \"Permalink to this heading\")\n\n_class_ llama\\_index.callbacks.AimCallback(_repo: Optional\\[str\\] \\= None_, _experiment\\_name: Optional\\[str\\] \\= None_, _system\\_tracking\\_interval: Optional\\[int\\] \\= 1_, _log\\_system\\_params: Optional\\[bool\\] \\= True_, _capture\\_terminal\\_logs: Optional\\[bool\\] \\= True_, _event\\_starts\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _event\\_ends\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _run\\_params: Optional\\[Dict\\[str, Any\\]\\] \\= None_)[\uf0c1](#llama_index.callbacks.AimCallback \"Permalink to this definition\")\n\nAimCallback callback class.\n\nParameters\n\n*   **repo** (`str`, optional) \u2013 Aim repository path or Repo object to which Run object is bound. If skipped, default Repo is used.\n    \n*   **experiment\\_name** (`str`, optional) \u2013 Sets Run\u2019s experiment property. \u2018default\u2019 if not specified. Can be used later to query runs/sequences.\n    \n*   **system\\_tracking\\_interval** (`int`, optional) \u2013 Sets the tracking interval in seconds for system usage metrics (CPU, Memory, etc.). Set to None to disable system metrics tracking.\n    \n*   **log\\_system\\_params** (`bool`, optional) \u2013 Enable/Disable logging of system params such as installed packages, git info, environment variables, etc.\n    \n*   **capture\\_terminal\\_logs** (`bool`, optional) \u2013 Enable/Disable terminal stdout logging.\n    \n*   **event\\_starts\\_to\\_ignore** (_Optional__\\[__List__\\[_[_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")_\\]__\\]_) \u2013 list of event types to ignore when tracking event starts.\n    \n*   **event\\_ends\\_to\\_ignore** (_Optional__\\[__List__\\[_[_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")_\\]__\\]_) \u2013 list of event types to ignore when tracking event ends.\n    \n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.AimCallback.end_trace \"Permalink to this definition\")\n\nRun when an overall trace is exited.\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.AimCallback.on_event_end \"Permalink to this definition\")\n\nParameters\n\n*   **event\\_type** ([_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")) \u2013 event type to store.\n    \n*   **payload** (_Optional__\\[__Dict__\\[__str__,_ _Any__\\]__\\]_) \u2013 payload to store.\n    \n*   **event\\_id** (_str_) \u2013 event id to store.\n    \n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _parent\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.AimCallback.on_event_start \"Permalink to this definition\")\n\nParameters\n\n*   **event\\_type** ([_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")) \u2013 event type to store.\n    \n*   **payload** (_Optional__\\[__Dict__\\[__str__,_ _Any__\\]__\\]_) \u2013 payload to store.\n    \n*   **event\\_id** (_str_) \u2013 event id to store.\n    \n*   **parent\\_id** (_str_) \u2013 parent event id.\n    \n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.AimCallback.start_trace \"Permalink to this definition\")\n\nRun when an overall trace is launched.\n\n_class_ llama\\_index.callbacks.CBEvent(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _time: str \\= ''_, _id\\_: str \\= ''_)[\uf0c1](#llama_index.callbacks.CBEvent \"Permalink to this definition\")\n\nGeneric class to store event information.\n\n_class_ llama\\_index.callbacks.CBEventType(_value_, _names\\=None_, _\\*_, _module\\=None_, _qualname\\=None_, _type\\=None_, _start\\=1_, _boundary\\=None_)[\uf0c1](#llama_index.callbacks.CBEventType \"Permalink to this definition\")\n\nCallback manager event types.\n\nCHUNKING[\uf0c1](#llama_index.callbacks.CBEventType.CHUNKING \"Permalink to this definition\")\n\nLogs for the before and after of text splitting.\n\nNODE\\_PARSING[\uf0c1](#llama_index.callbacks.CBEventType.NODE_PARSING \"Permalink to this definition\")\n\nLogs for the documents and the nodes that they are parsed into.\n\nEMBEDDING[\uf0c1](#llama_index.callbacks.CBEventType.EMBEDDING \"Permalink to this definition\")\n\nLogs for the number of texts embedded.\n\nLLM[\uf0c1](#llama_index.callbacks.CBEventType.LLM \"Permalink to this definition\")\n\nLogs for the template and response of LLM calls.\n\nQUERY[\uf0c1](#llama_index.callbacks.CBEventType.QUERY \"Permalink to this definition\")\n\nKeeps track of the start and end of each query.\n\nRETRIEVE[\uf0c1](#llama_index.callbacks.CBEventType.RETRIEVE \"Permalink to this definition\")\n\nLogs for the nodes retrieved for a query.\n\nSYNTHESIZE[\uf0c1](#llama_index.callbacks.CBEventType.SYNTHESIZE \"Permalink to this definition\")\n\nLogs for the result for synthesize calls.\n\nTREE[\uf0c1](#llama_index.callbacks.CBEventType.TREE \"Permalink to this definition\")\n\nLogs for the summary and level of summaries generated.\n\nSUB\\_QUESTION[\uf0c1](#llama_index.callbacks.CBEventType.SUB_QUESTION \"Permalink to this definition\")\n\nLogs for a generated sub question and answer.\n\ncapitalize()[\uf0c1](#llama_index.callbacks.CBEventType.capitalize \"Permalink to this definition\")\n\nReturn a capitalized version of the string.\n\nMore specifically, make the first character have upper case and the rest lower case.\n\ncasefold()[\uf0c1](#llama_index.callbacks.CBEventType.casefold \"Permalink to this definition\")\n\nReturn a version of the string suitable for caseless comparisons.\n\ncenter(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.center \"Permalink to this definition\")\n\nReturn a centered string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\ncount(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.CBEventType.count \"Permalink to this definition\")\n\nReturn the number of non-overlapping occurrences of substring sub in string S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nencode(_encoding\\='utf-8'_, _errors\\='strict'_)[\uf0c1](#llama_index.callbacks.CBEventType.encode \"Permalink to this definition\")\n\nEncode the string using the codec registered for encoding.\n\nencoding\n\nThe encoding in which to encode the string.\n\nerrors\n\nThe error handling scheme to use for encoding errors. The default is \u2018strict\u2019 meaning that encoding errors raise a UnicodeEncodeError. Other possible values are \u2018ignore\u2019, \u2018replace\u2019 and \u2018xmlcharrefreplace\u2019 as well as any other name registered with codecs.register\\_error that can handle UnicodeEncodeErrors.\n\nendswith(_suffix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.callbacks.CBEventType.endswith \"Permalink to this definition\")\n\nReturn True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.\n\nexpandtabs(_tabsize\\=8_)[\uf0c1](#llama_index.callbacks.CBEventType.expandtabs \"Permalink to this definition\")\n\nReturn a copy where all tab characters are expanded using spaces.\n\nIf tabsize is not given, a tab size of 8 characters is assumed.\n\nfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.CBEventType.find \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nformat(_\\*args_, _\\*\\*kwargs_) \u2192 str[\uf0c1](#llama_index.callbacks.CBEventType.format \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nformat\\_map(_mapping_) \u2192 str[\uf0c1](#llama_index.callbacks.CBEventType.format_map \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from mapping. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.CBEventType.index \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nisalnum()[\uf0c1](#llama_index.callbacks.CBEventType.isalnum \"Permalink to this definition\")\n\nReturn True if the string is an alpha-numeric string, False otherwise.\n\nA string is alpha-numeric if all characters in the string are alpha-numeric and there is at least one character in the string.\n\nisalpha()[\uf0c1](#llama_index.callbacks.CBEventType.isalpha \"Permalink to this definition\")\n\nReturn True if the string is an alphabetic string, False otherwise.\n\nA string is alphabetic if all characters in the string are alphabetic and there is at least one character in the string.\n\nisascii()[\uf0c1](#llama_index.callbacks.CBEventType.isascii \"Permalink to this definition\")\n\nReturn True if all characters in the string are ASCII, False otherwise.\n\nASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.\n\nisdecimal()[\uf0c1](#llama_index.callbacks.CBEventType.isdecimal \"Permalink to this definition\")\n\nReturn True if the string is a decimal string, False otherwise.\n\nA string is a decimal string if all characters in the string are decimal and there is at least one character in the string.\n\nisdigit()[\uf0c1](#llama_index.callbacks.CBEventType.isdigit \"Permalink to this definition\")\n\nReturn True if the string is a digit string, False otherwise.\n\nA string is a digit string if all characters in the string are digits and there is at least one character in the string.\n\nisidentifier()[\uf0c1](#llama_index.callbacks.CBEventType.isidentifier \"Permalink to this definition\")\n\nReturn True if the string is a valid Python identifier, False otherwise.\n\nCall keyword.iskeyword(s) to test whether string s is a reserved identifier, such as \u201cdef\u201d or \u201cclass\u201d.\n\nislower()[\uf0c1](#llama_index.callbacks.CBEventType.islower \"Permalink to this definition\")\n\nReturn True if the string is a lowercase string, False otherwise.\n\nA string is lowercase if all cased characters in the string are lowercase and there is at least one cased character in the string.\n\nisnumeric()[\uf0c1](#llama_index.callbacks.CBEventType.isnumeric \"Permalink to this definition\")\n\nReturn True if the string is a numeric string, False otherwise.\n\nA string is numeric if all characters in the string are numeric and there is at least one character in the string.\n\nisprintable()[\uf0c1](#llama_index.callbacks.CBEventType.isprintable \"Permalink to this definition\")\n\nReturn True if the string is printable, False otherwise.\n\nA string is printable if all of its characters are considered printable in repr() or if it is empty.\n\nisspace()[\uf0c1](#llama_index.callbacks.CBEventType.isspace \"Permalink to this definition\")\n\nReturn True if the string is a whitespace string, False otherwise.\n\nA string is whitespace if all characters in the string are whitespace and there is at least one character in the string.\n\nistitle()[\uf0c1](#llama_index.callbacks.CBEventType.istitle \"Permalink to this definition\")\n\nReturn True if the string is a title-cased string, False otherwise.\n\nIn a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones.\n\nisupper()[\uf0c1](#llama_index.callbacks.CBEventType.isupper \"Permalink to this definition\")\n\nReturn True if the string is an uppercase string, False otherwise.\n\nA string is uppercase if all cased characters in the string are uppercase and there is at least one cased character in the string.\n\njoin(_iterable_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.join \"Permalink to this definition\")\n\nConcatenate any number of strings.\n\nThe string whose method is called is inserted in between each given string. The result is returned as a new string.\n\nExample: \u2018.\u2019.join(\\[\u2018ab\u2019, \u2018pq\u2019, \u2018rs\u2019\\]) -> \u2018ab.pq.rs\u2019\n\nljust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.ljust \"Permalink to this definition\")\n\nReturn a left-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nlower()[\uf0c1](#llama_index.callbacks.CBEventType.lower \"Permalink to this definition\")\n\nReturn a copy of the string converted to lowercase.\n\nlstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.lstrip \"Permalink to this definition\")\n\nReturn a copy of the string with leading whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\n_static_ maketrans()[\uf0c1](#llama_index.callbacks.CBEventType.maketrans \"Permalink to this definition\")\n\nReturn a translation table usable for str.translate().\n\nIf there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.\n\npartition(_sep_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.partition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing the original string and two empty strings.\n\nremoveprefix(_prefix_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.removeprefix \"Permalink to this definition\")\n\nReturn a str with the given prefix string removed if present.\n\nIf the string starts with the prefix string, return string\\[len(prefix):\\]. Otherwise, return a copy of the original string.\n\nremovesuffix(_suffix_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.removesuffix \"Permalink to this definition\")\n\nReturn a str with the given suffix string removed if present.\n\nIf the string ends with the suffix string and that suffix is not empty, return string\\[:-len(suffix)\\]. Otherwise, return a copy of the original string.\n\nreplace(_old_, _new_, _count\\=\\-1_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.replace \"Permalink to this definition\")\n\nReturn a copy with all occurrences of substring old replaced by new.\n\n> count\n> \n> Maximum number of occurrences to replace. -1 (the default value) means replace all occurrences.\n\nIf the optional argument count is given, only the first count occurrences are replaced.\n\nrfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.CBEventType.rfind \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nrindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.CBEventType.rindex \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nrjust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.rjust \"Permalink to this definition\")\n\nReturn a right-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nrpartition(_sep_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.rpartition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string, starting at the end. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing two empty strings and the original string.\n\nrsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.callbacks.CBEventType.rsplit \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nSplitting starts at the end of the string and works to the front.\n\nrstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.rstrip \"Permalink to this definition\")\n\nReturn a copy of the string with trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.callbacks.CBEventType.split \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nNote, str.split() is mainly useful for data that has been intentionally delimited. With natural text that includes punctuation, consider using the regular expression module.\n\nsplitlines(_keepends\\=False_)[\uf0c1](#llama_index.callbacks.CBEventType.splitlines \"Permalink to this definition\")\n\nReturn a list of the lines in the string, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and true.\n\nstartswith(_prefix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.callbacks.CBEventType.startswith \"Permalink to this definition\")\n\nReturn True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try.\n\nstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.strip \"Permalink to this definition\")\n\nReturn a copy of the string with leading and trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nswapcase()[\uf0c1](#llama_index.callbacks.CBEventType.swapcase \"Permalink to this definition\")\n\nConvert uppercase characters to lowercase and lowercase characters to uppercase.\n\ntitle()[\uf0c1](#llama_index.callbacks.CBEventType.title \"Permalink to this definition\")\n\nReturn a version of the string where each word is titlecased.\n\nMore specifically, words start with uppercased characters and all remaining cased characters have lower case.\n\ntranslate(_table_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.translate \"Permalink to this definition\")\n\nReplace each character in the string using the given translation table.\n\n> table\n> \n> Translation table, which must be a mapping of Unicode ordinals to Unicode ordinals, strings, or None.\n\nThe table must implement lookup/indexing via \\_\\_getitem\\_\\_, for instance a dictionary or list. If this operation raises LookupError, the character is left untouched. Characters mapped to None are deleted.\n\nupper()[\uf0c1](#llama_index.callbacks.CBEventType.upper \"Permalink to this definition\")\n\nReturn a copy of the string converted to uppercase.\n\nzfill(_width_, _/_)[\uf0c1](#llama_index.callbacks.CBEventType.zfill \"Permalink to this definition\")\n\nPad a numeric string with zeros on the left, to fill a field of the given width.\n\nThe string is never truncated.\n\n_class_ llama\\_index.callbacks.CallbackManager(_handlers: Optional\\[List\\[BaseCallbackHandler\\]\\] \\= None_)[\uf0c1](#llama_index.callbacks.CallbackManager \"Permalink to this definition\")\n\nCallback manager that handles callbacks for events within LlamaIndex.\n\nThe callback manager provides a way to call handlers on event starts/ends.\n\nAdditionally, the callback manager traces the current stack of events. It does this by using a few key attributes. - trace\\_stack - The current stack of events that have not ended yet.\n\n> When an event ends, it\u2019s removed from the stack. Since this is a contextvar, it is unique to each thread/task.\n\n*   trace\\_map - A mapping of event ids to their children events.\n    \n    On the start of events, the bottom of the trace stack is used as the current parent event for the trace map.\n    \n*   trace\\_id - A simple name for the current trace, usually denoting the\n    \n    entrypoint (query, index\\_construction, insert, etc.)\n    \n\nParameters\n\n**handlers** (_List__\\[__BaseCallbackHandler__\\]_) \u2013 list of handlers to use.\n\nUsage:\n\nwith callback\\_manager.event(CBEventType.QUERY) as event:\n\nevent.on\\_start(payload={key, val}) \u2026 event.on\\_end(payload={key, val})\n\nadd\\_handler(_handler: BaseCallbackHandler_) \u2192 None[\uf0c1](#llama_index.callbacks.CallbackManager.add_handler \"Permalink to this definition\")\n\nAdd a handler to the callback manager.\n\nas\\_trace(_trace\\_id: str_) \u2192 Generator\\[None, None, None\\][\uf0c1](#llama_index.callbacks.CallbackManager.as_trace \"Permalink to this definition\")\n\nContext manager tracer for lanching and shutdown of traces.\n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.CallbackManager.end_trace \"Permalink to this definition\")\n\nRun when an overall trace is exited.\n\nevent(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: Optional\\[str\\] \\= None_) \u2192 Generator\\[EventContext, None, None\\][\uf0c1](#llama_index.callbacks.CallbackManager.event \"Permalink to this definition\")\n\nContext manager for lanching and shutdown of events.\n\nHandles sending on\\_evnt\\_start and on\\_event\\_end to handlers for specified event.\n\nUsage:\n\nwith callback\\_manager.event(CBEventType.QUERY, payload={key, val}) as event:\n\n\u2026 event.on\\_end(payload={key, val}) # optional\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: Optional\\[str\\] \\= None_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.CallbackManager.on_event_end \"Permalink to this definition\")\n\nRun handlers when an event ends.\n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: Optional\\[str\\] \\= None_, _parent\\_id: Optional\\[str\\] \\= None_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.CallbackManager.on_event_start \"Permalink to this definition\")\n\nRun handlers when an event starts and return id of event.\n\nremove\\_handler(_handler: BaseCallbackHandler_) \u2192 None[\uf0c1](#llama_index.callbacks.CallbackManager.remove_handler \"Permalink to this definition\")\n\nRemove a handler from the callback manager.\n\nset\\_handlers(_handlers: List\\[BaseCallbackHandler\\]_) \u2192 None[\uf0c1](#llama_index.callbacks.CallbackManager.set_handlers \"Permalink to this definition\")\n\nSet handlers as the only handlers on the callback manager.\n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.CallbackManager.start_trace \"Permalink to this definition\")\n\nRun when an overall trace is launched.\n\n_class_ llama\\_index.callbacks.EventPayload(_value_, _names\\=None_, _\\*_, _module\\=None_, _qualname\\=None_, _type\\=None_, _start\\=1_, _boundary\\=None_)[\uf0c1](#llama_index.callbacks.EventPayload \"Permalink to this definition\")\n\ncapitalize()[\uf0c1](#llama_index.callbacks.EventPayload.capitalize \"Permalink to this definition\")\n\nReturn a capitalized version of the string.\n\nMore specifically, make the first character have upper case and the rest lower case.\n\ncasefold()[\uf0c1](#llama_index.callbacks.EventPayload.casefold \"Permalink to this definition\")\n\nReturn a version of the string suitable for caseless comparisons.\n\ncenter(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.center \"Permalink to this definition\")\n\nReturn a centered string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\ncount(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.EventPayload.count \"Permalink to this definition\")\n\nReturn the number of non-overlapping occurrences of substring sub in string S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nencode(_encoding\\='utf-8'_, _errors\\='strict'_)[\uf0c1](#llama_index.callbacks.EventPayload.encode \"Permalink to this definition\")\n\nEncode the string using the codec registered for encoding.\n\nencoding\n\nThe encoding in which to encode the string.\n\nerrors\n\nThe error handling scheme to use for encoding errors. The default is \u2018strict\u2019 meaning that encoding errors raise a UnicodeEncodeError. Other possible values are \u2018ignore\u2019, \u2018replace\u2019 and \u2018xmlcharrefreplace\u2019 as well as any other name registered with codecs.register\\_error that can handle UnicodeEncodeErrors.\n\nendswith(_suffix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.callbacks.EventPayload.endswith \"Permalink to this definition\")\n\nReturn True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.\n\nexpandtabs(_tabsize\\=8_)[\uf0c1](#llama_index.callbacks.EventPayload.expandtabs \"Permalink to this definition\")\n\nReturn a copy where all tab characters are expanded using spaces.\n\nIf tabsize is not given, a tab size of 8 characters is assumed.\n\nfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.EventPayload.find \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nformat(_\\*args_, _\\*\\*kwargs_) \u2192 str[\uf0c1](#llama_index.callbacks.EventPayload.format \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nformat\\_map(_mapping_) \u2192 str[\uf0c1](#llama_index.callbacks.EventPayload.format_map \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from mapping. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.EventPayload.index \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nisalnum()[\uf0c1](#llama_index.callbacks.EventPayload.isalnum \"Permalink to this definition\")\n\nReturn True if the string is an alpha-numeric string, False otherwise.\n\nA string is alpha-numeric if all characters in the string are alpha-numeric and there is at least one character in the string.\n\nisalpha()[\uf0c1](#llama_index.callbacks.EventPayload.isalpha \"Permalink to this definition\")\n\nReturn True if the string is an alphabetic string, False otherwise.\n\nA string is alphabetic if all characters in the string are alphabetic and there is at least one character in the string.\n\nisascii()[\uf0c1](#llama_index.callbacks.EventPayload.isascii \"Permalink to this definition\")\n\nReturn True if all characters in the string are ASCII, False otherwise.\n\nASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.\n\nisdecimal()[\uf0c1](#llama_index.callbacks.EventPayload.isdecimal \"Permalink to this definition\")\n\nReturn True if the string is a decimal string, False otherwise.\n\nA string is a decimal string if all characters in the string are decimal and there is at least one character in the string.\n\nisdigit()[\uf0c1](#llama_index.callbacks.EventPayload.isdigit \"Permalink to this definition\")\n\nReturn True if the string is a digit string, False otherwise.\n\nA string is a digit string if all characters in the string are digits and there is at least one character in the string.\n\nisidentifier()[\uf0c1](#llama_index.callbacks.EventPayload.isidentifier \"Permalink to this definition\")\n\nReturn True if the string is a valid Python identifier, False otherwise.\n\nCall keyword.iskeyword(s) to test whether string s is a reserved identifier, such as \u201cdef\u201d or \u201cclass\u201d.\n\nislower()[\uf0c1](#llama_index.callbacks.EventPayload.islower \"Permalink to this definition\")\n\nReturn True if the string is a lowercase string, False otherwise.\n\nA string is lowercase if all cased characters in the string are lowercase and there is at least one cased character in the string.\n\nisnumeric()[\uf0c1](#llama_index.callbacks.EventPayload.isnumeric \"Permalink to this definition\")\n\nReturn True if the string is a numeric string, False otherwise.\n\nA string is numeric if all characters in the string are numeric and there is at least one character in the string.\n\nisprintable()[\uf0c1](#llama_index.callbacks.EventPayload.isprintable \"Permalink to this definition\")\n\nReturn True if the string is printable, False otherwise.\n\nA string is printable if all of its characters are considered printable in repr() or if it is empty.\n\nisspace()[\uf0c1](#llama_index.callbacks.EventPayload.isspace \"Permalink to this definition\")\n\nReturn True if the string is a whitespace string, False otherwise.\n\nA string is whitespace if all characters in the string are whitespace and there is at least one character in the string.\n\nistitle()[\uf0c1](#llama_index.callbacks.EventPayload.istitle \"Permalink to this definition\")\n\nReturn True if the string is a title-cased string, False otherwise.\n\nIn a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones.\n\nisupper()[\uf0c1](#llama_index.callbacks.EventPayload.isupper \"Permalink to this definition\")\n\nReturn True if the string is an uppercase string, False otherwise.\n\nA string is uppercase if all cased characters in the string are uppercase and there is at least one cased character in the string.\n\njoin(_iterable_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.join \"Permalink to this definition\")\n\nConcatenate any number of strings.\n\nThe string whose method is called is inserted in between each given string. The result is returned as a new string.\n\nExample: \u2018.\u2019.join(\\[\u2018ab\u2019, \u2018pq\u2019, \u2018rs\u2019\\]) -> \u2018ab.pq.rs\u2019\n\nljust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.ljust \"Permalink to this definition\")\n\nReturn a left-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nlower()[\uf0c1](#llama_index.callbacks.EventPayload.lower \"Permalink to this definition\")\n\nReturn a copy of the string converted to lowercase.\n\nlstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.lstrip \"Permalink to this definition\")\n\nReturn a copy of the string with leading whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\n_static_ maketrans()[\uf0c1](#llama_index.callbacks.EventPayload.maketrans \"Permalink to this definition\")\n\nReturn a translation table usable for str.translate().\n\nIf there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.\n\npartition(_sep_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.partition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing the original string and two empty strings.\n\nremoveprefix(_prefix_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.removeprefix \"Permalink to this definition\")\n\nReturn a str with the given prefix string removed if present.\n\nIf the string starts with the prefix string, return string\\[len(prefix):\\]. Otherwise, return a copy of the original string.\n\nremovesuffix(_suffix_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.removesuffix \"Permalink to this definition\")\n\nReturn a str with the given suffix string removed if present.\n\nIf the string ends with the suffix string and that suffix is not empty, return string\\[:-len(suffix)\\]. Otherwise, return a copy of the original string.\n\nreplace(_old_, _new_, _count\\=\\-1_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.replace \"Permalink to this definition\")\n\nReturn a copy with all occurrences of substring old replaced by new.\n\n> count\n> \n> Maximum number of occurrences to replace. -1 (the default value) means replace all occurrences.\n\nIf the optional argument count is given, only the first count occurrences are replaced.\n\nrfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.EventPayload.rfind \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nrindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.callbacks.EventPayload.rindex \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nrjust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.rjust \"Permalink to this definition\")\n\nReturn a right-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nrpartition(_sep_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.rpartition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string, starting at the end. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing two empty strings and the original string.\n\nrsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.callbacks.EventPayload.rsplit \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nSplitting starts at the end of the string and works to the front.\n\nrstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.rstrip \"Permalink to this definition\")\n\nReturn a copy of the string with trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.callbacks.EventPayload.split \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nNote, str.split() is mainly useful for data that has been intentionally delimited. With natural text that includes punctuation, consider using the regular expression module.\n\nsplitlines(_keepends\\=False_)[\uf0c1](#llama_index.callbacks.EventPayload.splitlines \"Permalink to this definition\")\n\nReturn a list of the lines in the string, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and true.\n\nstartswith(_prefix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.callbacks.EventPayload.startswith \"Permalink to this definition\")\n\nReturn True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try.\n\nstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.strip \"Permalink to this definition\")\n\nReturn a copy of the string with leading and trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nswapcase()[\uf0c1](#llama_index.callbacks.EventPayload.swapcase \"Permalink to this definition\")\n\nConvert uppercase characters to lowercase and lowercase characters to uppercase.\n\ntitle()[\uf0c1](#llama_index.callbacks.EventPayload.title \"Permalink to this definition\")\n\nReturn a version of the string where each word is titlecased.\n\nMore specifically, words start with uppercased characters and all remaining cased characters have lower case.\n\ntranslate(_table_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.translate \"Permalink to this definition\")\n\nReplace each character in the string using the given translation table.\n\n> table\n> \n> Translation table, which must be a mapping of Unicode ordinals to Unicode ordinals, strings, or None.\n\nThe table must implement lookup/indexing via \\_\\_getitem\\_\\_, for instance a dictionary or list. If this operation raises LookupError, the character is left untouched. Characters mapped to None are deleted.\n\nupper()[\uf0c1](#llama_index.callbacks.EventPayload.upper \"Permalink to this definition\")\n\nReturn a copy of the string converted to uppercase.\n\nzfill(_width_, _/_)[\uf0c1](#llama_index.callbacks.EventPayload.zfill \"Permalink to this definition\")\n\nPad a numeric string with zeros on the left, to fill a field of the given width.\n\nThe string is never truncated.\n\n_class_ llama\\_index.callbacks.LlamaDebugHandler(_event\\_starts\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _event\\_ends\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _print\\_trace\\_on\\_end: bool \\= True_)[\uf0c1](#llama_index.callbacks.LlamaDebugHandler \"Permalink to this definition\")\n\nCallback handler that keeps track of debug info.\n\nNOTE: this is a beta feature. The usage within our codebase, and the interface may change.\n\nThis handler simply keeps track of event starts/ends, separated by event types. You can use this callback handler to keep track of and debug events.\n\nParameters\n\n*   **event\\_starts\\_to\\_ignore** (_Optional__\\[__List__\\[_[_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")_\\]__\\]_) \u2013 list of event types to ignore when tracking event starts.\n    \n*   **event\\_ends\\_to\\_ignore** (_Optional__\\[__List__\\[_[_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")_\\]__\\]_) \u2013 list of event types to ignore when tracking event ends.\n    \n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.LlamaDebugHandler.end_trace \"Permalink to this definition\")\n\nShutdown the current trace.\n\nflush\\_event\\_logs() \u2192 None[\uf0c1](#llama_index.callbacks.LlamaDebugHandler.flush_event_logs \"Permalink to this definition\")\n\nClear all events from memory.\n\nget\\_event\\_pairs(_event\\_type: Optional\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\] \\= None_) \u2192 List\\[List\\[[CBEvent](#llama_index.callbacks.CBEvent \"llama_index.callbacks.schema.CBEvent\")\\]\\][\uf0c1](#llama_index.callbacks.LlamaDebugHandler.get_event_pairs \"Permalink to this definition\")\n\nPair events by ID, either all events or a specific type.\n\nget\\_events(_event\\_type: Optional\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\] \\= None_) \u2192 List\\[[CBEvent](#llama_index.callbacks.CBEvent \"llama_index.callbacks.schema.CBEvent\")\\][\uf0c1](#llama_index.callbacks.LlamaDebugHandler.get_events \"Permalink to this definition\")\n\nGet all events for a specific event type.\n\nget\\_llm\\_inputs\\_outputs() \u2192 List\\[List\\[[CBEvent](#llama_index.callbacks.CBEvent \"llama_index.callbacks.schema.CBEvent\")\\]\\][\uf0c1](#llama_index.callbacks.LlamaDebugHandler.get_llm_inputs_outputs \"Permalink to this definition\")\n\nGet the exact LLM inputs and outputs.\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.LlamaDebugHandler.on_event_end \"Permalink to this definition\")\n\nStore event end data by event type.\n\nParameters\n\n*   **event\\_type** ([_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")) \u2013 event type to store.\n    \n*   **payload** (_Optional__\\[__Dict__\\[__str__,_ _Any__\\]__\\]_) \u2013 payload to store.\n    \n*   **event\\_id** (_str_) \u2013 event id to store.\n    \n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _parent\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.LlamaDebugHandler.on_event_start \"Permalink to this definition\")\n\nStore event start data by event type.\n\nParameters\n\n*   **event\\_type** ([_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")) \u2013 event type to store.\n    \n*   **payload** (_Optional__\\[__Dict__\\[__str__,_ _Any__\\]__\\]_) \u2013 payload to store.\n    \n*   **event\\_id** (_str_) \u2013 event id to store.\n    \n*   **parent\\_id** (_str_) \u2013 parent event id.\n    \n\nprint\\_trace\\_map() \u2192 None[\uf0c1](#llama_index.callbacks.LlamaDebugHandler.print_trace_map \"Permalink to this definition\")\n\nPrint simple trace map to terminal for debugging of the most recent trace.\n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.LlamaDebugHandler.start_trace \"Permalink to this definition\")\n\nLaunch a trace.\n\n_class_ llama\\_index.callbacks.OpenAIFineTuningHandler(_output\\_cls: Optional\\[Type\\[BaseModel\\]\\] \\= None_)[\uf0c1](#llama_index.callbacks.OpenAIFineTuningHandler \"Permalink to this definition\")\n\nCallback handler for OpenAI fine-tuning.\n\nThis handler will collect all messages sent to the LLM, along with their responses. It will then save these messages in a .jsonl format that can be used for fine-tuning with OpenAI\u2019s API.\n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenAIFineTuningHandler.end_trace \"Permalink to this definition\")\n\nRun when an overall trace is exited.\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenAIFineTuningHandler.on_event_end \"Permalink to this definition\")\n\nRun when an event ends.\n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _parent\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.OpenAIFineTuningHandler.on_event_start \"Permalink to this definition\")\n\nRun when an event starts and return id of event.\n\nsave\\_finetuning\\_events(_path: str_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenAIFineTuningHandler.save_finetuning_events \"Permalink to this definition\")\n\nSave the finetuning events to a file.\n\nThis saved format can be used for fine-tuning with OpenAI\u2019s API. The structure for each json line is as follows: {\n\n> messages: \\[\n> \n> { rol: \u201csystem\u201d, content: \u201cText\u201d}, { role: \u201cuser\u201d, content: \u201cText\u201d },\n> \n> \\]\n\n## },[\uf0c1](#id1 \"Permalink to this heading\")\n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenAIFineTuningHandler.start_trace \"Permalink to this definition\")\n\nRun when an overall trace is launched.\n\n_class_ llama\\_index.callbacks.OpenInferenceCallbackHandler(_callback: Optional\\[Callable\\[\\[List\\[QueryData\\]\\], None\\]\\] \\= None_)[\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler \"Permalink to this definition\")\n\nCallback handler for storing generation data in OpenInference format. OpenInference is an open standard for capturing and storing AI model inferences. It enables production LLMapp servers to seamlessly integrate with LLM observability solutions such as Arize and Phoenix.\n\nFor more information on the specification, see [https://github.com/Arize-ai/open-inference-spec](https://github.com/Arize-ai/open-inference-spec)\n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler.end_trace \"Permalink to this definition\")\n\nRun when an overall trace is exited.\n\nflush\\_node\\_data\\_buffer() \u2192 List\\[NodeData\\][\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler.flush_node_data_buffer \"Permalink to this definition\")\n\nClears the node data buffer and returns the data.\n\nReturns\n\nThe node data.\n\nReturn type\n\nList\\[NodeData\\]\n\nflush\\_query\\_data\\_buffer() \u2192 List\\[QueryData\\][\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler.flush_query_data_buffer \"Permalink to this definition\")\n\nClears the query data buffer and returns the data.\n\nReturns\n\nThe query data.\n\nReturn type\n\nList\\[QueryData\\]\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler.on_event_end \"Permalink to this definition\")\n\nRun when an event ends.\n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _parent\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler.on_event_start \"Permalink to this definition\")\n\nRun when an event starts and return id of event.\n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.OpenInferenceCallbackHandler.start_trace \"Permalink to this definition\")\n\nRun when an overall trace is launched.\n\n_class_ llama\\_index.callbacks.TokenCountingHandler(_tokenizer: Optional\\[Callable\\[\\[str\\], List\\]\\] \\= None_, _event\\_starts\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _event\\_ends\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _verbose: bool \\= False_)[\uf0c1](#llama_index.callbacks.TokenCountingHandler \"Permalink to this definition\")\n\nCallback handler for counting tokens in LLM and Embedding events.\n\nParameters\n\n*   **tokenizer** \u2013 Tokenizer to use. Defaults to the global tokenizer (see llama\\_index.utils.globals\\_helper).\n    \n*   **event\\_starts\\_to\\_ignore** \u2013 List of event types to ignore at the start of a trace.\n    \n*   **event\\_ends\\_to\\_ignore** \u2013 List of event types to ignore at the end of a trace.\n    \n\n_property_ completion\\_llm\\_token\\_count_: int_[\uf0c1](#llama_index.callbacks.TokenCountingHandler.completion_llm_token_count \"Permalink to this definition\")\n\nGet the current total LLM completion token count.\n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.TokenCountingHandler.end_trace \"Permalink to this definition\")\n\nRun when an overall trace is exited.\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.TokenCountingHandler.on_event_end \"Permalink to this definition\")\n\nCount the LLM or Embedding tokens as needed.\n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _parent\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.TokenCountingHandler.on_event_start \"Permalink to this definition\")\n\nRun when an event starts and return id of event.\n\n_property_ prompt\\_llm\\_token\\_count_: int_[\uf0c1](#llama_index.callbacks.TokenCountingHandler.prompt_llm_token_count \"Permalink to this definition\")\n\nGet the current total LLM prompt token count.\n\nreset\\_counts() \u2192 None[\uf0c1](#llama_index.callbacks.TokenCountingHandler.reset_counts \"Permalink to this definition\")\n\nReset the token counts.\n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.TokenCountingHandler.start_trace \"Permalink to this definition\")\n\nRun when an overall trace is launched.\n\n_property_ total\\_embedding\\_token\\_count_: int_[\uf0c1](#llama_index.callbacks.TokenCountingHandler.total_embedding_token_count \"Permalink to this definition\")\n\nGet the current total Embedding token count.\n\n_property_ total\\_llm\\_token\\_count_: int_[\uf0c1](#llama_index.callbacks.TokenCountingHandler.total_llm_token_count \"Permalink to this definition\")\n\nGet the current total LLM token count.\n\n_class_ llama\\_index.callbacks.WandbCallbackHandler(_run\\_args: Optional\\[WandbRunArgs\\] \\= None_, _tokenizer: Optional\\[Callable\\[\\[str\\], List\\]\\] \\= None_, _event\\_starts\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_, _event\\_ends\\_to\\_ignore: Optional\\[List\\[[CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")\\]\\] \\= None_)[\uf0c1](#llama_index.callbacks.WandbCallbackHandler \"Permalink to this definition\")\n\nCallback handler that logs events to wandb.\n\nNOTE: this is a beta feature. The usage within our codebase, and the interface may change.\n\nUse the WandbCallbackHandler to log trace events to wandb. This handler is useful for debugging and visualizing the trace events. It captures the payload of the events and logs them to wandb. The handler also tracks the start and end of events. This is particularly useful for debugging your LLM calls.\n\nThe WandbCallbackHandler can also be used to log the indices and graphs to wandb using the persist\\_index method. This will save the indexes as artifacts in wandb. The load\\_storage\\_context method can be used to load the indexes from wandb artifacts. This method will return a StorageContext object that can be used to build the index, using load\\_index\\_from\\_storage, load\\_indices\\_from\\_storage or load\\_graph\\_from\\_storage functions.\n\nParameters\n\n*   **event\\_starts\\_to\\_ignore** (_Optional__\\[__List__\\[_[_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")_\\]__\\]_) \u2013 list of event types to ignore when tracking event starts.\n    \n*   **event\\_ends\\_to\\_ignore** (_Optional__\\[__List__\\[_[_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")_\\]__\\]_) \u2013 list of event types to ignore when tracking event ends.\n    \n\nend\\_trace(_trace\\_id: Optional\\[str\\] \\= None_, _trace\\_map: Optional\\[Dict\\[str, List\\[str\\]\\]\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.end_trace \"Permalink to this definition\")\n\nRun when an overall trace is exited.\n\nfinish() \u2192 None[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.finish \"Permalink to this definition\")\n\nFinish the callback handler.\n\nload\\_storage\\_context(_artifact\\_url: str_, _index\\_download\\_dir: Optional\\[str\\] \\= None_) \u2192 [StorageContext](https://docs.llamaindex.ai/en/stable/api_reference/storage.html#llama_index.storage.storage_context.StorageContext \"llama_index.storage.storage_context.StorageContext\")[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.load_storage_context \"Permalink to this definition\")\n\nDownload an index from wandb and return a storage context.\n\nUse this storage context to load the index into memory using load\\_index\\_from\\_storage, load\\_indices\\_from\\_storage or load\\_graph\\_from\\_storage functions.\n\nParameters\n\n*   **artifact\\_url** (_str_) \u2013 url of the artifact to download. The artifact url will be of the form: entity/project/index\\_name:version and can be found in the W&B UI.\n    \n*   **index\\_download\\_dir** (_Union__\\[__str__,_ _None__\\]_) \u2013 directory to download the index to.\n    \n\nlog\\_trace\\_tree() \u2192 None[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.log_trace_tree \"Permalink to this definition\")\n\nLog the trace tree to wandb.\n\non\\_event\\_end(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 None[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.on_event_end \"Permalink to this definition\")\n\nStore event end data by event type.\n\nParameters\n\n*   **event\\_type** ([_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")) \u2013 event type to store.\n    \n*   **payload** (_Optional__\\[__Dict__\\[__str__,_ _Any__\\]__\\]_) \u2013 payload to store.\n    \n*   **event\\_id** (_str_) \u2013 event id to store.\n    \n\non\\_event\\_start(_event\\_type: [CBEventType](#llama_index.callbacks.CBEventType \"llama_index.callbacks.schema.CBEventType\")_, _payload: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _event\\_id: str \\= ''_, _parent\\_id: str \\= ''_, _\\*\\*kwargs: Any_) \u2192 str[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.on_event_start \"Permalink to this definition\")\n\nStore event start data by event type.\n\nParameters\n\n*   **event\\_type** ([_CBEventType_](#llama_index.callbacks.CBEventType \"llama_index.callbacks.CBEventType\")) \u2013 event type to store.\n    \n*   **payload** (_Optional__\\[__Dict__\\[__str__,_ _Any__\\]__\\]_) \u2013 payload to store.\n    \n*   **event\\_id** (_str_) \u2013 event id to store.\n    \n*   **parent\\_id** (_str_) \u2013 parent event id.\n    \n\npersist\\_index(_index: IndexType_, _index\\_name: str_, _persist\\_dir: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.persist_index \"Permalink to this definition\")\n\nUpload an index to wandb as an artifact. You can learn more about W&B artifacts here: [https://docs.wandb.ai/guides/artifacts](https://docs.wandb.ai/guides/artifacts).\n\nFor the ComposableGraph index, the root id is stored as artifact metadata.\n\nParameters\n\n*   **index** (_IndexType_) \u2013 index to upload.\n    \n*   **index\\_name** (_str_) \u2013 name of the index. This will be used as the artifact name.\n    \n*   **persist\\_dir** (_Union__\\[__str__,_ _None__\\]_) \u2013 directory to persist the index. If None, a temporary directory will be created and used.\n    \n\nstart\\_trace(_trace\\_id: Optional\\[str\\] \\= None_) \u2192 None[\uf0c1](#llama_index.callbacks.WandbCallbackHandler.start_trace \"Permalink to this definition\")\n\nLaunch a trace.\n\nllama\\_index.callbacks.trace\\_method(_trace\\_id: str_, _callback\\_manager\\_attr: str \\= 'callback\\_manager'_) \u2192 Callable\\[\\[Callable\\], Callable\\][\uf0c1](#llama_index.callbacks.trace_method \"Permalink to this definition\")\n\nDecorator to trace a method.\n\nExample\n\n@trace\\_method(\u201cmy\\_trace\\_id\u201d) def my\\_method(self):\n\n> pass\n\nAssumes that the self instance has a CallbackManager instance in an attribute named callback\\_manager. This can be overridden by passing in a callback\\_manager\\_attr keyword argument."
}