{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/callbacks/AimCallback.html",
        "title": "Aim Callback - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## Aim Callback[\uf0c1](#aim-callback \"Permalink to this heading\")\n\nAim is an easy-to-use & supercharged open-source AI metadata tracker it logs all your AI metadata (experiments, prompts, etc) enables a UI to compare & observe them and SDK to query them programmatically. For more please see the [Github page](https://github.com/aimhubio/aim).\n\nIn this demo, we show the capabilities of Aim for logging events while running queries within LlamaIndex. We use the AimCallback to store the outputs and showing how to explore them using Aim Text Explorer.\n\n**NOTE**: This is a beta feature. The usage within different classes and the API interface for the CallbackManager and AimCallback may change!\n\n## Setup[\uf0c1](#setup \"Permalink to this heading\")\n\nfrom llama\\_index.callbacks import CallbackManager, AimCallback\nfrom llama\\_index import SummaryIndex, ServiceContext, SimpleDirectoryReader\n\nLet\u2019s read the documents using `SimpleDirectoryReader` from \u2018examples/data/paul\\_graham\u2019.\n\ndocs \\= SimpleDirectoryReader(\"../../data/paul\\_graham\").load\\_data()\n\nNow lets initialize an AimCallback instance, and add it to the list of callback managers.\n\naim\\_callback \\= AimCallback(repo\\=\"./\")\ncallback\\_manager \\= CallbackManager(\\[aim\\_callback\\])\n\nIn this snippet, we initialize a service context by providing the callback manager. Next, we create an instance of `SummaryIndex` class, by passing in the document reader and the service context. After which we create a query engine which we will use to run queries on the index and retrieve relevant results.\n\nservice\\_context \\= ServiceContext.from\\_defaults(\n    callback\\_manager\\=callback\\_manager\n)\nindex \\= SummaryIndex.from\\_documents(docs, service\\_context\\=service\\_context)\nquery\\_engine \\= index.as\\_query\\_engine()\n\nFinally let\u2019s ask a question to the LM based on our provided document\n\nresponse \\= query\\_engine.query(\"What did the author do growing up?\")\n\nThe callback manager will log the `CBEventType.LLM` type of events as an Aim.Text, and we can explore the LM given prompt and the output in the Text Explorer. By first doing `aim up` and navigating by the given url."
}