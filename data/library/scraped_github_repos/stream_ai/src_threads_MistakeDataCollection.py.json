{
    "metadata": {
        "type": "repo",
        "path": "src/threads/MistakeDataCollection.py"
    },
    "text": "import queue\nimport src.helpers.helper_functions as helpers\nimport src.variables.global_vars as GV\nimport time\nimport src.helpers.drawing_functions as d\n'''\n    This class receives frames and their corresponding classes as \n    the system is running.\n    \n    The problem we are trying to address here is as follows:\n    \n        The MobileNet model has more than optimal capacity with the given dataset.\n        However we need to use MobileNet because we don't have enough data to train a model from scratch. \n        We need to use transfer learning.\n        \n        Thus, we simply have no choice now but to collect a more diverse and representative dataset.\n        \n        The goal here is to see where the model makes mistakes in the system, and add those frames to the dataset.\n'''\n\nclass MistakeDataCollection:\n    def __init__(self):\n        self.data_queue = GV.data_queue\n    \n    def data_stream(self):\n        while not GV.tracking: # Wait for tracking to start\n            time.sleep(1)\n        while True:\n            try:\n                img, preprocessed_img, extrusion_class, frame_index = self.data_queue.get()\n                self.process_data(img, preprocessed_img, extrusion_class, frame_index)\n            except queue.Empty:\n                helpers.print_text('Data is not streaming in', 'red')\n                break\n    \n    def process_data(self, img, preprocessed_img, extrusion_class, frame_index):\n                \n        # helpers.save_image(preprocessed_img, f'test_data/preprocessing/gmms/frame_{frame_index}.jpg')\n        # helpers.save_image(img, f'test_data/preprocessing/original/frame_{frame_index}.jpg')\n\n        # d.write_text_on_image(preprocessed_img, 'test', position=(5, 5), thickness=2, font_scale=0.2)\n        # d.write_text_on_image(preprocessed_img, f'{frame_index}', position=(5, 5), thickness=2, font_scale=0.2)\n        # d.write_text_on_image(img, f'{frame_index}', position=(5, 5), thickness=2, font_scale=0.2)\n        # d.write_text_on_image(img, f'{extrusion_class}', position=(5, 30), thickness=2, font_scale=0.2)\n\n        # helpers.save_image(preprocessed_img, 'g.jpg')\n        # helpers.save_image(img, 'kk.jpg')\n        \n        pass"
}