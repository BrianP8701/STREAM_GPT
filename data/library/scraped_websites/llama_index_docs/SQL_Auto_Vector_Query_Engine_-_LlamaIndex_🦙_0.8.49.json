{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/query_engine/SQLAutoVectorQueryEngine.html",
        "title": "SQL Auto Vector Query Engine - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\nIn this tutorial, we show you how to use our SQLAutoVectorQueryEngine.\n\nThis query engine allows you to combine insights from your structured tables with your unstructured data. It first decides whether to query your structured tables for insights. Once it does, it can then infer a corresponding query to the vector store in order to fetch corresponding documents.\n\nimport openai\nimport os\n\nos.environ\\[\"OPENAI\\_API\\_KEY\"\\] \\= \"\\[You API key\\]\"\nopenai.api\\_key \\= os.environ\\[\"OPENAI\\_API\\_KEY\"\\]\n\n## Setup[\uf0c1](#setup \"Permalink to this heading\")\n\n\\# NOTE: This is ONLY necessary in jupyter notebook.\n\\# Details: Jupyter runs an event-loop behind the scenes.\n\\#          This results in nested event-loops when we start an event-loop to make async queries.\n\\#          This is normally not allowed, we use nest\\_asyncio to allow it for convenience.\nimport nest\\_asyncio\n\nnest\\_asyncio.apply()\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    StorageContext,\n    SQLDatabase,\n    WikipediaReader,\n)\n\nINFO:numexpr.utils:Note: NumExpr detected 12 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nNote: NumExpr detected 12 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nINFO:numexpr.utils:NumExpr defaulting to 8 threads.\nNumExpr defaulting to 8 threads.\n\n## Create Common Objects[\uf0c1](#create-common-objects \"Permalink to this heading\")\n\nThis includes a `ServiceContext` object containing abstractions such as the LLM and chunk size. This also includes a `StorageContext` object containing our vector store abstractions.\n\n\\# define pinecone index\nimport pinecone\nimport os\n\napi\\_key \\= os.environ\\[\"PINECONE\\_API\\_KEY\"\\]\npinecone.init(api\\_key\\=api\\_key, environment\\=\"us-west1-gcp-free\")\n\n\\# dimensions are for text-embedding-ada-002\n\\# pinecone.create\\_index(\"quickstart\", dimension=1536, metric=\"euclidean\", pod\\_type=\"p1\")\npinecone\\_index \\= pinecone.Index(\"quickstart\")\n\n/Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages/pinecone/index.py:4: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user\\_install.html\n  from tqdm.autonotebook import tqdm\n\n\\# OPTIONAL: delete all\npinecone\\_index.delete(deleteAll\\=True)\n\nfrom llama\\_index.node\\_parser.simple import SimpleNodeParser\nfrom llama\\_index import ServiceContext, LLMPredictor\nfrom llama\\_index.storage import StorageContext\nfrom llama\\_index.vector\\_stores import PineconeVectorStore\nfrom llama\\_index.text\\_splitter import TokenTextSplitter\nfrom llama\\_index.llms import OpenAI\n\n\\# define node parser and LLM\nchunk\\_size \\= 1024\nllm \\= OpenAI(temperature\\=0, model\\=\"gpt-4\", streaming\\=True)\nservice\\_context \\= ServiceContext.from\\_defaults(chunk\\_size\\=chunk\\_size, llm\\=llm)\ntext\\_splitter \\= TokenTextSplitter(chunk\\_size\\=chunk\\_size)\nnode\\_parser \\= SimpleNodeParser.from\\_defaults(text\\_splitter\\=text\\_splitter)\n\n\\# define pinecone vector index\nvector\\_store \\= PineconeVectorStore(\n    pinecone\\_index\\=pinecone\\_index, namespace\\=\"wiki\\_cities\"\n)\nstorage\\_context \\= StorageContext.from\\_defaults(vector\\_store\\=vector\\_store)\nvector\\_index \\= VectorStoreIndex(\\[\\], storage\\_context\\=storage\\_context)\n\n## Create Database Schema + Test Data[\uf0c1](#create-database-schema-test-data \"Permalink to this heading\")\n\nHere we introduce a toy scenario where there are 100 tables (too big to fit into the prompt)\n\nfrom sqlalchemy import (\n    create\\_engine,\n    MetaData,\n    Table,\n    Column,\n    String,\n    Integer,\n    select,\n    column,\n)\n\nengine \\= create\\_engine(\"sqlite:///:memory:\", future\\=True)\nmetadata\\_obj \\= MetaData()\n\n\\# create city SQL table\ntable\\_name \\= \"city\\_stats\"\ncity\\_stats\\_table \\= Table(\n    table\\_name,\n    metadata\\_obj,\n    Column(\"city\\_name\", String(16), primary\\_key\\=True),\n    Column(\"population\", Integer),\n    Column(\"country\", String(16), nullable\\=False),\n)\n\nmetadata\\_obj.create\\_all(engine)\n\n\\# print tables\nmetadata\\_obj.tables.keys()\n\ndict\\_keys(\\['city\\_stats'\\])\n\nWe introduce some test data into the `city_stats` table\n\nfrom sqlalchemy import insert\n\nrows \\= \\[\n    {\"city\\_name\": \"Toronto\", \"population\": 2930000, \"country\": \"Canada\"},\n    {\"city\\_name\": \"Tokyo\", \"population\": 13960000, \"country\": \"Japan\"},\n    {\"city\\_name\": \"Berlin\", \"population\": 3645000, \"country\": \"Germany\"},\n\\]\nfor row in rows:\n    stmt \\= insert(city\\_stats\\_table).values(\\*\\*row)\n    with engine.begin() as connection:\n        cursor \\= connection.execute(stmt)\n\nwith engine.connect() as connection:\n    cursor \\= connection.exec\\_driver\\_sql(\"SELECT \\* FROM city\\_stats\")\n    print(cursor.fetchall())\n\n\\[('Toronto', 2930000, 'Canada'), ('Tokyo', 13960000, 'Japan'), ('Berlin', 3645000, 'Germany')\\]\n\n## Load Data[\uf0c1](#load-data \"Permalink to this heading\")\n\nWe first show how to convert a Document into a set of Nodes, and insert into a DocumentStore.\n\n\\# install wikipedia python package\n!pip install wikipedia\n\nRequirement already satisfied: wikipedia in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (1.4.0)\nRequirement already satisfied: beautifulsoup4 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from wikipedia) (4.12.2)\nRequirement already satisfied: requests<3.0.0,>=2.0.0 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from wikipedia) (2.31.0)\nRequirement already satisfied: idna<4,>=2.5 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.4)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.2.0)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2023.5.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (1.26.16)\nRequirement already satisfied: soupsieve>1.2 in /Users/loganmarkewich/llama\\_index/llama-index/lib/python3.9/site-packages (from beautifulsoup4->wikipedia) (2.4.1)\nWARNING: You are using pip version 21.2.4; however, version 23.2 is available.\nYou should consider upgrading via the '/Users/loganmarkewich/llama\\_index/llama-index/bin/python3 -m pip install --upgrade pip' command.\n\ncities \\= \\[\"Toronto\", \"Berlin\", \"Tokyo\"\\]\nwiki\\_docs \\= WikipediaReader().load\\_data(pages\\=cities)\n\n## Build SQL Index[\uf0c1](#build-sql-index \"Permalink to this heading\")\n\nsql\\_database \\= SQLDatabase(engine, include\\_tables\\=\\[\"city\\_stats\"\\])\n\nfrom llama\\_index.indices.struct\\_store.sql\\_query import NLSQLTableQueryEngine\n\nsql\\_query\\_engine \\= NLSQLTableQueryEngine(\n    sql\\_database\\=sql\\_database,\n    tables\\=\\[\"city\\_stats\"\\],\n)\n\n## Build Vector Index[\uf0c1](#build-vector-index \"Permalink to this heading\")\n\n\\# Insert documents into vector index\n\\# Each document has metadata of the city attached\nfor city, wiki\\_doc in zip(cities, wiki\\_docs):\n    nodes \\= node\\_parser.get\\_nodes\\_from\\_documents(\\[wiki\\_doc\\])\n    \\# add metadata to each node\n    for node in nodes:\n        node.metadata \\= {\"title\": city}\n    vector\\_index.insert\\_nodes(nodes)\n\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 \\[00:00<00:00, 22.37it/s\\]\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 \\[00:00<00:00, 23.14it/s\\]\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 \\[00:00<00:00, 17.67it/s\\]\n\n## Define SQLAutoVectorQueryEngine[\uf0c1](#define-sqlautovectorqueryengine \"Permalink to this heading\")\n\nquery\\_engine \\= SQLAutoVectorQueryEngine(\n    sql\\_tool, vector\\_tool, service\\_context\\=service\\_context\n)\n\nresponse \\= query\\_engine.query(\n    \"Tell me about the arts and culture of the city with the highest\"\n    \" population\"\n)\n\nQuerying SQL database: Useful for translating a natural language query into a SQL query over a table containing city\\_stats, containing the population/country of each city\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> Querying SQL database: Useful for translating a natural language query into a SQL query over a table containing city\\_stats, containing the population/country of each city\n> Querying SQL database: Useful for translating a natural language query into a SQL query over a table containing city\\_stats, containing the population/country of each city\nINFO:llama\\_index.indices.struct\\_store.sql\\_query:> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\n> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\nSQL query: SELECT city\\_name, population FROM city\\_stats ORDER BY population DESC LIMIT 1;\nSQL response: \nTokyo is the city with the highest population, with 13.96 million people. It is a vibrant city with a rich culture and a wide variety of art forms. From traditional Japanese art such as calligraphy and woodblock prints to modern art galleries and museums, Tokyo has something for everyone. There are also many festivals and events throughout the year that celebrate the city's culture and art.\nTransformed query given SQL response: What are some specific cultural festivals, events, and notable art galleries or museums in Tokyo?\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> Transformed query given SQL response: What are some specific cultural festivals, events, and notable art galleries or museums in Tokyo?\n> Transformed query given SQL response: What are some specific cultural festivals, events, and notable art galleries or museums in Tokyo?\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using query str: cultural festivals events art galleries museums Tokyo\nUsing query str: cultural festivals events art galleries museums Tokyo\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using filters: {'title': 'Tokyo'}\nUsing filters: {'title': 'Tokyo'}\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using top\\_k: 2\nUsing top\\_k: 2\nquery engine response: The context information mentions the Tokyo National Museum, which houses 37% of the country's artwork national treasures. It also mentions the Studio Ghibli anime center as a subcultural attraction. However, the text does not provide information on specific cultural festivals or events in Tokyo.\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> query engine response: The context information mentions the Tokyo National Museum, which houses 37% of the country's artwork national treasures. It also mentions the Studio Ghibli anime center as a subcultural attraction. However, the text does not provide information on specific cultural festivals or events in Tokyo.\n> query engine response: The context information mentions the Tokyo National Museum, which houses 37% of the country's artwork national treasures. It also mentions the Studio Ghibli anime center as a subcultural attraction. However, the text does not provide information on specific cultural festivals or events in Tokyo.\nFinal response: Tokyo, the city with the highest population of 13.96 million people, is known for its vibrant culture and diverse art forms. It is home to traditional Japanese art such as calligraphy and woodblock prints, as well as modern art galleries and museums. Notably, the Tokyo National Museum houses 37% of the country's artwork national treasures, and the Studio Ghibli anime center is a popular subcultural attraction. While there are many festivals and events throughout the year that celebrate the city's culture and art, specific examples were not provided in the available information.\n\nTokyo, the city with the highest population of 13.96 million people, is known for its vibrant culture and diverse art forms. It is home to traditional Japanese art such as calligraphy and woodblock prints, as well as modern art galleries and museums. Notably, the Tokyo National Museum houses 37% of the country's artwork national treasures, and the Studio Ghibli anime center is a popular subcultural attraction. While there are many festivals and events throughout the year that celebrate the city's culture and art, specific examples were not provided in the available information.\n\nresponse \\= query\\_engine.query(\"Tell me about the history of Berlin\")\n\nQuerying other query engine: Useful for answering semantic questions about different cities\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> Querying other query engine: Useful for answering semantic questions about different cities\n> Querying other query engine: Useful for answering semantic questions about different cities\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using query str: history of Berlin\nUsing query str: history of Berlin\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using filters: {'title': 'Berlin'}\nUsing filters: {'title': 'Berlin'}\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using top\\_k: 2\nUsing top\\_k: 2\nQuery Engine response: Berlin's history dates back to around 60,000 BC, with the earliest human traces found in the area. A Mesolithic deer antler mask found in Biesdorf (Berlin) was dated around 9000 BC. During Neolithic times, a large number of communities existed in the area and in the Bronze Age, up to 1000 people lived in 50 villages. Early Germanic tribes took settlement from 500 BC and Slavic settlements and castles began around 750 AD.\n\nThe earliest evidence of middle age settlements in the area of today's Berlin are remnants of a house foundation dated to 1174, found in excavations in Berlin Mitte, and a wooden beam dated from approximately 1192. The first written records of towns in the area of present-day Berlin date from the late 12th century. Spandau is first mentioned in 1197 and K\u00f6penick in 1209, although these areas did not join Berlin until 1920. \n\nThe central part of Berlin can be traced back to two towns. C\u00f6lln on the Fischerinsel is first mentioned in a 1237 document, and Berlin, across the Spree in what is now called the Nikolaiviertel, is referenced in a document from 1244. 1237 is considered the founding date of the city. The two towns over time formed close economic and social ties, and profited from the staple right on the two important trade routes Via Imperii and from Bruges to Novgorod. In 1307, they formed an alliance with a common external policy, their internal administrations still being separated. In 1415, Frederick I became the elector of the Margraviate of Brandenburg, which he ruled until 1440.\n\nThe name Berlin has its roots in the language of West Slavic inhabitants of the area of today's Berlin, and may be related to the Old Polabian stem berl-/birl- (\"swamp\"). or Proto-Slavic b\u044crlog\u044a, (lair, den). Since the Ber- at the beginning sounds like the German word B\u00e4r (\"bear\"), a bear appears in the coat of arms of the city. It is therefore an example of canting arms.\n\nBerlin's history dates back to around 60,000 BC, with the earliest human traces found in the area. A Mesolithic deer antler mask found in Biesdorf (Berlin) was dated around 9000 BC. During Neolithic times, a large number of communities existed in the area and in the Bronze Age, up to 1000 people lived in 50 villages. Early Germanic tribes took settlement from 500 BC and Slavic settlements and castles began around 750 AD.\n\nThe earliest evidence of middle age settlements in the area of today's Berlin are remnants of a house foundation dated to 1174, found in excavations in Berlin Mitte, and a wooden beam dated from approximately 1192. The first written records of towns in the area of present-day Berlin date from the late 12th century. Spandau is first mentioned in 1197 and K\u00f6penick in 1209, although these areas did not join Berlin until 1920. \n\nThe central part of Berlin can be traced back to two towns. C\u00f6lln on the Fischerinsel is first mentioned in a 1237 document, and Berlin, across the Spree in what is now called the Nikolaiviertel, is referenced in a document from 1244. 1237 is considered the founding date of the city. The two towns over time formed close economic and social ties, and profited from the staple right on the two important trade routes Via Imperii and from Bruges to Novgorod. In 1307, they formed an alliance with a common external policy, their internal administrations still being separated. In 1415, Frederick I became the elector of the Margraviate of Brandenburg, which he ruled until 1440.\n\nThe name Berlin has its roots in the language of West Slavic inhabitants of the area of today's Berlin, and may be related to the Old Polabian stem berl-/birl- (\"swamp\"). or Proto-Slavic b\u044crlog\u044a, (lair, den). Since the Ber- at the beginning sounds like the German word B\u00e4r (\"bear\"), a bear appears in the coat of arms of the city. It is therefore an example of canting arms.\n\nresponse \\= query\\_engine.query(\n    \"Can you give me the country corresponding to each city?\"\n)\n\nQuerying SQL database: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> Querying SQL database: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city\n> Querying SQL database: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city\nINFO:llama\\_index.indices.struct\\_store.sql\\_query:> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\n> Table desc str: Table 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\nSQL query: SELECT city\\_name, country FROM city\\_stats;\nSQL response:  Toronto is in Canada, Tokyo is in Japan, and Berlin is in Germany.\nTransformed query given SQL response: What countries are New York, San Francisco, and other cities in?\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> Transformed query given SQL response: What countries are New York, San Francisco, and other cities in?\n> Transformed query given SQL response: What countries are New York, San Francisco, and other cities in?\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using query str: New York San Francisco\nUsing query str: New York San Francisco\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using filters: {'title': 'San Francisco'}\nUsing filters: {'title': 'San Francisco'}\nINFO:llama\\_index.indices.vector\\_store.retrievers.auto\\_retriever.auto\\_retriever:Using top\\_k: 2\nUsing top\\_k: 2\nquery engine response: None\nINFO:llama\\_index.query\\_engine.sql\\_join\\_query\\_engine:> query engine response: None\n> query engine response: None\nFinal response: The country corresponding to each city is as follows: Toronto is in Canada, Tokyo is in Japan, and Berlin is in Germany. Unfortunately, I do not have information on the countries for New York, San Francisco, and other cities.\n\nThe country corresponding to each city is as follows: Toronto is in Canada, Tokyo is in Japan, and Berlin is in Germany. Unfortunately, I do not have information on the countries for New York, San Francisco, and other cities."
}