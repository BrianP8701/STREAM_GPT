{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/api_reference/query/chat_engines.html",
        "title": "Chat Engines - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "Chat engine is a high-level interface for having a conversation with your data (multiple back-and-forth instead of a single question & answer).\n\n## Chat Engine Implementations[\uf0c1](#chat-engine-implementations \"Permalink to this heading\")\n\nBelow we show specific chat engine implementations.\n\n## Chat Engine Types[\uf0c1](#module-llama_index.chat_engine.types \"Permalink to this heading\")\n\n_class_ llama\\_index.chat\\_engine.types.AgentChatResponse(_response: str \\= ''_, _sources: ~typing.List\\[~llama\\_index.tools.types.ToolOutput\\] \\= <factory>_, _source\\_nodes: ~typing.List\\[~llama\\_index.schema.NodeWithScore\\] \\= <factory>_)[\uf0c1](#llama_index.chat_engine.types.AgentChatResponse \"Permalink to this definition\")\n\nAgent chat response.\n\n_class_ llama\\_index.chat\\_engine.types.BaseChatEngine[\uf0c1](#llama_index.chat_engine.types.BaseChatEngine \"Permalink to this definition\")\n\nBase Chat Engine.\n\n_abstract async_ achat(_message: str_, _chat\\_history: Optional\\[List\\[[ChatMessage](https://docs.llamaindex.ai/en/stable/api_reference/llms.html#llama_index.llms.base.ChatMessage \"llama_index.llms.base.ChatMessage\")\\]\\] \\= None_) \u2192 Union\\[[AgentChatResponse](#llama_index.chat_engine.types.AgentChatResponse \"llama_index.chat_engine.types.AgentChatResponse\"), [StreamingAgentChatResponse](#llama_index.chat_engine.types.StreamingAgentChatResponse \"llama_index.chat_engine.types.StreamingAgentChatResponse\")\\][\uf0c1](#llama_index.chat_engine.types.BaseChatEngine.achat \"Permalink to this definition\")\n\nAsync version of main chat interface.\n\n_abstract async_ astream\\_chat(_message: str_, _chat\\_history: Optional\\[List\\[[ChatMessage](https://docs.llamaindex.ai/en/stable/api_reference/llms.html#llama_index.llms.base.ChatMessage \"llama_index.llms.base.ChatMessage\")\\]\\] \\= None_) \u2192 [StreamingAgentChatResponse](#llama_index.chat_engine.types.StreamingAgentChatResponse \"llama_index.chat_engine.types.StreamingAgentChatResponse\")[\uf0c1](#llama_index.chat_engine.types.BaseChatEngine.astream_chat \"Permalink to this definition\")\n\nAsync version of main chat interface.\n\n_abstract_ chat(_message: str_, _chat\\_history: Optional\\[List\\[[ChatMessage](https://docs.llamaindex.ai/en/stable/api_reference/llms.html#llama_index.llms.base.ChatMessage \"llama_index.llms.base.ChatMessage\")\\]\\] \\= None_) \u2192 Union\\[[AgentChatResponse](#llama_index.chat_engine.types.AgentChatResponse \"llama_index.chat_engine.types.AgentChatResponse\"), [StreamingAgentChatResponse](#llama_index.chat_engine.types.StreamingAgentChatResponse \"llama_index.chat_engine.types.StreamingAgentChatResponse\")\\][\uf0c1](#llama_index.chat_engine.types.BaseChatEngine.chat \"Permalink to this definition\")\n\nMain chat interface.\n\nchat\\_repl() \u2192 None[\uf0c1](#llama_index.chat_engine.types.BaseChatEngine.chat_repl \"Permalink to this definition\")\n\nEnter interactive chat REPL.\n\n_abstract_ reset() \u2192 None[\uf0c1](#llama_index.chat_engine.types.BaseChatEngine.reset \"Permalink to this definition\")\n\nReset conversation state.\n\n_abstract_ stream\\_chat(_message: str_, _chat\\_history: Optional\\[List\\[[ChatMessage](https://docs.llamaindex.ai/en/stable/api_reference/llms.html#llama_index.llms.base.ChatMessage \"llama_index.llms.base.ChatMessage\")\\]\\] \\= None_) \u2192 [StreamingAgentChatResponse](#llama_index.chat_engine.types.StreamingAgentChatResponse \"llama_index.chat_engine.types.StreamingAgentChatResponse\")[\uf0c1](#llama_index.chat_engine.types.BaseChatEngine.stream_chat \"Permalink to this definition\")\n\nStream chat interface.\n\n_class_ llama\\_index.chat\\_engine.types.ChatMode(_value_, _names\\=None_, _\\*_, _module\\=None_, _qualname\\=None_, _type\\=None_, _start\\=1_, _boundary\\=None_)[\uf0c1](#llama_index.chat_engine.types.ChatMode \"Permalink to this definition\")\n\nChat Engine Modes.\n\nBEST _\\= 'best'_[\uf0c1](#llama_index.chat_engine.types.ChatMode.BEST \"Permalink to this definition\")\n\nSelect the best chat engine based on the current LLM.\n\nCorresponds to OpenAIAgent if using an OpenAI model that supports function calling API, otherwise, corresponds to ReActAgent.\n\nCONDENSE\\_QUESTION _\\= 'condense\\_question'_[\uf0c1](#llama_index.chat_engine.types.ChatMode.CONDENSE_QUESTION \"Permalink to this definition\")\n\nCorresponds to CondenseQuestionChatEngine.\n\nFirst generate a standalone question from conversation context and last message, then query the query engine for a response.\n\nCONTEXT _\\= 'context'_[\uf0c1](#llama_index.chat_engine.types.ChatMode.CONTEXT \"Permalink to this definition\")\n\nCorresponds to ContextChatEngine.\n\nFirst retrieve text from the index using the user\u2019s message, then use the context in the system prompt to generate a response.\n\nOPENAI _\\= 'openai'_[\uf0c1](#llama_index.chat_engine.types.ChatMode.OPENAI \"Permalink to this definition\")\n\nCorresponds to OpenAIAgent.\n\nUse an OpenAI function calling agent loop.\n\nNOTE: only works with OpenAI models that support function calling API.\n\nREACT _\\= 'react'_[\uf0c1](#llama_index.chat_engine.types.ChatMode.REACT \"Permalink to this definition\")\n\nCorresponds to ReActAgent.\n\nUse a ReAct agent loop with query engine tools.\n\nSIMPLE _\\= 'simple'_[\uf0c1](#llama_index.chat_engine.types.ChatMode.SIMPLE \"Permalink to this definition\")\n\nCorresponds to SimpleChatEngine.\n\nChat with LLM, without making use of a knowledge base.\n\ncapitalize()[\uf0c1](#llama_index.chat_engine.types.ChatMode.capitalize \"Permalink to this definition\")\n\nReturn a capitalized version of the string.\n\nMore specifically, make the first character have upper case and the rest lower case.\n\ncasefold()[\uf0c1](#llama_index.chat_engine.types.ChatMode.casefold \"Permalink to this definition\")\n\nReturn a version of the string suitable for caseless comparisons.\n\ncenter(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.center \"Permalink to this definition\")\n\nReturn a centered string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\ncount(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatMode.count \"Permalink to this definition\")\n\nReturn the number of non-overlapping occurrences of substring sub in string S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nencode(_encoding\\='utf-8'_, _errors\\='strict'_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.encode \"Permalink to this definition\")\n\nEncode the string using the codec registered for encoding.\n\nencoding\n\nThe encoding in which to encode the string.\n\nerrors\n\nThe error handling scheme to use for encoding errors. The default is \u2018strict\u2019 meaning that encoding errors raise a UnicodeEncodeError. Other possible values are \u2018ignore\u2019, \u2018replace\u2019 and \u2018xmlcharrefreplace\u2019 as well as any other name registered with codecs.register\\_error that can handle UnicodeEncodeErrors.\n\nendswith(_suffix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.chat_engine.types.ChatMode.endswith \"Permalink to this definition\")\n\nReturn True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.\n\nexpandtabs(_tabsize\\=8_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.expandtabs \"Permalink to this definition\")\n\nReturn a copy where all tab characters are expanded using spaces.\n\nIf tabsize is not given, a tab size of 8 characters is assumed.\n\nfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatMode.find \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nformat(_\\*args_, _\\*\\*kwargs_) \u2192 str[\uf0c1](#llama_index.chat_engine.types.ChatMode.format \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nformat\\_map(_mapping_) \u2192 str[\uf0c1](#llama_index.chat_engine.types.ChatMode.format_map \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from mapping. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatMode.index \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nisalnum()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isalnum \"Permalink to this definition\")\n\nReturn True if the string is an alpha-numeric string, False otherwise.\n\nA string is alpha-numeric if all characters in the string are alpha-numeric and there is at least one character in the string.\n\nisalpha()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isalpha \"Permalink to this definition\")\n\nReturn True if the string is an alphabetic string, False otherwise.\n\nA string is alphabetic if all characters in the string are alphabetic and there is at least one character in the string.\n\nisascii()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isascii \"Permalink to this definition\")\n\nReturn True if all characters in the string are ASCII, False otherwise.\n\nASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.\n\nisdecimal()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isdecimal \"Permalink to this definition\")\n\nReturn True if the string is a decimal string, False otherwise.\n\nA string is a decimal string if all characters in the string are decimal and there is at least one character in the string.\n\nisdigit()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isdigit \"Permalink to this definition\")\n\nReturn True if the string is a digit string, False otherwise.\n\nA string is a digit string if all characters in the string are digits and there is at least one character in the string.\n\nisidentifier()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isidentifier \"Permalink to this definition\")\n\nReturn True if the string is a valid Python identifier, False otherwise.\n\nCall keyword.iskeyword(s) to test whether string s is a reserved identifier, such as \u201cdef\u201d or \u201cclass\u201d.\n\nislower()[\uf0c1](#llama_index.chat_engine.types.ChatMode.islower \"Permalink to this definition\")\n\nReturn True if the string is a lowercase string, False otherwise.\n\nA string is lowercase if all cased characters in the string are lowercase and there is at least one cased character in the string.\n\nisnumeric()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isnumeric \"Permalink to this definition\")\n\nReturn True if the string is a numeric string, False otherwise.\n\nA string is numeric if all characters in the string are numeric and there is at least one character in the string.\n\nisprintable()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isprintable \"Permalink to this definition\")\n\nReturn True if the string is printable, False otherwise.\n\nA string is printable if all of its characters are considered printable in repr() or if it is empty.\n\nisspace()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isspace \"Permalink to this definition\")\n\nReturn True if the string is a whitespace string, False otherwise.\n\nA string is whitespace if all characters in the string are whitespace and there is at least one character in the string.\n\nistitle()[\uf0c1](#llama_index.chat_engine.types.ChatMode.istitle \"Permalink to this definition\")\n\nReturn True if the string is a title-cased string, False otherwise.\n\nIn a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones.\n\nisupper()[\uf0c1](#llama_index.chat_engine.types.ChatMode.isupper \"Permalink to this definition\")\n\nReturn True if the string is an uppercase string, False otherwise.\n\nA string is uppercase if all cased characters in the string are uppercase and there is at least one cased character in the string.\n\njoin(_iterable_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.join \"Permalink to this definition\")\n\nConcatenate any number of strings.\n\nThe string whose method is called is inserted in between each given string. The result is returned as a new string.\n\nExample: \u2018.\u2019.join(\\[\u2018ab\u2019, \u2018pq\u2019, \u2018rs\u2019\\]) -> \u2018ab.pq.rs\u2019\n\nljust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.ljust \"Permalink to this definition\")\n\nReturn a left-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nlower()[\uf0c1](#llama_index.chat_engine.types.ChatMode.lower \"Permalink to this definition\")\n\nReturn a copy of the string converted to lowercase.\n\nlstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.lstrip \"Permalink to this definition\")\n\nReturn a copy of the string with leading whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\n_static_ maketrans()[\uf0c1](#llama_index.chat_engine.types.ChatMode.maketrans \"Permalink to this definition\")\n\nReturn a translation table usable for str.translate().\n\nIf there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.\n\npartition(_sep_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.partition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing the original string and two empty strings.\n\nremoveprefix(_prefix_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.removeprefix \"Permalink to this definition\")\n\nReturn a str with the given prefix string removed if present.\n\nIf the string starts with the prefix string, return string\\[len(prefix):\\]. Otherwise, return a copy of the original string.\n\nremovesuffix(_suffix_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.removesuffix \"Permalink to this definition\")\n\nReturn a str with the given suffix string removed if present.\n\nIf the string ends with the suffix string and that suffix is not empty, return string\\[:-len(suffix)\\]. Otherwise, return a copy of the original string.\n\nreplace(_old_, _new_, _count\\=\\-1_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.replace \"Permalink to this definition\")\n\nReturn a copy with all occurrences of substring old replaced by new.\n\n> count\n> \n> Maximum number of occurrences to replace. -1 (the default value) means replace all occurrences.\n\nIf the optional argument count is given, only the first count occurrences are replaced.\n\nrfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatMode.rfind \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nrindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatMode.rindex \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nrjust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.rjust \"Permalink to this definition\")\n\nReturn a right-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nrpartition(_sep_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.rpartition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string, starting at the end. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing two empty strings and the original string.\n\nrsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.rsplit \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nSplitting starts at the end of the string and works to the front.\n\nrstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.rstrip \"Permalink to this definition\")\n\nReturn a copy of the string with trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.split \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nNote, str.split() is mainly useful for data that has been intentionally delimited. With natural text that includes punctuation, consider using the regular expression module.\n\nsplitlines(_keepends\\=False_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.splitlines \"Permalink to this definition\")\n\nReturn a list of the lines in the string, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and true.\n\nstartswith(_prefix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.chat_engine.types.ChatMode.startswith \"Permalink to this definition\")\n\nReturn True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try.\n\nstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.strip \"Permalink to this definition\")\n\nReturn a copy of the string with leading and trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nswapcase()[\uf0c1](#llama_index.chat_engine.types.ChatMode.swapcase \"Permalink to this definition\")\n\nConvert uppercase characters to lowercase and lowercase characters to uppercase.\n\ntitle()[\uf0c1](#llama_index.chat_engine.types.ChatMode.title \"Permalink to this definition\")\n\nReturn a version of the string where each word is titlecased.\n\nMore specifically, words start with uppercased characters and all remaining cased characters have lower case.\n\ntranslate(_table_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.translate \"Permalink to this definition\")\n\nReplace each character in the string using the given translation table.\n\n> table\n> \n> Translation table, which must be a mapping of Unicode ordinals to Unicode ordinals, strings, or None.\n\nThe table must implement lookup/indexing via \\_\\_getitem\\_\\_, for instance a dictionary or list. If this operation raises LookupError, the character is left untouched. Characters mapped to None are deleted.\n\nupper()[\uf0c1](#llama_index.chat_engine.types.ChatMode.upper \"Permalink to this definition\")\n\nReturn a copy of the string converted to uppercase.\n\nzfill(_width_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatMode.zfill \"Permalink to this definition\")\n\nPad a numeric string with zeros on the left, to fill a field of the given width.\n\nThe string is never truncated.\n\n_class_ llama\\_index.chat\\_engine.types.ChatResponseMode(_value_, _names\\=None_, _\\*_, _module\\=None_, _qualname\\=None_, _type\\=None_, _start\\=1_, _boundary\\=None_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode \"Permalink to this definition\")\n\nFlag toggling waiting/streaming in Agent.\\_chat.\n\ncapitalize()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.capitalize \"Permalink to this definition\")\n\nReturn a capitalized version of the string.\n\nMore specifically, make the first character have upper case and the rest lower case.\n\ncasefold()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.casefold \"Permalink to this definition\")\n\nReturn a version of the string suitable for caseless comparisons.\n\ncenter(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.center \"Permalink to this definition\")\n\nReturn a centered string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\ncount(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.count \"Permalink to this definition\")\n\nReturn the number of non-overlapping occurrences of substring sub in string S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nencode(_encoding\\='utf-8'_, _errors\\='strict'_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.encode \"Permalink to this definition\")\n\nEncode the string using the codec registered for encoding.\n\nencoding\n\nThe encoding in which to encode the string.\n\nerrors\n\nThe error handling scheme to use for encoding errors. The default is \u2018strict\u2019 meaning that encoding errors raise a UnicodeEncodeError. Other possible values are \u2018ignore\u2019, \u2018replace\u2019 and \u2018xmlcharrefreplace\u2019 as well as any other name registered with codecs.register\\_error that can handle UnicodeEncodeErrors.\n\nendswith(_suffix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.endswith \"Permalink to this definition\")\n\nReturn True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.\n\nexpandtabs(_tabsize\\=8_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.expandtabs \"Permalink to this definition\")\n\nReturn a copy where all tab characters are expanded using spaces.\n\nIf tabsize is not given, a tab size of 8 characters is assumed.\n\nfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.find \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nformat(_\\*args_, _\\*\\*kwargs_) \u2192 str[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.format \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from args and kwargs. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nformat\\_map(_mapping_) \u2192 str[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.format_map \"Permalink to this definition\")\n\nReturn a formatted version of S, using substitutions from mapping. The substitutions are identified by braces (\u2018{\u2018 and \u2018}\u2019).\n\nindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.index \"Permalink to this definition\")\n\nReturn the lowest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nisalnum()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isalnum \"Permalink to this definition\")\n\nReturn True if the string is an alpha-numeric string, False otherwise.\n\nA string is alpha-numeric if all characters in the string are alpha-numeric and there is at least one character in the string.\n\nisalpha()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isalpha \"Permalink to this definition\")\n\nReturn True if the string is an alphabetic string, False otherwise.\n\nA string is alphabetic if all characters in the string are alphabetic and there is at least one character in the string.\n\nisascii()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isascii \"Permalink to this definition\")\n\nReturn True if all characters in the string are ASCII, False otherwise.\n\nASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.\n\nisdecimal()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isdecimal \"Permalink to this definition\")\n\nReturn True if the string is a decimal string, False otherwise.\n\nA string is a decimal string if all characters in the string are decimal and there is at least one character in the string.\n\nisdigit()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isdigit \"Permalink to this definition\")\n\nReturn True if the string is a digit string, False otherwise.\n\nA string is a digit string if all characters in the string are digits and there is at least one character in the string.\n\nisidentifier()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isidentifier \"Permalink to this definition\")\n\nReturn True if the string is a valid Python identifier, False otherwise.\n\nCall keyword.iskeyword(s) to test whether string s is a reserved identifier, such as \u201cdef\u201d or \u201cclass\u201d.\n\nislower()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.islower \"Permalink to this definition\")\n\nReturn True if the string is a lowercase string, False otherwise.\n\nA string is lowercase if all cased characters in the string are lowercase and there is at least one cased character in the string.\n\nisnumeric()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isnumeric \"Permalink to this definition\")\n\nReturn True if the string is a numeric string, False otherwise.\n\nA string is numeric if all characters in the string are numeric and there is at least one character in the string.\n\nisprintable()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isprintable \"Permalink to this definition\")\n\nReturn True if the string is printable, False otherwise.\n\nA string is printable if all of its characters are considered printable in repr() or if it is empty.\n\nisspace()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isspace \"Permalink to this definition\")\n\nReturn True if the string is a whitespace string, False otherwise.\n\nA string is whitespace if all characters in the string are whitespace and there is at least one character in the string.\n\nistitle()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.istitle \"Permalink to this definition\")\n\nReturn True if the string is a title-cased string, False otherwise.\n\nIn a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones.\n\nisupper()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.isupper \"Permalink to this definition\")\n\nReturn True if the string is an uppercase string, False otherwise.\n\nA string is uppercase if all cased characters in the string are uppercase and there is at least one cased character in the string.\n\njoin(_iterable_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.join \"Permalink to this definition\")\n\nConcatenate any number of strings.\n\nThe string whose method is called is inserted in between each given string. The result is returned as a new string.\n\nExample: \u2018.\u2019.join(\\[\u2018ab\u2019, \u2018pq\u2019, \u2018rs\u2019\\]) -> \u2018ab.pq.rs\u2019\n\nljust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.ljust \"Permalink to this definition\")\n\nReturn a left-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nlower()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.lower \"Permalink to this definition\")\n\nReturn a copy of the string converted to lowercase.\n\nlstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.lstrip \"Permalink to this definition\")\n\nReturn a copy of the string with leading whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\n_static_ maketrans()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.maketrans \"Permalink to this definition\")\n\nReturn a translation table usable for str.translate().\n\nIf there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.\n\npartition(_sep_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.partition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing the original string and two empty strings.\n\nremoveprefix(_prefix_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.removeprefix \"Permalink to this definition\")\n\nReturn a str with the given prefix string removed if present.\n\nIf the string starts with the prefix string, return string\\[len(prefix):\\]. Otherwise, return a copy of the original string.\n\nremovesuffix(_suffix_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.removesuffix \"Permalink to this definition\")\n\nReturn a str with the given suffix string removed if present.\n\nIf the string ends with the suffix string and that suffix is not empty, return string\\[:-len(suffix)\\]. Otherwise, return a copy of the original string.\n\nreplace(_old_, _new_, _count\\=\\-1_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.replace \"Permalink to this definition\")\n\nReturn a copy with all occurrences of substring old replaced by new.\n\n> count\n> \n> Maximum number of occurrences to replace. -1 (the default value) means replace all occurrences.\n\nIf the optional argument count is given, only the first count occurrences are replaced.\n\nrfind(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.rfind \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.\n\nrindex(_sub_\\[, _start_\\[, _end_\\]\\]) \u2192 int[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.rindex \"Permalink to this definition\")\n\nReturn the highest index in S where substring sub is found, such that sub is contained within S\\[start:end\\]. Optional arguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.\n\nrjust(_width_, _fillchar\\=' '_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.rjust \"Permalink to this definition\")\n\nReturn a right-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).\n\nrpartition(_sep_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.rpartition \"Permalink to this definition\")\n\nPartition the string into three parts using the given separator.\n\nThis will search for the separator in the string, starting at the end. If the separator is found, returns a 3-tuple containing the part before the separator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing two empty strings and the original string.\n\nrsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.rsplit \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nSplitting starts at the end of the string and works to the front.\n\nrstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.rstrip \"Permalink to this definition\")\n\nReturn a copy of the string with trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nsplit(_sep\\=None_, _maxsplit\\=\\-1_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.split \"Permalink to this definition\")\n\nReturn a list of the substrings in the string, using sep as the separator string.\n\n> sep\n> \n> The separator used to split the string.\n> \n> When set to None (the default value), will split on any whitespace character (including n r t f and spaces) and will discard empty strings from the result.\n> \n> maxsplit\n> \n> Maximum number of splits (starting from the left). -1 (the default value) means no limit.\n\nNote, str.split() is mainly useful for data that has been intentionally delimited. With natural text that includes punctuation, consider using the regular expression module.\n\nsplitlines(_keepends\\=False_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.splitlines \"Permalink to this definition\")\n\nReturn a list of the lines in the string, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and true.\n\nstartswith(_prefix_\\[, _start_\\[, _end_\\]\\]) \u2192 bool[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.startswith \"Permalink to this definition\")\n\nReturn True if S starts with the specified prefix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. prefix can also be a tuple of strings to try.\n\nstrip(_chars\\=None_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.strip \"Permalink to this definition\")\n\nReturn a copy of the string with leading and trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.\n\nswapcase()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.swapcase \"Permalink to this definition\")\n\nConvert uppercase characters to lowercase and lowercase characters to uppercase.\n\ntitle()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.title \"Permalink to this definition\")\n\nReturn a version of the string where each word is titlecased.\n\nMore specifically, words start with uppercased characters and all remaining cased characters have lower case.\n\ntranslate(_table_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.translate \"Permalink to this definition\")\n\nReplace each character in the string using the given translation table.\n\n> table\n> \n> Translation table, which must be a mapping of Unicode ordinals to Unicode ordinals, strings, or None.\n\nThe table must implement lookup/indexing via \\_\\_getitem\\_\\_, for instance a dictionary or list. If this operation raises LookupError, the character is left untouched. Characters mapped to None are deleted.\n\nupper()[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.upper \"Permalink to this definition\")\n\nReturn a copy of the string converted to uppercase.\n\nzfill(_width_, _/_)[\uf0c1](#llama_index.chat_engine.types.ChatResponseMode.zfill \"Permalink to this definition\")\n\nPad a numeric string with zeros on the left, to fill a field of the given width.\n\nThe string is never truncated.\n\n_class_ llama\\_index.chat\\_engine.types.StreamingAgentChatResponse(_response: str \\= ''_, _sources: ~typing.List\\[~llama\\_index.tools.types.ToolOutput\\] \\= <factory>_, _chat\\_stream: ~typing.Optional\\[~typing.Generator\\[~llama\\_index.llms.base.ChatResponse_, _None_, _None\\]\\] \\= None_, _achat\\_stream: ~typing.Optional\\[~typing.AsyncGenerator\\[~llama\\_index.llms.base.ChatResponse_, _None\\]\\] \\= None_, _source\\_nodes: ~typing.List\\[~llama\\_index.schema.NodeWithScore\\] \\= <factory>_, _\\_queue: ~queue.Queue \\= <factory>_, _\\_aqueue: ~asyncio.queues.Queue \\= <factory>_, _\\_is\\_function: ~typing.Optional\\[bool\\] \\= None_, _\\_new\\_item\\_event: ~asyncio.locks.Event \\= <factory>_, _\\_is\\_function\\_false\\_event: ~asyncio.locks.Event \\= <factory>_, _\\_is\\_function\\_not\\_none\\_thread\\_event: ~threading.Event \\= <factory>_)[\uf0c1](#llama_index.chat_engine.types.StreamingAgentChatResponse \"Permalink to this definition\")\n\nStreaming chat response to user and writing to chat history.\n\nllama\\_index.chat\\_engine.types.is\\_function(_message: [ChatMessage](https://docs.llamaindex.ai/en/stable/api_reference/llms.html#llama_index.llms.base.ChatMessage \"llama_index.llms.base.ChatMessage\")_) \u2192 bool[\uf0c1](#llama_index.chat_engine.types.is_function \"Permalink to this definition\")\n\nUtility for ChatMessage responses from OpenAI models."
}