["Deep Learning\n\nTan Goodfellow\nYoshua Bengio\nAaron Courville\n", "Contents\n\nWebsite\n\nAcknowledgments\n\nNotation\n\n1 Introduction\n\n1.1\n1.2\n\nHistorical Trends in Deep Learning ... .\n\nI Applied Math and Machine Learning Basics\n\n2 Linear Algebra\n\n2.1\n2.2\n2.3\n2.4\n2.5\n2.6\n2.7\n2.8\n2.9\n2.10\n2.11\n2.12\n\nScalars, Vectors, Matrices and Tensors . .\nMultiplying Matrices and Vectors .....\nIdentity and Inverse Matrices .......\nLinear Dependence and Span .......\nNorms ..........0 000000005\nSpecial Kinds of Matrices and Vectors . .\nEigendecomposition.............\nSingular Value Decomposition .......\nThe Moore-Penrose Pseudoinverse. ... .\nThe Trace Operator ............\nThe Determinant ..............\nExample: Principal Components Analysis\n\n3 Probability and Information Theory\n\n3.1\n", "CONTENTS\n\n5\n\nII\n\n6\n\n3.2. Random Variables ..... 0.0.20... 0000. ee eee eee\n3.3 Probability Distributions... .................00.0.\n3.4 Marginal Probability ......................00.0.\n3.5 Conditional Probability ....................0.0.\n3.6 The Chain Rule of Conditional Probabilities ............\n3.7. Independence and Conditional Independence... .........\n3.8 Expectation, Variance and Covariance ...............\n3.9 Common Probability Distributions .................\n3.10 Useful Properties of Common Functions ..............\n3.11 Bayes\u2019 Rule... 2. ee\n3.12 Technical Details of Continuous Variables .............\n3.13 Information Theory. ......... 0.2.2.2... 00020004\n3.14 Structured Probabilistic Models .................0.0.\n\nNumerical Computation\n\n4.1. Overflow and Underflow ...................00.0.\n4.2 Poor Conditioning \u00a9... ... 20... . 0.000 eee eee\n4.3 Gradient-Based Optimization ..................0.0.\n4.4 Constrained Optimization ..................0004\n4.5 Example: Linear Least Squares ................00-\n\nMachine Learning Basics\n\n5.1 Learning Algorithms ............... 000000000\n5.2 Capacity, Overfitting and Underfitting .............0..\n5.38 Hyperparameters and Validation Sets. ...............\n5.4 Estimators, Bias and Variance... ............2.000.\n5.5 Maximum Likelihood Estimation ..................\n5.6 Bayesian Statistics .... 2... ..0 0.0... 0200.00.00 000.\n5.7 Supervised Learning Algorithms... ...............-.\n5.8 Unsupervised Learning Algorithms .................\n5.9 Stochastic Gradient Descent ................2.000.\n5.10 Building a Machine Learning Algorithm ..............\n5.11 Challenges Motivating Deep Learning. ...............\n\nDeep Networks: Modern Practices\n\nDeep Feedforward Networks\n6.1 Example: Learning XOR................ 2.0 20000.5\n6.2 Gradient-Based Learning. ..................00.0.\n\nii\n", "CONTENTS\n\n7\n\n6.3. Hidden Units .... 2... .....0 2.0... 0.000000 2 000. 191\n6.4 Architecture Design... . 2... 0.0... 0000000020 eG 197\n6.5 Back-Propagation and Other Differentiation Algorithms ..... 204\n6.6 Historical Notes... 2... eee 224\nRegularization for Deep Learning 228\n7.1 Parameter Norm Penalties... .. 0... .. 0.2... . 000004 230\n7.2 Norm Penalties as Constrained Optimization. ........... 237\n7.3 Regularization and Under-Constrained Problems ......... 239\n7.4 Dataset Augmentation... .......0 0.00.02 0.00008 240\n7.5 Noise Robustness ... 2... 0... ee 242\n7.6 Semi-Supervised Learning ............... 0000004 243\n7.7 Multi-Task Learning ................... 0.0000. 244\n7.8 Early Stopping .... 2... 0... 0200.00. 2 ee ee 246\n7.9 Parameter Tying and Parameter Sharing .............. 253\n7.10 Sparse Representations... 2... 0.0... ee 254\n7.11 Bagging and Other Ensemble Methods ............... 256\n7.12 Dropout... ... ee 258\n7.138 Adversarial Training ... 2... 2... 20.0... 0000000000 268\n7.14 Tangent Distance, Tangent Prop, and Manifold Tangent Classifier 270\nOptimization for Training Deep Models 274\n8.1 How Learning Differs from Pure Optimization ........... 275\n8.2 Challenges in Neural Network Optimization ............ 282\n8.3 Basic Algorithms .... 2... 0.0.0.0. 00 eee eee 294\n8.4 Parameter Initialization Strategies .............00.0. 301\n8.5 Algorithms with Adaptive Learning Rates ............. 306\n8.6 Approximate Second-Order Methods ................ 310\n8.7 Optimization Strategies and Meta-Algorithms ........... 317\nConvolutional Networks 330\n9.1 The Convolution Operation .................000. 331\n9.2 Motivation... . 2... 2. ee 335\n9.3 Pooling... ... 0.0... eee 339\n9.4 Convolution and Pooling as an Infinitely Strong Prior... ... . 345\n9.5 Variants of the Basic Convolution Function ............ 347\n9.6 Structured Outputs... .... 0... ee 358\n9.7 DataTypes ........ ee 360\n9.8 Efficient Convolution Algorithms .................., 362\n9.9 Random or Unsupervised Features ..............--.4 363\n\niii\n", "CONTENTS\n\n9.10 The Neuroscientific Basis for Convolutional Networks ...... .\n9.11 Convolutional Networks and the History of Deep Learning ... .\n\n10 Sequence Modeling: Recurrent and Recursive Nets\n\n0.1 Unfolding Computational Graphs ...............0..\n0.2 Recurrent Neural Networks ............... 2.0000.\n0.38 Bidirectional RNNs... 2... ee\n0.4 Encoder-Decoder Sequence-to-Sequence Architectures... ....\n0.5 Deep Recurrent Networks ................ 000004\n0.6 Recursive Neural Networks... .............020004\n0.7 The Challenge of Long-Term Dependencies. ............\n0.8 Echo State Networks... 2... . 0.200.000 00000000\n0.9 Leaky Units and Other Strategies for Multiple Time Scales... .\n0.10 The Long Short-Term Memory and Other Gated RNNs......\n0.11 Optimization for Long-Term Dependencies .............\n0.12 Explicit Memory ... 2... 0... 00.0000 eee eee\n\n11 Practical Methodology\n\n1.1 Performance Metrics .......0..0 0... ..020 0000000005\n1.2 Default Baseline Models .................2..000.\n1.3 Determining Whether to Gather More Data ............\n1.4 Selecting Hyperparameters................2.000.\n1.5 Debugging Strategies . 2... ee ee\n1.6 Example: Multi-Digit Number Recognition. ............\n\n12 Applications\n\n2.1 Large-Scale Deep Learning. .................000.4\n2.2 Computer Vision .. 2... 20... 2 ee\n2.3 Speech Recognition... 2.2... 0.20.0... 000 2 eee\n2.4 Natural Language Processing ...............0000-\n2.5 Other Applications .... 2... 2.0.0... 0 0002 eee eee\n\nIII Deep Learning Research\n\n13 Linear Factor Models\n13.1 Probabilistic PCA and Factor Analysis. ..............\n13.2 Independent Component Analysis (ICA) ..............\n13.3 Slow Feature Analysis .. 2.2.0.0... . 000.000 eee\n13.4 Sparse Coding... 2... . 2... ee\n", "CONTENTS\n\n14 Autoencoders\n\n15 Representation Learning\n\n16 Structured Probabilistic Models for Deep Learning\n\n17 Monte Carlo Methods\n\n18 Confronting the Partition Function\n\n3.5 Manifold Interpretation of PCA .................\n\n4.1 Undercomplete Autoencoders ..............000.%\n4.2 Regularized Autoencoders ...............000004\n4.3 Representational Power, Layer Size and Depth. .........\n4.4 Stochastic Encoders and Decoders... ...........04.%\n4.5 Denoising Autoencoders .............-.000 008 0G\n4.6 Learning Manifolds with Autoencoders ..............\n4.7 Contractive Autoencoders .............+..000004\n4.8 Predictive Sparse Decomposition .................4\n4.9 Applications of Autoencoders ..............20004\n\n5.1 Greedy Layer-Wise Unsupervised Pretraining ..........\n5.2 Transfer Learning and Domain Adaptation. ...........\n5.3 Semi-Supervised Disentangling of Causal Factors ........\n5.4 Distributed Representation. ................-0004\n5.5 Exponential Gains from Depth ..................\n5.6 Providing Clues to Discover Underlying Causes .........\n\n6.1 The Challenge of Unstructured Modeling. ............\n6.2 Using Graphs to Describe Model Structure. ...........\n6.3 Sampling from Graphical Models .................\n6.4 Advantages of Structured Modeling ................\n6.5 Learning about Dependencies ..................4\n6.6 Inference and Approximate Inference ...............\n6.7 The Deep Learning Approach to Structured Probabilistic Models\n\n7.1 Sampling and Monte Carlo Methods ...............\n7.2 Importance Sampling... 2... ........ 2000000004\n7.3 Markov Chain Monte Carlo Methods ...............\n7.4 Gibbs Sampling... .. 2... 0... 0... 00000 ee ee\n7.5 The Challenge of Mixing between Separated Modes .......\n\n8.1 The Log-Likelihood Gradient ...................\n8.2 Stochastic Maximum Likelihood and Contrastive Divergence . . .\n\n584\n585\n", "CONTENTS\n\n19 Approximate Inference\n\n20 Deep Generative Models\n\n20.1 Boltzmann Machines ...........0.. 000000 eae\n20.2 Restricted Boltzmann Machines .................\n20.3 Deep Belief Networks... .. 20... 0.0... 2000000005\n20.4 Deep Boltzmann Machines. ................00.-\n20.5 Boltzmann Machines for Real-Valued Data. ..........\n20.6 Convolutional Boltzmann Machines...............\n20.7 Boltzmann Machines for Structured or Sequential Outputs... .\n20.8 Other Boltzmann Machines ................04.4\n20.9 Back-Propagation through Random Operations ........\n20.10 Directed Generative Nets... . 2... 2 ee ee\n20.11 Drawing Samples from Autoencoders ..............\n20.12 Generative Stochastic Networks ..............04.\n20.13 Other Generation Schemes... ........0 00000 eae\n20.14 Evaluating Generative Models... ............0..\n20.15 Conclusion... 2...\n\nBibliography\n\nIndex\n\nvi\n\n8.3 Pseudolikelihood ........... 0.000.000 0000.4\n8.4 Score Matching and Ratio Matching ..............\n8.5 Denoising Score Matching ..................0.0.\n8.6 Noise-Contrastive Estimation ...............0..\n8.7 Estimating the Partition Function... .............\n\n9.1 Inference as Optimization .................00.\n9.2 Expectation Maximization.................00.\n9.3. MAP Inference and Sparse Coding ...............\n9.4 Variational Inference and Learning ...............\n9.5 Learned Approximate Inference .................\n", "Website\n\nwww.deeplearningbook.org\n\nThis book is accompanied by the above website. The website provides a\nvariety of supplementary material, including exercises, lecture slides, corrections of\nmistakes, and other resources that should be useful to both readers and instructors.\n\nvii\n", "Acknowledgments\n\nThis book would not have been possible without the contributions of many people.\n\nWe would like to thank those who commented on our proposal for the book\nand helped plan its contents and organization: Guillaume Alain, Kyunghyun Cho,\nCaglar Giilcehre, David Krueger, Hugo Larochelle, Razvan Pascanu and Thomas\nRoh\u00e9e.\n\nWe would like to thank the people who offered feedback on the content of the\nbook itself. Some offered feedback on many chapters: Martin Abadi, Guillaume\nAlain, Ion Androutsopoulos, Fred Bertsch, Olexa Bilaniuk, Ufuk Can Bicici, Matko\nBognjak, John Boersma, Greg Brockman, Alexandre de Br\u00e9bisson, Pierre Luc\nCarrier, Sarath Chandar, Pawel Chilinski, Mark Daoust, Oleg Dashevskii, Laurent\nDinh, Stephan Dreseitl, Jim Fan, Miao Fan, Meire Fortunato, Fr\u00e9d\u00e9ric Francis,\nNando de Freitas, Gaglar Giilcehre, Jurgen Van Gael, Javier Alonso Garcia,\nJonathan Hunt, Gopi Jeyaram, Chingiz Kabytayev, Lukasz Kaiser, Varun Kanade,\nAsifullah Khan, Akiel Khan, John King, Diederik P. Kingma, Yann LeCun, Rudolf\nMathey, Matias Mattamala, Abhinav Maurya, Kevin Murphy, Oleg Miirk, Roman\nNovak, Augustus Q. Odena, Simon Pavlik, Karl Pichotta, Eddie Pierce, Kari Pulli,\nRoussel Rahman, Tapani Raiko, Anurag Ranjan, Johannes Roith, Mihaela Rosca,\nHalis Sak, C\u00e9sar Salgado, Grigory Sapunov, Yoshinori Sasaki, Mike Schuster,\nJulian Serban, Nir Shabat, Ken Shirriff, Andre Simpelo, Scott Stanley, David\nSussillo, Ilya Sutskever, Carles Gelada Saez, Graham Taylor, Valentin Tolmer,\nMassimiliano Tomassoli, An Tran, Shubhendu Trivedi, Alexey Umnov, Vincent\nVanhoucke, Marco Visentini-Scarzanella, Martin Vita, David Warde-Farley, Dustin\nWebb, Kelvin Xu, Wei Xue, Ke Yang, Li Yao, Zygmunt Zajac and Ozan Caglayan.\n\nWe would also like to thank those who provided us with useful feedback on\nindividual chapters:\n\ne Notation: Zhang Yuanhang.\n\ne Chapter 1, Introduction: Yusuf Akgul, Sebastien Bratieres, Samira Ebrahimi,\n\nvill\n", "CONTENTS\n\nCharlie Gorichanaz, Brendan Loudermilk, Eric Morris, Cosmin Parvulescu\nand Alfredo Solano.\n\ne Chapter 2, Linear Algebra: Amjad Almahairi, Nikola Bani\u00e9, Kevin Bennett,\nPhilippe Castonguay, Oscar Chang, Eric Fosler-Lussier, Andrey Khalyavin,\nSergey Oreshkov, Istvan Petras, Dennis Prangle, Thomas Roh\u00e9e, Gitanjali\nGulve Sehgal, Colby Toland, Alessandro Vitale and Bob Welland.\n\ne Chapter 3, Probability and Information Theory: John Philip Anderson, Kai\nArulkumaran, Vincent Dumoulin, Rui Fa, Stephan Gouws, Artem Oboturov,\nAntti Rasmus, Alexey Surkov and Volker Tresp.\n\ne Chapter 4, Numerical Computation: Tran Lam Anlan Fischer and Hu\nYuhuang.\n\ne Chapter 5, Machine Learning Basics: Dzmitry Bahdanau, Justin Domingue,\nNikhil Garg, Makoto Otsuka, Bob Pepin, Philip Popien, Emmanuel Rayner,\nPeter Shepard, Kee-Bong Song, Zheng Sun and Andy Wu.\n\ne Chapter 6, Deep Feedforward Networks: Uriel Berdugo, Fabrizio Bottarel,\nElizabeth Burl, Ishan Durugkar, Jeff Hlywa, Jong Wook Kim, David Krueger\nand Aditya Kumar Praharaj.\n\ne Chapter 7, Regularization for Deep Learning: Morten Kolbeek, Kshitij Lauria,\nInkyu Lee, Sunil Mohan, Hai Phong Phan and Joshua Salisbury.\n\ne Chapter 8, Optimization for Training Deep Models: Marcel Ackermann, Peter\nArmitage, Rowel Atienza, Andrew Brock, Tegan Maharaj, James Martens,\nKashif Rasul, Klaus Strobl and Nicholas Turner.\n\ne Chapter 9, Convolutional Networks: Martin Arjovsky, Eugene Brevdo, Kon-\nstantin Divilov, Eric Jensen, Mehdi Mirza, Alex Paino, Marjorie Sayer, Ryan\nStout and Wentao Wu.\n\ne Chapter 10, Sequence Modeling: Recurrent and Recursive Nets: G\u00e9kcen\nEraslan, Steven Hickson, Razvan Pascanu, Lorenzo von Ritter, Rui Rodrigues,\nDmitriy Serdyuk, Dongyu Shi and Kaiyu Yang.\n\ne Chapter 11, Practical Methodology: Daniel Beckstein.\n\ne Chapter 12, Applications: George Dahl, Vladimir Nekrasov and Ribana\nRoscher.\n\ne Chapter 13, Linear Factor Models: Jayanth Koushik.\n\nix\n", "CONTENTS\n\ne Chapter 15, Representation Learning: Kunal Ghosh.\n\ne Chapter 16, Structured Probabilistic Models for Deep Learning: Minh L\u00e9\nand Anton Varfolom.\n\ne Chapter 18, Confronting the Partition Function: Sam Bowman.\n\ne Chapter 19, Approximate Inference: Yujia Bao.\n\ne Chapter 20, Deep Generative Models: Nicolas Chapados, Daniel Galvez,\nWenming Ma, Fady Medhat, Shakir Mohamed and Gr\u00e9goire Montavon.\n\ne Bibliography: Lukas Michelbacher and Leslie N. Smith.\n\nWe also want to thank those who allowed us to reproduce images, figures or\ndata from their publications. We indicate their contributions in the figure captions\nthroughout the text.\n\nWe would like to thank Lu Wang for writing pdf2htmlEX, which we used to\nmake the web version of the book, and for offering support to improve the quality\nof the resulting HTML.\n\nWe would like to thank Ian\u2019s wife Daniela Flori Goodfellow for patiently\nsupporting Ian during the writing of the book as well as for help with proofreading.\n\nWe would like to thank the Google Brain team for providing an intellectual\nenvironment where Ian could devote a tremendous amount of time to writing this\nbook and receive feedback and guidance from colleagues. We would especially like\nto thank Jan\u2019s former manager, Greg Corrado, and his current manager, Samy\nBengio, for their support of this project. Finally, we would like to thank Geoffrey\nHinton for encouragement when writing was difficult.\n", "Notation\n\nThis section provides a concise reference describing the notation used throughout\nthis book. If you are unfamiliar with any of the corresponding mathematical\nconcepts, we describe most of these ideas in chapters 2-4.\n\nNumbers and Arrays\n\na A scalar (integer or real)\na A vector\nA A matrix\nA A tensor\nI, Identity matrix with n rows and n columns\n\nI Identity matrix with dimensionality implied by\ncontext\n\ne) Standard basis vector [0,...,0,1,0,...,0] with a\n1 at position 7\n\ndiag(a) A square, diagonal matrix with diagonal entries\n\ngiven by a\na A scalar random variable\na A vector-valued random variable\n\nA matrix-valued random variable\n\nxi\n", "CONTENTS\n\nSets and Graphs\n\nA A set\nR The set of real numbers\n{0,1} The set containing 0 and 1\n\n{0,1,...,n} The set of all integers between 0 and n\n\n[a, b] The real interval including a and b\n(a, | The real interval excluding a but including b\nA\\B Set subtraction, i.e., the set containing the ele-\nments of A that are not in B\nG A graph\n\nPag(xi) The parents of x; in G\n\nIndexing\n\nGy Element i of vector a, with indexing starting at 1\na_; All elements of vector a except for element 7\nAj Element 7,7 of matrix A\nA;:.  Rowi of matrix A\nA.; Column i of matrix A\nAij,k Element (i,j,k) of a 3-D tensor A\nA.:,i 2-D slice of a 3-D tensor\n\nay Element 7 of the random vector a\n\nLinear Algebra Operations\n\nA Transpose of matrix A\n\nAt Moore-Penrose pseudoinverse of A\nA\u00a9B_ Element-wise (Hadamard) product of A and B\ndet(A) Determinant of A\n\nxii\n", "CONTENTS\n\nd Calculus\n= Derivative of y with respect to x\nxv\nOy . oa. .\nDa Partial derivative of y with respect to x\nxv\nVay Gradient of y with respect to x\nVxy Matrix derivatives of y with respect to X\nVxy Tensor containing derivatives of y with respect to\nx\nOf ot ; mxn nm m\nia Jacobian matrix J \u20ac R of f:R\"\u00b0 \u2014~R\nBy\nVf (x) or H(f)(#) The Hessian matrix of f at input point\nj f(a)da Definite integral over the entire domain of x\n[r@ f(a)da Definite integral with respect to x over the set S\nProbability and Information Theory\nalb The random variables a and b are independent\nalb|c They are conditionally independent given c\nP(a) A probability distribution over a discrete variable\np(a) A probability distribution over a continuous vari-\nable, or over a variable whose type has not been\nspecified\na~ P Random variable a has distribution P\n\nEx~p[f(x)| or Ef(a#) Expectation of f(x) with respect to P(x)\nVar(f(x)) Variance of f(x) under P(x)\nCov(f (x), g(x)) Covariance of f(x) and g(x) under P(x)\n\nH(x) Shannon entropy of the random variable x\nDx (P||Q) Kullback-Leibler divergence of P and Q\nN (a; 4, ) Gaussian distribution over \u00ab with mean p and\n\ncovariance &\n\nxiii\n", "CONTENTS\n\nFunctions\nf:A\u2014>B_ The function f with domain A and range B\n\nfog Composition of the functions f and g\n\nf(@;@) A function of a parametrized by 6. (Sometimes\nwe write f(a) and omit the argument 6 to lighten\n\nnotation)\nlog x Natural logarithm of x\na(x) Logistic sigmoid, rep\n\u00a2(z) Softplus, log(1 + exp(z))\n||z||p LP norm of \u00ab\n||x\\| I? norm of\nar Positive part of x, i.e., max(0, x)\n\nleondition is 1 if the condition is true, 0 otherwise\n\nSometimes we use a function f whose argument is a scalar but apply it to a\nvector, matrix, or tensor: f(a), f(X), or f(X). This denotes the application of f\nto the array element-wise. For example, if C = o(X), then Ci,;,4 = 0(Xij,\u00a2) for all\nvalid values of 7, 7 and k.\n\nDatasets and Distributions\n\nPdata The data generating distribution\n\nPdata The empirical distribution defined by the training\n\nset\nxX A set of training examples\nx) The i-th example (input) from a dataset\nyO or yO The target associated with a for supervised learn-\ning\nxX The m x n matrix with input example \u00ab\u00a9 in row\n\nXj:\n\nxiv\n", "Chapter 1\n\nIntroduction\n\nInventors have long dreamed of creating machines that think. This desire dates\nback to at least the time of ancient Greece. The mythical figures Pygmalion,\nDaedalus, and Hephaestus may all be interpreted as legendary inventors, and\nGalatea, Talos, and Pandora may all be regarded as artificial life (Ovid and Martin,\n2004; Sparkes, 1996; Tandy, 1997).\n\nWhen programmable computers were first conceived, people wondered whether\nsuch machines might become intelligent, over a hundred years before one was\nbuilt (Lovelace, 1842). Today, artificial intelligence (AI) is a thriving field with\nmany practical applications and active research topics. We look to intelligent\nsoftware to automate routine labor, understand speech or images, make diagnoses\nin medicine and support basic scientific research.\n\nIn the early days of artificial intelligence, the field rapidly tackled and solved\nproblems that are intellectually difficult for human beings but relatively straight-\nforward for computers\u2014problems that can be described by a list of formal, math-\nematical rules. The true challenge to artificial intelligence proved to be solving\nthe tasks that are easy for people to perform but hard for people to describe\nformally\u2014problems that we solve intuitively, that feel automatic, like recognizing\nspoken words or faces in images.\n\nThis book is about a solution to these more intuitive problems. This solution is\nto allow computers to learn from experience and understand the world in terms of a\nhierarchy of concepts, with each concept defined in terms of its relation to simpler\nconcepts. By gathering knowledge from experience, this approach avoids the need\nfor human operators to formally specify all of the knowledge that the computer\nneeds. The hierarchy of concepts allows the computer to learn complicated concepts\nby building them out of simpler ones. If we draw a graph showing how these\n\n1\n", "CHAPTER 1. INTRODUCTION\n\nconcepts are built on top of each other, the graph is deep, with many layers. For\nthis reason, we call this approach to AI deep learning.\n\nMany of the early successes of AI took place in relatively sterile and formal\nenvironments and did not require computers to have much knowledge about\nthe world. For example, IBM\u2019s Deep Blue chess-playing system defeated world\nchampion Garry Kasparov in 1997 (Hsu, 2002). Chess is of course a very simple\nworld, containing only sixty-four locations and thirty-two pieces that can move\nin only rigidly circumscribed ways. Devising a successful chess strategy is a\ntremendous accomplishment, but the challenge is not due to the difficulty of\ndescribing the set of chess pieces and allowable moves to the computer. Chess\ncan be completely described by a very brief list of completely formal rules, easily\nprovided ahead of time by the programmer.\n\nJronically, abstract and formal tasks that are among the most difficult mental\nundertakings for a human being are among the easiest for a computer. Computers\nhave long been able to defeat even the best human chess player, but are only\nrecently matching some of the abilities of average human beings to recognize objects\nor speech. A person\u2019s everyday life requires an immense amount of knowledge\nabout the world. Much of this knowledge is subjective and intuitive, and therefore\ndifficult to articulate in a formal way. Computers need to capture this same\nknowledge in order to behave in an intelligent way. One of the key challenges in\nartificial intelligence is how to get this informal knowledge into a computer.\n\nSeveral artificial intelligence projects have sought to hard-code knowledge about\nthe world in formal languages. A computer can reason about statements in these\nformal languages automatically using logical inference rules. This is known as the\nknowledge base approach to artificial intelligence. None of these projects has led\nto a major success. One of the most famous such projects is Cyc (Lenat and Guha,\n1989). Cyc is an inference engine and a database of statements in a language\ncalled CycL. These statements are entered by a staff of human supervisors. It is an\nunwieldy process. People struggle to devise formal rules with enough complexity\nto accurately describe the world. For example, Cyc failed to understand a story\nabout a person named Fred shaving in the morning (Linde, 1992). Its inference\nengine detected an inconsistency in the story: it knew that people do not have\nelectrical parts, but because Fred was holding an electric razor, it believed the\nentity \u201cFredWhileShaving\u201d contained electrical parts. It therefore asked whether\nFred was still a person while he was shaving.\n\nThe difficulties faced by systems relying on hard-coded knowledge suggest\nthat AI systems need the ability to acquire their own knowledge, by extracting\npatterns from raw data. This capability is known as machine learning. The\n", "CHAPTER 1. INTRODUCTION\n\nintroduction of machine learning allowed computers to tackle problems involving\nknowledge of the real world and make decisions that appear subjective. A simple\nmachine learning algorithm called logistic regression can determine whether to\nrecommend cesarean delivery (Mor-Yosef ef al., 1990). A simple machine learning\nalgorithm called naive Bayes can separate legitimate e-mail from spam e-mail.\n\nThe performance of these simple machine learning algorithms depends heavily\non the representation of the data they are given. For example, when logistic\nregression is used to recommend cesarean delivery, the AI system does not examine\nthe patient directly. Instead, the doctor tells the system several pieces of relevant\ninformation, such as the presence or absence of a uterine scar. Each piece of\ninformation included in the representation of the patient is known as a feature.\nLogistic regression learns how each of these features of the patient correlates with\nvarious outcomes. However, it cannot influence the way that the features are\ndefined in any way. If logistic regression was given an MRI scan of the patient,\nrather than the doctor\u2019s formalized report, it would not be able to make useful\npredictions. Individual pixels in an MRI scan have negligible correlation with any\ncomplications that might occur during delivery.\n\nThis dependence on representations is a general phenomenon that appears\nthroughout computer science and even daily life. In computer science, opera-\ntions such as searching a collection of data can proceed exponentially faster if\nthe collection is structured and indexed intelligently. People can easily perform\narithmetic on Arabic numerals, but find arithmetic on Roman numerals much\nmore time-consuming. It is not surprising that the choice of representation has an\nenormous effect on the performance of machine learning algorithms. For a simple\nvisual example, see figure 1.1.\n\nMany artificial intelligence tasks can be solved by designing the right set of\nfeatures to extract for that task, then providing these features to a simple machine\nlearning algorithm. For example, a useful feature for speaker identification from\nsound is an estimate of the size of speaker\u2019s vocal tract. It therefore gives a strong\nclue as to whether the speaker is a man, woman, or child.\n\nHowever, for many tasks, it is difficult to know what features should be extracted.\nFor example, suppose that we would like to write a program to detect cars in\nphotographs. We know that cars have wheels, so we might like to use the presence\nof a wheel as a feature. Unfortunately, it is difficult to describe exactly what a\nwheel looks like in terms of pixel values. A wheel has a simple geometric shape but\nits image may be complicated by shadows falling on the wheel, the sun glaring off\nthe metal parts of the wheel, the fender of the car or an object in the foreground\nobscuring part of the wheel, and so on.\n", "CHAPTER 1. INTRODUCTION\n\nCartesian coordinates Polar coordinates\n\nFigure 1.1: Example of different representations: suppose we want to separate two\ncategories of data by drawing a line between them in a scatterplot. In the plot on the left,\nwe represent some data using Cartesian coordinates, and the task is impossible. In the plot\non the right, we represent the data with polar coordinates and the task becomes simple to\nsolve with a vertical line. Figure produced in collaboration with David Warde-Farley.\n\nOne solution to this problem is to use machine learning to discover not only\nthe mapping from representation to output but also the representation itself.\nThis approach is known as representation learning. Learned representations\noften result in much better performance than can be obtained with hand-designed\nrepresentations. They also allow AI systems to rapidly adapt to new tasks, with\nminimal human intervention. A representation learning algorithm can discover a\ngood set of features for a simple task in minutes, or a complex task in hours to\nmonths. Manually designing features for a complex task requires a great deal of\nhuman time and effort; it can take decades for an entire community of researchers.\n\nThe quintessential example of a representation learning algorithm is the au-\ntoencoder. An autoencoder is the combination of an encoder function that\nconverts the input data into a different representation, and a decoder function\nthat converts the new representation back into the original format. Autoencoders\nare trained to preserve as much information as possible when an input is run\nthrough the encoder and then the decoder, but are also trained to make the new\nrepresentation have various nice properties. Different kinds of autoencoders aim to\nachieve different kinds of properties.\n\nWhen designing features or algorithms for learning features, our goal is usually\nto separate the factors of variation that explain the observed data. In this\ncontext, we use the word \u201cfactors\u201d simply to refer to separate sources of influence;\nthe factors are usually not combined by multiplication. Such factors are often not\n\n4\n", "CHAPTER 1. INTRODUCTION\n\nquantities that are directly observed. Instead, they may exist either as unobserved\nobjects or unobserved forces in the physical world that affect observable quantities.\nThey may also exist as constructs in the human mind that provide useful simplifying\nexplanations or inferred causes of the observed data. They can be thought of as\nconcepts or abstractions that help us make sense of the rich variability in the data.\nWhen analyzing a speech recording, the factors of variation include the speaker\u2019s\nage, their sex, their accent and the words that they are speaking. When analyzing\nan image of a car, the factors of variation include the position of the car, its color,\nand the angle and brightness of the sun.\n\nA major source of difficulty in many real-world artificial intelligence applications\nis that many of the factors of variation influence every single piece of data we are\nable to observe. The individual pixels in an image of a red car might be very close\nto black at night. The shape of the car\u2019s silhouette depends on the viewing angle.\nMost applications require us to disentangle the factors of variation and discard the\nones that we do not care about.\n\nOf course, it can be very difficult to extract such high-level, abstract features\nfrom raw data. Many of these factors of variation, such as a speaker\u2019s accent,\ncan be identified only using sophisticated, nearly human-level understanding of\nthe data. When it is nearly as difficult to obtain a representation as to solve the\noriginal problem, representation learning does not, at first glance, seem to help us.\n\nDeep learning solves this central problem in representation learning by intro-\nducing representations that are expressed in terms of other, simpler representations.\nDeep learning allows the computer to build complex concepts out of simpler con-\ncepts. Figure 1.2 shows how a deep learning system can represent the concept of\nan image of a person by combining simpler concepts, such as corners and contours,\nwhich are in turn defined in terms of edges.\n\nThe quintessential example of a deep learning model is the feedforward deep\nnetwork or multilayer perceptron (MLP). A multilayer perceptron is just a\nmathematical function mapping some set of input values to output values. The\nfunction is formed by composing many simpler functions. We can think of each\napplication of a different mathematical function as providing a new representation\nof the input.\n\nThe idea of learning the right representation for the data provides one perspec-\ntive on deep learning. Another perspective on deep learning is that depth allows the\ncomputer to learn a multi-step computer program. Each layer of the representation\ncan be thought of as the state of the computer\u2019s memory after executing another\nset of instructions in parallel. Networks with greater depth can execute more\ninstructions in sequence. Sequential instructions offer great power because later\n\n5\n", "CHAPTER 1. INTRODUCTION\n\nOutput\n(object identity)\n\n3rd hidden layer\n(object parts)\n\n2nd hidden layer\n(corners and\ncontours)\n\n1st hidden layer\n\nmY 7. (edges)\n\n~\u2014 \u2014-\n\nL,\n\nFigure 1.2: Illustration of a deep learning model. It is difficult for a computer to understand\nthe meaning of raw sensory input data, such as this image represented as a collection\nof pixel values. The function mapping from a set of pixels to an object identity is very\ncomplicated. Learning or evaluating this mapping seems insurmountable if tackled directly.\nDeep learning resolves this difficulty by breaking the desired complicated mapping into a\nseries of nested simple mappings, each described by a different layer of the model. The\ninput is presented at the visible layer, so named because it contains the variables that\nwe are able to observe. Then a series of hidden layers extracts increasingly abstract\nfeatures from the image. These layers are called \u201chidden\u201d because their values are not given\nin the data; instead the model must determine which concepts are useful for explaining\nthe relationships in the observed data. The images here are visualizations of the kind\nof feature represented by each hidden unit. Given the pixels, the first layer can easily\nidentify edges, by comparing the brightness of neighboring pixels. Given the first hidden\nlayer\u2019s description of the edges, the second hidden layer can easily search for corners and\nextended contours, which are recognizable as collections of edges. Given the second hidden\nlayer\u2019s description of the image in terms of corners and contours, the third hidden layer\ncan detect entire parts of specific objects, by finding specific collections of contours and\ncorners. Finally, this description of the image in terms of the object parts it contains can\nbe used to recognize the objects present in the image. Images reproduced with permission\nfrom Zeiler and Fergus (2014).\n\nVisible layer\n(input pixels)\n\n", "CHAPTER 1. INTRODUCTION\n\nElement\nSet\n\nG\na\n\nLogistic\n\nLogistic\nRegressior\n\nFigure 1.3: Illustration of computational graphs mapping an input to an output where\neach node performs an operation. Depth is the length of the longest path from input to\noutput but depends on the definition of what constitutes a possible computational step.\n\nThe computation depicted in these graphs is the output of a logistic regression model,\n\no(w' ax), where o is the logistic sigmoid function. If we use addition, multiplication and\n\nlogistic sigmoids as the elements of our computer language, then this model has depth\nthree. If we view logistic regression as an element itself, then this model has depth one.\n\ninstructions can refer back to the results of earlier instructions. According to this\nview of deep learning, not all of the information in a layer\u2019s activations necessarily\nencodes factors of variation that explain the input. The representation also stores\nstate information that helps to execute a program that can make sense of the input.\nThis state information could be analogous to a counter or pointer in a traditional\ncomputer program. It has nothing to do with the content of the input specifically,\nbut it helps the model to organize its processing.\n\nThere are two main ways of measuring the depth of a model. The first view is\nbased on the number of sequential instructions that must be executed to evaluate\nthe architecture. We can think of this as the length of the longest path through\na flow chart that describes how to compute each of the model\u2019s outputs given\nits inputs. Just as two equivalent computer programs will have different lengths\ndepending on which language the program is written in, the same function may\nbe drawn as a flowchart with different depths depending on which functions we\nallow to be used as individual steps in the flowchart. Figure 1.3 illustrates how this\nchoice of language can give two different measurements for the same architecture.\n\nAnother approach, used by deep probabilistic models, regards the depth of a\nmodel as being not the depth of the computational graph but the depth of the\ngraph describing how concepts are related to each other. In this case, the depth\n\n7\n", "CHAPTER 1. INTRODUCTION\n\nof the flowchart of the computations needed to compute the representation of\neach concept may be much deeper than the graph of the concepts themselves.\nThis is because the system\u2019s understanding of the simpler concepts can be refined\ngiven information about the more complex concepts. For example, an AI system\nobserving an image of a face with one eye in shadow may initially only see one eye.\nAfter detecting that a face is present, it can then infer that a second eye is probably\npresent as well. In this case, the graph of concepts only includes two layers\u2014a\nlayer for eyes and a layer for faces\u2014but the graph of computations includes 2n\nlayers if we refine our estimate of each concept given the other n times.\n\nBecause it is not always clear which of these two views\u2014the depth of the\ncomputational graph, or the depth of the probabilistic modeling graph\u2014is most\nrelevant, and because different people choose different sets of smallest elements\nfrom which to construct their graphs, there is no single correct value for the\ndepth of an architecture, just as there is no single correct value for the length of\na computer program. Nor is there a consensus about how much depth a model\nrequires to qualify as \u201cdeep.\u201d However, deep learning can safely be regarded as the\nstudy of models that either involve a greater amount of composition of learned\nfunctions or learned concepts than traditional machine learning does.\n\nTo summarize, deep learning, the subject of this book, is an approach to AI.\nSpecifically, it is a type of machine learning, a technique that allows computer\nsystems to improve with experience and data. According to the authors of this\nbook, machine learning is the only viable approach to building AI systems that\ncan operate in complicated, real-world environments. Deep learning is a particular\nkind of machine learning that achieves great power and flexibility by learning to\nrepresent the world as a nested hierarchy of concepts, with each concept defined in\nrelation to simpler concepts, and more abstract representations computed in terms\nof less abstract ones. Figure 1.4 illustrates the relationship between these different\nAl disciplines. Figure 1.5 gives a high-level schematic of how each works.\n\n1.1 Who Should Read This Book?\n\nThis book can be useful for a variety of readers, but we wrote it with two main\ntarget audiences in mind. One of these target audiences is university students\n(undergraduate or graduate) learning about machine learning, including those who\nare beginning a career in deep learning and artificial intelligence research. The\nother target audience is software engineers who do not have a machine learning\nor statistics background, but want to rapidly acquire one and begin using deep\nlearning in their product or platform. Deep learning has already proven useful in\n\n8\n", "CHAPTER 1. INTRODUCTION\n\nDeep learning Example:\nShallow\n\nExample:\nautoencoders\n\nLogistic\n\nExample:\nMLPs\n\nregression\n\nRepresentation learning\n\nMachine learning\n\nExample:\nKnowledg\u00a2\nbases\n\nFigure 1.4: A Venn diagram showing how deep learning is a kind of representation learning,\nwhich is in turn a kind of machine learning, which is used for many but not all approaches\nto AI. Each section of the Venn diagram includes an example of an AI technology.\n", "CHAPTER 1. INTRODUCTION\n\nOutput\n\nMapping from\n\nOutput Output\nF F features\n\nAdditional\nMapping from Mapping from layers of more\nfeatures features abstract\nfeatures\n\nOutput\n\nHand-\ndesigned\n\nHand-\ndesigned Features\nfeatures\n\nSimple\n\nfeatures\nprogram\n\nInput Input Input Input\n\nDeep\nClassic os\nRule-based . learning\nmachine\nsystems learning Representation\n\nlearning\nFigure 1.5: Flowcharts showing how the different parts of an AI system relate to each\n\nother within different AI disciplines. Shaded boxes indicate components that are able to\nlearn from data.\n\n10\n", "CHAPTER 1. INTRODUCTION\n\nmany software disciplines including computer vision, speech and audio processing,\nnatural language processing, robotics, bioinformatics and chemistry, video games,\nsearch engines, online advertising and finance.\n\nThis book has been organized into three parts in order to best accommodate a\nvariety of readers. Part I introduces basic mathematical tools and machine learning\nconcepts. Part II describes the most established deep learning algorithms that are\nessentially solved technologies. Part II] describes more speculative ideas that are\nwidely believed to be important for future research in deep learning.\n\nReaders should feel free to skip parts that are not relevant given their interests\nor background. Readers familiar with linear algebra, probability, and fundamental\nmachine learning concepts can skip part I, for example, while readers who just want\nto implement a working system need not read beyond part II. To help choose which\nchapters to read, figure 1.6 provides a flowchart showing the high-level organization\nof the book.\n\nWe do assume that all readers come from a computer science background. We\nassume familiarity with programming, a basic understanding of computational\nperformance issues, complexity theory, introductory level calculus and some of the\nterminology of graph theory.\n\n1.2 Historical Trends in Deep Learning\n\nIt is easiest to understand deep learning with some historical context. Rather than\nproviding a detailed history of deep learning, we identify a few key trends:\n\ne Deep learning has had a long and rich history, but has gone by many names\nreflecting different philosophical viewpoints, and has waxed and waned in\npopularity.\n\ne Deep learning has become more useful as the amount of available training\ndata has increased.\n\ne Deep learning models have grown in size over time as computer infrastructure\n(both hardware and software) for deep learning has improved.\n\ne Deep learning has solved increasingly complicated applications with increasing\naccuracy over time.\n\n11\n", "CHAPTER 1. INTRODUCTION\n\n1. Introduction\n\nPart I: Applied Math and Machine Learning Basics\n\n3. Probability and\n\n2. Linear Algebra\n\u00b0 Information Theory\n\n4. Numerical 5. Machine Learning\nComputation Basics\n\nPart I: Deep Networks: Modern Practices\n\n6. Deep Feedforward\nNetworks\n\n7. Regularization\n\n11. Practical\n\nMethodology 12. Applications\n\nPart Il: Deep Learning Research\n\n13. Linear Factor 15. Representation\n14. Autoencoders .\nModels Learning\n\n16. Structured 17. Monte Carlo\nProbabilistic Models Methods\n\n18. Partition\n19. Inference .\nFunction\n\n20. Deep Generative\nModels\n\nFigure 1.6: The high-level organization of the book. An arrow from one chapter to another\nindicates that the former chapter is prerequisite material for understanding the latter.\n\n12\n", "CHAPTER 1. INTRODUCTION\n\n1.2.1. The Many Names and Changing Fortunes of Neural Net-\nworks\n\nWe expect that many readers of this book have heard of deep learning as an\nexciting new technology, and are surprised to see a mention of \u201chistory\u201d in a book\nabout an emerging field. In fact, deep learning dates back to the 1940s. Deep\nlearning only appears to be new, because it was relatively unpopular for several\nyears preceding its current popularity, and because it has gone through many\ndifferent names, and has only recently become called \u201cdeep learning.\u201d The field\nhas been rebranded many times, reflecting the influence of different researchers\nand different perspectives.\n\nA comprehensive history of deep learning is beyond the scope of this textbook.\nHowever, some basic context is useful for understanding deep learning. Broadly\nspeaking, there have been three waves of development of deep learning: deep\nlearning known as cybernetics in the 1940s\u20141960s, deep learning known as\nconnectionism in the 1980s\u20141990s, and the current resurgence under the name\ndeep learning beginning in 2006. This is quantitatively illustrated in figure 1.7.\n\nSome of the earliest learning algorithms we recognize today were intended\nto be computational models of biological learning, i.e. models of how learning\nhappens or could happen in the brain. As a result, one of the names that deep\nlearning has gone by is artificial neural networks (ANNs). The corresponding\nperspective on deep learning models is that they are engineered systems inspired\nby the biological brain (whether the human brain or the brain of another animal).\nWhile the kinds of neural networks used for machine learning have sometimes\nbeen used to understand brain function (Hinton and Shallice, 1991), they are\ngenerally not designed to be realistic models of biological function. The neural\nperspective on deep learning is motivated by two main ideas. One idea is that\nthe brain provides a proof by example that intelligent behavior is possible, and a\nconceptually straightforward path to building intelligence is to reverse engineer the\ncomputational principles behind the brain and duplicate its functionality. Another\nperspective is that it would be deeply interesting to understand the brain and the\nprinciples that underlie human intelligence, so machine learning models that shed\nlight on these basic scientific questions are useful apart from their ability to solve\nengineering applications.\n\nThe modern term \u201cdeep learning\u201d goes beyond the neuroscientific perspective\non the current breed of machine learning models. It appeals to a more general\nprinciple of learning multiple levels of composition, which can be applied in machine\nlearning frameworks that are not necessarily neurally inspired.\n\n13\n", "CHAPTER 1. INTRODUCTION\n\ncybernetics\n\n(connectionism + neural networks) |\n\nFrequency of Word or Phrase\n\n0.000000 =\n1940 1950 1960 1970 1980 1990 2000\n\n\u2018Year\n\nFigure 1.7: The figure shows two of the three historical waves of artificial neural nets\nresearch, as measured by the frequency of the phrases \u201ccybernetics\u201d and \u201cconnectionism\u201d or\n\u201cneural networks\u201d according to Google Books (the third wave is too recent to appear). The\nfirst wave started with cybernetics in the 1940s\u20141960s, with the development of theories\nof biological learning (McCulloch and Pitts, 1943; Hebb, 1949) and implementations of\nthe first models such as the perceptron (Rosenblatt, 1958) allowing the training of a single\nneuron. The second wave started with the connectionist approach of the 1980-1995 period,\nwith back-propagation (Rumelhart e\u00a2 al., 1986a) to train a neural network with one or two\nhidden layers. The current and third wave, deep learning, started around 2006 (Hinton\net al., 2006; Bengio et al., 2007; Ranzato et al., 2007a), and is just now appearing in book\nform as of 2016. The other two waves similarly appeared in book form much later than\nthe corresponding scientific activity occurred.\n\n14\n", "CHAPTER 1. INTRODUCTION\n\nThe earliest predecessors of modern deep learning were simple linear models\nmotivated from a neuroscientific perspective. These models were designed to\ntake a set of n input values 271,...,2, and associate them with an output y.\nThese models would learn a set of weights wi,...,Wn and compute their output\nf(v,w) = vw, + -+-+2n,. This first wave of neural networks research was\nknown as cybernetics, as illustrated in figure 1.7.\n\nThe McCulloch-Pitts Neuron (McCulloch and Pitts, 1943) was an early model\nof brain function. This linear model could recognize two different categories of\ninputs by testing whether f(a, w) is positive or negative. Of course, for the model\nto correspond to the desired definition of the categories, the weights needed to be\nset correctly. These weights could be set by the human operator. In the 1950s,\nthe perceptron (Rosenblatt, 1958, 1962) became the first model that could learn\nthe weights defining the categories given examples of inputs from each category.\nThe adaptive linear element (ADALINE), which dates from about the same\ntime, simply returned the value of f(a) itself to predict a real number (Widrow\nand Hoff, 1960), and could also learn to predict these numbers from data.\n\nThese simple learning algorithms greatly affected the modern landscape of ma-\nchine learning. The training algorithm used to adapt the weights of the ADALINE\nwas a special case of an algorithm called stochastic gradient descent. Slightly\nmodified versions of the stochastic gradient descent algorithm remain the dominant\ntraining algorithms for deep learning models today.\n\nModels based on the f(x, w) used by the perceptron and ADALINE are called\nlinear models. These models remain some of the most widely used machine\nlearning models, though in many cases they are trained in different ways than the\noriginal models were trained.\n\nLinear models have many limitations. Most famously, they cannot learn the\nXOR function, where f({0,1],w) = 1 and f([1,0],w) = 1 but f((1,1],w) = 0\nand f([0,0],w) = 0. Critics who observed these flaws in linear models caused\na backlash against biologically inspired learning in general (Minsky and Papert,\n1969). This was the first major dip in the popularity of neural networks.\n\nToday, neuroscience is regarded as an important source of inspiration for deep\nlearning researchers, but it is no longer the predominant guide for the field.\n\nThe main reason for the diminished role of neuroscience in deep learning\nresearch today is that we simply do not have enough information about the brain\nto use it as a guide. To obtain a deep understanding of the actual algorithms used\nby the brain, we would need to be able to monitor the activity of (at the very\nleast) thousands of interconnected neurons simultaneously. Because we are not\nable to do this, we are far from understanding even some of the most simple and\n\n15\n", "CHAPTER 1. INTRODUCTION\n\nwell-studied parts of the brain (Olshausen and Field, 2005).\n\nNeuroscience has given us a reason to hope that a single deep learning algorithm\ncan solve many different tasks. Neuroscientists have found that ferrets can learn to\n\u201csee\u201d with the auditory processing region of their brain if their brains are rewired\nto send visual signals to that area (Von Melchner ef al., 2000). This suggests that\nmuch of the mammalian brain might use a single algorithm to solve most of the\ndifferent tasks that the brain solves. Before this hypothesis, machine learning\nresearch was more fragmented, with different communities of researchers studying\nnatural language processing, vision, motion planning and speech recognition. Today,\nthese application communities are still separate, but it is common for deep learning\nresearch groups to study many or even all of these application areas simultaneously.\n\nWe are able to draw some rough guidelines from neuroscience. The basic idea of\nhaving many computational units that become intelligent only via their interactions\nwith each other is inspired by the brain. The Neocognitron (Fukushima, 1980)\nintroduced a powerful model architecture for processing images that was inspired\nby the structure of the mammalian visual system and later became the basis\nfor the modern convolutional network (LeCun ef al., 1998b), as we will see in\nsection 9.10. Most neural networks today are based on a model neuron called\nthe rectified linear unit. The original Cognitron (Fukushima, 1975) introduced\na more complicated version that was highly inspired by our knowledge of brain\nfunction. The simplified modern version was developed incorporating ideas from\nmany viewpoints, with Nair and Hinton (2010) and Glorot ef al. (2011a) citing\nneuroscience as an influence, and Jarrett ef al. (2009) citing more engineering-\noriented influences. While neuroscience is an important source of inspiration, it\nneed not be taken as a rigid guide. We know that actual neurons compute very\ndifferent functions than modern rectified linear units, but greater neural realism\nhas not yet led to an improvement in machine learning performance. Also, while\nneuroscience has successfully inspired several neural network architectures, we\ndo not yet know enough about biological learning for neuroscience to offer much\nguidance for the learning algorithms we use to train these architectures.\n\nMedia accounts often emphasize the similarity of deep learning to the brain.\nWhile it is true that deep learning researchers are more likely to cite the brain as an\ninfluence than researchers working in other machine learning fields such as kernel\nmachines or Bayesian statistics, one should not view deep learning as an attempt\nto simulate the brain. Modern deep learning draws inspiration from many fields,\nespecially applied math fundamentals like linear algebra, probability, information\ntheory, and numerical optimization. While some deep learning researchers cite\nneuroscience as an important source of inspiration, others are not concerned with\n\n16\n", "CHAPTER 1. INTRODUCTION\n\nneuroscience at all.\n\nIt is worth noting that the effort to understand how the brain works on\nan algorithmic level is alive and well. This endeavor is primarily known as\n\u201ccomputational neuroscience\u201d and is a separate field of study from deep learning.\nIt is common for researchers to move back and forth between both fields. The\nfield of deep learning is primarily concerned with how to build computer systems\nthat are able to successfully solve tasks requiring intelligence, while the field of\ncomputational neuroscience is primarily concerned with building more accurate\nmodels of how the brain actually works.\n\nIn the 1980s, the second wave of neural network research emerged in great\npart via a movement called connectionism or parallel distributed process-\ning (Rumelhart et al., 1986c; McClelland ef al., 1995). Connectionism arose in\nthe context of cognitive science. Cognitive science is an interdisciplinary approach\nto understanding the mind, combining multiple different levels of analysis. During\nthe early 1980s, most cognitive scientists studied models of symbolic reasoning.\nDespite their popularity, symbolic models were difficult to explain in terms of\nhow the brain could actually implement them using neurons. The connectionists\nbegan to study models of cognition that could actually be grounded in neural\nimplementations (Touretzky and Minton, 1985), reviving many ideas dating back\nto the work of psychologist Donald Hebb in the 1940s (Hebb, 1949).\n\nThe central idea in connectionism is that a large number of simple computational\nunits can achieve intelligent behavior when networked together. This insight\napplies equally to neurons in biological nervous systems and to hidden units in\ncomputational models.\n\nSeveral key concepts arose during the connectionism movement of the 1980s\nthat remain central to today\u2019s deep learning.\n\nOne of these concepts is that of distributed representation (Hinton ef al.,\n1986). This is the idea that each input to a system should be represented by\nmany features, and each feature should be involved in the representation of many\npossible inputs. For example, suppose we have a vision system that can recognize\ncars, trucks, and birds and these objects can each be red, green, or blue. One way\nof representing these inputs would be to have a separate neuron or hidden unit\nthat activates for each of the nine possible combinations: red truck, red car, red\nbird, green truck, and so on. This requires nine different neurons, and each neuron\nmust independently learn the concept of color and object identity. One way to\nimprove on this situation is to use a distributed representation, with three neurons\ndescribing the color and three neurons describing the object identity. This requires\nonly six neurons total instead of nine, and the neuron describing redness is able to\n\n17\n", "CHAPTER 1. INTRODUCTION\n\nlearn about redness from images of cars, trucks and birds, not only from images\nof one specific category of objects. The concept of distributed representation is\ncentral to this book, and will be described in greater detail in chapter 15.\n\nAnother major accomplishment of the connectionist movement was the suc-\ncessful use of back-propagation to train deep neural networks with internal repre-\nsentations and the popularization of the back-propagation algorithm (Rumelhart\net al., 1986a; LeCun, 1987). This algorithm has waxed and waned in popularity\nbut as of this writing is currently the dominant approach to training deep models.\n\nDuring the 1990s, researchers made important advances in modeling sequences\nwith neural networks. Hochreiter (1991) and Bengio ez al. (1994) identified some of\nthe fundamental mathematical difficulties in modeling long sequences, described in\nsection 10.7. Hochreiter and Schmidhuber (1997) introduced the long short-term\nmemory or LSTM network to resolve some of these difficulties. Today, the LSTM\nis widely used for many sequence modeling tasks, including many natural language\nprocessing tasks at Google.\n\nThe second wave of neural networks research lasted until the mid-1990s. Ven-\ntures based on neural networks and other AI technologies began to make unrealisti-\ncally ambitious claims while seeking investments. When AI research did not fulfill\nthese unreasonable expectations, investors were disappointed. Simultaneously,\nother fields of machine learning made advances. Kernel machines (Boser et al.,\n1992; Cortes and Vapnik, 1995; Sch\u00e9lkopf et al., 1999) and graphical models (Jor-\ndan, 1998) both achieved good results on many important tasks. These two factors\nled to a decline in the popularity of neural networks that lasted until 2007.\n\nDuring this time, neural networks continued to obtain impressive performance\non some tasks (LeCun ef al., 1998b; Bengio et al., 2001). The Canadian Institute\nfor Advanced Research (CIFAR) helped to keep neural networks research alive\nvia its Neural Computation and Adaptive Perception (NCAP) research initiative.\nThis program united machine learning research groups led by Geoffrey Hinton\nat University of Toronto, Yoshua Bengio at University of Montreal, and Yann\nLeCun at New York University. The CIFAR NCAP research initiative had a\nmulti-disciplinary nature that also included neuroscientists and experts in human\nand computer vision.\n\nAt this point in time, deep networks were generally believed to be very difficult\nto train. We now know that algorithms that have existed since the 1980s work\nquite well, but this was not apparent circa 2006. The issue is perhaps simply that\nthese algorithms were too computationally costly to allow much experimentation\nwith the hardware available at the time.\n\nThe third wave of neural networks research began with a breakthrough in\n\n18\n", "CHAPTER 1. INTRODUCTION\n\n2006. Geoffrey Hinton showed that a kind of neural network called a deep belief\nnetwork could be efficiently trained using a strategy called greedy layer-wise pre-\ntraining (Hinton et al., 2006), which will be described in more detail in section 15.1.\nThe other CIFAR-affiliated research groups quickly showed that the same strategy\ncould be used to train many other kinds of deep networks (Bengio et al., 2007;\nRanzato et al., 2007a) and systematically helped to improve generalization on\ntest examples. This wave of neural networks research popularized the use of the\n\nterm \u201cdeep learning\u201d to emphasize that researchers were now able to train deeper\nneural networks than had been possible before, and to focus attention on the\ntheoretical importance of depth (Bengio and LeCun, 2007; Delalleau and Bengio,\n2011; Pascanu et al., 2014da; Montufar et al., 2014). At this time, deep neural\nnetworks outperformed competing AI systems based on other machine learning\ntechnologies as well as hand-designed functionality. This third wave of popularity\nof neural networks continues to the time of this writing, though the focus of deep\nlearning research has changed dramatically within the time of this wave. The\nthird wave began with a focus on new unsupervised learning techniques and the\nability of deep models to generalize well from small datasets, but today there is\nmore interest in much older supervised learning algorithms and the ability of deep\nmodels to leverage large labeled datasets.\n\n1.2.2 Increasing Dataset Sizes\n\nOne may wonder why deep learning has only recently become recognized as a\ncrucial technology though the first experiments with artificial neural networks were\nconducted in the 1950s. Deep learning has been successfully used in commercial\napplications since the 1990s, but was often regarded as being more of an art than\na technology and something that only an expert could use, until recently. It is true\nthat some skill is required to get good performance from a deep learning algorithm.\nFortunately, the amount of skill required reduces as the amount of training data\nincreases. The learning algorithms reaching human performance on complex tasks\ntoday are nearly identical to the learning algorithms that struggled to solve toy\nproblems in the 1980s, though the models we train with these algorithms have\nundergone changes that simplify the training of very deep architectures. The most\nimportant new development is that today we can provide these algorithms with\nthe resources they need to succeed. Figure 1.8 shows how the size of benchmark\ndatasets has increased remarkably over time. This trend is driven by the increasing\ndigitization of society. As more and more of our activities take place on computers,\nmore and more of what we do is recorded. As our computers are increasingly\nnetworked together, it becomes easier to centralize these records and curate them\n\n19\n", "CHAPTER 1. INTRODUCTION\n\ninto a dataset appropriate for machine learning applications. The age of \u201cBig\nData\u201d has made machine learning much easier because the key burden of statistical\nestimation\u2014generalizing well to new data after observing only a small amount\nof data\u2014has been considerably lightened. As of 2016, a rough rule of thumb\nis that a supervised deep learning algorithm will generally achieve acceptable\nperformance with around 5,000 labeled examples per category, and will match or\nexceed human performance when trained with a dataset containing at least 10\nmillion labeled examples. Working successfully with datasets smaller than this is\nan important research area, focusing in particular on how we can take advantage\nof large quantities of unlabeled examples, with unsupervised or semi-supervised\nlearning.\n\n1.2.3. Increasing Model Sizes\n\nAnother key reason that neural networks are wildly successful today after enjoying\ncomparatively little success since the 1980s is that we have the computational\nresources to run much larger models today. One of the main insights of connection-\nism is that animals become intelligent when many of their neurons work together.\nAn individual neuron or small collection of neurons is not particularly useful.\n\nBiological neurons are not especially densely connected. As seen in figure 1.10,\nour machine learning models have had a number of connections per neuron that\nwas within an order of magnitude of even mammalian brains for decades.\n\nIn terms of the total number of neurons, neural networks have been astonishingly\nsmall until quite recently, as shown in figure 1.11. Since the introduction of hidden\nunits, artificial neural networks have doubled in size roughly every 2.4 years. This\ngrowth is driven by faster computers with larger memory and by the availability\nof larger datasets. Larger networks are able to achieve higher accuracy on more\ncomplex tasks. This trend looks set to continue for decades. Unless new technologies\nallow faster scaling, artificial neural networks will not have the same number of\nneurons as the human brain until at least the 2050s. Biological neurons may\nrepresent more complicated functions than current artificial neurons, so biological\nneural networks may be even larger than this plot portrays.\n\nIn retrospect, it is not particularly surprising that neural networks with fewer\nneurons than a leech were unable to solve sophisticated artificial intelligence prob-\nlems. Even today\u2019s networks, which we consider quite large from a computational\nsystems point of view, are smaller than the nervous system of even relatively\nprimitive vertebrate animals like frogs.\n\nThe increase in model size over time, due to the availability of faster CPUs,\n\n20\n", "CHAPTER 1. INTRODUCTION\n\nDataset size (number examples)\n\n1900 1950 1985 2000 2015\n\nFigure 1.8: Dataset sizes have increased greatly over time. In the early 1900s, statisticians\nstudied datasets using hundreds or thousands of manually compiled measurements (Garson,\n1900; Gosset, 1908; Anderson, 1935; Fisher, 1936). In the 1950s through 1980s, the pioneers\nof biologically inspired machine learning often worked with small, synthetic datasets, such\nas low-resolution bitmaps of letters, that were designed to incur low computational cost and\ndemonstrate that neural networks were able to learn specific kinds of functions (Widrow\nand Hoff, 1960; Rumelhart ef al., 1986b). In the 1980s and 1990s, machine learning\nbecame more statistical in nature and began to leverage larger datasets containing tens\nof thousands of examples such as the MNIST dataset (shown in figure 1.9) of scans\nof handwritten numbers (LeCun et al., 1998b). In the first decade of the 2000s, more\nsophisticated datasets of this same size, such as the CIFAR-10 dataset (IKrizhevsky and\nHinton, 2009) continued to be produced. Toward the end of that decade and throughout\nthe first half of the 2010s, significantly larger datasets, containing hundreds of thousands\nto tens of millions of examples, completely changed what was possible with deep learning.\nThese datasets included the public Street View House Numbers dataset (Netzer et al.,\n2011), various versions of the ImageNet dataset (Deng et al., 2009, 2010a; Russakovsky\net al., 2014a), and the Sports-1M dataset (Karpathy et al., 2014). At the top of the\ngraph, we see that datasets of translated sentences, such as IBM\u2019s dataset constructed\nfrom the Canadian Hansard (Brown et al., 1990) and the WMT 2014 English to French\ndataset (Schwenk, 2014) are typically far ahead of other dataset sizes.\n\n21\n", "CHAPTER 1. INTRODUCTION\n\nOy JQ} OV] DJS | HD P|) | ONIN [CR] 98) | WE |]\nS/G QL ALARI~] | PL PL PND |WIN [W/W] ~Ja |p is [ys\nMB} BS [S| 03] Oh | [83 [SG Nog] -RI-N | ~ | & |G [95\nDB) ~w] oo] \u2014~ fod} fod] SPE] G/N] Ge INU | Gy] sa] Jon [Uy |-R\nST}RO!D |~2 | |v? | 10) | UV) Bs GO OPS] SG] Ss] sq ]ou |e IN\n~/Y LOA CLEP IW) SC] PL NN INP S| S| a IN |\u00bb\nSq] | R]RD]G] P| \u2014 Jd] I I [ro [Sy] Ox] 00 0g ]-9 [SS | 00 | 89 [+9\nNT} Gy | 00] | QJ OV] 100) OD) CSN] | ~)-9 |B |S [os | 1S\nDO] &] SIH |~0 | O9/O |~0 |-9 | QIN [OQ] SO] Of [03 /Q | W]~\n9 |S] | BIS | O | |) O | Joa | GU] Ox} ~ |9 Jo9] [~9 |W\nwoo] BS )~O | Ho Jo |] =| Go )8 |W) | Ur] 99] G9 |= [08 JOS ow\nNV 0 | 9 [SJ P1158) P| D9] HAG | ~] HS [3 | I-95 [RK\nO/B] F/O!) &/) | Ce) O]o9 | |-c |S] B|~ Jory\nWI~/OQLP] NL! SIL) EIR) BOI~/ OMI [a | J 20 | ow\nBRP] ~[EL ABO As OKRA) P]R/W)/ pin\n~~) foo UJI A) || GIN IRI ]~ Jala lag\nOA] |W) |e] 1O lO) IN| A) BO] O/ Oy] Bl oa lla\n\n0\n6\nY\n6\n/\ng\n3\nY\n(6)\n/\neo)\n(eo)\nS\n6\nf\ni\nA\nZ\n&\n\u00a3\n\nLa)\n\n19\n#2\nol)\n\n3/0\n71\\5\n3/7\n/\\2\n3\\8\n/|0\nP\\7\nAG\n3/9\n4\\9\n\u201cla\ni\\s\n9/5\n9/2\n4/5\n9\\9\n4\\7\n\n+\n%\n~\n\u00a9\nLh\n+\neC\n\u00ae)\nwy\nNi\nbw\nG\n\nFigure 1.9: Example inputs from the MNIST dataset. The \u201cNIST\u201d stands for National\nInstitute of Standards and Technology, the agency that originally collected this data.\nThe \u201cM\u201d stands for \u201cmodified,\u201d since the data has been preprocessed for easier use with\nmachine learning algorithms. The MNIST dataset consists of scans of handwritten digits\nand associated labels describing which digit 0-9 is contained in each image. This simple\nclassification problem is one of the simplest and most widely used tests in deep learning\nresearch. It remains popular despite being quite easy for modern techniques to solve.\nGeoffrey Hinton has described it as \u201cthe drosophila of machine learning,\u201d meaning that\nit allows machine learning researchers to study their algorithms in controlled laboratory\nconditions, much as biologists often study fruit flies.\n\n22\n", "CHAPTER 1. INTRODUCTION\n\nthe advent of general purpose GPUs (described in section 12.1.2), faster network\nconnectivity and better software infrastructure for distributed computing, is one of\nthe most important trends in the history of deep learning. This trend is generally\nexpected to continue well into the future.\n\n1.2.4 Increasing Accuracy, Complexity and Real-World Impact\n\nSince the 1980s, deep learning has consistently improved in its ability to provide\naccurate recognition or prediction. Moreover, deep learning has consistently been\napplied with success to broader and broader sets of applications.\n\nThe earliest deep models were used to recognize individual objects in tightly\ncropped, extremely small images (Rumelhart ef al., 1986a). Since then there has\nbeen a gradual increase in the size of images neural networks could process. Modern\nobject recognition networks process rich high-resolution photographs and do not\nhave a requirement that the photo be cropped near the object to be recognized\n(Krizhevsky et al., 2012). Similarly, the earliest networks could only recognize\ntwo kinds of objects (or in some cases, the absence or presence of a single kind of\nobject), while these modern networks typically recognize at least 1,000 different\ncategories of objects. The largest contest in object recognition is the ImageNet\nLarge Scale Visual Recognition Challenge (ILSVRC) held each year. A dramatic\nmoment in the meteoric rise of deep learning came when a convolutional network\nwon this challenge for the first time and by a wide margin, bringing down the\nstate-of-the-art top-5 error rate from 26.1% to 15.3% (Krizhevsky et al., 2012),\nmeaning that the convolutional network produces a ranked list of possible categories\nfor each image and the correct category appeared in the first five entries of this\nlist for all but 15.3% of the test examples. Since then, these competitions are\nconsistently won by deep convolutional nets, and as of this writing, advances in\ndeep learning have brought the latest top-5 error rate in this contest down to 3.6%,\nas shown in figure 1.12.\n\nDeep learning has also had a dramatic impact on speech recognition. After\nimproving throughout the 1990s, the error rates for speech recognition stagnated\nstarting in about 2000. The introduction of deep learning (Dahl et al., 2010; Deng\net al., 2010b; Seide et al., 2011; Hinton et al., 2012a) to speech recognition resulted\nin a sudden drop of error rates, with some error rates cut in half. We will explore\nthis history in more detail in section 12.3.\n\nDeep networks have also had spectacular successes for pedestrian detection and\nimage segmentation (Sermanet et al., 2013; Farabet et al., 2013; Couprie et al.,\n2013) and yielded superhuman performance in traffic sign classification (Ciresan\n\n23\n", "CHAPTER 1. INTRODUCTION\n\n104\n\na\noO\nwo\n\nConnections per neuron\na\niS)\nNn\n\n10!\n\n1950 1985 2000 2015\n\nFigure 1.10: Initially, the number of connections between neurons in artificial neural\nnetworks was limited by hardware capabilities. Today, the number of connections between\nneurons is mostly a design consideration. Some artificial neural networks have nearly as\nmany connections per neuron as a cat, and it is quite common for other neural networks\nto have as many connections per neuron as smaller mammals like mice. Even the human\nbrain does not have an exorbitant amount of connections per neuron. Biological neural\nnetwork sizes from Wikipedia (2015).\n\nAdaptive linear element (Widrow and Hoff, 1960)\n\nNeocognitron (Fukushima, 1980)\n\nGPU-accelerated convolutional network (Chellapilla et al., 2006)\nDeep Boltzmann machine (Salakhutdinov and Hinton, 2009a)\n\n1\n2\n3\n4\n5. Unsupervised convolutional network (Jarrett et al., 2009)\n6. GPU-accelerated multilayer perceptron (Ciresan et al., 2010)\n\n7. Distributed autoencoder (Le et al., 2012)\n\n8. Multi-GPU convolutional network (Krizhevsky et al., 2012)\n\n9. COTS HPC unsupervised convolutional network (Coates et al., 2013)\n\n10. GoogLeNet (Szegedy et al., 2014a)\n\n24\n", "CHAPTER 1. INTRODUCTION\n\net al., 2012).\n\nAt the same time that the scale and accuracy of deep networks has increased,\nso has the complexity of the tasks that they can solve. Goodfellow et al. (2014d)\nshowed that neural networks could learn to output an entire sequence of characters\ntranscribed from an image, rather than just identifying a single object. Previously,\nit was widely believed that this kind of learning required labeling of the individual\nelements of the sequence (Giilcehre and Bengio, 2013). Recurrent neural networks,\nsuch as the LSTM sequence model mentioned above, are now used to model\nrelationships between sequences and other sequences rather than just fixed inputs.\nThis sequence-to-sequence learning seems to be on the cusp of revolutionizing\nanother application: machine translation (Sutskever ef al., 2014; Bahdanau et al.,\n2015).\n\nThis trend of increasing complexity has been pushed to its logical conclusion\nwith the introduction of neural Turing machines (Graves ef al., 2014a) that learn\nto read from memory cells and write arbitrary content to memory cells. Such\nneural networks can learn simple programs from examples of desired behavior. For\nexample, they can learn to sort lists of numbers given examples of scrambled and\nsorted sequences. This self-programming technology is in its infancy, but in the\nfuture could in principle be applied to nearly any task.\n\nAnother crowning achievement of deep learning is its extension to the domain of\nreinforcement learning. In the context of reinforcement learning, an autonomous\nagent must learn to perform a task by trial and error, without any guidance from\nthe human operator. DeepMind demonstrated that a reinforcement learning system\nbased on deep learning is capable of learning to play Atari video games, reaching\nhuman-level performance on many tasks (Munil ef al., 2015). Deep learning has\nalso significantly improved the performance of reinforcement learning for robotics\n(Finn et al., 2015).\n\nMany of these applications of deep learning are highly profitable. Deep learning\nis now used by many top technology companies including Google, Microsoft,\nFacebook, IBM, Baidu, Apple, Adobe, Netflix, NVIDIA and NEC.\n\nAdvances in deep learning have also depended heavily on advances in software\ninfrastructure. Software libraries such as Theano (Bergstra et al., 2010; Bastien\net al., 2012), PyLearn2 (Goodfellow et al., 2013c), Torch (Collobert e\u00a2 al., 2011b),\nDistBelief (Dean et al., 2012), Caffe (Jia, 2013), MXNet (Chen et al., 2015), and\nTensorFlow (Abadi et al., 2015) have all supported important research projects or\ncommercial products.\n\nDeep learning has also made contributions back to other sciences. Modern\nconvolutional networks for object recognition provide a model of visual processing\n\n25\n", "CHAPTER 1. INTRODUCTION\n\nthat neuroscientists can study (DiCarlo, 2013). Deep learning also provides useful\ntools for processing massive amounts of data and making useful predictions in\nscientific fields. It has been successfully used to predict how molecules will interact\nin order to help pharmaceutical companies design new drugs (Dali et al., 2014),\nto search for subatomic particles (Baldi ef al., 2014), and to automatically parse\nmicroscope images used to construct a 3-D map of the human brain (Knowles-\nBarley et al., 2014). We expect deep learning to appear in more and more scientific\nfields in the future.\n\nIn summary, deep learning is an approach to machine learning that has drawn\nheavily on our knowledge of the human brain, statistics and applied math as it\ndeveloped over the past several decades. In recent years, it has seen tremendous\ngrowth in its popularity and usefulness, due in large part to more powerful com-\nputers, larger datasets and techniques to train deeper networks. The years ahead\nare full of challenges and opportunities to improve deep learning even further and\nbring it to new frontiers.\n\n26\n", "CHAPTER 1. INTRODUCTION\n\nNumber of neurons (logarithmic scale)\n\n1950 1985 2000 2015\n\nFigure 1.11: Since the introduction of hidden units, artificial neural networks have doubled\nin size roughly every 2.4 years. Biological neural network sizes from Wikipedia (2015).\n\nPerceptron (Rosenblatt, 1958, 1962)\n\nAdaptive linear element (Widrow and Hoff, 1960)\n\nNeocognitron (Fukushima, 1980)\n\nEarly back-propagation network (Rumelhart et al., 1986b)\n\nRecurrent neural network for speech recognition (Robinson and Fallside, 1991)\nMultilayer perceptron for speech recognition (Bengio et al., 1991)\nMean field sigmoid belief network (Saul et al., 1996)\n\nLeNet-5 (LeCun et al., 1998b)\n\nEcho state network (Jaeger and Haas, 2004)\n\nDeep belief network (Hinton et al., 2006)\n\nGPU-accelerated convolutional network (Chellapilla et al., 2006)\nDeep Boltzmann machine (Salakhutdinov and Hinton, 2009%a)\nGPU-accelerated deep belief network (Raina et al., 2009)\nUnsupervised convolutional network (Jarrett et al., 2009)\nGPU-accelerated multilayer perceptron (Ciresan et al., 2010)\n\nOMP-1 network (Coates and Ng, 2011)\n\nDistributed autoencoder (Le et al., 2012)\n\nMulti-GPU convolutional network (Krizhevsky et al., 2012)\n\nCOTS HPC unsupervised convolutional network (Coates et al., 2013)\nGoogLeNet (Szegedy et al., 2014a)\n\n27\n", "CHAPTER 1. INTRODUCTION\n\nS S S S S\na am iy iy be\n=) a io) a fo)\n\nILSVRC classification error rate\n\u00b0\nr)\no\n\n0.00\n2010 2011 2012 2013 2014 2015\n\nFigure 1.12: Since deep networks reached the scale necessary to compete in the ImageNet\nLarge Scale Visual Recognition Challenge, they have consistently won the competition\nevery year, and yielded lower and lower error rates each time. Data from Russakovsky\net al. (2014b) and He et al. (2015).\n\n28\n", "Part I\n\nApplied Math and Machine\nLearning Basics\n", "This part of the book introduces the basic mathematical concepts needed to\nunderstand deep learning. We begin with general ideas from applied math that\nallow us to define functions of many variables, find the highest and lowest points\non these functions and quantify degrees of belief.\n\nNext, we describe the fundamental goals of machine learning. We describe how\nto accomplish these goals by specifying a model that represents certain beliefs,\ndesigning a cost function that measures how well those beliefs correspond with\nreality and using a training algorithm to minimize that cost function.\n\nThis elementary framework is the basis for a broad variety of machine learning\nalgorithms, including approaches to machine learning that are not deep. In the\nsubsequent parts of the book, we develop deep learning algorithms within this\nframework.\n\n30\n", "Chapter 2\n\nLinear Algebra\n\nLinear algebra is a branch of mathematics that is widely used throughout science\nand engineering. However, because linear algebra is a form of continuous rather\nthan discrete mathematics, many computer scientists have little experience with it.\nA good understanding of linear algebra is essential for understanding and working\nwith many machine learning algorithms, especially deep learning algorithms. We\ntherefore precede our introduction to deep learning with a focused presentation of\nthe key linear algebra prerequisites.\n\nIf you are already familiar with linear algebra, feel free to skip this chapter. If\nyou have previous experience with these concepts but need a detailed reference\nsheet to review key formulas, we recommend The Matrix Cookbook (Petersen and\nPedersen, 2006). If you have no exposure at all to linear algebra, this chapter\nwill teach you enough to read this book, but we highly recommend that you also\nconsult another resource focused exclusively on teaching linear algebra, such as\nShilov (1977). This chapter will completely omit many important linear algebra\ntopics that are not essential for understanding deep learning.\n\n2.1 Scalars, Vectors, Matrices and Tensors\n\nThe study of linear algebra involves several types of mathematical objects:\n\ne Scalars: A scalar is just a single number, in contrast to most of the other\nobjects studied in linear algebra, which are usually arrays of multiple numbers.\nWe write scalars in italics. We usually give scalars lower-case variable names.\nWhen we introduce them, we specify what kind of number they are. For\n\n31\n", "CHAPTER 2. LINEAR ALGEBRA\n\nexample, we might say \u201cLet s \u20ac R be the slope of the line,\u201d while defining a\nreal-valued scalar, or \u201cLet n \u20ac N be the number of units,\u201d while defining a\nnatural number scalar.\n\ne Vectors: A vector is an array of numbers. The numbers are arranged in\norder. We can identify each individual number by its index in that ordering.\nTypically we give vectors lower case names written in bold typeface, such\nas x. The elements of the vector are identified by writing its name in italic\ntypeface, with a subscript. The first element of x is x1, the second element\nis x2 and so on. We also need to say what kind of numbers are stored in\nthe vector. If each element is in R, and the vector has n elements, then the\nvector lies in the set formed by taking the Cartesian product of R n times,\ndenoted as R\u201d. When we need to explicitly identify the elements of a vector,\nwe write them as a column enclosed in square brackets:\n\noa\n\na= . , (2.1)\n\nIn\n\nWe can think of vectors as identifying points in space, with each element\ngiving the coordinate along a different axis.\n\nSometimes we need to index a set of elements of a vector. In this case, we\ndefine a set containing the indices and write the set as a subscript. For\nexample, to access 71, 73 and 26, we define the set S = {1,3,6} and write\nas. We use the \u2014 sign to index the complement of a set. For example x_ is\nthe vector containing all elements of a except for 71, and #_g is the vector\ncontaining all of the elements of x except for 71, x3 and a.\n\ne Matrices: A matrix is a 2-D array of numbers, so each element is identified\nby two indices instead of just one. We usually give matrices upper-case\nvariable names with bold typeface, such as A. If a real-valued matrix A has\na height of m and a width of n, then we say that A \u20ac R\u201d*\u201d. We usually\nidentify the elements of a matrix using its name in italic but not bold font,\nand the indices are listed with separating commas. For example, Aj,1 is the\nupper left entry of A and Am\u00bb, is the bottom right entry. We can identify all\nof the numbers with vertical coordinate 7 by writing a \u201c:\u201d for the horizontal\ncoordinate. For example, Aj, denotes the horizontal cross section of A with\nvertical coordinate 7. This is known as the 7-th row of A. Likewise, A.,; is\n\n32\n", "CHAPTER 2. LINEAR ALGEBRA\n\nFigure 2.1: The transpose of the matrix can be thought of as a mirror image across the\nmain diagonal.\n\nthe i-th column of A. When we need to explicitly identify the elements of\na matrix, we write them as an array enclosed in square brackets:\n\nAi Aip . (2.2)\nAoi Ago\n\nSometimes we may need to index matrix-valued expressions that are not just\na single letter. In this case, we use subscripts after the expression, but do\nnot convert anything to lower case. For example, f(A)j,; gives element (#, j)\nof the matrix computed by applying the function f to A.\n\ne Tensors: In some cases we will need an array with more than two axes.\nIn the general case, an array of numbers arranged on a regular grid with a\nvariable number of axes is known as a tensor. We denote a tensor named \u201cA\u201d\nwith this typeface: A. We identify the element of A at coordinates (i, j,k)\nby writing Aj 54.\n\nOne important operation on matrices is the transpose. The transpose of a\nmatrix is the mirror image of the matrix across a diagonal line, called the main\ndiagonal, running down and to the right, starting from its upper left corner. See\nfigure 2.1 for a graphical depiction of this operation. We denote the transpose of a\nmatrix A as A', and it is defined such that\n\n(Al )ig = Aji. (2.3)\n\nVectors can be thought of as matrices that contain only one column. The\ntranspose of a vector is therefore a matrix with only one row. Sometimes we\n\n33\n", "CHAPTER 2. LINEAR ALGEBRA\n\ndefine a vector by writing out its elements in the text inline as a row matrix,\nthen using the transpose operator to turn it into a standard column vector, e.g.,\nx = [r1,22,23]'.\n\nA scalar can be thought of as a matrix with only a single entry. From this, we\n\ncan see that a scalar is its own transpose: a = al.\n\nWe can add matrices to each other, as long as they have the same shape, just\nby adding their corresponding elements: C = A + B where C;,; = Ajj + Bij.\n\nWe can also add a scalar to a matrix or multiply a matrix by a scalar, just\nby performing that operation on each element of a matrix: D =a-B +c where\nDig =a: Bij +c.\n\nIn the context of deep learning, we also use some less conventional notation.\nWe allow the addition of matrix and a vector, yielding another matrix: C = A +b,\nwhere Cj; = Ajj +;. In other words, the vector b is added to each row of the\nmatrix. This shorthand eliminates the need to define a matrix with b copied into\neach row before doing the addition. This implicit copying of b to many locations\nis called broadcasting.\n\n2.2 Multiplying Matrices and Vectors\n\nOne of the most important operations involving matrices is multiplication of two\nmatrices. The matrix product of matrices A and B is a third matrix C. In\norder for this product to be defined, A must have the same number of columns as\nB has rows. If A is of shape m x n and B is of shape n x p, then C is of shape\nm x p. We can write the matrix product just by placing two or more matrices\ntogether, e.g.\n\nC=AB. (2.4)\n\nThe product operation is defined by\n\nCig = 0 Ain Bry: (2.5)\nk\n\nNote that the standard product of two matrices is not just a matrix containing\nthe product of the individual elements. Such an operation exists and is called the\nelement-wise product or Hadamard product, and is denoted as A \u00a9 B.\n\nThe dot product between two vectors x and y of the same dimensionality\nis the matrix product a\u2019 y. We can think of the matrix product C = AB as\ncomputing C;,; as the dot product between row i of A and column j of B.\n\n34\n", "CHAPTER 2. LINEAR ALGEBRA\n\nMatrix product operations have many useful properties that make mathematica\nanalysis of matrices more convenient. For example, matrix multiplication is\ndistributive:\n\nA(B+C)=AB+AC. (2.6\nIt is also associative:\nA(BC) = (AB)C. (2.7\n\nMatrix multiplication is not commutative (the condition AB = BA does no\nalways hold), unlike scalar multiplication. However, the dot product between two\nvectors is commutative:\n\naly=y'a. (2.8\nThe transpose of a matrix product has a simple form:\n(AB)'=B'A'. (2.9)\n\nThis allows us to demonstrate equation 2.8, by exploiting the fact that the value\nof such a product is a scalar and therefore equal to its own transpose:\n\nw'y=(\u00ab'y) =y\"e. (2.10)\n\nSince the focus of this textbook is not linear algebra, we do not attempt to\ndevelop a comprehensive list of useful properties of the matrix product here, but\nthe reader should be aware that many more exist.\n\nWe now know enough linear algebra notation to write down a system of linear\nequations:\nAz=b (2.11)\n\nwhere A \u20ac R\u2122*\u201d is a known matrix, b \u20ac R\u2122 is a known vector, and x \u20ac R\u201d isa\nvector of unknown variables we would like to solve for. Each element x; of x is one\nof these unknown variables. Each row of A and each element of b provide another\nconstraint. We can rewrite equation 2.11 as:\n\nAj,.\u00a9 = by 2.12\nAo,.@ = by 2.13\n2.14\nAm,:@ = bm 2.15\nor, even more explicitly, as:\nAjit, + Ajotet:+++ Aintn = b1 2.16\n", "CHAPTER 2. LINEAR ALGEBRA\n\noor\nore\nrPOoO\u00b0O\n\nFigure 2.2: Example identity matrix: This is Is.\n\nAoi t1 + Ag2%2 +--+ + Agntn = be (2.17)\n(2.18)\nAmit + Am 22 tere Amn&n = bn. (2.19)\n\nMatrix-vector product notation provides a more compact representation for\nequations of this form.\n\n2.3 Identity and Inverse Matrices\n\nLinear algebra offers a powerful tool called matrix inversion that allows us to\nanalytically solve equation 2.11 for many values of A.\n\nTo describe matrix inversion, we first need to define the concept of an identity\nmatrix. An identity matrix is a matrix that does not change any vector when we\nmultiply that vector by that matrix. We denote the identity matrix that preserves\nn-dimensional vectors as In. Formally, In \u20ac R\"*\", and\n\nVe \u20ac R\" Inv =a. (2.20)\n\nThe structure of the identity matrix is simple: all of the entries along the main\ndiagonal are 1, while all of the other entries are zero. See figure 2.2 for an example.\n\nThe matrix inverse of A is denoted as A, and it is defined as the matrix\nsuch that\nA'A=I,. (2.21)\n\nWe can now solve equation 2.11 by the following steps:\n\nAx =b (2.22)\nA 'Ax=A~'b (2.23)\nI,2=A\u2122'b (2.24)\n\n36\n", "CHAPTER 2. LINEAR ALGEBRA\n\na= A'b. (2.25)\n\nOf course, this process depends on it being possible to find A~!. We discuss\nthe conditions for the existence of A~! in the following section.\n\nWhen A7! exists, several different algorithms exist for finding it in closed form.\nIn theory, the same inverse matrix can then be used to solve the equation many\ntimes for different values of b. However, A~! is primarily useful as a theoretical\ntool, and should not actually be used in practice for most software applications.\nBecause A~! can be represented with only limited precision on a digital computer,\nalgorithms that make use of the value of b can usually obtain more accurate\nestimates of ax.\n\n2.4 Linear Dependence and Span\n\nIn order for A~! to exist, equation 2.11 must have exactly one solution for every\nvalue of b. However, it is also possible for the system of equations to have no\nsolutions or infinitely many solutions for some values of b. It is not possible to\nhave more than one but less than infinitely many solutions for a particular b; if\nboth x and y are solutions then\n\nz=axn+(l\u2014a)y (2.26)\n\nis also a solution for any real a.\n\nTo analyze how many solutions the equation has, we can think of the columns\nof A as specifying different directions we can travel from the origin (the point\nspecified by the vector of all zeros), and determine how many ways there are of\nreaching b. In this view, each element of x specifies how far we should travel in\neach of these directions, with x; specifying how far to move in the direction of\ncolumn 7:\n\nAx = 5\u00b0 2;A,;. (2.27)\na\n\nIn general, this kind of operation is called a linear combination. Formally, a\nlinear combination of some set of vectors fv, eey y(\u2122)} is given by multiplying\neach vector uv) by a corresponding scalar coefficient and adding the results:\n\nSo cv. (2.28)\n\nThe span of a set of vectors is the set of all points obtainable by linear combination\nof the original vectors.\n\n37\n", "CHAPTER 2. LINEAR ALGEBRA\n\nDetermining whether Aw = b has a solution thus amounts to testing whether b\nis in the span of the columns of A. This particular span is known as the column\nspace or the range of A.\n\nIn order for the system Aw = b to have a solution for all values of b \u20ac R\"\u201d,\nwe therefore require that the column space of A be all of R\u2122. If any point in R\u2122\u201d\nis excluded from the column space, that point is a potential value of b that has\nno solution. The requirement that the column space of A be all of R\u2122 implies\nimmediately that A must have at least m columns, i.e., n > m. Otherwise, the\ndimensionality of the column space would be less than m. For example, consider a\n3 x 2 matrix. The target bis 3-D, but a is only 2-D, so modifying the value of x\nat best allows us to trace out a 2-D plane within R\u00b0. The equation has a solution\nif and only if b lies on that plane.\n\nHaving n > m is only a necessary condition for every point to have a solution.\nIt is not a sufficient condition, because it is possible for some of the columns to\nbe redundant. Consider a 2 x 2 matrix where both of the columns are identical.\nThis has the same column space as a 2 x 1 matrix containing only one copy of the\nreplicated column. In other words, the column space is still just a line, and fails to\nencompass all of R?, even though there are two columns.\n\nFormally, this kind of redundancy is known as linear dependence. A set of\nvectors is linearly independent if no vector in the set is a linear combination\nof the other vectors. If we add a vector to a set that is a linear combination of\nthe other vectors in the set, the new vector does not add any points to the set\u2019s\nspan. This means that for the column space of the matrix to encompass all of R\u201d,\nthe matrix must contain at least one set of m linearly independent columns. This\ncondition is both necessary and sufficient for equation 2.11 to have a solution for\nevery value of b. Note that the requirement is for a set to have exactly m linear\nindependent columns, not at least m. No set of m-dimensional vectors can have\nmore than m mutually linearly independent columns, but a matrix with more than\nm columns may have more than one such set.\n\nIn order for the matrix to have an inverse, we additionally need to ensure that\nequation 2.11 has at most one solution for each value of b. To do so, we need to\nensure that the matrix has at most m columns. Otherwise there is more than one\nway of parametrizing each solution.\n\nTogether, this means that the matrix must be square, that is, we require that\nm =n and that all of the columns must be linearly independent. A square matrix\nwith linearly dependent columns is known as singular.\n\nIf A is not square or is square but singular, it can still be possible to solve the\nequation. However, we can not use the method of matrix inversion to find the\n\n38\n", "CHAPTER 2. LINEAR ALGEBRA\n\nsolution.\n\nSo far we have discussed matrix inverses as being multiplied on the left. It is\nalso possible to define an inverse that is multiplied on the right:\n\nAA'=I. (2.29)\n\nFor square matrices, the left inverse and right inverse are equal.\n\n2.5 Norms\n\nSometimes we need to measure the size of a vector. In machine learning, we usually\nmeasure the size of vectors using a function called a norm. Formally, the Z? norm\nis given by\n\ntll\u00bb = (Sia) (2.30\n\nfor p\u20ac R,p>1.\n\nNorms, including the L? norm, are functions mapping vectors to non-negative\nvalues. On an intuitive level, the norm of a vector a measures the distance from\nthe origin to the point a. More rigorously, a norm is any function f that satisfies\nthe following properties:\n\ne f(x) =0>2=0\ne f(a@+y) < f(x) + f(y) (the triangle inequality)\ne Va ER, f(ax) = lal f(x)\n\nThe L? norm, with p = 2, is known as the Euclidean norm. It is simply the\nEuclidean distance from the origin to the point identified by \u00ab. The L? norm is\nused so frequently in machine learning that it is often denoted simply as ||a||, with\nthe subscript 2 omitted. It is also common to measure the size of a vector using\nthe squared L? norm, which can be calculated simply as \u00ab \u2018a.\n\nThe squared L? norm is more convenient to work with mathematically and\ncomputationally than the L? norm itself. For example, the derivatives of the\nsquared LZ? norm with respect to each element of \u00ab each depend only on the\ncorresponding element of x, while all of the derivatives of the [* norm depend\non the entire vector. In many contexts, the squared L? norm may be undesirable\nbecause it increases very slowly near the origin. In several machine learning\n\n39\n", "CHAPTER 2. LINEAR ALGEBRA\n\napplications, it is important to discriminate between elements that are exactly\nzero and elements that are small but nonzero. In these cases, we turn to a function\nthat grows at the same rate in all locations, but retains mathematical simplicity:\nthe L' norm. The L! norm may be simplified to\n\nI|ae|l = \u00bb |2i\\. (2.31)\n\nThe L! norm is commonly used in machine learning when the difference between\nzero and nonzero elements is very important. Every time an element of a moves\naway from 0 by \u20ac, the L! norm increases by e.\n\nWe sometimes measure the size of the vector by counting its number of nonzero\nelements. Some authors refer to this function as the \u201cL\u00b0 norm,\u201d but this is incorrect\nterminology. The number of non-zero entries in a vector is not a norm, because\nscaling the vector by a does not change the number of nonzero entries. The L!\nnorm is often used as a substitute for the number of nonzero entries.\n\nOne other norm that commonly arises in machine learning is the L\u00b0 norm,\nalso known as the max norm. This norm simplifies to the absolute value of the\nelement with the largest magnitude in the vector,\n\n[20 = maser. (2.32)\n\nSometimes we may also wish to measure the size of a matrix. In the context\nof deep learning, the most common way to do this is with the otherwise obscure\n\nFrobenius norm:\n|Alle= [9\u00b0 A?,, (2.33)\nij\n\nwhich is analogous to the L? norm of a vector.\n\nThe dot product of two vectors can be rewritten in terms of norms. Specifically,\naly = ||e||2\\|y|| 200s 0 (2.34)\n\nwhere @ is the angle between x and y.\n\n2.6 Special Kinds of Matrices and Vectors\n\nSome special kinds of matrices and vectors are particularly useful.\n\nDiagonal matrices consist mostly of zeros and have non-zero entries only along\nthe main diagonal. Formally, a matrix D is diagonal if and only if Dj; = 0 for\n\n40\n", "CHAPTER 2. LINEAR ALGEBRA\n\nallt \u00a37. We have already seen one example of a diagonal matrix: the identity\nmatrix, where all of the diagonal entries are 1. We write diag(v) to denote a square\ndiagonal matrix whose diagonal entries are given by the entries of the vector v.\nDiagonal matrices are of interest in part because multiplying by a diagonal matrix\nis very computationally efficient. To compute diag(v)a, we only need to scale each\nelement x; by v;. In other words, diag(v)a% = v \u00a9 x. Inverting a square diagonal\nmatrix is also efficient. The inverse exists only if every diagonal entry is nonzero,\nand in that case, diag(v)~! = diag([1/v1,...,1/u]'). In many cases, we may\nderive some very general machine learning algorithm in terms of arbitrary matrices,\nbut obtain a less expensive (and less descriptive) algorithm by restricting some\nmatrices to be diagonal.\n\nNot all diagonal matrices need be square. It is possible to construct a rectangular\ndiagonal matrix. Non-square diagonal matrices do not have inverses but it is still\npossible to multiply by them cheaply. For a non-square diagonal matrix D, the\nproduct Dz will involve scaling each element of x, and either concatenating some\nzeros to the result if D is taller than it is wide, or discarding some of the last\nelements of the vector if D is wider than it is tall.\n\nA symmetric matrix is any matrix that is equal to its own transpose:\nA=Al'. (2.35)\n\nSymmetric matrices often arise when the entries are generated by some function of\ntwo arguments that does not depend on the order of the arguments. For example,\nif A is a matrix of distance measurements, with Aj; giving the distance from point\ni to point j, then Aj; = Aj; because distance functions are symmetric.\n\nA unit vector is a vector with unit norm:\n\nIIe\\l2 = 1. (2.36)\n\nA vector # and a vector y are orthogonal to each other if \u00aby= 0. If both\nvectors have nonzero norm, this means that they are at a 90 degree angle to each\nother. In R\u201d, at most n vectors may be mutually orthogonal with nonzero norm.\nIf the vectors are not only orthogonal but also have unit norm, we call them\northonormal.\n\nAn orthogonal matrix is a square matrix whose rows are mutually orthonor-\nmal and whose columns are mutually orthonormal:\n\nA'A=AA' =I. (2.37)\n\n41\n", "CHAPTER 2. LINEAR ALGEBRA\n\nThis implies that\nA l=A', (2.38)\n\nso orthogonal matrices are of interest because their inverse is very cheap to compute.\nPay careful attention to the definition of orthogonal matrices. Counterintuitively,\ntheir rows are not merely orthogonal but fully orthonormal. There is no special\nterm for a matrix whose rows or columns are orthogonal but not orthonormal.\n\n2.7 Eigendecomposition\n\nMany mathematical objects can be understood better by breaking them into\nconstituent parts, or finding some properties of them that are universal, not caused\nby the way we choose to represent them.\n\nFor example, integers can be decomposed into prime factors. The way we\nrepresent the number 12 will change depending on whether we write it in base ten\nor in binary, but it will always be true that 12 = 2x 2 x 3. From this representation\nwe can conclude useful properties, such as that 12 is not divisible by 5, or that any\ninteger multiple of 12 will be divisible by 3.\n\nMuch as we can discover something about the true nature of an integer by\ndecomposing it into prime factors, we can also decompose matrices in ways that\nshow us information about their functional properties that is not obvious from the\nrepresentation of the matrix as an array of elements.\n\nOne of the most widely used kinds of matrix decomposition is called eigen-\ndecomposition, in which we decompose a matrix into a set of eigenvectors and\neigenvalues.\n\nAn eigenvector of a square matrix A is a non-zero vector v such that multi-\nplication by A alters only the scale of v:\n\nAv =v. (2.39)\n\nThe scalar \\ is known as the eigenvalue corresponding to this eigenvector. (One\ncan also find a left eigenvector such that v'A = dv!, but we are usually\nconcerned with right eigenvectors).\n\nIf v is an eigenvector of A, then so is any rescaled vector sv for s \u20ac R,s \u20ac 0.\nMoreover, sv still has the same eigenvalue. For this reason, we usually only look\nfor unit eigenvectors.\n\nSuppose that a matrix A has n linearly independent eigenvectors, fo, eey\nvi, with corresponding eigenvalues {A1,..., An}. We may concatenate all of the\n\n42\n", "CHAPTER 2. LINEAR ALGEBRA\n\nEffect of eigenvectors and eigenvalues\n\nBefore multiplication After multiplication\n\n3 - 3 t\nyi\nb) 2 ed\n1 yp 1\ng O w= iO y2)\n(2) 2 2)\n1 \u20141 4\n=) \u20142 4\n3 n n n 3 n n n n\n\u20143 \u2014-2 \u2014-1 0 1 2 3 \u20143 -2 \u2014-1 0 1 2 3\naa) y\n\nFigure 2.3: An example of the effect of eigenvectors and eigenvalues. Here, we have\na matrix A with two orthonormal eigenvectors, v\u201c) with eigenvalue \\, and v@) with\neigenvalue A\u00bb. (Left)We plot the set of all unit vectors u \u20ac R? as a unit circle. (Right)We\nplot the set of all points Au. By observing the way that A distorts the unit circle, we\ncan see that it scales space in direction v by ;.\n\n1)\n\neigenvectors to form a matrix V with one eigenvector per column: V = [v! pees\n\nov), Likewise, we can concatenate the eigenvalues to form a vector A = [Aj,..\nAn] !. The eigendecomposition of A is then given by\n\n\u201c9\n\nA =Vdiag(A)V~'. (2.40)\n\nWe have seen that constructing matrices with specific eigenvalues and eigenvec-\ntors allows us to stretch space in desired directions. However, we often want to\ndecompose matrices into their eigenvalues and eigenvectors. Doing so can help\nus to analyze certain properties of the matrix, much as decomposing an integer\ninto its prime factors can help us understand the behavior of that integer.\n\nNot every matrix can be decomposed into eigenvalues and eigenvectors. In some\n\n43\n", "CHAPTER 2. LINEAR ALGEBRA\n\ncases, the decomposition exists, but may involve complex rather than real numbers.\nFortunately, in this book, we usually need to decompose only a specific class of\nmatrices that have a simple decomposition. Specifically, every real symmetric\nmatrix can be decomposed into an expression using only real-valued eigenvectors\nand eigenvalues:\n\nA=QAQ\u2019, (2.41)\n\nwhere Q is an orthogonal matrix composed of eigenvectors of A, and A is a\ndiagonal matrix. The eigenvalue A;,; is associated with the eigenvector in column 7\nof Q, denoted as Q.;. Because Q is an orthogonal matrix, we can think of A as\nscaling space by Xj in direction v\u2122. See figure 2.3 for an example.\n\nWhile any real symmetric matrix A is guaranteed to have an eigendecomposi-\ntion, the eigendecomposition may not be unique. If any two or more eigenvectors\nshare the same eigenvalue, then any set of orthogonal vectors lying in their span\nare also eigenvectors with that eigenvalue, and we could equivalently choose a Q\nusing those eigenvectors instead. By convention, we usually sort the entries of A\nin descending order. Under this convention, the eigendecomposition is unique only\nif all of the eigenvalues are unique.\n\nThe eigendecomposition of a matrix tells us many useful facts about the\nmatrix. The matrix is singular if and only if any of the eigenvalues are zero.\nThe eigendecomposition of a real symmetric matrix can also be used to optimize\nquadratic expressions of the form f(x) = x' Ax subject to ||a||2 = 1. Whenever x\nis equal to an eigenvector of A, f takes on the value of the corresponding eigenvalue.\nThe maximum value of f within the constraint region is the maximum eigenvalue\nand its minimum value within the constraint region is the minimum eigenvalue.\n\nA matrix whose eigenvalues are all positive is called positive definite. A\nmatrix whose eigenvalues are all positive or zero-valued is called positive semidefi-\nnite. Likewise, if all eigenvalues are negative, the matrix is negative definite, and\nif all eigenvalues are negative or zero-valued, it is negative semidefinite. Positive\nsemidefinite matrices are interesting because they guarantee that Va, \u00ab' Ag > 0.\nPositive definite matrices additionally guarantee that \u00ab' Ax =0 => x = 0.\n\n2.8 Singular Value Decomposition\n\nIn section 2.7, we saw how to decompose a matrix into eigenvectors and eigenvalues.\nThe singular value decomposition (SVD) provides another way to factorize\na matrix, into singular vectors and singular values. The SVD allows us to\ndiscover some of the same kind of information as the eigendecomposition. However,\n\n44\n", "CHAPTER 2. LINEAR ALGEBRA\n\nthe SVD is more generally applicable. Every real matrix has a singular value\ndecomposition, but the same is not true of the eigenvalue decomposition. For\nexample, if a matrix is not square, the eigendecomposition is not defined, and we\nmust use a singular value decomposition instead.\n\nRecall that the eigendecomposition involves analyzing a matrix A to discover\n\na matrix V of eigenvectors and a vector of eigenvalues A such that we can rewrite\nAas\n\nA =Vdiag(A)V~'. (2.42)\n\nThe singular value decomposition is similar, except this time we will write A\nas a product of three matrices:\n\nA=UDV'. (2.43)\n\nSuppose that A is anm xn matrix. Then U is defined to be an m x m matrix,\nD to be an m x n matrix, and V to be an n x n matrix.\n\nEach of these matrices is defined to have a special structure. The matrices U\nand V are both defined to be orthogonal matrices. The matrix D is defined to be\na diagonal matrix. Note that D is not necessarily square.\n\nThe elements along the diagonal of D are known as the singular values of\nthe matrix A. The columns of U are known as the left-singular vectors. The\ncolumns of V are known as as the right-singular vectors.\n\nWe can actually interpret the singular value decomposition of A in terms of\nthe eigendecomposition of functions of A. The left-singular vectors of A are the\neigenvectors of AA'. The right-singular vectors of A are the eigenvectors of A! A.\nThe non-zero singular values of A are the square roots of the eigenvalues of A! A.\n\nThe same is true for AA\".\n\nPerhaps the most useful feature of the SVD is that we can use it to partially\ngeneralize matrix inversion to non-square matrices, as we will see in the next\nsection.\n\n2.9 The Moore-Penrose Pseudoinverse\n\nMatrix inversion is not defined for matrices that are not square. Suppose we want\nto make a left-inverse B of a matrix A, so that we can solve a linear equation\n\nAn=y (2.44)\n", "CHAPTER 2. LINEAR ALGEBRA\n\nby left-multiplying each side to obtain\nx= By. (2.45)\n\nDepending on the structure of the problem, it may not be possible to design a\nunique mapping from A to B.\n\nIf A is taller than it is wide, then it is possible for this equation to have\nno solution. If A is wider than it is tall, then there could be multiple possible\nsolutions.\n\nThe Moore-Penrose pseudoinverse allows us to make some headway in\nthese cases. The pseudoinverse of A is defined as a matrix\n\nAt =lim(ATA+alI)\u201c1A\u2122. (2.46)\na\\0\n\nPractical algorithms for computing the pseudoinverse are not based on this defini-\ntion, but rather the formula\n\nAt+=vDtuU', (2.47)\n\nwhere U, Dand V are the singular value decomposition of A, and the pseudoinverse\nD* of a diagonal matrix D is obtained by taking the reciprocal of its non-zero\nelements then taking the transpose of the resulting matrix.\n\nWhen A has more columns than rows, then solving a linear equation using the\npseudoinverse provides one of the many possible solutions. Specifically, it provides\nthe solution 2 = A* y with minimal Euclidean norm ||z||2 among all possible\nsolutions.\n\nWhen A has more rows than columns, it is possible for there to be no solution.\nIn this case, using the pseudoinverse gives us the x for which Az is as close as\npossible to y in terms of Euclidean norm || Aa \u2014 y]|2.\n\n2.10 The Trace Operator\nThe trace operator gives the sum of all of the diagonal entries of a matrix:\n\nTr(A) = )> Ais. (2.48)\n\nThe trace operator is useful for a variety of reasons. Some operations that are\ndifficult to specify without resorting to summation notation can be specified using\n\n46\n", "CHAPTER 2. LINEAR ALGEBRA\n\nmatrix products and the trace operator. For example, the trace operator provides\nan alternative way of writing the Frobenius norm of a matrix:\n\n|All p= Tr(AA\u2018). (2.49)\n\nWriting an expression in terms of the trace operator opens up opportunities to\nmanipulate the expression using many useful identities. For example, the trace\noperator is invariant to the transpose operator:\n\nTr(A) = Tr(A!'). (2.50)\n\nThe trace of a square matrix composed of many factors is also invariant to\nmoving the last factor into the first position, if the shapes of the corresponding\nmatrices allow the resulting product to be defined:\n\nTr(ABC) = Tr(CAB) = Tr(BCA) (2.51)\nor more generally,\nn n-1\nTr(][ F\u00ae) = TF TT F\u201d). (2.52)\ni=1 i=1\n\nThis invariance to cyclic permutation holds even if the resulting product has a\ndifferent shape. For example, for A \u20ac R\u2019*\" and B \u20ac R\"*\u2122, we have\n\nTr(AB) = Tr(BA) (2.53)\n\neven though AB \u20ac R\u2122*\u2122 and BA \u20ac R\"*\u201d.\n\nAnother useful fact to keep in mind is that a scalar is its own trace: a = Tr(a).\n\n2.11 The Determinant\n\nThe determinant of a square matrix, denoted det(A), is a function mapping\nmatrices to real scalars. The determinant is equal to the product of all the\neigenvalues of the matrix. The absolute value of the determinant can be thought\nof as a measure of how much multiplication by the matrix expands or contracts\nspace. If the determinant is 0, then space is contracted completely along at least\none dimension, causing it to lose all of its volume. If the determinant is 1, then\nthe transformation preserves volume.\n\n47\n", "CHAPTER 2. LINEAR ALGEBRA\n\n2.12 Example: Principal Components Analysis\n\nOne simple machine learning algorithm, principal components analysis or PCA\ncan be derived using only knowledge of basic linear algebra.\n\nSuppose we have a collection of m points fa, eey alm} in R\". Suppose we\nwould like to apply lossy compression to these points. Lossy compression means\nstoring the points in a way that requires less memory but may lose some precision.\nWe would like to lose as little precision as possible.\n\nOne way we can encode these points is to represent a lower-dimensional version\nof them. For each point 2 \u20ac R\u201d we will find a corresponding code vector ec \u20ac R!.\nIf 1 is smaller than n, it will take less memory to store the code points than the\noriginal data. We will want to find some encoding function that produces the code\nfor an input, f(a) =c, and a decoding function that produces the reconstructed\ninput given its code, x \u00a9 g(f(a)).\n\nPCA is defined by our choice of the decoding function. Specifically, to make the\ndecoder very simple, we choose to use matrix multiplication to map the code back\ninto R\". Let g(c) = De, where D \u20ac R\"' is the matrix defining the decoding.\n\nComputing the optimal code for this decoder could be a difficult problem. To\nkeep the encoding problem easy, PCA constrains the columns of D to be orthogonal\nto each other. (Note that D is still not technically \u201can orthogonal matrix\u201d unless\nl=n)\n\nWith the problem as described so far, many solutions are possible, because we\ncan increase the scale of D.; if we decrease c; proportionally for all points. To give\nthe problem a unique solution, we constrain all of the columns of D to have unit\nnorm.\n\nIn order to turn this basic idea into an algorithm we can implement, the first\nthing we need to do is figure out how to generate the optimal code point c* for\neach input point 2. One way to do this is to minimize the distance between the\ninput point x and its reconstruction, g(c*). We can measure this distance using a\nnorm. In the principal components algorithm, we use the L? norm:\n\nc* = argmin||x \u2014 g(c)||l2. (2.54)\nc\n\nWe can switch to the squared L? norm instead of the L? norm itself, because\nboth are minimized by the same value of c Both are minimized by the same\nvalue of e because the L? norm is non-negative and the squaring operation is\n\n48\n", "CHAPTER 2. LINEAR ALGEBRA\n\nmonotonically increasing for non-negative arguments.\nc* = argmin||ax \u2014 g(c)||3. (2.55)\nc\n\nThe function being minimized simplifies to\n(x \u2014 g(e)) \"(x \u2014 g(e)) (2.56)\n\n(by the definition of the L? norm, equation 2.30)\n\n=ax'x\u2014ax'g(c) \u2014g(c)'x +(e)\" 9(c) (2.57)\n(by the distributive property)\n=a'a\u20142a'g(c) +9(c)'g(c) (2.58)\n\n(because the scalar g(c)! a is equal to the transpose of itself).\n\nWe can now change the function being minimized again, to omit the first term,\nsince this term does not depend on c:\n\nc= arg min\u20142a ' g(c) + g(c)'g(c). (2.59)\n\nTo make further progress, we must substitute in the definition of g(c):\n\nc* =argmin\u20142a'De+c'D' De (2.60)\nc\n\n=argmin\u20142a@' De+c'le (2.61)\n\nc\n\n(by the orthogonality and unit norm constraints on D)\n\n=argmin\u20142a'De+ce'c (2.62)\nc\n\nWe can solve this optimization problem using vector calculus (see section 4.3 if\nyou do not know how to do this):\n\nV-(-2a'De+c'c) =0 (2.63)\n\u20142D'x+2c=0 (2.64)\nc=D'a. (2.65)\n", "CHAPTER 2. LINEAR ALGEBRA\n\nThis makes the algorithm efficient: we can optimally encode x just using a\nmatrix-vector operation. To encode a vector, we apply the encoder function\n\nf(x) =D'e. (2.66)\n\nUsing a further matrix multiplication, we can also define the PCA reconstruction\noperation:\n\nr(@) = g(f(x)) = DD'z. (2.67)\n\nNext, we need to choose the encoding matrix D. To do so, we revisit the idea\nof minimizing the L? distance between inputs and reconstructions. Since we will\nuse the same matrix D to decode all of the points, we can no longer consider the\npoints in isolation. Instead, we must minimize the Frobenius norm of the matrix\nof errors computed over all dimensions and all points:\n\n; 2\n\nD* = arg min (x! - r(el);) subject to D'D = I, (2.68)\nD \u2014\nij\n\nTo derive the algorithm for finding D*, we will start by considering the case\nwhere | = 1. In this case, D is just a single vector, d. Substituting equation 2.67\ninto equation 2.68 and simplifying D into d, the problem reduces to\n\nd* = argmin y ja \u2014 dd\u2018 x ||? subject to ||d||y = 1. (2.69)\nd ;\na\n\nThe above formulation is the most direct way of performing the substitution,\nbut is not the most stylistically pleasing way to write the equation. It places the\nscalar value dx on the right of the vector d. It is more conventional to write\nscalar coefficients on the left of vector they operate on. We therefore usually write\nsuch a formula as\n\nd= arg min ) > ja \u2014 d' x d||} subject to ||d||y = 1, (2.70)\nd i\n\nor, exploiting the fact that a scalar is its own transpose, as\n\nd* = argmin y ja \u2014 wT dd||} subject to ||d||y = 1. (2.71)\nd ;\na\n\nThe reader should aim to become familiar with such cosmetic rearrangements.\n", "CHAPTER 2. LINEAR ALGEBRA\n\nAt this point, it can be helpful to rewrite the problem in terms of a single\ndesign matrix of examples, rather than as a sum over separate example vectors.\nThis will allow us to use more compact notation. Let X \u20ac R\u2122*\" be the matrix\ndefined by stacking all of the vectors describing the points, such that X;,, = ge\",\nWe can now rewrite the problem as\n\nd* = argmin||X \u2014 Xdd\"||} subject to d'd=1. (2.72)\nd\n\nDisregarding the constraint for the moment, we can simplify the Frobenius norm\nportion as follows:\nargmin||X \u2014 Xdd\"||} (2.73)\nd\n\n= argmin Tr ((x \u2014 Xad\") (x - xad\")) (2.74)\n\n(by equation 2.49)\n\n= argminTr(X |X \u2014X'Xdd\" \u2014dd'X'X +dd\u2122X'Xdd\") (2.75)\nd\n\n= argminTr(X' X)\u2014Tr(X'Xdd') \u2014 Tr(dd'X'X)+Tr(dd'X' Xdd')\nd\n- (2.76)\n= argmin\u2014Tr(X' Xdd')\u2014 Tr(dd'X'X)+Tr(dd'X'Xdd') (2.77)\nd\n\n(because terms not involving d do not affect the arg min)\n\n= argmin \u20142Tr(X ' Xdd')+Tr(dd' X' Xdd') (2.78)\nd\n(because we can cycle the order of the matrices inside a trace, equation 2.52)\n\n= argmin \u20142Tr(X ' Xdd') + Tr(X' Xdd' dd\u2018) (2.79)\nd\n\n(using the same property again)\n\nAt this point, we re-introduce the constraint:\n\nargmin \u20142Tr(X'Xdd')+Tr(X'Xdd'dd\") subject tod'd=1 (2.80)\nd\n\n= argmin\u20142Tr(X | Xdd')+Tr(X 'Xdd\") subject to d'd=1 (2.81)\nd\n\n(due to the constraint)\n\n=argmin \u2014 Tr(X' Xdd\") subject to d'd=1 (2.82)\nd\n\n51\n", "CHAPTER 2. LINEAR ALGEBRA\n\n= argmax Tr(X'Xdd\") subject to d'd=1 (2.83)\nd\n\n= argmax Tr(d' X! Xd) subject to d'd=1 (2.84)\nd\n\nThis optimization problem may be solved using eigendecomposition. Specifically,\nthe optimal d is given by the eigenvector of X'X corresponding to the largest\neigenvalue.\n\nThis derivation is specific to the case of | = 1 and recovers only the first\nprincipal component. More generally, when we wish to recover a basis of principal\ncomponents, the matrix D is given by the / eigenvectors corresponding to the\nlargest eigenvalues. This may be shown using proof by induction. We recommend\nwriting this proof as an exercise.\n\nLinear algebra is one of the fundamental mathematical disciplines that is\n\nnecessary to understand deep learning. Another key area of mathematics that is\nubiquitous in machine learning is probability theory, presented next.\n", "Chapter 3\n\nProbability and Information\nTheory\n\nIn this chapter, we describe probability theory and information theory.\n\nProbability theory is a mathematical framework for representing uncertain\nstatements. It provides a means of quantifying uncertainty and axioms for deriving\nnew uncertain statements. In artificial intelligence applications, we use probability\ntheory in two major ways. First, the laws of probability tell us how AI systems\nshould reason, so we design our algorithms to compute or approximate various\nexpressions derived using probability theory. Second, we can use probability and\nstatistics to theoretically analyze the behavior of proposed AI systems.\n\nProbability theory is a fundamental tool of many disciplines of science and\nengineering. We provide this chapter to ensure that readers whose background is\nprimarily in software engineering with limited exposure to probability theory can\nunderstand the material in this book.\n\nWhile probability theory allows us to make uncertain statements and reason in\nthe presence of uncertainty, information theory allows us to quantify the amount\nof uncertainty in a probability distribution.\n\nIf you are already familiar with probability theory and information theory, you\nmay wish to skip all of this chapter except for section 3.14, which describes the\ngraphs we use to describe structured probabilistic models for machine learning. If\nyou have absolutely no prior experience with these subjects, this chapter should\nbe sufficient to successfully carry out deep learning research projects, but we do\nsuggest that you consult an additional resource, such as Jaynes (2003).\n\n53\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n3.1 Why Probability?\n\nMany branches of computer science deal mostly with entities that are entirely\ndeterministic and certain. A programmer can usually safely assume that a CPU will\nexecute each machine instruction flawlessly. Errors in hardware do occur, but are\nrare enough that most software applications do not need to be designed to account\nfor them. Given that many computer scientists and software engineers work in a\nrelatively clean and certain environment, it can be surprising that machine learning\nmakes heavy use of probability theory.\n\nThis is because machine learning must always deal with uncertain quantities,\nand sometimes may also need to deal with stochastic (non-deterministic) quantities.\nUncertainty and stochasticity can arise from many sources. Researchers have made\ncompelling arguments for quantifying uncertainty using probability since at least\nthe 1980s. Many of the arguments presented here are summarized from or inspired\nby Pearl (1988).\n\nNearly all activities require some ability to reason in the presence of uncertainty.\nIn fact, beyond mathematical statements that are true by definition, it is difficult\nto think of any proposition that is absolutely true or any event that is absolutely\nguaranteed to occur.\n\nThere are three possible sources of uncertainty:\n\n1. Inherent stochasticity in the system being modeled. For example, most\ninterpretations of quantum mechanics describe the dynamics of subatomic\nparticles as being probabilistic. We can also create theoretical scenarios that\nwe postulate to have random dynamics, such as a hypothetical card game\nwhere we assume that the cards are truly shuffled into a random order.\n\n2. Incomplete observability. Even deterministic systems can appear stochastic\nwhen we cannot observe all of the variables that drive the behavior of the\nsystem. For example, in the Monty Hall problem, a game show contestant is\nasked to choose between three doors and wins a prize held behind the chosen\ndoor. Two doors lead to a goat while a third leads to a car. The outcome\ngiven the contestant\u2019s choice is deterministic, but from the contestant\u2019s point\nof view, the outcome is uncertain.\n\n3. Incomplete modeling. When we use a model that must discard some of\nthe information we have observed, the discarded information results in\nuncertainty in the model\u2019s predictions. For example, suppose we build a\nrobot that can exactly observe the location of every object around it. If the\n\nc\n\n54\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nrobot discretizes space when predicting the future location of these objects,\nthen the discretization makes the robot immediately become uncertain about\nthe precise position of objects: each object could be anywhere within the\ndiscrete cell that it was observed to occupy.\n\nIn many cases, it is more practical to use a simple but uncertain rule rather\nthan a complex but certain one, even if the true rule is deterministic and our\nmodeling system has the fidelity to accommodate a complex rule. For example, the\nsimple rule \u201cMost birds fly\u201d is cheap to develop and is broadly useful, while a rule\nof the form, \u201cBirds fly, except for very young birds that have not yet learned to\nfly, sick or injured birds that have lost the ability to fly, flightless species of birds\nincluding the cassowary, ostrich and kiwi...\u201d is expensive to develop, maintain and\ncommunicate, and after all of this effort is still very brittle and prone to failure.\n\nWhile it should be clear that we need a means of representing and reasoning\nabout uncertainty, it is not immediately obvious that probability theory can provide\nall of the tools we want for artificial intelligence applications. Probability theory\nwas originally developed to analyze the frequencies of events. It is easy to see\nhow probability theory can be used to study events like drawing a certain hand of\ncards in a game of poker. These kinds of events are often repeatable. When we\nsay that an outcome has a probability p of occurring, it means that if we repeated\nthe experiment (e.g., draw a hand of cards) infinitely many times, then proportion\np of the repetitions would result in that outcome. This kind of reasoning does not\nseem immediately applicable to propositions that are not repeatable. If a doctor\nanalyzes a patient and says that the patient has a 40% chance of having the flu,\nthis means something very different\u2014we can not make infinitely many replicas of\nthe patient, nor is there any reason to believe that different replicas of the patient\nwould present with the same symptoms yet have varying underlying conditions. In\nthe case of the doctor diagnosing the patient, we use probability to represent a\ndegree of belief, with 1 indicating absolute certainty that the patient has the flu\nand 0 indicating absolute certainty that the patient does not have the flu. The\nformer kind of probability, related directly to the rates at which events occur, is\nknown as frequentist probability, while the latter, related to qualitative levels\nof certainty, is known as Bayesian probability.\n\nIf we list several properties that we expect common sense reasoning about\nuncertainty to have, then the only way to satisfy those properties is to treat\nBayesian probabilities as behaving exactly the same as frequentist probabilities.\nFor example, if we want to compute the probability that a player will win a poker\ngame given that she has a certain set of cards, we use exactly the same formulas\nas when we compute the probability that a patient has a disease given that she\n\n55\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nhas certain symptoms. For more details about why a small set of common sense\nassumptions implies that the same axioms must control both kinds of probability,\nsee Ramsey (1926).\n\nProbability can be seen as the extension of logic to deal with uncertainty. Logic\nprovides a set of formal rules for determining what propositions are implied to\nbe true or false given the assumption that some other set of propositions is true\nor false. Probability theory provides a set of formal rules for determining the\nlikelihood of a proposition being true given the likelihood of other propositions.\n\n3.2 Random Variables\n\nA random variable is a variable that can take on different values randomly. We\ntypically denote the random variable itself with a lower case letter in plain typeface,\nand the values it can take on with lower case script letters. For example, x; and x2\nare both possible values that the random variable x can take on. For vector-valued\nvariables, we would write the random variable as x and one of its values as z. On\nits own, a random variable is just a description of the states that are possible; it\nmust be coupled with a probability distribution that specifies how likely each of\nthese states are.\n\nRandom variables may be discrete or continuous. A discrete random variable\nis one that has a finite or countably infinite number of states. Note that these\nstates are not necessarily the integers; they can also just be named states that\nare not considered to have any numerical value. A continuous random variable is\nassociated with a real value.\n\n3.3 Probability Distributions\n\nA probability distribution is a description of how likely a random variable or\nset of random variables is to take on each of its possible states. The way we\ndescribe probability distributions depends on whether the variables are discrete or\ncontinuous.\n\n3.3.1 Discrete Variables and Probability Mass Functions\n\nA probability distribution over discrete variables may be described using a proba-\nbility mass function (PMF). We typically denote probability mass functions with\na capital P. Often we associate each random variable with a different probability\n\nc\n\n56\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nmass function and the reader must infer which probability mass function to use\nbased on the identity of the random variable, rather than the name of the function;\nP(x) is usually not the same as P(y).\n\nThe probability mass function maps from a state of a random variable to\nthe probability of that random variable taking on that state. The probability\nthat x = x is denoted as P(x), with a probability of 1 indicating that x = x is\ncertain and a probability of 0 indicating that x = x is impossible. Sometimes\nto disambiguate which PMF to use, we write the name of the random variable\nexplicitly: P(x = x). Sometimes we define a variable first, then use ~ notation to\nspecify which distribution it follows later: x ~ P(x).\n\nProbability mass functions can act on many variables at the same time. Such\na probability distribution over many variables is known as a joint probability\ndistribution. P(x = x,y = y) denotes the probability that x = 7 andy = y\nsimultaneously. We may also write P(x, y) for brevity.\n\nTo be a probability mass function on a random variable x, a function P must\nsatisfy the following properties:\n\ne The domain of P must be the set of all possible states of x.\n\ne Vx \u20ac x,0 < P(x) < 1. An impossible event has probability 0 and no state can\nbe less probable than that. Likewise, an event that is guaranteed to happen\nhas probability 1, and no state can have a greater chance of occurring.\n\n\u00a9 Meex P(\u00ab) = 1. We refer to this property as being normalized. Without\nthis property, we could obtain probabilities greater than one by computing\nthe probability of one of many events occurring.\n\nFor example, consider a single discrete random variable x with k different\nstates. We can place a uniform distribution on x\u2014that is, make each of its\nstates equally likely\u2014by setting its probability mass function to\n\nP(x=2)) = = (3.1)\n\nfor all 7. We can see that this fits the requirements for a probability mass function.\nThe value ; is positive because k is a positive integer. We also see that\n\nPe vi) ar: : 1, (3.2)\n\nso the distribution is properly normalized.\n\n57\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n3.3.2 Continuous Variables and Probability Density Functions\n\nWhen working with continuous random variables, we describe probability distri-\nbutions using a probability density function (PDF) rather than a probability\nmass function. To be a probability density function, a function p must satisfy the\nfollowing properties:\n\ne The domain of p must be the set of all possible states of x.\n\ne Vx \u20ac x, p(x) > 0. Note that we do not require p(x) < 1.\ne { p(a)dz = 1.\n\nA probability density function p(x) does not give the probability of a specific\nstate directly, instead the probability of landing inside an infinitesimal region with\nvolume 6x is given by p(x)d\u00e9a.\n\nWe can integrate the density function to find the actual probability mass of a\nset of points. Specifically, the probability that x lies in some set S is given by the\nintegral of p(x) over that set. In the univariate example, the probability that x\nlies in the interval [a, }] is given by Jja,pP(a)de.\n\nFor an example of a probability density function corresponding to a specific\nprobability density over a continuous random variable, consider a uniform distribu-\ntion on an interval of the real numbers. We can do this with a function u(x; a,b),\nwhere a and 0 are the endpoints of the interval, with b > a. The \u201c;\u201d notation means\n\u201cparametrized by\u201d; we consider x to be the argument of the function, while a and\nb are parameters that define the function. To ensure that there is no probability\nmass outside the interval, we say u(x;a,b) = 0 for all x \u00a2 [a,b]. Within [a,b],\nu(x; a,b) = a We can see that this is nonnegative everywhere. Additionally, it\nintegrates to 1. We often denote that \u00ab follows the uniform distribution on [a, b]\nby writing x ~ U(a,b).\n\n3.4 Marginal Probability\n\nSometimes we know the probability distribution over a set of variables and we want\nto know the probability distribution over just a subset of them. The probability\ndistribution over the subset is known as the marginal probability distribution.\n\nFor example, suppose we have discrete random variables x and y, and we know\nP(x,y). We can find P(x) with the sum rule:\n\nVe \u20acx,P(x=2)= So P(x=a,y=y). (3.3)\n\n58\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nThe name \u201cmarginal probability\u201d comes from the process of computing marginal\nprobabilities on paper. When the values of P(x,y) are written in a grid with\ndifferent values of x in rows and different values of y in columns, it is natural to\nsum across a row of the grid, then write P(x) in the margin of the paper just to\nthe right of the row.\n\nFor continuous variables, we need to use integration instead of summation:\n\np(x) = / p(x, y)dy. (3.4)\n\n3.5 Conditional Probability\n\nIn many cases, we are interested in the probability of some event, given that some\nother event has happened. This is called a conditional probability. We denote\nthe conditional probability that y = y given x =a as Ply =y|x =z). This\nconditional probability can be computed with the formula\n\nPly =y,x=2)\nP(x=2)\n\nPly=y|x=2)= (3.5)\nThe conditional probability is only defined when P(x = x) > 0. We cannot compute\nthe conditional probability conditioned on an event that never happens.\n\nIt is important not to confuse conditional probability with computing what\nwould happen if some action were undertaken. The conditional probability that\na person is from Germany given that they speak German is quite high, but if\na randomly selected person is taught to speak German, their country of origin\ndoes not change. Computing the consequences of an action is called making an\nintervention query. Intervention queries are the domain of causal modeling,\nwhich we do not explore in this book.\n\n3.6 The Chain Rule of Conditional Probabilities\n\nAny joint probability distribution over many random variables may be decomposed\ninto conditional distributions over only one variable:\n\nP(x, . 2.x) = P(x) P(x | xO, 2, xl), (3.6)\n\nThis observation is known as the chain rule or product rule of probability.\nIt follows immediately from the definition of conditional probability in equation 3.5.\n\nc\n\n59\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nFor example, applying the definition twice, we get\nP(a,b,c) = P(a|b,c)P(b,c)\nP(b,c) = P(b|c)P(c)\nP(a,b,c) = P(a|b,c)P(b| c)P(c).\n\n3.7 Independence and Conditional Independence\nTwo random variables x and y are independent if their probability distribution\n\ncan be expressed as a product of two factors, one involving only x and one involving\nonly y:\n\nVre x,y ey, p(x=2,y=y) =p(x=2)pl(y =y). (3.7)\n\nTwo random variables x and y areconditionally independent given a random\nvariable z if the conditional probability distribution over x and y factorizes in this\nway for every value of z:\n\nVreEx,yey,2\u20ac4, px=2,y=y|2=2)=p(x=2|z2=z)ply=y|z=2).\n(3.8)\n\nWe can denote independence and conditional independence with compact\nnotation: xLy means that x and y are independent, while xy | z means that x\nand y are conditionally independent given z.\n\n3.8 Expectation, Variance and Covariance\n\nThe expectation or expected value of some function f(x) with respect to a\nprobability distribution P(x) is the average or mean value that f takes on when x\nis drawn from P. For discrete variables this can be computed with a summation:\n\nxP (\u00ab)] = D2 P(x) f(a), (3.9)\n\nwhile for continuous variables, it is computed with an integral:\nExwp[f(a)] = / p(x) f(a)de. (3.10)\n\n60\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nWhen the identity of the distribution is clear from the context, we may simply\nwrite the name of the random variable that the expectation is over, as in Ex[f(x)].\nIf it is clear which random variable the expectation is over, we may omit the\nsubscript entirely, as in E[f(x)]. By default, we can assume that E[-] averages over\nthe values of all the random variables inside the brackets. Likewise, when there is\nno ambiguity, we may omit the square brackets.\n\nExpectations are linear, for example,\n\nxlaf(@) + Bg(@)] = oEx[f(x)] + BEx[g(2)], (3.11)\n\nwhen a and \u00a3 are not dependent on z.\n\nThe variance gives a measure of how much the values of a function of a random\nvariable x vary as we sample different values of x from its probability distribution:\n\nVar(f(x)) =E} (f(x) \u2014 E[f(2)])\u2019| . (3.12)\n\nWhen the variance is low, the values of f(x) cluster near their expected value. The\nsquare root of the variance is known as the standard deviation.\n\nThe covariance gives some sense of how much two values are linearly related\nto each other, as well as the scale of these variables:\n\nCov(f(z), 9(y)) = El(f(2) \u2014 E[f@))) (9) \u2014 Elay)))] - (3.13)\n\nHigh absolute values of the covariance mean that the values change very much\nand are both far from their respective means at the same time. If the sign of the\ncovariance is positive, then both variables tend to take on relatively high values\nsimultaneously. If the sign of the covariance is negative, then one variable tends to\ntake on a relatively high value at the times that the other takes on a relatively\nlow value and vice versa. Other measures such as correlation normalize the\n\ncontribution of each variable in order to measure only how much the variables are\nrelated, rather than also being affected by the scale of the separate variables.\n\nThe notions of covariance and dependence are related, but are in fact distinct\nconcepts. They are related because two variables that are independent have zero\ncovariance, and two variables that have non-zero covariance are dependent. How-\never, independence is a distinct property from covariance. For two variables to have\nzero covariance, there must be no linear dependence between them. Independence\nis a stronger requirement than zero covariance, because independence also excludes\nnonlinear relationships. It is possible for two variables to be dependent but have\nzero covariance. For example, suppose we first sample a real number \u00abx from a\nuniform distribution over the interval [\u20141, 1]. We next sample a random variable\n\n61\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\ns. With probability $ we choose the value of s to be 1. Otherwise, we choose\nthe value of s to be \u20141. We can then generate a random variable y by assigning\ny = sx. Clearly, x and y are not independent, because x completely determines\nthe magnitude of y. However, Cov(x, y) = 0.\n\nThe covariance matrix of a random vector x \u20ac R\u201d is an n x n matrix, such\nthat\n\nCov(x);,; = Cov(x;, Xj): (3.14)\nThe diagonal elements of the covariance give the variance:\nCov(x:, xi) = Var(x:). (3.15)\n\n3.9 Common Probability Distributions\n\nSeveral simple probability distributions are useful in many contexts in machine\nlearning.\n\n3.9.1 Bernoulli Distribution\n\nThe Bernoulli distribution is a distribution over a single binary random variable.\nIt is controlled by a single parameter \u00a2 \u20ac [0,1], which gives the probability of the\nrandom variable being equal to 1. It has the following properties:\n\nP(x=1)=\u00a2\nP(x =0)=1-\u00a2\nP(x=2)=\u00a2\"(1-4)* (3.18)\nE,{x] = \u00a2 (3.19)\nVar x(x) = \u00a2(1 \u2014 \u00a2) (3.20)\n\n3.16)\n\n(\n(3.17)\n\n3.9.2 Multinoulli Distribution\n\nThe multinoulli or categorical distribution is a distribution over a single discrete\nvariable with k different states, where k is finite.! The multinoulli distribution is\n\n' \u00abMultinoulli\u201d is a term that was recently coined by Gustavo Lacerdo and popularized by\nMurphy (2012). The multinoulli distribution is a special case of the multinomial distribution.\nA multinomial distribution is the distribution over vectors in {0,...,7} k representing how many\ntimes each of the k categories is visited when n samples are drawn from a multinoulli distribution.\nMany texts use the term \u201cmultinomial\u201d to refer to multinoulli distributions without clarifying\nthat they refer only to the n = 1 case.\n\n62\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nparametrized by a vector p \u20ac [0,1]*~!, where p; gives the probability of the i-th\nstate. The final, k-th state\u2019s probability is given by 1\u2014 1! p. Note that we must\nconstrain 1'p < 1. Multinoulli distributions are often used to refer to distributions\nover categories of objects, so we do not usually assume that state 1 has numerical\nvalue 1, etc. For this reason, we do not usually need to compute the expectation\nor variance of multinoulli-distributed random variables.\n\nThe Bernoulli and multinoulli distributions are sufficient to describe any distri-\nbution over their domain. They are able to describe any distribution over their\ndomain not so much because they are particularly powerful but rather because\ntheir domain is simple; they model discrete variables for which it is feasible to\nenumerate all of the states. When dealing with continuous variables, there are\nuncountably many states, so any distribution described by a small number of\nparameters must impose strict limits on the distribution.\n\n3.9.3 Gaussian Distribution\n\nThe most commonly used distribution over real numbers is the normal distribu-\ntion, also known as the Gaussian distribution:\n\nN (a3, 07) = apo ( sale 1?) . (3.21)\n\nSee figure 3.1 for a plot of the density function.\n\nThe two parameters ps \u20ac R and o \u20ac (0,00) control the normal distribution.\nThe parameter 4 gives the coordinate of the central peak. This is also the mean of\nthe distribution: E[x] = 4. The standard deviation of the distribution is given by\no, and the variance by o?.\n\nWhen we evaluate the PDF, we need to square and invert \u00a2. When we need to\nfrequently evaluate the PDF with different parameter values, a more efficient way\nof parametrizing the distribution is to use a parameter 3 \u20ac (0,00) to control the\nprecision or inverse variance of the distribution:\n\nNano) = 2 exp ( Ble Ww). (3.22)\n\nNormal distributions are a sensible choice for many applications. In the absence\nof prior knowledge about what form a distribution over the real numbers should\ntake, the normal distribution is a good default choice for two major reasons.\n\n63\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n0.40\n\n0.35\n\n0.30 Maximum at 2 = pw\n> 0.25 Inflection points at\nX 0.20 oS BES\n\n0.15\n0.10\n0.05\n0.00\n\n2.0 1.5 1.0 0.5 0.0 0.5 1.0 1.5 2.0\n\nFigure 3.1: The normal distribution: The normal distribution N(x; 1,07) exhibits\na classic \u201cbell curve\u201d shape, with the x coordinate of its central peak given by pz, and\nthe width of its peak controlled by o. In this example, we depict the standard normal\ndistribution, with \u00bb = 0 and o = 1.\n\nFirst, many distributions we wish to model are truly close to being normal\ndistributions. The central limit theorem shows that the sum of many indepen-\ndent random variables is approximately normally distributed. This means that\nin practice, many complicated systems can be modeled successfully as normally\ndistributed noise, even if the system can be decomposed into parts with more\nstructured behavior.\n\nSecond, out of all possible probability distributions with the same variance,\nthe normal distribution encodes the maximum amount of uncertainty over the\nreal numbers. We can thus think of the normal distribution as being the one\nthat inserts the least amount of prior knowledge into a model. Fully developing\nand justifying this idea requires more mathematical tools, and is postponed to\nsection 19.4.2.\n\nThe normal distribution generalizes to R\u201d, in which case it is known as the\nmultivariate normal distribution. It may be parametrized with a positive\ndefinite symmetric matrix \u2122:\n\nNem) = ara er (se wEe\u2014n)). 623)\n\n64\n\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nThe parameter yp still gives the mean of the distribution, though now it is\nvector-valued. The parameter & gives the covariance matrix of the distribution.\nAs in the univariate case, when we wish to evaluate the PDF several times for\nmany different values of the parameters, the covariance is not a computationally\nefficient way to parametrize the distribution, since we need to invert & to evaluate\nthe PDF. We can instead use a precision matrix (3:\n\nNe 0.8) = \\/ SO exp (\u2014See\u2014n)\"Be\u2014n)). (3.28)\n\nWe often fix the covariance matrix to be a diagonal matrix. An even simpler\nversion is the isotropic Gaussian distribution, whose covariance matrix is a scalar\ntimes the identity matrix.\n\n3.9.4 Exponential and Laplace Distributions\n\nIn the context of deep learning, we often want to have a probability distribution\nwith a sharp point at x = 0. To accomplish this, we can use the exponential\ndistribution:\n\np(@; A) = Al,>0 exp (\u2014Az). (3.25)\nThe exponential distribution uses the indicator function 1,>9 to assign probability\nzero to all negative values of x.\n\nA closely related probability distribution that allows us to place a sharp peak\nof probability mass at an arbitrary point py is the Laplace distribution\n\n1 r\u2014\nLaplace(; 4, y) = a exp ( le 7 H) . (3.26)\n\n3.9.5 The Dirac Distribution and Empirical Distribution\n\nIn some cases, we wish to specify that all of the mass in a probability distribution\nclusters around a single point. This can be accomplished by defining a PDF using\nthe Dirac delta function, 6(\u00ab):\n\np(t) = 5(\u00ab ~ p). (3.27)\n\nThe Dirac delta function is defined such that it is zero-valued everywhere except\n0, yet integrates to 1. The Dirac delta function is not an ordinary function that\nassociates each value x with a real-valued output, instead it is a different kind of\n\n65\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nmathematical object called a generalized function that is defined in terms of its\nproperties when integrated. We can think of the Dirac delta function as being the\nlimit point of a series of functions that put less and less mass on all points other\nthan zero.\n\nBy defining p(x) to be 6 shifted by \u2014y we obtain an infinitely narrow and\ninfinitely high peak of probability mass where x = 1.\n\nA common use of the Dirac delta distribution is as a component of an empirical\ndistribution,\n\n1 m :\np(a) = \u2014 N\u00b0 6(a@ \u2014 &) (3.28)\nwhich puts probability mass +\ngiven dataset or collection of samples. The Dirac delta distribution is only necessary\nto define the empirical distribution over continuous variables. For discrete variables,\nthe situation is simpler: an empirical distribution can be conceptualized as a\n\nmultinoulli distribution, with a probability associated to each possible input value\nthat is simply equal to the empirical frequency of that value in the training set.\n\non each of the m points #) ,...,a(\u2122 forming a\n\nWe can view the empirical distribution formed from a dataset of training\nexamples as specifying the distribution that we sample from when we train a model\non this dataset. Another important perspective on the empirical distribution is\nthat it is the probability density that maximizes the likelihood of the training data\n(see section 5.5).\n\n3.9.6 Mixtures of Distributions\n\nIt is also common to define probability distributions by combining other simpler\nprobability distributions. One common way of combining distributions is to\nconstruct a mixture distribution. A mixture distribution is made up of several\ncomponent distributions. On each trial, the choice of which component distribution\ngenerates the sample is determined by sampling a component identity from a\nmultinoulli distribution:\n\nP(x) = \u00bb P(c =i)P(x|c=4) (3.29)\n\nwhere P(c) is the multinoulli distribution over component identities.\n\nWe have already seen one example of a mixture distribution: the empirical\ndistribution over real-valued variables is a mixture distribution with one Dirac\ncomponent for each training example.\n\n66\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nThe mixture model is one simple strategy for combining probability distributions\nto create a richer distribution. In chapter 16, we explore the art of building complex\nprobability distributions from simple ones in more detail.\n\nThe mixture model allows us to briefly glimpse a concept that will be of\nparamount importance later\u2014the latent variable. A latent variable is a random\nvariable that we cannot observe directly. The component identity variable c of the\nmixture model provides an example. Latent variables may be related to x through\nthe joint distribution, in this case, P(x,c) = P(x | c)P(c). The distribution P(c)\nover the latent variable and the distribution P(x | c) relating the latent variables\nto the visible variables determines the shape of the distribution P(x) even though\nit is possible to describe P(x) without reference to the latent variable. Latent\nvariables are discussed further in section 16.5.\n\nA very powerful and common type of mixture model is the Gaussian mixture\nmodel, in which the components p(x | c = 7) are Gaussians. Each component has\na separately parametrized mean po and covariance \u00a9\u201c), Some mixtures can have\nmore constraints. For example, the covariances could be shared across components\nvia the constraint 5 = \u00bb,Vi. As with a single Gaussian distribution, the mixture\nof Gaussians might constrain the covariance matrix for each component to be\ndiagonal or isotropic.\n\nIn addition to the means and covariances, the parameters of a Gaussian mixture\nspecify the prior probability a; = P(c = i) given to each component i. The word\n\u201cprior\u201d indicates that it expresses the model\u2019s beliefs about c before it has observed\nx. By comparison, P(c| #) is a posterior probability, because it is computed\nafter observation of x. A Gaussian mixture model is a universal approximator\nof densities, in the sense that any smooth density can be approximated with any\nspecific, non-zero amount of error by a Gaussian mixture model with enough\ncomponents.\n\nFigure 3.2 shows samples from a Gaussian mixture model.\n\n3.10 Useful Properties of Common Functions\n\nCertain functions arise often while working with probability distributions, especially\nthe probability distributions used in deep learning models.\n\nOne of these functions is the logistic sigmoid:\n1\no(2) = 1+exp(-2)\n\nThe logistic sigmoid is commonly used to produce the \u00a2 parameter of a Bernoulli\n\n(3.30)\n\n67\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nFigure 3.2: Samples from a Gaussian mixture model. In this example, there are three\ncomponents. From left to right, the first component has an isotropic covariance matrix,\nmeaning it has the same amount of variance in each direction. The second has a diagonal\ncovariance matrix, meaning it can control the variance separately along each axis-aligned\ndirection. This example has more variance along the x2 axis than along the x; axis. The\nthird component has a full-rank covariance matrix, allowing it to control the variance\nseparately along an arbitrary basis of directions.\n\ndistribution because its range is (0,1), which lies within the valid range of values\nfor the \u00a2 parameter. See figure 3.3 for a graph of the sigmoid function. The\nsigmoid function saturates when its argument is very positive or very negative,\nmeaning that the function becomes very flat and insensitive to small changes in its\n\ninput.\nAnother commonly encountered function is the softplus function (Dugas e al.,\n\n2001):\n\u00a2(x) = log (1+ exp(a)). (3.31)\n\nThe softplus function can be useful for producing the 8 or o parameter of a normal\ndistribution because its range is (0,00). It also arises commonly when manipulating\nexpressions involving sigmoids. The name of the softplus function comes from the\nfact that it is a smoothed or \u201csoftened\u201d version of\n\na* = max(0, 2). (3.32)\n\nSee figure 3.4 for a graph of the softplus function.\n\nThe following properties are all useful enough that you may wish to memorize\nthem:\n\n68\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n1.0\n\n0.8\n\n\u201410 \u20145 0 5 10\n\nFigure 3.3: The logistic sigmoid function.\n\n10\n\n\u201410 \u20145 0 5 10\n\nFigure 3.4: The softplus function.\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\na(x) = oto 3.33)\n\n< o(2) = o(x)(1 \u2014o(z)) 3.34)\n1\u2014o(x) =o(-2) 3.35)\n\nlog o(x) = \u2014\u00a2(\u20142) 3.36)\n\n \u00a2(2) =9(2) 3.37)\n\nVa \u20ac (0,1), 07! (x) = log ( ; = 4) 3.38)\nVa > 0, \u00a27'(a) = log (exp(a) \u2014 1) 3.39)\nctw) =f otwddy 3.40)\n\n(a) \u2014 C(-2) =a 3.41)\n\nThe function o~1(z) is called the logit in statistics, but this term is more rarely\nused in machine learning.\n\nEquation 3.41 provides extra justification for the name \u201csoftplus.\u201d The softplus\nfunction is intended as a smoothed version of the positive part function, 2+ =\nmax{0,z}. The positive part function is the counterpart of the negative part\nfunction, z~ = max{0,\u20142x}. To obtain a smooth function that is analogous to the\nnegative part, one can use \u00a2(\u20142). Just as x can be recovered from its positive part\nand negative part via the identity 2+ \u2014 x~ = 2, it is also possible to recover x\nusing the same relationship between \u00a2(x) and \u00a2(\u20142), as shown in equation 3.41.\n\n3.11 Bayes\u2019 Rule\n\nWe often find ourselves in a situation where we know P(y | x) and need to know\n\nP(x|y). Fortunately, if we also know P(x), we can compute the desired quantity\n\nusing Bayes\u2019 rule:\n\nP(X) Ply | x)\nPly)\n\nNote that while P(y) appears in the formula, it is usually feasible to compute\n\nP(y) = >, Ply | z)P(2), so we do not need to begin with knowledge of P(y).\n\nP(x|y) = (3.42)\n\n70\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nBayes\u2019 rule is straightforward to derive from the definition of conditional\nprobability, but it is useful to know the name of this formula since many texts\nrefer to it by name. It is named after the Reverend Thomas Bayes, who first\ndiscovered a special case of the formula. The general version presented here was\nindependently discovered by Pierre-Simon Laplace.\n\n3.12 Technical Details of Continuous Variables\n\nA proper formal understanding of continuous random variables and probability\ndensity functions requires developing probability theory in terms of a branch of\nmathematics known as measure theory. Measure theory is beyond the scope of\nthis textbook, but we can briefly sketch some of the issues that measure theory is\nemployed to resolve.\n\nIn section 3.3.2, we saw that the probability of a continuous vector-valued x\nlying in some set Sis given by the integral of p(x) over the set S. Some choices\nof set S can produce paradoxes. For example, it is possible to construct two sets\nS; and Sg such that p(a \u20ac Si) + p(@ \u20ac Se) > 1 but Si NSe = 9. These sets\nare generally constructed making very heavy use of the infinite precision of real\nnumbers, for example by making fractal-shaped sets or sets that are defined by\ntransforming the set of rational numbers.\u201d One of the key contributions of measure\ntheory is to provide a characterization of the set of sets that we can compute the\nprobability of without encountering paradoxes. In this book, we only integrate\nover sets with relatively simple descriptions, so this aspect of measure theory never\nbecomes a relevant concern.\n\nFor our purposes, measure theory is more useful for describing theorems that\napply to most points in R\u201d but do not apply to some corner cases. Measure theory\nprovides a rigorous way of describing that a set of points is negligibly small. Such\na set is said to have measure zero. We do not formally define this concept in this\ntextbook. For our purposes, it is sufficient to understand the intuition that a set\nof measure zero occupies no volume in the space we are measuring. For example,\nwithin R?, a line has measure zero, while a filled polygon has positive measure.\nLikewise, an individual point has measure zero. Any union of countably many sets\nthat each have measure zero also has measure zero (so the set of all the rational\nnumbers has measure zero, for instance).\n\nAnother useful term from measure theory is almost everywhere. A property\nthat holds almost everywhere holds throughout all of space except for on a set of\n\n?The Banach-Tarski theorem provides a fun example of such sets.\n\n71\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nmeasure zero. Because the exceptions occupy a negligible amount of space, they\ncan be safely ignored for many applications. Some important results in probability\ntheory hold for all discrete values but only hold \u201calmost everywhere\u201d for continuous\nvalues.\n\nAnother technical detail of continuous variables relates to handling continuous\nrandom variables that are deterministic functions of one another. Suppose we have\ntwo random variables, x and y, such that y = g(a), where g is an invertible, con-\ntinuous, differentiable transformation. One might expect that py(y) = px(g1(y))-\nThis is actually not the case.\n\nAs asimple example, suppose we have scalar random variables x and y. Suppose\ny =% andx ~ U(0,1). If we use the rule py(y) = px(2y) then py will be 0\neverywhere except the interval [0,5], and it will be 1 on this interval. This means\n\n[rtdy = > (3.43)\n\nwhich violates the definition of a probability distribution. This is a common mistake.\nThe problem with this approach is that it fails to account for the distortion of\nspace introduced by the function g. Recall that the probability of a lying in an\ninfinitesimally small region with volume 6a is given by p(a)da. Since g can expand\nor contract space, the infinitesimal volume surrounding zx in x space may have\ndifferent volume in y space.\n\nTo see how to correct the problem, we return to the scalar case. We need to\npreserve the property\n\n\\py(g(x))dy| = |pe(a)da]. 3.44\n\nSolving from this, we obtain\n\nPy(y) = pe(g *(y)) z 3.45\nor equivalently\npale) = pylg(a)) | \u00b0A2)|, 3.46\nIn higher dimensions, the derivative generalizes to the determinant of the Jacobian\nmatrix\u2014the matrix with Ji; = Fe Thus, for real-valued vectors # and y,\nPx(X) = py(g(@)) et (\u201c\") : (3.47)\n\n72\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n3.13 Information Theory\n\nInformation theory is a branch of applied mathematics that revolves around\nquantifying how much information is present in a signal. It was originally invented\nto study sending messages from discrete alphabets over a noisy channel, such as\ncommunication via radio transmission. In this context, information theory tells how\nto design optimal codes and calculate the expected length of messages sampled from\nspecific probability distributions using various encoding schemes. In the context of\nmachine learning, we can also apply information theory to continuous variables\nwhere some of these message length interpretations do not apply. This field is\nfundamental to many areas of electrical engineering and computer science. In this\ntextbook, we mostly use a few key ideas from information theory to characterize\nprobability distributions or quantify similarity between probability distributions.\nFor more detail on information theory, see Cover and Thomas (2006) or MacKay\n(2003).\n\nThe basic intuition behind information theory is that learning that an unlikely\nevent has occurred is more informative than learning that a likely event has\noccurred. A message saying \u201cthe sun rose this morning\u201d is so uninformative as\nto be unnecessary to send, but a message saying \u201cthere was a solar eclipse this\nmorning\u201d is very informative.\n\nWe would like to quantify information in a way that formalizes this intuition.\nSpecifically,\n\ne Likely events should have low information content, and in the extreme case,\nevents that are guaranteed to happen should have no information content\nwhatsoever.\n\ne Less likely events should have higher information content.\n\ne Independent events should have additive information. For example, finding\nout that a tossed coin has come up as heads twice should convey twice as\nmuch information as finding out that a tossed coin has come up as heads\nonce.\n\nIn order to satisfy all three of these properties, we define the self-information\nof an event x = x to be\nI(x) = \u2014 log P(z). (3.48)\n\nIn this book, we always use log to mean the natural logarithm, with base e. Our\ndefinition of I(x) is therefore written in units of nats. One nat is the amount of\n\n73\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\ninformation gained by observing an event of probability z. Other texts use base-2\nlogarithms and units called bits or shannons; information measured in bits is\njust a rescaling of information measured in nats.\n\nWhen x is continuous, we use the same definition of information by analogy,\nbut some of the properties from the discrete case are lost. For example, an event\nwith unit density still has zero information, despite not being an event that is\nguaranteed to occur.\n\nSelf-information deals only with a single outcome. We can quantify the amount\nof uncertainty in an entire probability distribution using the Shannon entropy:\n\nH(x) = Ex p[I(a)] = \u2014Exvpllog P(2)] (3.49)\n\nalso denoted H(P). In other words, the Shannon entropy of a distribution is the\nexpected amount of information in an event drawn from that distribution. It gives\na lower bound on the number of bits (if the logarithm is base 2, otherwise the units\nare different) needed on average to encode symbols drawn from a distribution P.\nDistributions that are nearly deterministic (where the outcome is nearly certain)\nhave low entropy; distributions that are closer to uniform have high entropy. See\nfigure 3.5 for a demonstration. When x is continuous, the Shannon entropy is\nknown as the differential entropy.\n\nIf we have two separate probability distributions P(x) and Q (x) over the same\n\nrandom variable x, we can measure how different these two distributions are using\nthe Kullback-Leibler (KL) divergence:\n\nP(x)\nQ(x)\n\nDil P|]Q) = Exp how = By.p log P(x) \u2014logQ(a)]. (3.50)\n\nIn the case of discrete variables, it is the extra amount of information (measured\nin bits if we use the base 2 logarithm, but in machine learning we usually use nats\nand the natural logarithm) needed to send a message containing symbols drawn\nfrom probability distribution P, when we use a code that was designed to minimize\nthe length of messages drawn from probability distribution Q.\n\nThe KL divergence has many useful properties, most notably that it is non-\nnegative. The KL divergence is 0 if and only if P and Q are the same distribution in\nthe case of discrete variables, or equal \u201calmost everywhere\u201d in the case of continuous\nvariables. Because the KL divergence is non-negative and measures the difference\nbetween two distributions, it is often conceptualized as measuring some sort of\ndistance between these distributions. However, it is not a true distance measure\nbecause it is not symmetric: Dxy(P||Q) 4 Dxi(Q||P) for some P and Q. This\n\n74\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n0.7 \u2014\u2014=\u2014]\n\nShannon entropy in nats\n\n0.1\n\n\u2014]\n\n0.0\n0.0 0.2 0.4 0.6 0.8 1.0\n\nFigure 3.5: This plot shows how distributions that are closer to deterministic have low\nShannon entropy while distributions that are close to uniform have high Shannon entropy.\nOn the horizontal axis, we plot p, the probability of a binary random variable being equal\nto 1. The entropy is given by (p\u2014 1)log(1 \u2014 p)\u2014plog p. When pis near 0, the distribution\nis nearly deterministic, because the random variable is nearly always 0. When p is near 1,\nthe distribution is nearly deterministic, because the random variable is nearly always 1.\nWhen p = 0.5, the entropy is maximal, because the distribution is uniform over the two\noutcomes.\n\nasymmetry means that there are important consequences to the choice of whether\nto use Dx, (P||Q) or Dx (Q||P). See figure 3.6 for more detail.\n\nA quantity that is closely related to the KL divergence is the cross-entropy\nH(P,Q) = H(P) + Dkr (P||Q), which is similar to the KL divergence but lacking\nthe term on the left:\n\nH(P,Q) = \u2014Exxp log Q(c). (3.51)\n\nMinimizing the cross-entropy with respect to Q is equivalent to minimizing the\nKL divergence, because Q does not participate in the omitted term.\n\nWhen computing many of these quantities, it is common to encounter expres-\nsions of the form 0 log0. By convention, in the context of information theory, we\ntreat these expressions as lim, ,9 log x = 0.\n\n3.14 Structured Probabilistic Models\n\nMachine learning algorithms often involve probability distributions over a very\nlarge number of random variables. Often, these probability distributions involve\ndirect interactions between relatively few variables. Using a single function to\n\n75\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nq* = argmin, Dx (p||\u00a2) q* = argmin,Dx1 (4l||P)\n\nProbability Density\nProbability Density\n\nFigure 3.6: The KL divergence is asymmetric. Suppose we have a distribution p(\u00ab) and\nwish to approximate it with another distribution q(x). We have the choice of minimizing\neither Dkr (p||q) or Dx (q\\|p). We illustrate the effect of this choice using a mixture of\nwo Gaussians for p, and a single Gaussian for g. The choice of which direction of the\nKL divergence to use is problem-dependent. Some applications require an approximation\nhat usually places high probability anywhere that the true distribution places high\nprobability, while other applications require an approximation that rarely places high\nprobability anywhere that the true distribution places low probability. The choice of the\ndirection of the KL divergence reflects which of these considerations takes priority for each\napplication. (Left)The effect of minimizing Dx ,(pl|q). In this case, we select a q that has\nhigh probability where p has high probability. When p has multiple modes, g chooses to\nblur the modes together, in order to put high probability mass on all of them. (Right)The\neffect of minimizing Dx,(q||p). In this case, we select a q that has low probability where\np has low probability. When p has multiple modes that are sufficiently widely separated,\nas in this figure, the KL divergence is minimized by choosing a single mode, in order to\navoid putting probability mass in the low-probability areas between modes of p. Here, we\nillustrate the outcome when q is chosen to emphasize the left mode. We could also have\nachieved an equal value of the KL divergence by choosing the right mode. If the modes\nare not separated by a sufficiently strong low probability region, then this direction of the\nKL divergence can still choose to blur the modes.\n\n76\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\ndescribe the entire joint probability distribution can be very inefficient (both\ncomputationally and statistically).\n\nInstead of using a single function to represent a probability distribution, we\ncan split a probability distribution into many factors that we multiply together.\nFor example, suppose we have three random variables: a, b and c. Suppose that\na influences the value of b and b influences the value of c, but that a and c are\nindependent given b. We can represent the probability distribution over all three\nvariables as a product of probability distributions over two variables:\n\np(a,b, \u00a2) = p(a)p(b | a)p(c | b). (3.52)\n\nThese factorizations can greatly reduce the number of parameters needed\nto describe the distribution. Each factor uses a number of parameters that is\nexponential in the number of variables in the factor. This means that we can greatly\nreduce the cost of representing a distribution if we are able to find a factorization\ninto distributions over fewer variables.\n\nWe can describe these kinds of factorizations using graphs. Here we use the word\n\u201craph\u201d in the sense of graph theory: a set of vertices that may be connected to each\nother with edges. When we represent the factorization of a probability distribution\nwith a graph, we call it a structured probabilistic model or graphical model.\n\nThere are two main kinds of structured probabilistic models: directed and\nundirected. Both kinds of graphical models use a graph G in which each node\nin the graph corresponds to a random variable, and an edge connecting two\nrandom variables means that the probability distribution is able to represent direct\ninteractions between those two random variables.\n\nDirected models use graphs with directed edges, and they represent fac-\ntorizations into conditional probability distributions, as in the example above.\nSpecifically, a directed model contains one factor for every random variable x; in\nthe distribution, and that factor consists of the conditional distribution over x;\ngiven the parents of x;, denoted Pag(x;):\n\np(x) = []p cs | Pag(xi)). (3.53)\n\na\nSee figure 3.7 for an example of a directed graph and the factorization of probability\ndistributions it represents.\n\nUndirected models use graphs with undirected edges, and they represent\nfactorizations into a set of functions; unlike in the directed case, these functions\n\n77\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\n3.0\n\u00a9)\n\n\u00a9)\n\nFigure 3.7: A directed graphical model over random variables a, b, c, dand e. This graph\ncorresponds to probability distributions that can be factored as\n\npla, b,c, d,e) = p(a)p(b | a)p(c | a, b)p(d | b)p(e | \u00a2)- (3.54)\n\nThis graph allows us to quickly see some properties of the distribution. For example, a\nand c interact directly, but a and e interact only indirectly via c.\n\nare usually not probability distributions of any kind. Any set of nodes that are all\nconnected to each other in G is called a clique. Each clique C in an undirected\nmodel is associated with a factor e(C@ ). These factors are just functions, not\nprobability distributions. The output of each factor must be non-negative, but\nthere is no constraint that the factor must sum or integrate to 1 like a probability\ndistribution.\n\nThe probability of a configuration of random variables is proportional to the\nproduct of all of these factors\u2014assignments that result in larger factor values are\nmore likely. Of course, there is no guarantee that this product will sum to 1. We\ntherefore divide by a normalizing constant Z, defined to be the sum or integral\nover all states of the product of the \u00a2 functions, in order to obtain a normalized\nprobability distribution:\n\np(x) = ; IIe (c?) ; (3.55)\n\nSee figure 3.8 for an example of an undirected graph and the factorization of\nprobability distributions it represents.\n\nKeep in mind that these graphical representations of factorizations are a\nlanguage for describing probability distributions. They are not mutually exclusive\nfamilies of probability distributions. Being directed or undirected is not a property\nof a probability distribution; it is a property of a particular description of a\n\n78\n", "CHAPTER 3. PROBABILITY AND INFORMATION THEORY\n\nFigure 3.8: An undirected graphical model over random variables a, b, c, d ande. This\ngraph corresponds to probability distributions that can be factored as\n\np(a, b,c, d,e) = FEM (a,b. c)6? (b, d)d(c,e). (3.56)\n\nThis graph allows us to quickly see some properties of the distribution. For example, a\nand c interact directly, but a and e interact only indirectly via c.\n\nprobability distribution, but any probability distribution may be described in both\nways.\n\nThroughout parts I and II of this book, we will use structured probabilistic\nmodels merely as a language to describe which direct probabilistic relationships\ndifferent machine learning algorithms choose to represent. No further understanding\nof structured probabilistic models is needed until the discussion of research topics,\nin part II], where we will explore structured probabilistic models in much greater\ndetail.\n\nThis chapter has reviewed the basic concepts of probability theory that are\nmost relevant to deep learning. One more set of fundamental mathematical tools\nremains: numerical methods.\n\n79\n", "Chapter 4\n\nNumerical Computation\n\nMachine learning algorithms usually require a high amount of numerical compu-\ntation. This typically refers to algorithms that solve mathematical problems by\nmethods that update estimates of the solution via an iterative process, rather than\nanalytically deriving a formula providing a symbolic expression for the correct so-\nlution. Common operations include optimization (finding the value of an argument\nthat minimizes or maximizes a function) and solving systems of linear equations.\nEven just evaluating a mathematical function on a digital computer can be difficult\nwhen the function involves real numbers, which cannot be represented precisely\nusing a finite amount of memory.\n\n4.1 Overflow and Underflow\n\nThe fundamental difficulty in performing continuous math on a digital computer\nis that we need to represent infinitely many real numbers with a finite number\nof bit patterns. This means that for almost all real numbers, we incur some\napproximation error when we represent the number in the computer. In many\ncases, this is just rounding error. Rounding error is problematic, especially when\nit compounds across many operations, and can cause algorithms that work in\ntheory to fail in practice if they are not designed to minimize the accumulation of\nrounding error.\n\nOne form of rounding error that is particularly devastating is underflow.\nUnderflow occurs when numbers near zero are rounded to zero. Many functions\nbehave qualitatively differently when their argument is zero rather than a small\npositive number. For example, we usually want to avoid division by zero (some\n\n80\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nsoftware environments will raise exceptions when this occurs, others will return a\nresult with a placeholder not-a-number value) or taking the logarithm of zero (this\nis usually treated as \u2014oo, which then becomes not-a-number if it is used for many\nfurther arithmetic operations).\n\nAnother highly damaging form of numerical error is overflow. Overflow occurs\nwhen numbers with large magnitude are approximated as oo or \u2014oo. Further\narithmetic will usually change these infinite values into not-a-number values.\n\nOne example of a function that must be stabilized against underflow and\noverflow is the softmax function. The softmax function is often used to predict the\nprobabilities associated with a multinoulli distribution. The softmax function is\ndefined to be\n\nsoftmax(a); = \u2014_\u20acxP (Hi) (4.1)\n\nyet exp(xj) ,\n\nConsider what happens when all of the x; are equal to some constant c. Analytically,\nwe can see that all of the outputs should be equal to i, Numerically, this may\nnot occur when c has large magnitude. If c is very negative, then exp(c) will\nunderflow. This means the denominator of the softmax will become 0, so the final\nresult is undefined. When c is very large and positive, exp(c) will overflow, again\nresulting in the expression as a whole being undefined. Both of these difficulties\ncan be resolved by instead evaluating softmax(z) where z = x \u2014 max; 2;. Simple\nalgebra shows that the value of the softmax function is not changed analytically by\nadding or subtracting a scalar from the input vector. Subtracting max; 7; results\nin the largest argument to exp being 0, which rules out the possibility of overflow.\nLikewise, at least one term in the denominator has a value of 1, which rules out\nthe possibility of underflow in the denominator leading to a division by zero.\n\nThere is still one small problem. Underflow in the numerator can still cause\nthe expression as a whole to evaluate to zero. This means that if we implement\nlog softmax(a) by first running the softmax subroutine then passing the result to\nthe log function, we could erroneously obtain \u2014oo. Instead, we must implement\na separate function that calculates log softmax in a numerically stable way. The\nlog softmax function can be stabilized using the same trick as we used to stabilize\nthe softmax function.\n\nFor the most part, we do not explicitly detail all of the numerical considerations\ninvolved in implementing the various algorithms described in this book. Developers\nof low-level libraries should keep numerical issues in mind when implementing\ndeep learning algorithms. Most readers of this book can simply rely on low-\nlevel libraries that provide stable implementations. In some cases, it is possible\nto implement a new algorithm and have the new implementation automatically\n\n81\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nstabilized. Theano (Bergstra ef al., 2010; Bastien et al., 2012) is an example\nof a software package that automatically detects and stabilizes many common\nnumerically unstable expressions that arise in the context of deep learning.\n\n4.2. Poor Conditioning\n\nConditioning refers to how rapidly a function changes with respect to small changes\nin its inputs. Functions that change rapidly when their inputs are perturbed slightly\ncan be problematic for scientific computation because rounding errors in the inputs\ncan result in large changes in the output.\n\nConsider the function f(#) = A7ta. When A \u20ac R\u201d*\u201d has an eigenvalue\ndecomposition, its condition number is\n\nXi\n\nmax :\nXj\n\n1a (4.2)\n\nThis is the ratio of the magnitude of the largest and smallest eigenvalue. When\nthis number is large, matrix inversion is particularly sensitive to error in the input.\n\nThis sensitivity is an intrinsic property of the matrix itself, not the result\nof rounding error during matrix inversion. Poorly conditioned matrices amplify\npre-existing errors when we multiply by the true matrix inverse. In practice, the\nerror will be compounded further by numerical errors in the inversion process itself.\n\n4.3. Gradient-Based Optimization\n\nMost deep learning algorithms involve optimization of some sort. Optimization\nrefers to the task of either minimizing or maximizing some function f(a) by altering\nxz. We usually phrase most optimization problems in terms of minimizing f(a).\nMaximization may be accomplished via a minimization algorithm by minimizing\n\u2014 f(x).\n\nThe function we want to minimize or maximize is called the objective func-\ntion or criterion. When we are minimizing it, we may also call it the cost\nfunction, loss function, or error function. In this book, we use these terms\ninterchangeably, though some machine learning publications assign special meaning\nto some of these terms.\n\nWe often denote the value that minimizes or maximizes a function with a\nsuperscript *. For example, we might say x* = arg min f(a).\n\n82\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nGlobal minimum at x = 0.\nSince f\u2019(x) = 0, gradient\ndescent halts here.\n\n~\n\nFor x < 0, we have f\u2019(x\n\nso we can decrease fb, so we can decrease f by\nmoving rightward. moving leftward.\n\nFigure 4.1: An illustration of how the gradient descent algorithm uses the derivatives of a\nfunction can be used to follow the function downhill to a minimum.\n\nWe assume the reader is already familiar with calculus, but provide a brief\nreview of how calculus concepts relate to optimization here.\n\nSuppose we have a function y = f(a), where both x and y are real numbers.\nThe derivative of this function is denoted as f(x) or as a. The derivative f\u2019 (x)\ngives the slope of f(a) at the point x. In other words, it specifies how to scale\na small change in the input in order to obtain the corresponding change in the\noutput: f(@ +e)\u00bb f(x) +ef\"(2).\n\nThe derivative is therefore useful for minimizing a function because it tells\nus how to change z in order to make a small improvement in y. For example,\nwe know that f(x \u2014 esign(f\u2019(z))) is less than f(x) for small enough \u00ab. We can\nthus reduce f(x) by moving x in small steps with opposite sign of the derivative.\nThis technique is called gradient descent (Cauchy, 1847). See figure 4.1 for an\nexample of this technique.\n\nWhen f\u2019(x) = 0, the derivative provides no information about which direction\nto move. Points where f\u2019(2) = 0 are known as critical points or stationary\npoints. A local minimum is a point where f(x) is lower than at all neighboring\npoints, so it is no longer possible to decrease f(a) by making infinitesimal steps.\nA local maximum is a point where f(x) is higher than at all neighboring points,\n\n83\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nMinimum Maximum Saddle point\n\nFigure 4.2: Examples of each of the three types of critical points in 1-D. A critical point is\na point with zero slope. Such a point can either be a local minimum, which is lower than\nthe neighboring points, a local maximum, which is higher than the neighboring points, or\na saddle point, which has neighbors that are both higher and lower than the point itself.\n\nso it is not possible to increase f(a) by making infinitesimal steps. Some critical\npoints are neither maxima nor minima. These are known as saddle points. See\nfigure 4.2 for examples of each type of critical point.\n\nA point that obtains the absolute lowest value of f(x) is a global minimum.\nIt is possible for there to be only one global minimum or multiple global minima of\nthe function. It is also possible for there to be local minima that are not globally\noptimal. In the context of deep learning, we optimize functions that may have\nmany local minima that are not optimal, and many saddle points surrounded by\nvery flat regions. All of this makes optimization very difficult, especially when the\ninput to the function is multidimensional. We therefore usually settle for finding a\nvalue of f that is very low, but not necessarily minimal in any formal sense. See\nfigure 4.3 for an example.\n\nWe often minimize functions that have multiple inputs: f : R\" \u2014 R. For the\nconcept of \u201cminimization\u201d to make sense, there must still be only one (scalar)\noutput.\n\nFor functions with multiple inputs, we must make use of the concept of partial\nderivatives. The partial derivative of f(a) measures how f changes as only the\nvariable \u00abx; increases at point 2. The gradient generalizes the notion of derivative\nto the case where the derivative is with respect to a vector: the gradient of f is the\nvector containing all of the partial derivatives, denoted Vf (a). Element 7 of the\ngradient is the partial derivative of f with respect to x;. In multiple dimensions,\n\n84\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nThis local minimum\nperforms nearly as well as\nthe global one,\n\nso it is an acceptable\nhalting point.\n\nIdeally, we would like\nto arrive at the global\nminimum, but this\n\nmight not be possible.\n\nThis local minimum performs\npoorly and should be avoided.\n\nFigure 4.3: Optimization algorithms may fail to find a global minimum when there are\nmultiple local minima or plateaus present. In the context of deep learning, we generally\naccept such solutions even though they are not truly minimal, so long as they correspond\nto significantly low values of the cost function.\n\ncritical points are points where every element of the gradient is equal to zero.\n\nThe directional derivative in direction u (a unit vector) is the slope of the\nfunction f in direction u. In other words, the directional derivative is the derivative\nof the function f(a + au) with respect to a, evaluated at a= 0. Using the chain\ntule, we can see that 2 f(x + au) evaluates to u'Va f(x) when a = 0.\n\nTo minimize f, we would like to find the direction in which f decreases the\nfastest. We can do this using the directional derivative:\n\nmin u'Vef (a) (4.3)\n= min llullel Ve f(x)lk cos (4.4)\n\nwhere @ is the angle between u and the gradient. Substituting in ||w||2 = 1 and\nignoring factors that do not depend on w, this simplifies to min, cos @. This is\nminimized when u points in the opposite direction as the gradient. In other\nwords, the gradient points directly uphill, and the negative gradient points directly\ndownhill. We can decrease f by moving in the direction of the negative gradient.\nThis is known as the method of steepest descent or gradient descent.\n\nSteepest descent proposes a new point\n\nxv =2-\u20acVaf (x) (4.5)\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nwhere \u20ac is the learning rate, a positive scalar determining the size of the step.\nWe can choose e\u20ac in several different ways. A popular approach is to set \u20ac to a small\nconstant. Sometimes, we can solve for the step size that makes the directional\nderivative vanish. Another approach is to evaluate f (a \u2014 eVa2f(a)) for several\nvalues of \u20ac and choose the one that results in the smallest objective function value.\nThis last strategy is called a line search.\n\nSteepest descent converges when every element of the gradient is zero (or, in\npractice, very close to zero). In some cases, we may be able to avoid running this\niterative algorithm, and just jump directly to the critical point by solving the\nequation Vz f(a) = 0 for x.\n\nAlthough gradient descent is limited to optimization in continuous spaces, the\ngeneral concept of repeatedly making a small move (that is approximately the best\nsmall move) towards better configurations can be generalized to discrete spaces.\nAscending an objective function of discrete parameters is called hill climbing\n(Russel and Norvig, 2003).\n\n4.3.1 Beyond the Gradient: Jacobian and Hessian Matrices\n\nSometimes we need to find all of the partial derivatives of a function whose input\nand output are both vectors. The matrix containing all such partial derivatives is\nknown as a Jacobian matrix. Specifically, if we have a function f : R\u2122 \u2014 R\u201d,\nthen the Jacobian matrix J \u20ac R\"*\u2122 of f is defined such that Jij = Bf (wi:\n\nWe are also sometimes interested in a derivative of a derivative. This is known\n\nas a second derivative. For example, for a function f : R\u201d \u2014 R, the derivative\n. ys . . 2\n\nwith respect to 2; of the derivative of f with respect to 2; is denoted as oom f\n\nIn a single dimension, we can denote za f by f\"(x). The second derivative tells\nus how the first derivative will change as we vary the input. This is important\nbecause it tells us whether a gradient step will cause as much of an improvement\nas we would expect based on the gradient alone. We can think of the second\nderivative as measuring curvature. Suppose we have a quadratic function (many\nfunctions that arise in practice are not quadratic but can be approximated well\nas quadratic, at least locally). If such a function has a second derivative of zero,\nthen there is no curvature. It is a perfectly flat line, and its value can be predicted\nusing only the gradient. If the gradient is 1, then we can make a step of size \u20ac\nalong the negative gradient, and the cost function will decrease by e. If the second\nderivative is negative, the function curves downward, so the cost function will\nactually decrease by more than e. Finally, if the second derivative is positive, the\nfunction curves upward, so the cost function can decrease by less than \u00a2 See\n\n86\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nNegative curvature No curvature Positive curvature\nS = =\nS S S\nx x x\n\nFigure 4.4: The second derivative determines the curvature of a function. Here we show\nquadratic functions with various curvature. The dashed line indicates the value of the cost\nfunction we would expect based on the gradient information alone as we make a gradient\nstep downhill. In the case of negative curvature, the cost function actually decreases faster\nthan the gradient predicts. In the case of no curvature, the gradient predicts the decrease\ncorrectly. In the case of positive curvature, the function decreases slower than expected\nand eventually begins to increase, so steps that are too large can actually increase the\nfunction inadvertently.\n\nfigure 4.4 to see how different forms of curvature affect the relationship between\nthe value of the cost function predicted by the gradient and the true value.\n\nWhen our function has multiple input dimensions, there are many second\nderivatives. These derivatives can be collected together into a matrix called the\nHessian matrix. The Hessian matrix H(f)(x) is defined such that\n\ne2\nH ig = aT (@). 4\n(Nes = Fepe FO) (4.6)\nEquivalently, the Hessian is the Jacobian of the gradient.\n\nAnywhere that the second partial derivatives are continuous, the differential\noperators are commutative, i.e. their order can be swapped:\n\nom ae\n\nToe!) = aoe: (4.7)\n\nThis implies that Hj; = Hj, so the Hessian matrix is symmetric at such points.\nMost of the functions we encounter in the context of deep learning have a symmetric\nHessian almost everywhere. Because the Hessian matrix is real and symmetric,\nwe can decompose it into a set of real eigenvalues and an orthogonal basis of\n\n87\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\neigenvectors. The second derivative in a specific direction represented by a unit\nvector dis given by d' Hd. When dis an eigenvector of H,, the second derivative\nin that direction is given by the corresponding eigenvalue. For other directions of\nd, the directional second derivative is a weighted average of all of the eigenvalues,\nwith weights between 0 and 1, and eigenvectors that have smaller angle with d\nreceiving more weight. The maximum eigenvalue determines the maximum second\nderivative and the minimum eigenvalue determines the minimum second derivative.\n\nThe (directional) second derivative tells us how well we can expect a gradient\ndescent step to perform. We can make a second-order Taylor series approximation\nto the function f(a) around the current point a:\n\nfle) \u00a9 f@) + (@\u2014 2)\" 9g + 5(@-2)\"H(e\u2014 2). (48)\n\nwhere g is the gradient and A is the Hessian at x). If we use a learning rate\nof \u20ac, then the new point a will be given by \u00ab \u2014 eg. Substituting this into our\napproximation, we obtain\n\nf(a \u2014 eg) & f(@) \u2014eg'g + 509 Ho. (4.9)\n\nThere are three terms here: the original value of the function, the expected\nimprovement due to the slope of the function, and the correction we must apply\nto account for the curvature of the function. When this last term is too large, the\ngradient descent step can actually move uphill. When g' Hg is zero or negative,\nthe Taylor series approximation predicts that increasing \u00a2\u20ac forever will decrease f\nforever. In practice, the Taylor series is unlikely to remain accurate for large \u20ac, so\none must resort to more heuristic choices of \u20ac in this case. When g' Hg is positive,\nsolving for the optimal step size that decreases the Taylor series approximation of\nthe function the most yields\n\u00ab79\n\ng' Hg\nIn the worst case, when g aligns with the eigenvector of H corresponding to the\nmaximal eigenvalue Amax, then this optimal step size is given by ve. To the\nextent that the function we minimize can be approximated well by a quadratic\nfunction, the eigenvalues of the Hessian thus determine the scale of the learning\nrate.\n\n(4.10)\n\nThe second derivative can be used to determine whether a critical point is\na local maximum, a local minimum, or saddle point. Recall that on a critical\npoint, f\u2019(z) = 0. When the second derivative f(x) > 0, the first derivative f\u2019(x)\nincreases as we move to the right and decreases as we move to the left. This means\n\n88\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nf'(a\u2014\u20ac) < Oand f\u2019(z +6) >0 for small enough \u00a2. In other words, as we move\nright, the slope begins to point uphill to the right, and as we move left, the slope\nbegins to point uphill to the left. Thus, when f/(a) = 0 and f\u2019(x) > 0, we can\nconclude that x is a local minimum. Similarly, when f\u2019(x) = 0 and f\u201d(x) <0, we\ncan conclude that x is a local maximum. This is known as the second derivative\ntest. Unfortunately, when f\u201d (x) = 0, the test is inconclusive. In this case x may\nbe a saddle point, or a part of a flat region.\n\nIn multiple dimensions, we need to examine all of the second derivatives of the\nfunction. Using the eigendecomposition of the Hessian matrix, we can generalize\nthe second derivative test to multiple dimensions. At a critical point, where\nVaf (x) = 0, we can examine the eigenvalues of the Hessian to determine whether\nthe critical point is a local maximum, local minimum, or saddle point. When the\nHessian is positive definite (all its eigenvalues are positive), the point is a local\nminimum. This can be seen by observing that the directional second derivative\nin any direction must be positive, and making reference to the univariate second\nderivative test. Likewise, when the Hessian is negative definite (all its eigenvalues\nare negative), the point is a local maximum. In multiple dimensions, it is actually\npossible to find positive evidence of saddle points in some cases. When at least\none eigenvalue is positive and at least one eigenvalue is negative, we know that\nz is a local maximum on one cross section of f but a local minimum on another\ncross section. See figure 4.5 for an example. Finally, the multidimensional second\nderivative test can be inconclusive, just like the univariate version. The test is\ninconclusive whenever all of the non-zero eigenvalues have the same sign, but at\nleast one eigenvalue is zero. This is because the univariate second derivative test is\ninconclusive in the cross section corresponding to the zero eigenvalue.\n\nIn multiple dimensions, there is a different second derivative for each direction\nat a single point. The condition number of the Hessian at this point measures\nhow much the second derivatives differ from each other. When the Hessian has a\npoor condition number, gradient descent performs poorly. This is because in one\ndirection, the derivative increases rapidly, while in another direction, it increases\nslowly. Gradient descent is unaware of this change in the derivative so it does not\nknow that it needs to explore preferentially in the direction where the derivative\nremains negative for longer. It also makes it difficult to choose a good step size.\nThe step size must be small enough to avoid overshooting the minimum and going\nuphill in directions with strong positive curvature. This usually means that the\nstep size is too small to make significant progress in other directions with less\ncurvature. See figure 4.6 for an example.\n\nThis issue can be resolved by using information from the Hessian matrix to guide\n\n89\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nFigure 4.5: A saddle point containing both positive and negative curvature. The function\nin this example is f(x) = x} \u2014 23. Along the axis corresponding to 21, the function\ncurves upward. This axis is an eigenvector of the Hessian and has a positive eigenvalue.\nAlong the axis corresponding to x2, the function curves downward. This direction is an\neigenvector of the Hessian with negative eigenvalue. The name \u201csaddle point\u201d derives from\nthe saddle-like shape of this function. This is the quintessential example of a function\nwith a saddle point. In more than one dimension, it is not necessary to have an eigenvalue\nof 0 in order to get a saddle point: it is only necessary to have both positive and negative\neigenvalues. We can think of a saddle point with both signs of eigenvalues as being a local\nmaximum within one cross section and a local minimum within another cross section.\n\n90\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\n\u201430 \u201420 -10 0 10 20\nr1\n\nFigure 4.6: Gradient descent fails to exploit the curvature information contained in the\nHessian matrix. Here we use gradient descent to minimize a quadratic function f(a) whose\nHessian matrix has condition number 5. This means that the direction of most curvature\nhas five times more curvature than the direction of least curvature. In this case, the most\ncurvature is in the direction [1,1]' and the least curvature is in the direction [1,\u20141]'. The\nred lines indicate the path followed by gradient descent. This very elongated quadratic\nfunction resembles a long canyon. Gradient descent wastes time repeatedly descending\ncanyon walls, because they are the steepest feature. Because the step size is somewhat\ntoo large, it has a tendency to overshoot the bottom of the function and thus needs to\ndescend the opposite canyon wall on the next iteration. The large positive eigenvalue\nof the Hessian corresponding to the eigenvector pointed in this direction indicates that\nthis directional derivative is rapidly increasing, so an optimization algorithm based on\nthe Hessian could predict that the steepest direction is not actually a promising search\ndirection in this context.\n\n91\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nthe search. The simplest method for doing so is known as Newton\u2019s method.\nNewton\u2019s method is based on using a second-order Taylor series expansion to\napproximate f(a) near some point \u00ab):\n\n1\nfw) \u00a9 F@ )+(@-@)'Ve f(a) +5 (a-2)\"H(f)(@ )(a\u2014a), (4.11)\nIf we then solve for the critical point of this function, we obtain:\n2* = 0 \u2014 Hf) Vo f(a). (4.12)\n\nWhen f is a positive definite quadratic function, Newton\u2019s method consists of\napplying equation 4.12 once to jump to the minimum of the function directly.\nWhen f is not truly quadratic but can be locally approximated as a positive\ndefinite quadratic, Newton\u2019s method consists of applying equation 4.12 multiple\ntimes. Iteratively updating the approximation and jumping to the minimum of\nthe approximation can reach the critical point much faster than gradient descent\nwould. This is a useful property near a local minimum, but it can be a harmful\nproperty near a saddle point. As discussed in section 8.2.3, Newton\u2019s method is\nonly appropriate when the nearby critical point is a minimum (all the eigenvalues\nof the Hessian are positive), whereas gradient descent is not attracted to saddle\npoints unless the gradient points toward them.\n\nOptimization algorithms that use only the gradient, such as gradient descent,\nare called first-order optimization algorithms. Optimization algorithms that\nalso use the Hessian matrix, such as Newton\u2019s method, are called second-order\noptimization algorithms (Nocedal and Wright, 2006).\n\nThe optimization algorithms employed in most contexts in this book are\napplicable to a wide variety of functions, but come with almost no guarantees.\nDeep learning algorithms tend to lack guarantees because the family of functions\nused in deep learning is quite complicated. In many other fields, the dominant\napproach to optimization is to design optimization algorithms for a limited family\nof functions.\n\nIn the context of deep learning, we sometimes gain some guarantees by restrict-\ning ourselves to functions that are either Lipschitz continuous or have Lipschitz\ncontinuous derivatives. A Lipschitz continuous function is a function f whose rate\nof change is bounded by a Lipschitz constant CL:\n\nVa, Vy,|f(@) \u2014 f(y)| < Lila \u2014 ull. (4.13)\n\nThis property is useful because it allows us to quantify our assumption that a\nsmall change in the input made by an algorithm such as gradient descent will have\n\n92\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\na small change in the output. Lipschitz continuity is also a fairly weak constraint,\nand many optimization problems in deep learning can be made Lipschitz continuous\nwith relatively minor modifications.\n\nPerhaps the most successful field of specialized optimization is convex op-\ntimization. Convex optimization algorithms are able to provide many more\nguarantees by making stronger restrictions. Convex optimization algorithms are\napplicable only to convex functions\u2014functions for which the Hessian is positive\nsemidefinite everywhere. Such functions are well-behaved because they lack saddle\npoints and all of their local minima are necessarily global minima. However, most\nproblems in deep learning are difficult to express in terms of convex optimization.\nConvex optimization is used only as a subroutine of some deep learning algorithms.\nIdeas from the analysis of convex optimization algorithms can be useful for proving\nthe convergence of deep learning algorithms. However, in general, the importance\nof convex optimization is greatly diminished in the context of deep learning. For\nmore information about convex optimization, see Boyd and Vandenberghe (2004)\nor Rockafellar (1997).\n\n4.4 Constrained Optimization\n\nSometimes we wish not only to maximize or minimize a function f(a) over all\npossible values of a. Instead we may wish to find the maximal or minimal\nvalue of f(a) for values of # in some set S. This is known as constrained\noptimization. Points a that lie within the set S are called feasible points in\nconstrained optimization terminology.\n\nWe often wish to find a solution that is small in some sense. A common\napproach in such situations is to impose a norm constraint, such as ||ax|| < 1.\n\nOne simple approach to constrained optimization is simply to modify gradient\ndescent taking the constraint into account. If we use a small constant step size e,\nwe can make gradient descent steps, then project the result back into S. If we use\na line search, we can search only over step sizes \u20ac that yield new x points that are\nfeasible, or we can project each point on the line back into the constraint region.\nWhen possible, this method can be made more efficient by projecting the gradient\ninto the tangent space of the feasible region before taking the step or beginning\nthe line search (Rosen, 1960).\n\nA more sophisticated approach is to design a different, unconstrained opti-\nmization problem whose solution can be converted into a solution to the original,\nconstrained optimization problem. For example, if we want to minimize f(a) for\n\n93\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nx \u20ac R? with x constrained to have exactly unit L? norm, we can instead minimize\ng(9) = f ([cos 0, sin ') with respect to 0, then return [cos 0, sin 6] as the solution\nto the original problem. This approach requires creativity; the transformation\nbetween optimization problems must be designed specifically for each case we\nencounter.\n\nThe Karush\u2014Kuhn\u2014Tucker (KKT) approach! provides a very general so-\nlution to constrained optimization. With the KKT approach, we introduce a\nnew function called the generalized Lagrangian or generalized Lagrange\nfunction.\n\nTo define the Lagrangian, we first need to describe S in terms of equations\nand inequalities. We want a description of S in terms of m functions g\u00ae andn\nfunctions h\u00ae so that S = {a | Vi, g(a) = 0 and Vj, hk (a) < 0}. The equations\ninvolving g\u00ae are called the equality constraints and the inequalities involving\nh\u00ae are called inequality constraints.\n\nWe introduce new variables \\; anda; for each constraint, these are called the\nKKT multipliers. The generalized Lagrangian is then defined as\n\nL(a, X, @) (\u00a9) + Dri a) +S ajh'(a). (4.14)\n\nWe can now solve a constrained minimization problem using unconstrained\noptimization of the generalized Lagrangian. Observe that, so long as at least one\nfeasible point exists and f(a) is not permitted to have value oo, then\n\nmin max max L(a,A, a). (4.15)\na,a>0\n\nhas the same optimal objective function value and set of optimal points a as\n\nmin f (#). (4.16)\n\nThis follows because any time the constraints are satisfied,\n\nmax max LE (a, A, a) = f(x), (4.17)\n\na,a>\n\nwhile any time a constraint is violated,\n\nmax max Ee, A, @) = 00. (4.18)\n\na,a-\n\n\u2018The KKT approach generalizes the method of Lagrange multipliers which allows equality\nconstraints but not inequality constraints.\n\n94\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nThese properties guarantee that no infeasible point can be optimal, and that the\noptimum within the feasible points is unchanged.\n\nTo perform constrained maximization, we can construct the generalized La-\ngrange function of \u2014 f(a), which leads to this optimization problem:\n\nminmax max \u2014f(x)+ dria x) + S> ah (a). (4.19)\n\nA a,a>0\n\nWe may also convert this to a problem with maximization in the outer loop:\n\nmaxmin 0 min n f(a) + Dra! g(x )\u2014 Leash! (x). (4.20)\n\nThe sign of the term for the equality constraints does not matter; we may define it\nwith addition or subtraction as we wish, because the optimization is free to choose\nany sign for each Aj.\n\nThe inequality constraints are particularly interesting. We say that a constraint\nrn (x) is active if A (a*) = 0. If a constraint is not active, then the solution to\nthe problem found using that constraint would remain at least a local solution if\nthat constraint were removed. It is possible that an inactive constraint excludes\nother solutions. For example, a convex problem with an entire region of globally\noptimal points (a wide, flat, region of equal cost) could have a subset of this\nregion eliminated by constraints, or a non-convex problem could have better local\nstationary points excluded by a constraint that is inactive at convergence. However,\nthe point found at convergence remains a stationary point whether or not the\ninactive constraints are included. Because an inactive h has negative value, then\nthe solution to ming max, Maxqq>0 L(x, A, a) will have a; = 0. We can thus\nobserve that at the solution, a \u00a9 h(a) = 0. In other words, for all 7, we know\nthat at least one of the constraints a; > 0 and nO (a) <0 must be active at the\nsolution. To gain some intuition for this idea, we can say that either the solution\nis on the boundary imposed by the inequality and we must use its KKT multiplier\nto influence the solution to x, or the inequality has no influence on the solution\nand we represent this by zeroing out its KKT multiplier.\n\nA simple set of properties describe the optimal points of constrained opti-\nmization problems. These properties are called the Karush-Kuhn-Tucker (KKT)\nconditions (Karush, 1939; Kuhn and Tucker, 1951). They are necessary conditions,\nbut not always sufficient conditions, for a point to be optimal. The conditions are:\n\ne The gradient of the generalized Lagrangian is zero.\n\ne All constraints on both # and the KKT multipliers are satisfied.\n95\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\ne The inequality constraints exhibit \u201ccomplementary slackness\u201d: a \u00a9 h(a) = 0.\n\nFor more information about the KKT approach, see Nocedal and Wright (2006).\n\n4.5 Example: Linear Least Squares\n\nSuppose we want to find the value of x that minimizes\n1\nf(w) = 5 ||Aw \u20140|)3 (4.21)\n\nThere are specialized linear algebra algorithms that can solve this problem efficiently.\nHowever, we can also explore how to solve it using gradient-based optimization as\na simple example of how these techniques work.\n\nFirst, we need to obtain the gradient:\nVaf(a) = A'(Ax\u2014b)= Al Aw \u2014 Ald. (4.22)\n\nWe can then follow this gradient downhill, taking small steps. See algorithm 4.1\nfor details.\n\nAlgorithm 4.1 An algorithm to minimize f(x) = 5 || Ax \u2014 b||3 with respect to x\nusing gradient descent, starting from an arbitrary value of a.\n\nSet the step size (e) and tolerance (6) to small, positive numbers.\nwhile ||A' Ax \u2014 A! dll) >6do\n\na~a\u2014e(A'Ar\u2014A'b)\nend while\n\nOne can also solve this problem using Newton\u2019s method. In this case, because\nthe true function is quadratic, the quadratic approximation employed by Newton\u2019s\nmethod is exact, and the algorithm converges to the global minimum in a single\nstep.\n\nNow suppose we wish to minimize the same function, but subject to the\nconstraint a'a <1. To do so, we introduce the Lagrangian\n\nL(a,\\) = f(x) 4 A(a\"e 1), (4.23)\n\nWe can now solve the problem\n\nx@ X,rA>\n\nmin max L(a, ). (4.24)\n\n96\n", "CHAPTER 4. NUMERICAL COMPUTATION\n\nThe smallest-norm solution to the unconstrained least squares problem may be\nfound using the Moore-Penrose pseudoinverse: 2 = At b. If this point is feasible,\nthen it is the solution to the constrained problem. Otherwise, we must find a\nsolution where the constraint is active. By differentiating the Lagrangian with\nrespect to x, we obtain the equation\n\nA! Ax \u2014 A'b+2)\\\" =0. (4.25)\nThis tells us that the solution will take the form\na =(A'A+2\\1)~!A'b. (4.26)\n\nThe magnitude of \\ must be chosen such that the result obeys the constraint. We\ncan find this value by performing gradient ascent on A. To do so, observe\n\nO\n\n\u2014 \u00bbT\npy ele) wal. (4.27)\n\nWhen the norm of & exceeds 1, this derivative is positive, so to follow the derivative\nuphill and increase the Lagrangian with respect to A, we increase 4. Because the\ncoefficient on the a 'a penalty has increased, solving the linear equation for x will\nnow yield a solution with smaller norm. The process of solving the linear equation\nand adjusting continues until x has the correct norm and the derivative on 4 is\n\n0.\n\nThis concludes the mathematical preliminaries that we use to develop machine\nlearning algorithms. We are now ready to build and analyze some full-fledged\nlearning systems.\n\n97\n", "Chapter 5\n\nMachine Learning Basics\n\nDeep learning is a specific kind of machine learning. In order to understand\ndeep learning well, one must have a solid understanding of the basic principles of\nmachine learning. This chapter provides a brief course in the most important general\nprinciples that will be applied throughout the rest of the book. Novice readers or\nthose who want a wider perspective are encouraged to consider machine learning\ntextbooks with a more comprehensive coverage of the fundamentals, such as \\lurphy\n(2012) or Bishop (2006). If you are already familiar with machine learning basics,\nfeel free to skip ahead to section 5.11. That section covers some perspectives\non traditional machine learning techniques that have strongly influenced the\ndevelopment of deep learning algorithms.\n\nWe begin with a definition of what a learning algorithm is, and present an\nexample: the linear regression algorithm. We then proceed to describe how the\nchallenge of fitting the training data differs from the challenge of finding patterns\nthat generalize to new data. Most machine learning algorithms have settings\ncalled hyperparameters that must be determined external to the learning algorithm\nitself; we discuss how to set these using additional data. Machine learning is\nessentially a form of applied statistics with increased emphasis on the use of\ncomputers to statistically estimate complicated functions and a decreased emphasis\non proving confidence intervals around these functions; we therefore present the\ntwo central approaches to statistics: frequentist estimators and Bayesian inference.\nMost machine learning algorithms can be divided into the categories of supervised\nlearning and unsupervised learning; we describe these categories and give some\nexamples of simple learning algorithms from each category. Most deep learning\nalgorithms are based on an optimization algorithm called stochastic gradient\ndescent. We describe how to combine various algorithm components such as\n\n98\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nan optimization algorithm, a cost function, a model, and a dataset to build a\nmachine learning algorithm. Finally, in section 5.11, we describe some of the\nfactors that have limited the ability of traditional machine learning to generalize.\nThese challenges have motivated the development of deep learning algorithms that\novercome these obstacles.\n\n5.1 Learning Algorithms\n\nA machine learning algorithm is an algorithm that is able to learn from data. But\nwhat do we mean by learning? Mitchell (1997) provides the definition \u201cA computer\nprogram is said to learn from experience F with respect to some class of tasks T\nand performance measure P, if its performance at tasks in T, as measured by P,\nimproves with experience .\u201d One can imagine a very wide variety of experiences\nFE, tasks T, and performance measures P, and we do not make any attempt in this\nbook to provide a formal definition of what may be used for each of these entities.\nInstead, the following sections provide intuitive descriptions and examples of the\ndifferent kinds of tasks, performance measures and experiences that can be used\nto construct machine learning algorithms.\n\n5.1.1 The Task, T\n\nMachine learning allows us to tackle tasks that are too difficult to solve with\nfixed programs written and designed by human beings. From a scientific and\nphilosophical point of view, machine learning is interesting because developing our\nunderstanding of machine learning entails developing our understanding of the\nprinciples that underlie intelligence.\n\nIn this relatively formal definition of the word \u201ctask,\u201d the process of learning\nitself is not the task. Learning is our means of attaining the ability to perform the\ntask. For example, if we want a robot to be able to walk, then walking is the task.\nWe could program the robot to learn to walk, or we could attempt to directly write\na program that specifies how to walk manually.\n\nMachine learning tasks are usually described in terms of how the machine\nlearning system should process an example. An example is a collection of features\nthat have been quantitatively measured from some object or event that we want\nthe machine learning system to process. We typically represent an example as a\nvector \u00ab \u20ac R\u201d where each entry 2; of the vector is another feature. For example,\nthe features of an image are usually the values of the pixels in the image.\n\n99\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nMany kinds of tasks can be solved with machine learning. Some of the most\ncommon machine learning tasks include the following:\n\ne Classification: In this type of task, the computer program is asked to specify\nwhich of k categories some input belongs to. To solve this task, the learning\nalgorithm is usually asked to produce a function f : R\u201d > {1,...,k}. When\ny = f(a), the model assigns an input described by vector x to a category\nidentified by numeric code y. There are other variants of the classification\ntask, for example, where f outputs a probability distribution over classes.\nAn example of a classification task is object recognition, where the input\nis an image (usually described as a set of pixel brightness values), and the\noutput is a numeric code identifying the object in the image. For example,\nthe Willow Garage PR2 robot is able to act as a waiter that can recognize\ndifferent kinds of drinks and deliver them to people on command (Good-\nfellow et al., 2010). Modern object recognition is best accomplished with\ndeep learning (Krizhevsky ef al., 2012; loffe and Szegedy, 2015). Object\nrecognition is the same basic technology that allows computers to recognize\nfaces (Taigman et al., 2014), which can be used to automatically tag people\nin photo collections and allow computers to interact more naturally with\ntheir users.\n\ne Classification with missing inputs: Classification becomes more chal-\nlenging if the computer program is not guaranteed that every measurement\nin its input vector will always be provided. In order to solve the classification\ntask, the learning algorithm only has to define a single function mapping\nfrom a vector input to a categorical output. When some of the inputs may\nbe missing, rather than providing a single classification function, the learning\nalgorithm must learn a set of functions. Each function corresponds to classi-\nfying a with a different subset of its inputs missing. This kind of situation\narises frequently in medical diagnosis, because many kinds of medical tests\nare expensive or invasive. One way to efficiently define such a large set\nof functions is to learn a probability distribution over all of the relevant\nvariables, then solve the classification task by marginalizing out the missing\nvariables. With n input variables, we can now obtain all 2\u201d different classifi-\ncation functions needed for each possible set of missing inputs, but we only\nneed to learn a single function describing the joint probability distribution.\nSee Goodfellow et al. (2013b) for an example of a deep probabilistic model\napplied to such a task in this way. Many of the other tasks described in this\nsection can also be generalized to work with missing inputs; classification\nwith missing inputs is just one example of what machine learning can do.\n\n100\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nRegression: In this type of task, the computer program is asked to predict a\nnumerical value given some input. To solve this task, the learning algorithm\nis asked to output a function f : R\u201d > R. This type of task is similar to\nclassification, except that the format of output is different. An example of\na regression task is the prediction of the expected claim amount that an\ninsured person will make (used to set insurance premiums), or the prediction\nof future prices of securities. These kinds of predictions are also used for\nalgorithmic trading.\n\nTranscription: In this type of task, the machine learning system is asked\nto observe a relatively unstructured representation of some kind of data and\ntranscribe it into discrete, textual form. For example, in optical character\nrecognition, the computer program is shown a photograph containing an\nimage of text and is asked to return this text in the form of a sequence\nof characters (e.g., in ASCII or Unicode format). Google Street View uses\ndeep learning to process address numbers in this way (Goodfellow ef al.,\n2014d). Another example is speech recognition, where the computer program\nis provided an audio waveform and emits a sequence of characters or word\nID codes describing the words that were spoken in the audio recording. Deep\nlearning is a crucial component of modern speech recognition systems used\nat major companies including Microsoft, IBM and Google (Hinton ef ail.,\n2012b).\n\nMachine translation: In a machine translation task, the input already\nconsists of a sequence of symbols in some language, and the computer program\nmust convert this into a sequence of symbols in another language. This is\ncommonly applied to natural languages, such as translating from English to\nFrench. Deep learning has recently begun to have an important impact on\nthis kind of task (Sutskever et al., 2014; Bahdanau et al., 2015).\n\nStructured output: Structured output tasks involve any task where the\noutput is a vector (or other data structure containing multiple values) with\nimportant relationships between the different elements. This is a broad\ncategory, and subsumes the transcription and translation tasks described\nabove, but also many other tasks. One example is parsing\u2014mapping a\nnatural language sentence into a tree that describes its grammatical structure\nand tagging nodes of the trees as being verbs, nouns, or adverbs, and so on.\nSee Collobert (2011) for an example of deep learning applied to a parsing\ntask. Another example is pixel-wise segmentation of images, where the\ncomputer program assigns every pixel in an image to a specific category. For\n\n101\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nexample, deep learning can be used to annotate the locations of roads in\naerial photographs (nih and Hinton, 2010). The output need not have its\nform mirror the structure of the input as closely as in these annotation-style\ntasks. For example, in image captioning, the computer program observes an\nimage and outputs a natural language sentence describing the image (Kiros\net al., 2014a,b; Mao et al., 2015; Vinyals et al., 2015b; Donahue et al., 2014;\nKarpathy and Li, 2015; Fang et al., 2015; Xu et al., 2015). These tasks are\ncalled structured output tasks because the program must output several\nvalues that are all tightly inter-related. For example, the words produced by\nan image captioning program must form a valid sentence.\n\nAnomaly detection: In this type of task, the computer program sifts\nthrough a set of events or objects, and flags some of them as being unusual\nor atypical. An example of an anomaly detection task is credit card fraud\ndetection. By modeling your purchasing habits, a credit card company can\ndetect misuse of your cards. If a thief steals your credit card or credit card\ninformation, the thief\u2019s purchases will often come from a different probability\ndistribution over purchase types than your own. The credit card company\ncan prevent fraud by placing a hold on an account as soon as that card has\nbeen used for an uncharacteristic purchase. See Chandola et al. (2009) for a\nsurvey of anomaly detection methods.\n\nSynthesis and sampling: In this type of task, the machine learning al-\ngorithm is asked to generate new examples that are similar to those in the\ntraining data. Synthesis and sampling via machine learning can be useful\nfor media applications where it can be expensive or boring for an artist to\ngenerate large volumes of content by hand. For example, video games can\nautomatically generate textures for large objects or landscapes, rather than\nrequiring an artist to manually label each pixel (Luo et al., 2013). In some\ncases, we want the sampling or synthesis procedure to generate some specific\nkind of output given the input. For example, in a speech synthesis task, we\nprovide a written sentence and ask the program to emit an audio waveform\ncontaining a spoken version of that sentence. This is a kind of structured\noutput task, but with the added qualification that there is no single correct\noutput for each input, and we explicitly desire a large amount of variation in\nthe output, in order for the output to seem more natural and realistic.\n\nImputation of missing values: In this type of task, the machine learning\nalgorithm is given a new example x \u20ac R\u201d, but with some entries x; of x\nmissing. The algorithm must provide a prediction of the values of the missing\nentries.\n\n102\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ne Denoising: In this type of task, the machine learning algorithm is given in\n\ninput a corrupted example & \u20ac R\u201d obtained by an unknown corruption process\nrom a clean example x \u20ac R\u201d. The learner must predict the clean example\nz from its corrupted version z, or more generally predict the conditional\nprobability distribution p(a | #).\n\ne Density estimation or probability mass function estimation: In\nhe density estimation problem, the machine learning algorithm is asked\no learn a function Pmode : R\u201d \u2014 R, where pmode(#) can be interpreted\nas a probability density function (if x is continuous) or a probability mass\nunction (if x is discrete) on the space that the examples were drawn from.\nTo do such a task well (we will specify exactly what that means when we\ndiscuss performance measures P), the algorithm needs to learn the structure\nof the data it has seen. It must know where examples cluster tightly and\nwhere they are unlikely to occur. Most of the tasks described above require\nhe learning algorithm to at least implicitly capture the structure of the\nprobability distribution. Density estimation allows us to explicitly capture\nhat distribution. In principle, we can then perform computations on that\ndistribution in order to solve the other tasks as well. For example, if we\nhave performed density estimation to obtain a probability distribution p(a),\nwe can use that distribution to solve the missing value imputation task. If\na value x; is missing and all of the other values, denoted x_j, are given,\nhen we know the distribution over it is given by p(a; | #-:). In practice,\ndensity estimation does not always allow us to solve all of these related tasks,\nbecause in many cases the required operations on p(a) are computationally\nintractable.\n\nOf course, many other tasks and types of tasks are possible. The types of tasks\nwe list here are intended only to provide examples of what machine learning can\ndo, not to define a rigid taxonomy of tasks.\n\n5.1.2 The Performance Measure, P\n\nIn order to evaluate the abilities of a machine learning algorithm, we must design\na quantitative measure of its performance. Usually this performance measure P is\nspecific to the task T being carried out by the system.\n\nFor tasks such as classification, classification with missing inputs, and tran-\nscription, we often measure the accuracy of the model. Accuracy is just the\nproportion of examples for which the model produces the correct output. We can\n\n103\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nalso obtain equivalent information by measuring the error rate, the proportion\nof examples for which the model produces an incorrect output. We often refer to\nthe error rate as the expected 0-1 loss. The 0-1 loss on a particular example is 0\nif it is correctly classified and 1 if it is not. For tasks such as density estimation,\nit does not make sense to measure accuracy, error rate, or any other kind of 0-1\nloss. Instead, we must use a different performance metric that gives the model\na continuous-valued score for each example. The most common approach is to\nreport the average log-probability the model assigns to some examples.\n\nUsually we are interested in how well the machine learning algorithm performs\non data that it has not seen before, since this determines how well it will work when\ndeployed in the real world. We therefore evaluate these performance measures using\na test set of data that is separate from the data used for training the machine\nlearning system.\n\nThe choice of performance measure may seem straightforward and objective,\nbut it is often difficult to choose a performance measure that corresponds well to\nthe desired behavior of the system.\n\nIn some cases, this is because it is difficult to decide what should be measured.\nFor example, when performing a transcription task, should we measure the accuracy\nof the system at transcribing entire sequences, or should we use a more fine-grained\nperformance measure that gives partial credit for getting some elements of the\nsequence correct? When performing a regression task, should we penalize the\nsystem more if it frequently makes medium-sized mistakes or if it rarely makes\nvery large mistakes? These kinds of design choices depend on the application.\n\nIn other cases, we know what quantity we would ideally like to measure, but\nmeasuring it is impractical. For example, this arises frequently in the context of\ndensity estimation. Many of the best probabilistic models represent probability\ndistributions only implicitly. Computing the actual probability value assigned to\na specific point in space in many such models is intractable. In these cases, one\nmust design an alternative criterion that still corresponds to the design objectives,\nor design a good approximation to the desired criterion.\n\n5.1.3 The Experience, F\n\nMachine learning algorithms can be broadly categorized as unsupervised or\nsupervised by what kind of experience they are allowed to have during the\nlearning process.\n\nMost of the learning algorithms in this book can be understood as being allowed\nto experience an entire dataset. A dataset is a collection of many examples, as\n\n104\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ndefined in section 5.1.1. Sometimes we will also call examples data points.\n\nOne of the oldest datasets studied by statisticians and machine learning re-\nsearchers is the Iris dataset (Fisher, 1936). It is a collection of measurements of\ndifferent parts of 150 iris plants. Each individual plant corresponds to one example.\nThe features within each example are the measurements of each of the parts of the\nplant: the sepal length, sepal width, petal length and petal width. The dataset\nalso records which species each plant belonged to. Three different species are\nrepresented in the dataset.\n\nUnsupervised learning algorithms experience a dataset containing many\nfeatures, then learn useful properties of the structure of this dataset. In the context\nof deep learning, we usually want to learn the entire probability distribution that\ngenerated a dataset, whether explicitly as in density estimation or implicitly for\ntasks like synthesis or denoising. Some other unsupervised learning algorithms\nperform other roles, like clustering, which consists of dividing the dataset into\nclusters of similar examples.\n\nSupervised learning algorithms experience a dataset containing features,\nbut each example is also associated with a label or target. For example, the Iris\ndataset is annotated with the species of each iris plant. A supervised learning\nalgorithm can study the Iris dataset and learn to classify iris plants into three\ndifferent species based on their measurements.\n\nRoughly speaking, unsupervised learning involves observing several examples\nof a random vector x, and attempting to implicitly or explicitly learn the proba-\nbility distribution p(x), or some interesting properties of that distribution, while\nsupervised learning involves observing several examples of a random vector x and\nan associated value or vector y, and learning to predict y from x, usually by\nestimating p(y | x). The term supervised learning originates from the view of\nthe target y being provided by an instructor or teacher who shows the machine\nlearning system what to do. In unsupervised learning, there is no instructor or\nteacher, and the algorithm must learn to make sense of the data without this guide.\n\nUnsupervised learning and supervised learning are not formally defined terms.\nThe lines between them are often blurred. Many machine learning technologies can\nbe used to perform both tasks. For example, the chain rule of probability states\nthat for a vector x \u20ac R\u201d, the joint distribution can be decomposed as\n\nn\n\np(x) = [[>% | X1,-++, X41). (5.1)\n\ni=1\nThis decomposition means that we can solve the ostensibly unsupervised problem of\n\nmodeling p(x) by splitting it into n supervised learning problems. Alternatively, we\n\n105\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ncan solve the supervised learning problem of learning p(y | x) by using traditional\nunsupervised learning technologies to learn the joint distribution p(x, y) and\ninferring\np(x, \u00a5)\npy | x) = =\u2014\u2014- (5.2)\nSy Pp (x, y')\n\nThough unsupervised learning and supervised learning are not completely formal or\ndistinct concepts, they do help to roughly categorize some of the things we do with\nmachine learning algorithms. Traditionally, people refer to regression, classification\nand structured output problems as supervised learning. Density estimation in\nsupport of other tasks is usually considered unsupervised learning.\n\nOther variants of the learning paradigm are possible. For example, in semi-\nsupervised learning, some examples include a supervision target but others do\nnot. In multi-instance learning, an entire collection of examples is labeled as\ncontaining or not containing an example of a class, but the individual members\nof the collection are not labeled. For a recent example of multi-instance learning\nwith deep models, see Kotzias et al. (2015).\n\nSome machine learning algorithms do not just experience a fixed dataset. For\nexample, reinforcement learning algorithms interact with an environment, so\nthere is a feedback loop between the learning system and its experiences. Such\nalgorithms are beyond the scope of this book. Please see Sutton and Barto (1998)\nor Bertsekas and Tsitsiklis (1996) for information about reinforcement learning,\nand Mnih et al. (2013) for the deep learning approach to reinforcement learning.\n\nMost machine learning algorithms simply experience a dataset. A dataset can\nbe described in many ways. In all cases, a dataset is a collection of examples,\nwhich are in turn collections of features.\n\nOne common way of describing a dataset is with a design matrix. A design\nmatrix is a matrix containing a different example in each row. Each column of the\nmatrix corresponds to a different feature. For instance, the Iris dataset contains\n150 examples with four features for each example. This means we can represent\nthe dataset with a design matrix X \u20ac R!\u00ae*4, where Xj1 is the sepal length of\nplant i, Xj,2 is the sepal width of plant 7, etc. We will describe most of the learning\nalgorithms in this book in terms of how they operate on design matrix datasets.\n\nOf course, to describe a dataset as a design matrix, it must be possible to\ndescribe each example as a vector, and each of these vectors must be the same size.\nThis is not always possible. For example, if you have a collection of photographs\nwith different widths and heights, then different photographs will contain different\nnumbers of pixels, so not all of the photographs may be described with the same\nlength of vector. Section 9.7 and chapter 10 describe how to handle different\n\n106\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ntypes of such heterogeneous data. In cases like these, rather than describing the\ndataset as a matrix with m rows, we will describe it as a set containing m elements:\nfa), eo, al\u2122}, This notation does not imply that any two example vectors\nx and #) have the same size.\n\nIn the case of supervised learning, the example contains a label or target as\nwell as a collection of features. For example, if we want to use a learning algorithm\nto perform object recognition from photographs, we need to specify which object\nappears in each of the photos. We might do this with a numeric code, with 0\nsignifying a person, 1 signifying a car, 2 signifying a cat, etc. Often when working\nwith a dataset containing a design matrix of feature observations X, we also\nprovide a vector of labels y, with y; providing the label for example 7.\n\nOf course, sometimes the label may be more than just a single number. For\nexample, if we want to train a speech recognition system to transcribe entire\nsentences, then the label for each example sentence is a sequence of words.\n\nJust as there is no formal definition of supervised and unsupervised learning,\nthere is no rigid taxonomy of datasets or experiences. The structures described here\ncover most cases, but it is always possible to design new ones for new applications.\n\n5.1.4 Example: Linear Regression\n\nOur definition of a machine learning algorithm as an algorithm that is capable\nof improving a computer program\u2019s performance at some task via experience is\nsomewhat abstract. To make this more concrete, we present an example of a\nsimple machine learning algorithm: linear regression. We will return to this\nexample repeatedly as we introduce more machine learning concepts that help to\nunderstand its behavior.\n\nAs the name implies, linear regression solves a regression problem. In other\nwords, the goal is to build a system that can take a vector x \u20ac R\u201d as input and\npredict the value of a scalar y \u20ac R as its output. In the case of linear regression,\nthe output is a linear function of the input. Let g be the value that our model\npredicts y should take on. We define the output to be\n\ng=w'e (5.3)\n\nwhere w \u20ac R\u201d is a vector of parameters.\n\nParameters are values that control the behavior of the system. In this case, w; is\nthe coefficient that we multiply by feature x; before summing up the contributions\nfrom all the features. We can think of w as a set of weights that determine how\neach feature affects the prediction. If a feature x; receives a positive weight w,,\n\n107\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nthen increasing the value of that feature increases the value of our prediction 4.\nIf a feature receives a negative weight, then increasing the value of that feature\ndecreases the value of our prediction. If a feature\u2019s weight is large in magnitude,\nthen it has a large effect on the prediction. If a feature\u2019s weight is zero, it has no\neffect on the prediction.\n\nWe thus have a definition of our task T: to predict y from x by outputting\n\u00a7 = w'ax. Next we need a definition of our performance measure, P.\n\nSuppose that we have a design matrix of m example inputs that we will not\nuse for training, only for evaluating how well the model performs. We also have\na vector of regression targets providing the correct value of y for each of these\nexamples. Because this dataset will only be used for evaluation, we call it the test\nset. We refer to the design matrix of inputs as Xe) and the vector of regression\n\ntargets as y (tes),\n\nOne way of measuring the performance of the model is to compute the mean\n\nsquared error of the model on the test set. If altest) gives the predictions of the\nmodel on the test set, then the mean squared error is given by\n\n1 ~ 3 S\nMSE. = \u2014 S(gs = ylt)?, (5.4)\na\n\nIntuitively, one can see that this error measure decreases to 0 when g{t*\") = y (test),\n\nWe can also see that\n1,,.\nMSEtest = \u2014 ly\") _ ys (5.5)\n\nso the error increases whenever the Euclidean distance between the predictions\nand the targets increases.\n\nTo make a machine learning algorithm, we need to design an algorithm that\nwill improve the weights w in a way that reduces MSEtest when the algorithm\nis allowed to gain experience by observing a training set (X (train) | y (train), One\nintuitive way of doing this (which we will justify later, in section 5.5.1) is just to\nminimize the mean squared error on the training set, MSE train-\n\nTo minimize MSEt\u00a2rain, we can simply solve for where its gradient is 0:\n\nVwMSEtrain = 9 (5.6)\n\n1 ; ;\n= Vw |g) \u2014 yO) |[3 = 0 (5.7)\n= AV || XO) _ y rain) 3 =0 (5.8)\n\n108\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nLinear regression example Optimization of w\n3 0.55\n2 0.50\n1 > 0.45\n\u20182 0.40\n\n> 0 =\nEA 0.35\n\u201c1 = 0.30\n72 0.25\n\u20143 0.20\n\u20141.0 -05 00 0.5 1.0 0.5 1.0 1.5\nry WI\n\nFigure 5.1: A linear regression problem, with a training set consisting of ten data points,\neach containing one feature. Because there is only one feature, the weight vector w\ncontains only a single parameter to learn, w;. (Left)Observe that linear regression learns\nto set w1 such that the line y = wx comes as close as possible to passing through all the\ntraining points. (Right)The plotted point indicates the value of w; found by the normal\nequations, which we can see minimizes the mean squared error on the training set.\n\n>Vw (x (train) ay, _ yor)\" (xv _ ytrain)) =0 (5.9)\n=> Vw (w\u2122x (train) T x (train) 4), _ Qw! X (train) T gy (train) 4 y(erainyT y(eain) ) =0\n, ; , ; (5.10)\n=> 2X (train)T x (train),,, _ 2X (train) a(train) =0 (5.11)\nSwe (x@ent xian) ) X (train) T (train) (5.12)\n\nThe system of equations whose solution is given by equation 5.12 is known as\nthe normal equations. Evaluating equation 5.12 constitutes a simple learning\nalgorithm. For an example of the linear regression learning algorithm in action,\nsee figure 5.1.\n\nIt is worth noting that the term linear regression is often used to refer to\n\na slightly more sophisticated model with one additional parameter\u2014an intercept\nterm b. In this model\n\ng=w'e+b (5.13)\n\nso the mapping from parameters to predictions is still a linear function but the\n\nmapping from features to predictions is now an affine function. This extension to\n\naffine functions means that the plot of the model\u2019s predictions still looks like a\n\nline, but it need not pass through the origin. Instead of adding the bias parameter\n\n109\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nb, one can continue to use the model with only weights but augment x with an\nextra entry that is always set to 1. The weight corresponding to the extra 1 entry\nplays the role of the bias parameter. We will frequently use the term \u201clinear\u201d when\nreferring to affine functions throughout this book.\n\nThe intercept term b is often called the bias parameter of the affine transfor-\nmation. This terminology derives from the point of view that the output of the\ntransformation is biased toward being b in the absence of any input. This term\nis different from the idea of a statistical bias, in which a statistical estimation\nalgorithm\u2019s expected estimate of a quantity is not equal to the true quantity.\n\nLinear regression is of course an extremely simple and limited learning algorithm,\nbut it provides an example of how a learning algorithm can work. In the subsequent\nsections we will describe some of the basic principles underlying learning algorithm\ndesign and demonstrate how these principles can be used to build more complicated\nlearning algorithms.\n\n5.2 Capacity, Overfitting and Underfitting\n\nThe central challenge in machine learning is that we must perform well on new,\npreviously unseen inputs\u2014not just those on which our model was trained. The\nability to perform well on previously unobserved inputs is called generalization.\n\nTypically, when training a machine learning model, we have access to a training\nset, we can compute some error measure on the training set called the training\nerror, and we reduce this training error. So far, what we have described is simply\nan optimization problem. What separates machine learning from optimization is\nthat we want the generalization error, also called the test error, to be low as\nwell. The generalization error is defined as the expected value of the error on a\nnew input. Here the expectation is taken across different possible inputs, drawn\nfrom the distribution of inputs we expect the system to encounter in practice.\n\nWe typically estimate the generalization error of a machine learning model by\nmeasuring its performance on a test set of examples that were collected separately\nfrom the training set.\n\nIn our linear regression example, we trained the model by minimizing the\ntraining error,\n\n1 . -\n{x w _ y(rain) || (5.14)\n\nm (train\nbut we actually care about the test error, ss || XC ew \u2014 y (test) || 2,\n\nHow can we affect performance on the test set when we get to observe only the\n\n110\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ntraining set? The field of statistical learning theory provides some answers. If\nthe training and the test set are collected arbitrarily, there is indeed little we can\ndo. If we are allowed to make some assumptions about how the training and test\nset are collected, then we can make some progress.\n\nThe train and test data are generated by a probability distribution over datasets\ncalled the data generating process. We typically make a set of assumptions\nknown collectively as the i.i.d. assumptions. These assumptions are that the\nexamples in each dataset are independent from each other, and that the train\nset and test set are identically distributed, drawn from the same probability\ndistribution as each other. This assumption allows us to describe the data gen-\nerating process with a probability distribution over a single example. The same\ndistribution is then used to generate every train example and every test example.\nWe call that shared underlying distribution the data generating distribution,\ndenoted pdata- This probabilistic framework and the i.i.d. assumptions allow us to\nmathematically study the relationship between training error and test error.\n\nOne immediate connection we can observe between the training and test error\nis that the expected training error of a randomly selected model is equal to the\nexpected test error of that model. Suppose we have a probability distribution\np(x, y) and we sample from it repeatedly to generate the train set and the test\nset. For some fixed value w, the expected training set error is exactly the same as\nthe expected test set error, because both expectations are formed using the same\ndataset sampling process. The only difference between the two conditions is the\nname we assign to the dataset we sample.\n\nOf course, when we use a machine learning algorithm, we do not fix the\nparameters ahead of time, then sample both datasets. We sample the training set,\nthen use it to choose the parameters to reduce training set error, then sample the\ntest set. Under this process, the expected test error is greater than or equal to\nthe expected value of training error. The factors determining how well a machine\nlearning algorithm will perform are its ability to:\n\n1. Make the training error small.\n2. Make the gap between training and test error small.\n\nThese two factors correspond to the two central challenges in machine learning:\nunderfitting and overfitting. Underfitting occurs when the model is not able to\nobtain a sufficiently low error value on the training set. Overfitting occurs when\nthe gap between the training error and test error is too large.\n\nWe can control whether a model is more likely to overfit or underfit by altering\nits capacity. Informally, a model\u2019s capacity is its ability to fit a wide variety of\n\n111\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nfunctions. Models with low capacity may struggle to fit the training set. Models\nwith high capacity can overfit by memorizing properties of the training set that do\nnot serve them well on the test set.\n\nOne way to control the capacity of a learning algorithm is by choosing its\nhypothesis space, the set of functions that the learning algorithm is allowed to\nselect as being the solution. For example, the linear regression algorithm has the\nset of all linear functions of its input as its hypothesis space. We can generalize\nlinear regression to include polynomials, rather than just linear functions, in its\nhypothesis space. Doing so increases the model\u2019s capacity.\n\nA polynomial of degree one gives us the linear regression model with which we\nare already familiar, with prediction\n\ny= b+we. (5.15)\n\nBy introducing 2? as another feature provided to the linear regression model, we\ncan learn a model that is quadratic as a function of \u00abx:\n\nG = b+ wie + woe. (5.16)\n\nThough this model implements a quadratic function of its input, the output is\nstill a linear function of the parameters, so we can still use the normal equations\nto train the model in closed form. We can continue to add more powers of x as\nadditional features, for example to obtain a polynomial of degree 9:\n\n9\nG=b+5> wy\". (5.17)\ni=1\n\nMachine learning algorithms will generally perform best when their capacity\nis appropriate for the true complexity of the task they need to perform and the\namount of training data they are provided with. Models with insufficient capacity\nare unable to solve complex tasks. Models with high capacity can solve complex\ntasks, but when their capacity is higher than needed to solve the present task they\nmay overfit.\n\nFigure 5.2 shows this principle in action. We compare a linear, quadratic\nand degree-9 predictor attempting to fit a problem where the true underlying\nfunction is quadratic. The linear function is unable to capture the curvature in\nthe true underlying problem, so it underfits. The degree-9 predictor is capable of\nrepresenting the correct function, but it is also capable of representing infinitely\nmany other functions that pass exactly through the training points, because we\n\n112\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nhave more parameters than training examples. We have little chance of choosing\na solution that generalizes well when so many wildly different solutions exist. In\nthis example, the quadratic model is perfectly matched to the true structure of\nthe task so it generalizes well to new data.\n\nUnderfitting Appropriate capacity Overfitting\n\nXo Xo Xo\n\nFigure 5.2: We fit three models to this example training set. The training data was\ngenerated synthetically, by randomly sampling x values and choosing y deterministically\nby evaluating a quadratic function. (Left)A linear function fit to the data suffers from\nunderfitting\u2014it cannot capture the curvature that is present in the data. (Center)A\nquadratic function fit to the data generalizes well to unseen points. It does not suffer from\na significant amount of overfitting or underfitting. (Right)A polynomial of degree 9 fit to\nhe data suffers from overfitting. Here we used the Moore-Penrose pseudoinverse to solve\nhe underdetermined normal equations. The solution passes through all of the training\npoints exactly, but we have not been lucky enough for it to extract the correct structure.\nIt now has a deep valley in between two training points that does not appear in the true\nunderlying function. It also increases sharply on the left side of the data, while the true\n\u2018unction decreases in this area.\n\nSo far we have described only one way of changing a model\u2019s capacity: by\nchanging the number of input features it has, and simultaneously adding new\nparameters associated with those features. There are in fact many ways of changing\na model\u2019s capacity. Capacity is not determined only by the choice of model. The\nmodel specifies which family of functions the learning algorithm can choose from\nwhen varying the parameters in order to reduce a training objective. This is called\nthe representational capacity of the model. In many cases, finding the best\nfunction within this family is a very difficult optimization problem. In practice,\nthe learning algorithm does not actually find the best function, but merely one\nthat significantly reduces the training error. These additional limitations, such as\n\n113\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nthe imperfection of the optimization algorithm, mean that the learning algorithm\u2019s\neffective capacity may be less than the representational capacity of the model\nfamily.\n\nOur modern ideas about improving the generalization of machine learning\nmodels are refinements of thought dating back to philosophers at least as early\nas Ptolemy. Many early scholars invoke a principle of parsimony that is now\nmost widely known as Occam\u2019s razor (c. 1287-1347). This principle states that\namong competing hypotheses that explain known observations equally well, one\nshould choose the \u201csimplest\u201d one. This idea was formalized and made more precise\nin the 20th century by the founders of statistical learning theory (Vapnik and\nChervonenkis, 1971; Vapnik, 1982; Blumer et al., 1989; Vapnik, 1995).\n\nStatistical learning theory provides various means of quantifying model capacity.\nAmong these, the most well-known is the Vapnik-Chervonenkis dimension, or\nVC dimension. The VC dimension measures the capacity of a binary classifier. The\nVC dimension is defined as being the largest possible value of m for which there\nexists a training set of m different x points that the classifier can label arbitrarily.\n\nQuantifying the capacity of the model allows statistical learning theory to\nmake quantitative predictions. The most important results in statistical learning\ntheory show that the discrepancy between training error and generalization error\nis bounded from above by a quantity that grows as the model capacity grows but\nshrinks as the number of training examples increases (Vapnik and Chervonenkis,\n1971; Vapnik, 1982; Blumer et al., 1989; Vapnik, 1995). These bounds provide\nintellectual justification that machine learning algorithms can work, but they are\nrarely used in practice when working with deep learning algorithms. This is in\npart because the bounds are often quite loose and in part because it can be quite\ndifficult to determine the capacity of deep learning algorithms. The problem of\ndetermining the capacity of a deep learning model is especially difficult because the\neffective capacity is limited by the capabilities of the optimization algorithm, and\nwe have little theoretical understanding of the very general non-convex optimization\nproblems involved in deep learning.\n\nWe must remember that while simpler functions are more likely to generalize\n(to have a small gap between training and test error) we must still choose a\nsufficiently complex hypothesis to achieve low training error. Typically, training\nerror decreases until it asymptotes to the minimum possible error value as model\ncapacity increases (assuming the error measure has a minimum value). Typically,\ngeneralization error has a U-shaped curve as a function of model capacity. This is\nillustrated in figure 5.3.\n\nTo reach the most extreme case of arbitrarily high capacity, we introduce\n\n114\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n\u2014- Training error\n\nUnderfitting zone} Overfitting zone : :\n\u2014 Generalization error\n\nError\n\n0 Optimal Capacity\nCapacity\n\nFigure 5.3: Typical relationship between capacity and error. Training and test error\nbehave differently. At the left end of the graph, training error and generalization error\nare both high. This is the underfitting regime. As we increase capacity, training error\ndecreases, but the gap between training and generalization error increases. Eventually,\nthe size of this gap outweighs the decrease in training error, and we enter the overfitting\nregime, where capacity is too large, above the optimal capacity.\n\nthe concept of non-parametric models. So far, we have seen only parametric\nmodels, such as linear regression. Parametric models learn a function described\nby a parameter vector whose size is finite and fixed before any data is observed.\nNon-parametric models have no such limitation.\n\nSometimes, non-parametric models are just theoretical abstractions (such as\nan algorithm that searches over all possible probability distributions) that cannot\nbe implemented in practice. However, we can also design practical non-parametric\nmodels by making their complexity a function of the training set size. One example\nof such an algorithm is nearest neighbor regression. Unlike linear regression,\nwhich has a fixed-length vector of weights, the nearest neighbor regression model\nsimply stores the X and y from the training set. When asked to classify a test\npoint z, the model looks up the nearest entry in the training set and returns the\nassociated regression target. In other words, \u00a7 = y; wherei = arg min ||X;,, \u2014 x||3.\nThe algorithm can also be generalized to distance metrics other than the L? norm,\nsuch as learned distance metrics (Goldberger et al., 2005). If the algorithm is\nallowed to break ties by averaging the y; values for all X;,; that are tied for nearest,\nthen this algorithm is able to achieve the minimum possible training error (which\nmight be greater than zero, if two identical inputs are associated with different\noutputs) on any regression dataset.\n\nFinally, we can also create a non-parametric learning algorithm by wrapping a\n\n115\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nparametric learning algorithm inside another algorithm that increases the number\nof parameters as needed. For example, we could imagine an outer loop of learning\nthat changes the degree of the polynomial learned by linear regression on top of a\npolynomial expansion of the input.\n\nThe ideal model is an oracle that simply knows the true probability distribution\nthat generates the data. Even such a model will still incur some error on many\nproblems, because there may still be some noise in the distribution. In the case\nof supervised learning, the mapping from \u00ab to y may be inherently stochastic,\nor y may be a deterministic function that involves other variables besides those\nincluded in a. The error incurred by an oracle making predictions from the true\ndistribution p(a, y) is called the Bayes error.\n\nTraining and generalization error vary as the size of the training set varies.\nExpected generalization error can never increase as the number of training examples\nincreases. For non-parametric models, more data yields better generalization until\nthe best possible error is achieved. Any fixed parametric model with less than\noptimal capacity will asymptote to an error value that exceeds the Bayes error. See\nfigure 5.4 for an illustration. Note that it is possible for the model to have optimal\ncapacity and yet still have a large gap between training and generalization error.\nIn this situation, we may be able to reduce this gap by gathering more training\nexamples.\n\n5.2.1 The No Free Lunch Theorem\n\nLearning theory claims that a machine learning algorithm can generalize well from\na finite training set of examples. This seems to contradict some basic principles of\nlogic. Inductive reasoning, or inferring general rules from a limited set of examples,\nis not logically valid. To logically infer a rule describing every member of a set,\none must have information about every member of that set.\n\nIn part, machine learning avoids this problem by offering only probabilistic rules,\nrather than the entirely certain rules used in purely logical reasoning. Machine\nlearning promises to find rules that are probably correct about most members of\nthe set they concern.\n\nUnfortunately, even this does not resolve the entire problem. The no free\nlunch theorem for machine learning (Wolpert, 1996) states that, averaged over\nall possible data generating distributions, every classification algorithm has the\nsame error rate when classifying previously unobserved points. In other words,\nin some sense, no machine learning algorithm is universally any better than any\nother. The most sophisticated algorithm we can conceive of has the same average\n\n116\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nBayes error\nTrain (quadratic)\nTest (quadratic)\n\nTest (optimal capacity)\n\nError (MSE)\n\nTrain (optimal capacity)\n\nNumber of training examples\n\nOptimal capacity (polynomial degree)\n\n10\u00b0 10\u00b0 10\u00b0 10\u00b0 10\u00b0 10\u00b0\n\nNumber of training examples\n\nFigure 5.4: The effect of the training dataset size on the train and test error, as well as\non the optimal model capacity. We constructed a synthetic regression problem based on\nadding a moderate amount of noise to a degree-5 polynomial, generated a single test set,\nand then generated several different sizes of training set. For each size, we generated 40\ndifferent training sets in order to plot error bars showing 95 percent confidence intervals.\n(Top)The MSE on the training and test set for two different models: a quadratic model,\nand a model with degree chosen to minimize the test error. Both are fit in closed form. For\nthe quadratic model, the training error increases as the size of the training set increases.\nThis is because larger datasets are harder to fit. Simultaneously, the test error decreases,\nbecause fewer incorrect hypotheses are consistent with the training data. The quadratic\nmodel does not have enough capacity to solve the task, so its test error asymptotes to\na high value. The test error at optimal capacity asymptotes to the Bayes error. The\ntraining error can fall below the Bayes error, due to the ability of the training algorithm\nto memorize specific instances of the training set. As the training size increases to infinity,\nthe training error of any fixed-capacity model (here, the quadratic model) must rise to at\nleast the Bayes error. (Bottom)As the training set size increases, the optimal capacity\n(shown here as the degree of the optimal polynomial regressor) increases. The optimal\ncapacity plateaus after reaching sufficient complexity to solve the task.\n\n117\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nperformance (over all possible tasks) as merely predicting that every point belongs\nto the same class.\n\nFortunately, these results hold only when we average over all possible data\ngenerating distributions. If we make assumptions about the kinds of probability\ndistributions we encounter in real-world applications, then we can design learning\nalgorithms that perform well on these distributions.\n\nThis means that the goal of machine learning research is not to seek a universal\nlearning algorithm or the absolute best learning algorithm. Instead, our goal is to\nunderstand what kinds of distributions are relevant to the \u201creal world\u201d that an AI\nagent experiences, and what kinds of machine learning algorithms perform well on\ndata drawn from the kinds of data generating distributions we care about.\n\n5.2.2 Regularization\n\nThe no free lunch theorem implies that we must design our machine learning\nalgorithms to perform well on a specific task. We do so by building a set of\npreferences into the learning algorithm. When these preferences are aligned with\nthe learning problems we ask the algorithm to solve, it performs better.\n\nSo far, the only method of modifying a learning algorithm that we have discussed\nconcretely is to increase or decrease the model\u2019s representational capacity by adding\nor removing functions from the hypothesis space of solutions the learning algorithm\nis able to choose. We gave the specific example of increasing or decreasing the\ndegree of a polynomial for a regression problem. The view we have described so\nfar is oversimplified.\n\nThe behavior of our algorithm is strongly affected not just by how large we\nmake the set of functions allowed in its hypothesis space, but by the specific identity\nof those functions. The learning algorithm we have studied so far, linear regression,\n\nhas a hypothesis space consisting of the set of linear functions of its input. These\nlinear functions can be very useful for problems where the relationship between\ninputs and outputs truly is close to linear. They are less useful for problems\nthat behave in a very nonlinear fashion. For example, linear regression would\nnot perform very well if we tried to use it to predict sin(x) from x. We can thus\ncontrol the performance of our algorithms by choosing what kind of functions we\nallow them to draw solutions from, as well as by controlling the amount of these\nfunctions.\n\nWe can also give a learning algorithm a preference for one solution in its\nhypothesis space to another. This means that both functions are eligible, but one\nis preferred. The unpreferred solution will be chosen only if it fits the training\n\n118\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ndata significantly better than the preferred solution.\n\nFor example, we can modify the training criterion for linear regression to include\nweight decay. To perform linear regression with weight decay, we minimize a sum\ncomprising both the mean squared error on the training and a criterion J (w) that\nexpresses a preference for the weights to have smaller squared L? norm. Specifically,\n\nJ(w) = MSEtrain + \\w'w, (5.18)\n\nwhere X is a value chosen ahead of time that controls the strength of our preference\nfor smaller weights. When A = 0, we impose no preference, and larger 4 forces the\nweights to become smaller. Minimizing J(w) results in a choice of weights that\nmake a tradeoff between fitting the training data and being small. This gives us\nsolutions that have a smaller slope, or put weight on fewer of the features. As an\nexample of how we can control a model\u2019s tendency to overfit or underfit via weight\ndecay, we can train a high-degree polynomial regression model with different values\nof A. See figure 5.5 for the results.\n\nUnderfitting Appropriate weight decay Overfitting\n(Excessive ) (Medium .) (A30)\nXH Xo Xv\n\nFigure 5.5: We fit a high-degree polynomial regression model to our example training set\nfrom figure 5.2. The true function is quadratic, but here we use only models with degree 9.\nWe vary the amount of weight decay to prevent these high-degree models from overfitting.\n(Left)With very large 4, we can force the model to learn a function with no slope at\nall. This underfits because it can only represent a constant function. (Center)With a\nmedium value of A, the learning algorithm recovers a curve with the right general shape.\nEven though the model is capable of representing functions with much more complicated\nshape, weight decay has encouraged it to use a simpler function described by smaller\ncoefficients. (Right)With weight decay approaching zero (i.e., using the Moore-Penrose\npseudoinverse to solve the underdetermined problem with minimal regularization), the\ndegree-9 polynomial overfits significantly, as we saw in figure 5.2.\n\n119\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nMore generally, we can regularize a model that learns a function f(a; 0) by\nadding a penalty called a regularizer to the cost function. In the case of weight\ndecay, the regularizer is Q(w) =w'w. In chapter 7, we will see that many other\nregularizers are possible.\n\nExpressing preferences for one function over another is a more general way\nof controlling a model\u2019s capacity than including or excluding members from the\nhypothesis space. We can think of excluding a function from a hypothesis space as\nexpressing an infinitely strong preference against that function.\n\nIn our weight decay example, we expressed our preference for linear functions\ndefined with smaller weights explicitly, via an extra term in the criterion we\nminimize. There are many other ways of expressing preferences for different\nsolutions, both implicitly and explicitly. Together, these different approaches\nare known as regularization. Regularization is any modification we make to a\nlearning algorithm that is intended to reduce its generalization error but not its\ntraining error. Regularization is one of the central concerns of the field of machine\nlearning, rivaled in its importance only by optimization.\n\nThe no free lunch theorem has made it clear that there is no best machine\nlearning algorithm, and, in particular, no best form of regularization. Instead\nwe must choose a form of regularization that is well-suited to the particular task\nwe want to solve. The philosophy of deep learning in general and this book in\nparticular is that a very wide range of tasks (such as all of the intellectual tasks\nthat people can do) may all be solved effectively using very general-purpose forms\nof regularization.\n\n5.3 Hyperparameters and Validation Sets\n\nMost machine learning algorithms have several settings that we can use to control\nthe behavior of the learning algorithm. These settings are called hyperparame-\nters. The values of hyperparameters are not adapted by the learning algorithm\nitself (though we can design a nested learning procedure where one learning\nalgorithm learns the best hyperparameters for another learning algorithm).\n\nIn the polynomial regression example we saw in figure 5.2, there is a single\nhyperparameter: the degree of the polynomial, which acts as a capacity hyper-\nparameter. The value used to control the strength of weight decay is another\nexample of a hyperparameter.\n\nSometimes a setting is chosen to be a hyperparameter that the learning al-\ngorithm does not learn because it is difficult to optimize. More frequently, the\n\n120\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nsetting must be a hyperparameter because it is not appropriate to learn that\nhyperparameter on the training set. This applies to all hyperparameters that\ncontrol model capacity. If learned on the training set, such hyperparameters would\nalways choose the maximum possible model capacity, resulting in overfitting (refer\nto figure 5.3). For example, we can always fit the training set better with a higher\ndegree polynomial and a weight decay setting of \\ = 0 than we could with a lower\ndegree polynomial and a positive weight decay setting.\n\nTo solve this problem, we need a validation set of examples that the training\nalgorithm does not observe.\n\nEarlier we discussed how a held-out test set, composed of examples coming from\nthe same distribution as the training set, can be used to estimate the generalization\nerror of a learner, after the learning process has completed. It is important that the\ntest examples are not used in any way to make choices about the model, including\nits hyperparameters. For this reason, no example from the test set can be used\nin the validation set. Therefore, we always construct the validation set from the\ntraining data. Specifically, we split the training data into two disjoint subsets. One\nof these subsets is used to learn the parameters. The other subset is our validation\nset, used to estimate the generalization error during or after training, allowing\nfor the hyperparameters to be updated accordingly. The subset of data used to\nlearn the parameters is still typically called the training set, even though this\nmay be confused with the larger pool of data used for the entire training process.\nThe subset of data used to guide the selection of hyperparameters is called the\nvalidation set. Typically, one uses about 80% of the training data for training and\n20% for validation. Since the validation set is used to \u201ctrain\u201d the hyperparameters,\nthe validation set error will underestimate the generalization error, though typically\nby a smaller amount than the training error. After all hyperparameter optimization\nis complete, the generalization error may be estimated using the test set.\n\nIn practice, when the same test set has been used repeatedly to evaluate\nperformance of different algorithms over many years, and especially if we consider\nall the attempts from the scientific community at beating the reported state-of-\nthe-art performance on that test set, we end up having optimistic evaluations with\nthe test set as well. Benchmarks can thus become stale and then do not reflect the\ntrue field performance of a trained system. Thankfully, the community tends to\nmove on to new (and usually more ambitious and larger) benchmark datasets.\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n5.3.1 Cross-Validation\n\nDividing the dataset into a fixed training set and a fixed test set can be problematic\nif it results in the test set being small. A small test set implies statistical uncertainty\naround the estimated average test error, making it difficult to claim that algorithm\nA works better than algorithm B on the given task.\n\nWhen the dataset has hundreds of thousands of examples or more, this is not a\nserious issue. When the dataset is too small, are alternative procedures enable one\nto use all of the examples in the estimation of the mean test error, at the price of\nincreased computational cost. These procedures are based on the idea of repeating\nthe training and testing computation on different randomly chosen subsets or splits\nof the original dataset. The most common of these is the k-fold cross-validation\nprocedure, shown in algorithm 5.1, in which a partition of the dataset is formed by\nsplitting it into k non-overlapping subsets. The test error may then be estimated\nby taking the average test error across / trials. On trial 7, the i-th subset of the\ndata is used as the test set and the rest of the data is used as the training set. One\nproblem is that there exist no unbiased estimators of the variance of such average\nerror estimators (Bengio and Grandvalet, 2004), but approximations are typically\nused.\n\n5.4 Estimators, Bias and Variance\n\nThe field of statistics gives us many tools that can be used to achieve the machine\nlearning goal of solving a task not only on the training set but also to generalize.\nFoundational concepts such as parameter estimation, bias and variance are useful\nto formally characterize notions of generalization, underfitting and overfitting.\n\n5.4.1 Point Estimation\n\nPoint estimation is the attempt to provide the single \u201cbest\u201d prediction of some\nquantity of interest. In general the quantity of interest can be a single parameter\nor a vector of parameters in some parametric model, such as the weights in our\nlinear regression example in section 5.1.4, but it can also be a whole function.\n\nIn order to distinguish estimates of parameters from their true value, our\n\nconvention will be to denote a point estimate of a parameter 0 by @.\n\nLet {a) yee ol} be a set of m independent and identically distributed\n\n122\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nAlgorithm 5.1 The k-fold cross-validation algorithm. It can be used to estimate\ngeneralization error of a learning algorithm A when the given dataset D is too\nsmall for a simple train/test or train/valid split to yield accurate estimation of\ngeneralization error, because the mean of a loss LZ on a small test set may have too\nhigh variance. The dataset D contains as elements the abstract examples 2 (for\nthe i-th example), which could stand for an (input,target) pair 2 = (a , y)\nin the case of supervised learning, or for just an input z = \u00ab2 in the case\nof unsupervised learning. The algorithm returns the vector of errors e for each\nexample in D, whose mean is the estimated generalization error. The errors on\nindividual examples can be used to compute a confidence interval around the mean\n(equation 5.47). While these confidence intervals are not well-justified after the\nuse of cross-validation, it is still common practice to use them to declare that\nalgorithm A is better than algorithm B only if the confidence interval of the error\nof algorithm A lies below and does not intersect the confidence interval of algorithm\nB.\nDefine KFoldXV(D, A, L, k):\nRequire: D, the given dataset, with elements 2\nRequire: A, the learning algorithm, seen as a function that takes a dataset as\n\ninput and outputs a learned function\nRequire: L, the loss function, seen as a function from a learned function f and\n\nan example 2 \u20ac D to a scalar \u20ac R\nRequire: k, the number of folds\n\nSplit D into & mutually exclusive subsets D;, whose union is D.\n\nfor i from 1 to k do\n\nfi = AD\\D;)\nfor 2) in D; do\nej) = L(fi,2)\n\nend for\n\nend for\nReturn e\n\n123\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n(i.id.) data points. A point estimator or statistic is any function of the data:\n\nOm = g(@\"),..., a0), (5.19)\n\nThe definition does not require that g return a value that is close to the true\n@ or even that the range of g is the same as the set of allowable values of 0.\nThis definition of a point estimator is very general and allows the designer of an\nestimator great flexibility. While almost any function thus qualifies as an estimator,\na good estimator is a function whose output is close to the true underlying 6 that\ngenerated the training data.\n\nFor now, we take the frequentist perspective on statistics. That is, we assume\nthat the true parameter value @ is fixed but unknown, while the point estimate\n6 is a function of the data. Since the data is drawn from a random process, any\nfunction of the data is random. Therefore 6 is a random variable.\n\nPoint estimation can also refer to the estimation of the relationship between\ninput and target variables. We refer to these types of point estimates as function\nestimators.\n\nFunction Estimation As we mentioned above, sometimes we are interested in\nperforming function estimation (or function approximation). Here we are trying to\npredict a variable y given an input vector 2. We assume that there is a function\nf (x) that describes the approximate relationship between y and a. For example,\nwe may assume that y = f(a) + \u20ac, where e stands for the part of y that is not\npredictable from az. In function estimation, we are interested in approximating\nf with a model or estimate f. Function estimation is really just the same as\nestimating a parameter 0; the function estimator f is simply a point estimator in\nfunction space. The linear regression example (discussed above in section 5.1.4) and\nthe polynomial regression example (discussed in section 5.2) are both examples of\nscenarios that may be interpreted either as estimating a parameter w or estimating\n\na function f mapping from x to y.\n\nWe now review the most commonly studied properties of point estimators and\ndiscuss what they tell us about these estimators.\n\n5.4.2 Bias\n\nThe bias of an estimator is defined as:\n\nbias(6,) = E(O@m) \u2014 8 (5.20)\n\n124\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nwhere the expectation is over the data (seen as samples from a random variable)\nand @ is the true underlying value of 8 used to define the data generating distri-\nbution. An estimator 6, is said to be unbiased if bias(Om ) = 0, which implies\nthat E(@n) = = @. An estimator Om is said to be asymptotically unbiased if\nlim n\u2014oo bias(6m) = 0, which implies that limy4o\u00a2 E@m) = 0.\n\nExample: Bernoulli Distribution Consider a set of samples {2, eey xl) }\nthat are independently and identically distributed according to a Bernoulli distri-\nbution with mean 6:\n\nP(x: 0) = 0\u00b0 (1 \u2014 aye), (5.21)\n\nA common estimator for the 6 parameter of this distribution is the mean of the\ntraining samples:\n\n8m = \u2014 So. (5.22)\n\nTo determine whether this estimator is biased, we can substitute equation 5.22\ninto equation 5.20:\n\nbias(@m) = E[6m] \u2014 4 (5.23\n1 m\n_plt @]\n=E 2 ye Q (5.24\nw=1\n1 m\na ()] \u2014\n== Ee 6 (5.25\ni=1\nm 1\n= ty S> (PC _ ay) _@ (5.26\nm~ ;\nt=1 \u00a2eO=0\n1 m\n=\u2014S\u00b0(6)-90 2\nmo (6) (5.27)\n=0-6=0 (5.28)\n\nSince bias(@) = 0, we say that our estimator 6 is unbiased.\n\nExample: Gaussian Distribution Estimator of the Mean Now, consider\na set of samples fa, eng al} that are independently and identically distributed\naccording to a Gaussian distribution p(a) = N (a; ps, 07), where i \u20ac {1,...,m}.\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nRecall that the Gaussian probability density function is given by\n\ni 1 1 (2 \u2014 pp?\npas 1,0) = Toms ox ( 4 a ; (5.29)\n\nA common estimator of the Gaussian mean parameter is known as the sample\nmean:\n\nlim = \u2014S~> ce 5.30)\n\nTo determine the bias of the sample mean, we are again interested in calculating\nits expectation:\n\nbias(/im) = E[fm] \u2014 pu 5.31)\n_E Ese |= _ 5.32)\n@ Ye [x \u2018}) ~ 5.33)\n- @ S n> 5.34)\ni\n\nu=0 5.35)\n\nThus we find that the sample mean is an unbiased estimator of Gaussian mean\nparameter.\n\nExample: Estimators of the Variance of a Gaussian Distribution As an\nexample, we compare two different estimators of the variance parameter o7 of a\nGaussian distribution. We are interested in knowing if either estimator is biased.\n\nThe first estimator of o? we consider is known as the sample variance:\n, @__\\*\nGm = \u2014 > (2 jim), (5.36)\n\nwhere fim is the sample mean, defined above. More formally, we are interested in\ncomputing\n\nbias(67,) = E[\u00e9m] \u2014 0\u201d (5.37)\n\n126\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nWe begin by evaluating the term E[G,;, |:\n\nE(\u00e9;,] =E F \u00bb (c - in) (5.38)\n=\u2014\u2014o (5.39)\n\nReturning to equation 5.37, we conclude that the bias of 62, is \u2014o?/m. Therefore,\nthe sample variance is a biased estimator.\n\nThe unbiased sample variance estimator\n\nm\u2014lis\n\nprovides an alternative approach. As the name suggests this estimator is unbiased.\nThat is, we find that E[\u00e9?,] = 07:\n\n~ 1 < i) \u00bb \\?\nEle] = E | \u2014 (0! - jim.) | (5.41\ni=1\nm .\n= Ele) (5.42\n__m m\u2014 12 (5.43\nm\u2014-1 m \u2018\n=o\". (5.44\n\nWe have two estimators: one is biased and the other is not. While unbiased\nestimators are clearly desirable, they are not always the \u201cbest\u201d estimators. As we\nwill see we often use biased estimators that possess other important properties.\n\n5.4.3. Variance and Standard Error\n\nAnother property of the estimator that we might want to consider is how much\nwe expect it to vary as a function of the data sample. Just as we computed the\nexpectation of the estimator to determine its bias, we can compute its variance.\nThe variance of an estimator is simply the variance\n\nVar(9) (5.45)\n\nwhere the random variable is the training set. Alternately, the square root of the\nvariance is called the standard error, denoted SE(6).\n\n127\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nThe variance or the standard error of an estimator provides a measure of how\nwe would expect the estimate we compute from data to vary as we independently\nresample the dataset from the underlying data generating process. Just as we\nmight like an estimator to exhibit low bias we would also like it to have relatively\nlow variance.\n\nWhen we compute any statistic using a finite number of samples, our estimate\nof the true underlying parameter is uncertain, in the sense that we could have\nobtained other samples from the same distribution and their statistics would have\nbeen different. The expected degree of variation in any estimator is a source of\nerror that we want to quantify.\n\nThe standard error of the mean is given by\n\nSE(jim) = (5.46)\n\nwhere o\u201d is the true variance of the samples x\u2019. The standard error is often\nestimated by using an estimate of o. Unfortunately, neither the square root of\nthe sample variance nor the square root of the unbiased estimator of the variance\nprovide an unbiased estimate of the standard deviation. Both approaches tend\nto underestimate the true standard deviation, but are still used in practice. The\nsquare root of the unbiased estimator of the variance is less of an underestimate.\nFor large m, the approximation is quite reasonable.\n\nThe standard error of the mean is very useful in machine learning experiments.\nWe often estimate the generalization error by computing the sample mean of the\nerror on the test set. The number of examples in the test set determines the\naccuracy of this estimate. Taking advantage of the central limit theorem, which\ntells us that the mean will be approximately distributed with a normal distribution,\nwe can use the standard error to compute the probability that the true expectation\nfalls in any chosen interval. For example, the 95% confidence interval centered on\nthe mean fim is\n\n(fm \u2014 1.96SE(jim); fm + 1.96SE(fim)), (5.47)\n\nunder the normal distribution with mean fm, and variance SE({im)\u201d. In machine\nlearning experiments, it is common to say that algorithm A is better than algorithm\nB if the upper bound of the 95% confidence interval for the error of algorithm A is\nless than the lower bound of the 95% confidence interval for the error of algorithm\n\nB.\n\n128\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nExample: Bernoulli Distribution We once again consider a set of samples\n{2, eng al\u2122\\ drawn independently and identically from a Bernoulli distribution\n(recall P(a; 6) = laa \u2014 pyr). This time we are interested in computing\nthe variance of the estimator On = 4 re,\n\nVar (8m ) = Var (F ) 5.48)\nw=1\n\u2014 ,\n= = S\u00b0 Var (2 5.49)\noe\n223 Var (2!)\n1 m\n= a (1 \u2014 @) 5.50)\nw=1\n1\n= \u20145m6(1\u2014 8) 5.51)\n1\n= \u20146(1\u2014 8) 5.52)\n\nThe variance of the estimator decreases as a function of m, the number of examples\nin the dataset. This is a common property of popular estimators that we will\nreturn to when we discuss consistency (see section 5.4.5).\n\n5.4.4 Trading off Bias and Variance to Minimize Mean Squared\nError\n\nBias and variance measure two different sources of error in an estimator. Bias\nmeasures the expected deviation from the true value of the function or parameter.\nVariance on the other hand, provides a measure of the deviation from the expected\nestimator value that any particular sampling of the data is likely to cause.\n\nWhat happens when we are given a choice between two estimators, one with\nmore bias and one with more variance? How do we choose between them? For\nexample, imagine that we are interested in approximating the function shown in\nfigure 5.2 and we are only offered the choice between a model with large bias and\none that suffers from large variance. How do we choose between them?\n\nThe most common way to negotiate this trade-off is to use cross-validation.\nEmpirically, cross-validation is highly successful on many real-world tasks. Alter-\nnatively, we can also compare the mean squared error (MSE) of the estimates:\n\nMSE = E[(4m \u2014 9)?] (5.53)\n= Bias(4m)? + Var(@m) (5.54)\n129\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nThe MSE measures the overall expected deviation\u2014in a squared error sense\u2014\nbetween the estimator and the true value of the parameter 6. As is clear from\nequation 5.54, evaluating the MSE incorporates both the bias and the variance.\nDesirable estimators are those with small MSE and these are estimators that\nmanage to keep both their bias and variance somewhat in check.\n\nUnderfitting zone Overfitting zone\n\nGeneralization\n\nerror Variance\n\nOptimal Capacity\ncapacity\n\nFigure 5.6: As capacity increases (a-axis), bias (dotted) tends to decrease and variance\n(dashed) tends to increase, yielding another U-shaped curve for generalization error (bold\ncurve). If we vary capacity along one axis, there is an optimal capacity, with underfitting\nwhen the capacity is below this optimum and overfitting when it is above. This relationship\nis similar to the relationship between capacity, underfitting, and overfitting, discussed in\nsection 5.2 and figure 5.3.\n\nThe relationship between bias and variance is tightly linked to the machine\nlearning concepts of capacity, underfitting and overfitting. In the case where gen-\neralization error is measured by the MSE (where bias and variance are meaningful\ncomponents of generalization error), increasing capacity tends to increase variance\nand decrease bias. This is illustrated in figure 5.6, where we see again the U-shaped\ncurve of generalization error as a function of capacity.\n\n5.4.5 Consistency\n\nSo far we have discussed the properties of various estimators for a training set of\nfixed size. Usually, we are also concerned with the behavior of an estimator as the\namount of training data grows. In particular, we usually wish that, as the number\nof data points m in our dataset increases, our point estimates converge to the true\n\n130\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nvalue of the corresponding parameters. More formally, we would like that\n\nplim,,,,o0 4m = 9. (5.55)\n\nThe symbol plim indicates convergence in probability, meaning that for any \u20ac > 0,\nP(\\6m \u2014 4| > \u20ac) 3 0 as m > oo. The condition described by equation 5.55 is\nknown as consistency. It is sometimes referred to as weak consistency, with\nstrong consistency referring to the almost sure convergence of 6 to 6. Almost\nsure convergence of a sequence of random variables x\u201c),x@),... to a value x\noceurs when p(limn500 x(\u2122 = xv) =1.\n\nConsistency ensures that the bias induced by the estimator diminishes as the\nnumber of data examples grows. However, the reverse is not true\u2014asymptotic\nunbiasedness does not imply consistency. For example, consider estimating the\nmean parameter jz of a normal distribution NV (2; 1,07), with a dataset consisting\nof m samples: {2M, Lee ol\u2122)\\ We could use the first sample a) of the dataset\nas an unbiased estimator: @ = +\u201c). In that case, E(Om) = so the estimator\nis unbiased no matter how many data points are seen. This, of course, implies\nthat the estimate is asymptotically unbiased. However, this is not a consistent\nestimator as it is not the case that Bin > dasm\u2014 oo.\n\n5.5 Maximum Likelihood Estimation\n\nPreviously, we have seen some definitions of common estimators and analyzed\ntheir properties. But where did these estimators come from? Rather than guessing\nthat some function might make a good estimator and then analyzing its bias and\nvariance, we would like to have some principle from which we can derive specific\nfunctions that are good estimators for different models.\n\nThe most common such principle is the maximum likelihood principle.\n\nConsider a set of m examples X = fa), eey xm} drawn independently from\nthe true but unknown data generating distribution pdata(x).\n\nLet Pmodel(x;@) be a parametric family of probability distributions over the\nsame space indexed by @. In other words, pmodel(@;@ ) maps any configuration x\nto a real number estimating the true probability pgata(x).\n\nThe maximum likelihood estimator for @ is then defined as\n\nOmi = arg max pmodel(X; 4) (5.56)\n6\nm .\n= arg max | | pmoae(x\u201d 8) (5.57)\n6 j=1\n\n131\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nThis product over many probabilities can be inconvenient for a variety of reasons.\nFor example, it is prone to numerical underflow. To obtain a more convenient\nbut equivalent optimization problem, we observe that taking the logarithm of the\nlikelihood does not change its arg max but does conveniently transform a product\ninto a sum:\n\nm\nOui = arg max S> log Pmodei(@ 50). (5.58)\n9 ial\n\nBecause the arg max does not change when we rescale the cost function, we can\ndivide by m to obtain a version of the criterion that is expressed as an expectation\nwith respect to the empirical distribution fyata defined by the training data:\n\nOu = arg maxEx~past log Pmodel (X; 4). (5.59)\n\nOne way to interpret maximum likelihood estimation is to view it as minimizing\nthe dissimilarity between the empirical distribution paata defined by the training\nset and the model distribution, with the degree of dissimilarity between the two\nmeasured by the KL divergence. The KL divergence is given by\n\nDu (Paata ||Pmodel) = Exnpaata [log Baata (x) _ log Pmodei(#)] : (5.60)\n\nThe term on the left is a function only of the data generating process, not the\nmodel. This means when we train the model to minimize the KL divergence, we\nneed only minimize\n\n\u2014 Exn pasta [LOS Pmodet (\u00ae)] (5.61)\n\nwhich is of course the same as the maximization in equation 5.59.\n\nMinimizing this KL divergence corresponds exactly to minimizing the cross-\nentropy between the distributions. Many authors use the term \u201ccross-entropy\u201d to\nidentify specifically the negative log-likelihood of a Bernoulli or softmax distribution,\nbut that is a misnomer. Any loss consisting of a negative log-likelihood is a cross-\nentropy between the empirical distribution defined by the training set and the\nprobability distribution defined by model. For example, mean squared error is the\ncross-entropy between the empirical distribution and a Gaussian model.\n\nWe can thus see maximum likelihood as an attempt to make the model dis-\ntribution match the empirical distribution paata. Ideally, we would like to match\nthe true data generating distribution pgata, but we have no direct access to this\ndistribution.\n\nWhile the optimal @ is the same regardless of whether we are maximizing the\nlikelihood or minimizing the KL divergence, the values of the objective functions\n\n132\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nare different. In software, we often phrase both as minimizing a cost function.\nMaximum likelihood thus becomes minimization of the negative log-likelihood\n(NLL), or equivalently, minimization of the cross entropy. The perspective of\nmaximum likelihood as minimum KL divergence becomes helpful in this case\nbecause the KL divergence has a known minimum value of zero. The negative\nlog-likelihood can actually become negative when 2 is real-valued.\n\n5.5.1 Conditional Log-Likelihood and Mean Squared Error\n\nThe maximum likelihood estimator can readily be generalized to the case where\nour goal is to estimate a conditional probability P(y | x;@) in order to predict y\ngiven x. This is actually the most common situation because it forms the basis for\nmost supervised learning. If X represents all our inputs and Y all our observed\ntargets, then the conditional maximum likelihood estimator is\n\nOmi = argmax P(Y | X;6). (5.62)\n0\nIf the examples are assumed to be i.i.d., then this can be decomposed into\n\nm\nOu = arg max ) > log P(y | x); @), (5.63)\n0\n\ni=1\n\nExample: Linear Regression as Maximum Likelihood Linear regression,\nintroduced earlier in section 5.1.4, may be justified as a maximum likelihood\nprocedure. Previously, we motivated linear regression as an algorithm that learns\nto take an input x and produce an output value 7. The mapping from =z to 7 is\nchosen to minimize mean squared error, a criterion that we introduced more or less\narbitrarily. We now revisit linear regression from the point of view of maximum\nlikelihood estimation. Instead of producing a single prediction y, we now think\nof the model as producing a conditional distribution p(y | z). We can imagine\nthat with an infinitely large training set, we might see several training examples\nwith the same input value x but different values of y. The goal of the learning\nalgorithm is now to fit the distribution p(y | a) to all of those different y values\nthat are all compatible with a. To derive the same linear regression algorithm\nwe obtained before, we define p(y | \u00a9) =N(y;9(a; w),o7). The function \u00a7(a; w)\ngives the prediction of the mean of the Gaussian. In this example, we assume that\nthe variance is fixed to some constant a chosen by the user. We will see that this\nchoice of the functional form of p(y | 2) causes the maximum likelihood estimation\nprocedure to yield the same learning algorithm as we developed before. Since the\n\n133\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nexamples are assumed to be i.i.d., the conditional log-likelihood (equation 5.63) is\ngiven by\n\nSF log p(y |; 8) (5.64)\n\ni=1\n_ m (19 \u2014 AP\nmlogo 5 log(27) \u00bb 2 ;\n\n(5.65)\n\nwhere g\u00ae is the output of the linear regression on the i-th input 2) and m is the\nnumber of the training examples. Comparing the log-likelihood with the mean\nsquared error,\n\nlou, .\nMSEtrain = \u2014 gy @_ y - (5.66)\n\nmol t\nwe immediately see that maximizing the log-likelihood with respect to w yields\nthe same estimate of the parameters w as does minimizing the mean squared error.\nThe two criteria have different values but the same location of the optimum. This\njustifies the use of the MSE as a maximum likelihood estimation procedure. As we\nwill see, the maximum likelihood estimator has several desirable properties.\n\n5.5.2 Properties of Maximum Likelihood\n\nThe main appeal of the maximum likelihood estimator is that it can be shown to\nbe the best estimator asymptotically, as the number of examples m \u2014 oo, in terms\nof its rate of convergence as m increases.\n\nUnder appropriate conditions, the maximum likelihood estimator has the\nproperty of consistency (see section 5.4.5 above), meaning that as the number\nof training examples approaches infinity, the maximum likelihood estimate of a\nparameter converges to the true value of the parameter. These conditions are:\n\ne The true distribution paata must lie within the model family pnodei(-; 4).\nOtherwise, no estimator can recover Pdata-\n\ne The true distribution paata must correspond to exactly one value of 8. Other-\nwise, maximum likelihood can recover the correct Pdata, but will not be able\nto determine which value of 0 was used by the data generating processing.\n\nThere are other inductive principles besides the maximum likelihood estima-\ntor, many of which share the property of being consistent estimators. However,\n\n134\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nconsistent estimators can differ in their statistic efficiency, meaning that one\nconsistent estimator may obtain lower generalization error for a fixed number of\nsamples m, or equivalently, may require fewer examples to obtain a fixed level of\ngeneralization error.\n\nStatistical efficiency is typically studied in the parametric case (like in linear\nregression) where our goal is to estimate the value of a parameter (and assuming\nit is possible to identify the true parameter), not the value of a function. A way to\nmeasure how close we are to the true parameter is by the expected mean squared\nerror, computing the squared difference between the estimated and true parameter\nvalues, where the expectation is over m training samples from the data generating\ndistribution. That parametric mean squared error decreases as m increases, and\nfor m large, the Cram\u00e9r-Rao lower bound (Rao, 1945; Cram\u00e9r, 1946) shows that no\nconsistent estimator has a lower mean squared error than the maximum likelihood\nestimator.\n\nFor these reasons (consistency and efficiency), maximum likelihood is often\nconsidered the preferred estimator to use for machine learning. When the number\nof examples is small enough to yield overfitting behavior, regularization strategies\nsuch as weight decay may be used to obtain a biased version of maximum likelihood\nthat has less variance when training data is limited.\n\n5.6 Bayesian Statistics\n\nSo far we have discussed frequentist statistics and approaches based on estimat-\ning a single value of 8, then making all predictions thereafter based on that one\nestimate. Another approach is to consider all possible values of @ when making a\nprediction. The latter is the domain of Bayesian statistics.\n\nAs discussed in section 5.4.1, the frequentist perspective is that the true\nparameter value @ is fixed but unknown, while the point estimate 0 is a random\nvariable on account of it being a function of the dataset (which is seen as random).\n\nThe Bayesian perspective on statistics is quite different. The Bayesian uses\nprobability to reflect degrees of certainty of states of knowledge. The dataset is\ndirectly observed and so is not random. On the other hand, the true parameter 0\nis unknown or uncertain and thus is represented as a random variable.\n\nBefore observing the data, we represent our knowledge of 8 using the prior\nprobability distribution, p(@) (sometimes referred to as simply \u201cthe prior\u201d).\nGenerally, the machine learning practitioner selects a prior distribution that is\nquite broad (i.e. with high entropy) to reflect a high degree of uncertainty in the\n\n135\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nvalue of 8 before observing any data. For example, one might assume a priori that\n@ lies in some finite range or volume, with a uniform distribution. Many priors\ninstead reflect a preference for \u201csimpler\u201d solutions (such as smaller magnitude\ncoefficients, or a function that is closer to being constant).\n\nNow consider that we have a set of data samples {a, ve tl }. We can\nrecover the effect of data on our belief about @ by combining the data likelihood\np(e,...,2 | @) with the prior via Bayes\u2019 rule:\n\np(a),...,0 | @)p(8)\np(\u00abQ, vee ,(\u2122))\n\nIn the scenarios where Bayesian estimation is typically used, the prior begins as a\nrelatively uniform or Gaussian distribution with high entropy, and the observation\nof the data usually causes the posterior to lose entropy and concentrate around a\nfew highly likely values of the parameters.\n\npO; ae), ...,2() = (5.67)\n\nRelative to maximum likelihood estimation, Bayesian estimation offers two\nimportant differences. First, unlike the maximum likelihood approach that makes\npredictions using a point estimate of 0, the Bayesian approach is to make predictions\nusing a full distribution over 86. For example, after observing m examples, the\npredicted distribution over the next data sample, x(t\") , is given by\n\npia D a0 al) = / pla) | @)p(@| a) ,...,a(\u2122) dd. (5.68)\n\nHere each value of @ with positive probability density contributes to the prediction\nof the next example, with the contribution weighted by the posterior density itself.\nAfter having observed {2, seey al), if we are still quite uncertain about the\nvalue of 0, then this uncertainty is incorporated directly into any predictions we\nmight make.\n\nIn section 5.4, we discussed how the frequentist approach addresses the uncer-\ntainty in a given point estimate of @ by evaluating its variance. The variance of\nthe estimator is an assessment of how the estimate might change with alternative\nsamplings of the observed data. The Bayesian answer to the question of how to deal\nwith the uncertainty in the estimator is to simply integrate over it, which tends to\n\nprotect well against overfitting. This integral is of course just an application of\nthe laws of probability, making the Bayesian approach simple to justify, while the\nfrequentist machinery for constructing an estimator is based on the rather ad hoc\ndecision to summarize all knowledge contained in the dataset with a single point\nestimate.\n\nThe second important difference between the Bayesian approach to estimation\nand the maximum likelihood approach is due to the contribution of the Bayesian\n\n136\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nprior distribution. The prior has an influence by shifting probability mass density\ntowards regions of the parameter space that are preferred a priori. In practice,\nthe prior often expresses a preference for models that are simpler or more smooth.\nCritics of the Bayesian approach identify the prior as a source of subjective human\njudgment impacting the predictions.\n\nBayesian methods typically generalize much better when limited training data\nis available, but typically suffer from high computational cost when the number of\ntraining examples is large.\n\nExample: Bayesian Linear Regression Here we consider the Bayesian esti-\nmation approach to learning the linear regression parameters. In linear regression,\nwe learn a linear mapping from an input vector 2 \u20ac R\u201d to predict the value of a\nscalar y \u20ac R. The prediction is parametrized by the vector w \u20ac R\u201d:\n\ng=w' \u00aba. (5.69)\n\nGiven a set of m training samples (X (train) \"gy (train) ), we can express the prediction\nof y over the entire training set as:\n\ngit) = Xx (rain ay, 5.70)\n\nExpressed as a Gaussian conditional distribution on y\u201ct#\u2122 , we have\np(y) | x (rain) ay) = (yl); x(a 7) 5.71)\nox exp (ju \u2014 x (train) apyyT (gyltvain) __ 3x (train) w))\n\n5.72)\n\nwhere we follow the standard MSE formulation in assuming that the Gaussian\nvariance on y is one. In what follows, to reduce the notational burden, we refer to\n(x (train) YY (train)) as simply (Xx, y).\n\nTo determine the posterior distribution over the model parameter vector w, we\nfirst need to specify a prior distribution. The prior should reflect our naive belief\nabout the value of these parameters. While it is sometimes difficult or unnatural\nto express our prior beliefs in terms of the parameters of the model, in practice we\ntypically assume a fairly broad distribution expressing a high degree of uncertainty\nabout @. For real-valued parameters it is common to use a Gaussian as a prior\ndistribution:\n\np(w) = Nw; fo, Ao) x exp (-50e \u2014 po) Ag '(w \u2014 H0)) (5.73)\n\n137\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nwhere po and Ag are the prior distribution mean vector and covariance matrix\nrespectively. |\n\nWith the prior thus specified, we can now proceed in determining the posterior\ndistribution over the model parameters.\n\np(w | X,y) x ply | X, w)p(w) 5.74)\nx exp (-5 \u2014~ Xw)! (y- Xw)} exp (-5e \u2014 po) Ag '(w \u2014 H0))\n5.75)\n\n1\nx exp (-5 (-2y7 Xw +w!X'Xwtw! Aj!w- 2445 Ay'w) J :\n5.76)\n\nWe now define Ay, = (x'x + Ay\u2018) and [fm = Am (XTy + Ag Ho). Using\nthese new variables, we find that the posterior may be rewritten as a Gaussian\ndistribution:\n\np(w | X,y) x exp (-50 Hin)! Mi (W = Hm) + 5H Hn) (5.77)\n\nsc exp (\u2014F(w\u2014 pum)\u201d Ag!(w = Hm) ) (5.78)\n\nAll terms that do not include the parameter vector w have been omitted; they\nare implied by the fact that the distribution must be normalized to integrate to 1.\nEquation 3.23 shows how to normalize a multivariate Gaussian distribution.\n\nExamining this posterior distribution allows us to gain some intuition for the\neffect of Bayesian inference. In most situations, we set uo to 0. If we set Ap = iI ;\nthen fm gives the same estimate of w as does frequentist linear regression with a\nweight decay penalty of aw'w. One difference is that the Bayesian estimate is\nundefined if a@ is set to zero\u2014-we are not allowed to begin the Bayesian learning\nprocess with an infinitely wide prior on w. The more important difference is that\nthe Bayesian estimate provides a covariance matrix, showing how likely all the\ndifferent values of w are, rather than providing only the estimate pin.\n\n5.6.1 Maximum A Posteriori (MAP) Estimation\n\nWhile the most principled approach is to make predictions using the full Bayesian\nposterior distribution over the parameter @, it is still often desirable to have a\n\n1 . . . .\nUnless there is a reason to assume a particular covariance structure, we typically assume a\ndiagonal covariance matrix Ao = diag(Ao).\n\n138\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nsingle point estimate. One common reason for desiring a point estimate is that\nmost operations involving the Bayesian posterior for most interesting models are\nintractable, and a point estimate offers a tractable approximation. Rather than\nsimply returning to the maximum likelihood estimate, we can still gain some of\nthe benefit of the Bayesian approach by allowing the prior to influence the choice\nof the point estimate. One rational way to do this is to choose the maximum\na posteriori (MAP) point estimate. The MAP estimate chooses the point of\nmaximal posterior probability (or maximal probability density in the more common\ncase of continuous 6):\n\nOmap = argmax p(@ | x) = arg max log p(z | 8) + log p(8). (5.79)\n0 0\n\nWe recognize, above on the right hand side, log p(x | @), i.e. the standard log-\nlikelihood term, and log p(@), corresponding to the prior distribution.\n\nAs an example, consider a linear regression model with a Gaussian prior on\nthe weights w. If this prior is given by V(w;0, x1\u2019), then the log-prior term in\nequation 5.79 is proportional to the familiar \\w'w weight decay penalty, plus a\nterm that does not depend on w and does not affect the learning process. MAP\nBayesian inference with a Gaussian prior on the weights thus corresponds to weight\ndecay.\n\nAs with full Bayesian inference, MAP Bayesian inference has the advantage of\nleveraging information that is brought by the prior and cannot be found in the\ntraining data. This additional information helps to reduce the variance in the\nMAP point estimate (in comparison to the ML estimate). However, it does so at\nthe price of increased bias.\n\nMany regularized estimation strategies, such as maximum likelihood learning\nregularized with weight decay, can be interpreted as making the MAP approxima-\ntion to Bayesian inference. This view applies when the regularization consists of\nadding an extra term to the objective function that corresponds to logp@). Not\nall regularization penalties correspond to MAP Bayesian inference. For example,\nsome regularizer terms may not be the logarithm of a probability distribution.\nOther regularization terms depend on the data, which of course a prior probability\ndistribution is not allowed to do.\n\nMAP Bayesian inference provides a straightforward way to design complicated\nyet interpretable regularization terms. For example, a more complicated penalty\nterm can be derived by using a mixture of Gaussians, rather than a single Gaussian\ndistribution, as the prior (Nowlan and Hinton, 1992).\n\n139\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n5.7 Supervised Learning Algorithms\n\nRecall from section 5.1.3 that supervised learning algorithms are, roughly speaking,\nlearning algorithms that learn to associate some input with some output, given a\ntraining set of examples of inputs a and outputs y. In many cases the outputs\ny may be difficult to collect automatically and must be provided by a human\n\u201csupervisor,\u201d but the term still applies even when the training set targets were\ncollected automatically.\n\n5.7.1 Probabilistic Supervised Learning\n\nMost supervised learning algorithms in this book are based on estimating a\nprobability distribution p(y | #2). We can do this simply by using maximum\nlikelihood estimation to find the best parameter vector 0 for a parametric family\nof distributions p(y | x; 8).\n\nWe have already seen that linear regression corresponds to the family\np(y | @;0) =N(y;0' a, 1). (5.80)\n\nWe can generalize linear regression to the classification scenario by defining a\ndifferent family of probability distributions. If we have two classes, class 0 and\nclass 1, then we need only specify the probability of one of these classes. The\nprobability of class 1 determines the probability of class 0, because these two values\nmust add up to 1.\n\nThe normal distribution over real-valued numbers that we used for linear\nregression is parametrized in terms of a mean. Any value we supply for this mean\nis valid. A distribution over a binary variable is slightly more complicated, because\nits mean must always be between 0 and 1. One way to solve this problem is to use\nthe logistic sigmoid function to squash the output of the linear function into the\ninterval (0, 1) and interpret that value as a probability:\n\np(y =1|#;0) =o(0'a). (5.81)\n\nThis approach is known as logistic regression (a somewhat strange name since\nwe use the model for classification rather than regression).\n\nIn the case of linear regression, we were able to find the optimal weights by\nsolving the normal equations. Logistic regression is somewhat more difficult. There\nis no closed-form solution for its optimal weights. Instead, we must search for\nthem by maximizing the log-likelihood. We can do this by minimizing the negative\nlog-likelihood (NLL) using gradient descent.\n\n140\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nThis same strategy can be applied to essentially any supervised learning problem,\nby writing down a parametric family of conditional probability distributions over\nthe right kind of input and output variables.\n\n5.7.2 Support Vector Machines\n\nOne of the most influential approaches to supervised learning is the support vector\nmachine (Boser et al., 1992; Cortes and Vapnik, 1995). This model is similar to\nlogistic regression in that it is driven by a linear function w'x+b. Unlike logistic\nregression, the support vector machine does not provide probabilities, but only\noutputs a class identity. The SVM predicts that the positive class is present when\nw' a+b is positive. Likewise, it predicts that the negative class is present when\n\nw' a+b is negative.\n\nOne key innovation associated with support vector machines is the kernel\ntrick. The kernel trick consists of observing that many machine learning algorithms\ncan be written exclusively in terms of dot products between examples. For example,\nit can be shown that the linear function used by the support vector machine can\nbe re-written as m\n\nwlatb=b+S aw'a\u201d (5.82)\n\ni=1\n\nwhere x is a training example and q is a vector of coefficients. Rewriting the\nlearning algorithm this way allows us to replace x by the output of a given feature\nfunction (a) and the dot product with a function k(a, 2) = \u00a2(a)-\u00a2(#) called\na kernel. The - operator represents an inner product analogous to \u00a2(a) '\u00a2(a).\nFor some feature spaces, we may not use literally the vector inner product. In\nsome infinite dimensional spaces, we need to use other kinds of inner products, for\nexample, inner products based on integration rather than summation. A complete\ndevelopment of these kinds of inner products is beyond the scope of this book.\n\nAfter replacing dot products with kernel evaluations, we can make predictions\nusing the function\n\nf(a) =b+ So agk(w, 2). (5.83)\n\nThis function is nonlinear with respect to a, but the relationship between (ax)\nand f (@) is linear. Also, the relationship between @ and f(a) is linear. The\nkernel-based function is exactly equivalent to preprocessing the data by applying\n\u00a2(a) to all inputs, then learning a linear model in the new transformed space.\n\nThe kernel trick is powerful for two reasons. First, it allows us to learn models\nthat are nonlinear as a function of x using convex optimization techniques that are\n\n141\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nguaranteed to converge efficiently. This is possible because we consider \u00a2 fixed and\noptimize only a, i.e., the optimization algorithm can view the decision function\nas being linear in a different space. Second, the kernel function k often admits\nan implementation that is significantly more computational efficient than naively\nconstructing two \u00a2(a) vectors and explicitly taking their dot product.\n\nIn some cases, $(x#) can even be infinite dimensional, which would result in\nan infinite computational cost for the naive, explicit approach. In many cases,\nk(a, x\u2019) is a nonlinear, tractable function of 2 even when \u00a2(z) is intractable. As\nan example of an infinite-dimensional feature space with a tractable kernel, we\nconstruct a feature mapping \u00a2(a) over the non-negative integers x. Suppose that\nthis mapping returns a vector containing x ones followed by infinitely many zeros.\nWe can write a kernel function k(v,2) = min(a, 2) that is exactly equivalent\nto the corresponding infinite-dimensional dot product.\n\nThe most commonly used kernel is the Gaussian kernel\nk(u,v) =N(u\u2014 v;0, 07D) (5.84)\n\nwhere M(x; 4, ) is the standard normal density. This kernel is also known as\nthe radial basis function (RBF) kernel, because its value decreases along lines\nin v space radiating outward from u. The Gaussian kernel corresponds to a dot\nproduct in an infinite-dimensional space, but the derivation of this space is less\nstraightforward than in our example of the min kernel over the integers.\n\nWe can think of the Gaussian kernel as performing a kind of template match-\ning. A training example x associated with training label y becomes a template\nfor class y. When a test point x\u2019 is near x according to Euclidean distance, the\nGaussian kernel has a large response, indicating that x\u2019 is very similar to the x\ntemplate. The model then puts a large weight on the associated training label y.\nOverall, the prediction will combine many such training labels weighted by the\nsimilarity of the corresponding training examples.\n\nSupport vector machines are not the only algorithm that can be enhanced\nusing the kernel trick. Many other linear models can be enhanced in this way. The\ncategory of algorithms that employ the kernel trick is known as kernel machines\nor kernel methods (Williams and Rasmussen, 1996; Schdlkopf et al., 1999).\n\nA major drawback to kernel machines is that the cost of evaluating the decision\nfunction is linear in the number of training examples, because the i-th example\ncontributes a term a;k (x, a(%)) to the decision function. Support vector machines\nare able to mitigate this by learning an @ vector that contains mostly zeros.\nClassifying a new example then requires evaluating the kernel function only for\nthe training examples that have non-zero a;. These training examples are known\n\n142\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nas support vectors.\n\nKernel machines also suffer from a high computational cost of training when\nthe dataset is large. We will revisit this idea in section 5.9. Kernel machines with\ngeneric kernels struggle to generalize well. We will explain why in section 5.11. The\nmodern incarnation of deep learning was designed to overcome these limitations of\nkernel machines. The current deep learning renaissance began when Hinton ef al.\n(2006) demonstrated that a neural network could outperform the RBF kernel SVM\non the MNIST benchmark.\n\n5.7.3 Other Simple Supervised Learning Algorithms\n\nWe have already briefly encountered another non-probabilistic supervised learning\nalgorithm, nearest neighbor regression. More generally, k-nearest neighbors is\na family of techniques that can be used for classification or regression. As a\nnon-parametric learning algorithm, k-nearest neighbors is not restricted to a fixed\nnumber of parameters. We usually think of the k-nearest neighbors algorithm\nas not having any parameters, but rather implementing a simple function of the\ntraining data. In fact, there is not even really a training stage or learning process.\nInstead, at test time, when we want to produce an output y for a new test input a,\nwe find the k-nearest neighbors to x in the training data X. We then return the\naverage of the corresponding y values in the training set. This works for essentially\nany kind of supervised learning where we can define an average over y values. In\nthe case of classification, we can average over one-hot code vectors c with cy = 1\nand c; = 0 for all other values of 7. We can then interpret the average over these\none-hot codes as giving a probability distribution over classes. As a non-parametric\nlearning algorithm, k-nearest neighbor can achieve very high capacity. For example,\nsuppose we have a multiclass classification task and measure performance with 0-1\nloss. In this setting, 1-nearest neighbor converges to double the Bayes error as the\nnumber of training examples approaches infinity. The error in excess of the Bayes\nerror results from choosing a single neighbor by breaking ties between equally\ndistant neighbors randomly. When there is infinite training data, all test points a\nwill have infinitely many training set neighbors at distance zero. If we allow the\nalgorithm to use all of these neighbors to vote, rather than randomly choosing one\nof them, the procedure converges to the Bayes error rate. The high capacity of\nk-nearest neighbors allows it to obtain high accuracy given a large training set.\nHowever, it does so at high computational cost, and it may generalize very badly\ngiven a small, finite training set. One weakness of k-nearest neighbors is that it\ncannot learn that one feature is more discriminative than another. For example,\nimagine we have a regression task with \u00ab \u20ac R1\u00b0 drawn from an isotropic Gaussian\n\n143\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ndistribution, but only a single variable 21 is relevant to the output. Suppose\nfurther that this feature simply encodes the output directly, i.e. that y = 21 in all\ncases. Nearest neighbor regression will not be able to detect this simple pattern.\nThe nearest neighbor of most points x will be determined by the large number of\nfeatures 22 through xj099, not by the lone feature z7,;. Thus the output on small\ntraining sets will essentially be random.\n\n144\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n1110 1111\n\nFigure 5.7: Diagrams describing how a decision tree works. (Top)Each node of the tree\nchooses to send the input example to the child node on the left (0) or or the child node on\nthe right (1). Internal nodes are drawn as circles and leaf nodes as squares. Each node is\ndisplayed with a binary string identifier corresponding to its position in the tree, obtained\nby appending a bit to its parent identifier (0=choose left or top, 1=choose right or bottom).\n(Bottom)The tree divides space into regions. The 2D plane shows how a decision tree\nmight divide R?. The nodes of the tree are plotted in this plane, with each internal node\ndrawn along the dividing line it uses to categorize examples, and leaf nodes drawn in the\ncenter of the region of examples they receive. The result is a piecewise-constant function,\nwith one piece per leaf. Each leaf requires at least one training example to define, so it is\nnot possible for the decision tree to learn a function that has more local maxima than the\nnumber of training examples.\n\n145\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nAnother type of learning algorithm that also breaks the input space into regions\nand has separate parameters for each region is the decision tree (Breiman et al.,\n1984) and its many variants. As shown in figure 5.7, each node of the decision\ntree is associated with a region in the input space, and internal nodes break that\nregion into one sub-region for each child of the node (typically using an axis-aligned\ncut). Space is thus sub-divided into non-overlapping regions, with a one-to-one\ncorrespondence between leaf nodes and input regions. Each leaf node usually maps\nevery point in its input region to the same output. Decision trees are usually\ntrained with specialized algorithms that are beyond the scope of this book. The\nlearning algorithm can be considered non-parametric if it is allowed to learn a tree\nof arbitrary size, though decision trees are usually regularized with size constraints\nthat turn them into parametric models in practice. Decision trees as they are\ntypically used, with axis-aligned splits and constant outputs within each node,\nstruggle to solve some problems that are easy even for logistic regression. For\nexample, if we have a two-class problem and the positive class occurs wherever\nx2 > a1, the decision boundary is not axis-aligned. The decision tree will thus\nneed to approximate the decision boundary with many nodes, implementing a step\nfunction that constantly walks back and forth across the true decision function\nwith axis-aligned steps.\n\nAs we have seen, nearest neighbor predictors and decision trees have many\nlimitations. Nonetheless, they are useful learning algorithms when computational\nresources are constrained. We can also build intuition for more sophisticated\nlearning algorithms by thinking about the similarities and differences between\nsophisticated algorithms and k-NN or decision tree baselines.\n\nSee Murphy (2012), Bishop (2006), Hastie et al. (2001) or other machine\nlearning textbooks for more material on traditional supervised learning algorithms.\n\n5.8 Unsupervised Learning Algorithms\n\nRecall from section 5.1.3 that unsupervised algorithms are those that experience\nonly \u201cfeatures\u201d but not a supervision signal. The distinction between supervised\nand unsupervised algorithms is not formally and rigidly defined because there is no\nobjective test for distinguishing whether a value is a feature or a target provided by\na supervisor. Informally, unsupervised learning refers to most attempts to extract\ninformation from a distribution that do not require human labor to annotate\nexamples. The term is usually associated with density estimation, learning to\ndraw samples from a distribution, learning to denoise data from some distribution,\nfinding a manifold that the data lies near, or clustering the data into groups of\n\n146\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nrelated examples.\n\nA classic unsupervised learning task is to find the \u201cbest\u201d representation of the\ndata. By \u2018best\u2019 we can mean different things, but generally speaking we are looking\nfor a representation that preserves as much information about x as possible while\nobeying some penalty or constraint aimed at keeping the representation simpler or\nmore accessible than 2 itself.\n\nThere are multiple ways of defining a simpler representation. Three of the\nmost common include lower dimensional representations, sparse representations\nand independent representations. Low-dimensional representations attempt to\ncompress as much information about x as possible in a smaller representation.\nSparse representations (Barlow, 1989; Olshausen and Field, 1996; Hinton and\nGhahramani, 1997) embed the dataset into a representation whose entries are\nmostly zeroes for most inputs. The use of sparse representations typically requires\nincreasing the dimensionality of the representation, so that the representation\nbecoming mostly zeroes does not discard too much information. This results in an\noverall structure of the representation that tends to distribute data along the axes\nof the representation space. Independent representations attempt to disentangle\nthe sources of variation underlying the data distribution such that the dimensions\nof the representation are statistically independent.\n\nOf course these three criteria are certainly not mutually exclusive. Low-\ndimensional representations often yield elements that have fewer or weaker de-\npendencies than the original high-dimensional data. This is because one way to\nreduce the size of a representation is to find and remove redundancies. Identifying\nand removing more redundancy allows the dimensionality reduction algorithm to\nachieve more compression while discarding less information.\n\nThe notion of representation is one of the central themes of deep learning and\ntherefore one of the central themes in this book. In this section, we develop some\nsimple examples of representation learning algorithms. Together, these example\nalgorithms show how to operationalize all three of the criteria above. Most of the\nremaining chapters introduce additional representation learning algorithms that\ndevelop these criteria in different ways or introduce other criteria.\n\n5.8.1 Principal Components Analysis\n\nIn section 2.12, we saw that the principal components analysis algorithm provides\na means of compressing data. We can also view PCA as an unsupervised learning\nalgorithm that learns a representation of data. This representation is based on\ntwo of the criteria for a simple representation described above. PCA learns a\n\n147\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n\u201420 \u2014-10 0 10 20\n\nFigure 5.8: PCA learns a linear projection that aligns the direction of greatest variance\nwith the axes of the new space. (Left)The original data consists of samples of x. In this\nspace, the variance might occur along directions that are not axis-aligned. (Right)The\ntransformed data z= 2! W now varies most along the axis z;. The direction of second\nmost variance is now along 22.\n\nrepresentation that has lower dimensionality than the original input. It also learns\na representation whose elements have no linear correlation with each other. This\nis a first step toward the criterion of learning representations whose elements are\nstatistically independent. To achieve full independence, a representation learning\nalgorithm must also remove the nonlinear relationships between variables.\n\nPCA learns an orthogonal, linear transformation of the data that projects an\ninput z to a representation z as shown in figure 5.8. In section 2.12, we saw that\nwe could learn a one-dimensional representation that best reconstructs the original\ndata (in the sense of mean squared error) and that this representation actually\ncorresponds to the first principal component of the data. Thus we can use PCA\nas a simple and effective dimensionality reduction method that preserves as much\nof the information in the data as possible (again, as measured by least-squares\nreconstruction error). In the following, we will study how the PCA representation\ndecorrelates the original data representation X.\n\nLet us consider the m x n-dimensional design matrix X. We will assume that\nthe data has a mean of zero, E[a] = 0. If this is not the case, the data can easily\nbe centered by subtracting the mean from all examples in a preprocessing step.\n\nThe unbiased sample covariance matrix associated with X is given by:\n1 T\n\n148\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nPCA finds a representation (through linear transformation) z = \u00ab'W where\nVar[z] is diagonal.\n\nIn section 2.12, we saw that the principal components of a design matrix X\nare given by the eigenvectors of X'X. From this view,\n\nX'X=WAW'. (5.86)\n\nIn this section, we exploit an alternative derivation of the principal components. The\nprincipal components may also be obtained via the singular value decomposition.\nSpecifically, they are the right singular vectors of X. To see this, let W be the\nright singular vectors in the decomposition X =U%SW'. We then recover the\noriginal eigenvector equation with W as the eigenvector basis:\n\n;\nX'X= (U=w\") U=W! =w>?w'. (5.87)\n\nThe SVD is helpful to show that PCA results in a diagonal Var [z]. Using the\nSVD of X, we can express the variance of X as:\n\nVar[a] = \u2014*_x'x (5.88)\n1\n= \u2014\u2014 (USW\")'U=w\" (5.89)\n1\n= \u2014\u2014_ws'u'u=w! (5.90)\nm\u2014-1\n_ 1 2 T\n=\u2014\u2014wr'w', (5.91)\n\nwhere we use the fact that U'U = I because the U matrix of the singular value\ndecomposition is defined to be orthogonal. This shows that if we take z = 2! W,\nwe can ensure that the covariance of z is diagonal as required:\n\nVar[z] = Zz (5.92)\n-~_1 _wix'xw (5.93)\nm-\u2014-1\n- | _wiwsew'w (5.94)\nm-\u2014-1\n\u2014 tye\n=\u2014\u2014\u00bb\u2019, (5.95)\n\nwhere this time we use the fact that W'W =I, again from the definition of the\nSVD.\n\n149\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nThe above analysis shows that when we project the data x to z, via the linear\ntransformation W, the resulting representation has a diagonal covariance matrix\n(as given by \u00a9?) which immediately implies that the individual elements of z are\nmutually uncorrelated.\n\nThis ability of PCA to transform data into a representation where the elements\nare mutually uncorrelated is a very important property of PCA. It is a simple\nexample of a representation that attempts to disentangle the unknown factors of\nvariation underlying the data. In the case of PCA, this disentangling takes the\nform of finding a rotation of the input space (described by W) that aligns the\nprincipal axes of variance with the basis of the new representation space associated\nwith z.\n\nWhile correlation is an important category of dependency between elements of\nthe data, we are also interested in learning representations that disentangle more\ncomplicated forms of feature dependencies. For this, we will need more than what\ncan be done with a simple linear transformation.\n\n5.8.2 k-means Clustering\n\nAnother example of a simple representation learning algorithm is k-means clustering.\nThe k-means clustering algorithm divides the training set into k different clusters\nof examples that are near each other. We can thus think of the algorithm as\nproviding a k-dimensional one-hot code vector h representing an input x. If x\nbelongs to cluster 7, then h; = 1 and all other entries of the representation h are\nZero.\n\nThe one-hot code provided by kmeans clustering is an example of a sparse\nrepresentation, because the majority of its entries are zero for every input. Later,\nwe will develop other algorithms that learn more flexible sparse representations,\nwhere more than one entry can be non-zero for each input x. One-hot codes\nare an extreme example of sparse representations that lose many of the benefits\nof a distributed representation. The one-hot code still confers some statistical\nadvantages (it naturally conveys the idea that all examples in the same cluster are\nsimilar to each other) and it confers the computational advantage that the entire\nrepresentation may be captured by a single integer.\n\nThe k-means algorithm works by initializing k different centroids { po, eng py\nto different values, then alternating between two different steps until convergence.\nIn one step, each training example is assigned to cluster 7, where? is the index of\nthe nearest centroid w. In the other step, each centroid 2 is updated to the\nmean of all training examples \u00ab) assigned to cluster i.\n\n150\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nOne difficulty pertaining to clustering is that the clustering problem is inherently\nill-posed, in the sense that there is no single criterion that measures how well a\nclustering of the data corresponds to the real world. We can measure properties of\nthe clustering such as the average Euclidean distance from a cluster centroid to the\nmembers of the cluster. This allows us to tell how well we are able to reconstruct\nthe training data from the cluster assignments. We do not know how well the\ncluster assignments correspond to properties of the real world. Moreover, there\nmay be many different clusterings that all correspond well to some property of\nthe real world. We may hope to find a clustering that relates to one feature but\nobtain a different, equally valid clustering that is not relevant to our task. For\nexample, suppose that we run two clustering algorithms on a dataset consisting of\nimages of red trucks, images of red cars, images of gray trucks, and images of gray\ncars. If we ask each clustering algorithm to find two clusters, one algorithm may\nfind a cluster of cars and a cluster of trucks, while another may find a cluster of\nred vehicles and a cluster of gray vehicles. Suppose we also run a third clustering\nalgorithm, which is allowed to determine the number of clusters. This may assign\nthe examples to four clusters, red cars, red trucks, gray cars, and gray trucks. This\nnew clustering now at least captures information about both attributes, but it has\nlost information about similarity. Red cars are in a different cluster from gray\ncars, just as they are in a different cluster from gray trucks. The output of the\nclustering algorithm does not tell us that red cars are more similar to gray cars\nthan they are to gray trucks. They are different from both things, and that is all\nwe know.\n\nThese issues illustrate some of the reasons that we may prefer a distributed\nrepresentation to a one-hot representation. A distributed representation could have\ntwo attributes for each vehicle\u2014one representing its color and one representing\nwhether it is a car or a truck. It is still not entirely clear what the optimal\ndistributed representation is (how can the learning algorithm know whether the\ntwo attributes we are interested in are color and car-versus-truck rather than\nmanufacturer and age?) but having many attributes reduces the burden on the\nalgorithm to guess which single attribute we care about, and allows us to measure\nsimilarity between objects in a fine-grained way by comparing many attributes\ninstead of just testing whether one attribute matches.\n\n5.9 Stochastic Gradient Descent\n\nNearly all of deep learning is powered by one very important algorithm: stochastic\ngradient descent or SGD. Stochastic gradient descent is an extension of the\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\ngradient descent algorithm introduced in section 4.3.\n\nA recurring problem in machine learning is that large training sets are necessary\nfor good generalization, but large training sets are also more computationally\nexpensive.\n\nThe cost function used by a machine learning algorithm often decomposes as a\nsum over training examples of some per-example loss function. For example, the\nnegative conditional log-likelihood of the training data can be written as\n\n1 m ; ;\nJ(8) = Exy~ fase l(#,y,0) = \u2014 S 7 Le of, 8) (5.96)\ni=l\n\nwhere L is the per-example loss L(a, y,@) = \u2014 log p(y | a; 6).\n\nFor these additive cost functions, gradient descent requires computing\n1 m\nVoJ(0) = \u2014S~ VoL(x,y, 8). ;\noJ(8) mo aL (a, y\\, 8) (5.97)\n\nThe computational cost of this operation is O(m). As the training set size grows to\nbillions of examples, the time to take a single gradient step becomes prohibitively\nlong.\n\nThe insight of stochastic gradient descent is that the gradient is an expectation.\nThe expectation may be approximately estimated using a small set of samples.\nSpecifically, on each step of the algorithm, we can sample a minibatch of examples\nB= fa, Leey al\u2019 )\u00a5 drawn uniformly from the training set. The minibatch size\nm\u2019! is typically chosen to be a relatively small number of examples, ranging from\n1 to a few hundred. Crucially, m\u2019 is usually held fixed as the training set size m\ngrows. We may fit a training set with billions of examples using updates computed\non only a hundred examples.\n\nThe estimate of the gradient is formed as\n\n9=\u2014Vo>_ L(a,y,). (5.98)\n\nusing examples from the minibatch B. The stochastic gradient descent algorithm\nthen follows the estimated gradient downhill:\n\n0-0-4, (5.99)\n\nwhere \u20ac is the learning rate.\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nGradient descent in general has often been regarded as slow or unreliable. In\nthe past, the application of gradient descent to non-convex optimization problems\nwas regarded as foolhardy or unprincipled. Today, we know that the machine\nlearning models described in part IJ work very well when trained with gradient\ndescent. The optimization algorithm may not be guaranteed to arrive at even a\nlocal minimum in a reasonable amount of time, but it often finds a very low value\nof the cost function quickly enough to be useful.\n\nStochastic gradient descent has many important uses outside the context of\ndeep learning. It is the main way to train large linear models on very large\ndatasets. For a fixed model size, the cost per SGD update does not depend on the\ntraining set size m. In practice, we often use a larger model as the training set size\nincreases, but we are not forced to do so. The number of updates required to reach\nconvergence usually increases with training set size. However, as m approaches\ninfinity, the model will eventually converge to its best possible test error before\nSGD has sampled every example in the training set. Increasing m further will not\nextend the amount of training time needed to reach the model\u2019s best possible test\nerror. From this point of view, one can argue that the asymptotic cost of training\na model with SGD is O(1) as a function of m.\n\nPrior to the advent of deep learning, the main way to learn nonlinear models\nwas to use the kernel trick in combination with a linear model. Many kernel learning\nalgorithms require constructing an m Xm matrix Gj jy = k(a\u00ae, x) ). Constructing\nthis matrix has computational cost O(m), which is clearly undesirable for datasets\nwith billions of examples. In academia, starting in 2006, deep learning was\ninitially interesting because it was able to generalize to new examples better\nthan competing algorithms when trained on medium-sized datasets with tens of\nthousands of examples. Soon after, deep learning garnered additional interest in\nindustry, because it provided a scalable way of training nonlinear models on large\ndatasets.\n\nStochastic gradient descent and many enhancements to it are described further\nin chapter 8.\n\n5.10 Building a Machine Learning Algorithm\n\nNearly all deep learning algorithms can be described as particular instances of\na fairly simple recipe: combine a specification of a dataset, a cost function, an\noptimization procedure and a model.\n\nFor example, the linear regression algorithm combines a dataset consisting of\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nX and y, the cost function\n\nJ(w,b) = \u2014Ex,y~Baata 108 Pmodel (Y | 2), (5.100)\n\nthe model specification pmoaea(y | \u00a9) =N (y;a' w+ 6,1), and, in most cases, the\noptimization algorithm defined by solving for where the gradient of the cost is zero\nusing the normal equations.\n\nBy realizing that we can replace any of these components mostly independently\nfrom the others, we can obtain a very wide variety of algorithms.\n\nThe cost function typically includes at least one term that causes the learning\nprocess to perform statistical estimation. The most common cost function is the\nnegative log-likelihood, so that minimizing the cost function causes maximum\nlikelihood estimation.\n\nThe cost function may also include additional terms, such as regularization\nterms. For example, we can add weight decay to the linear regression cost function\nto obtain\n\nJ(w,b) = d||w||3 \u2014 Exy~Paaa 108 Pmodel (y | a): (5.101)\n\nThis still allows closed-form optimization.\n\nIf we change the model to be nonlinear, then most cost functions can no longer\nbe optimized in closed form. This requires us to choose an iterative numerical\noptimization procedure, such as gradient descent.\n\nThe recipe for constructing a learning algorithm by combining models, costs, and\noptimization algorithms supports both supervised and unsupervised learning. The\nlinear regression example shows how to support supervised learning. Unsupervised\nlearning can be supported by defining a dataset that contains only X and providing\nan appropriate unsupervised cost and model. For example, we can obtain the first\nPCA vector by specifying that our loss function is\n\nT(w) = Exemfgass lle \u2014 7(a; w)||3 (5.102)\n\nwhile our model is defined to have w with norm one and reconstruction function\nr(x) = wlaw.\n\nIn some cases, the cost function may be a function that we cannot actually\nevaluate, for computational reasons. In these cases, we can still approximately\nminimize it using iterative numerical optimization so long as we have some way of\napproximating its gradients.\n\nMost machine learning algorithms make use of this recipe, though it may not\nimmediately be obvious. If a machine learning algorithm seems especially unique or\n\n154\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nhand-designed, it can usually be understood as using a special-case optimizer. Some\nmodels such as decision trees or k-means require special-case optimizers because\ntheir cost functions have flat regions that make them inappropriate for minimization\nby gradient-based optimizers. Recognizing that most machine learning algorithms\ncan be described using this recipe helps to see the different algorithms as part of a\ntaxonomy of methods for doing related tasks that work for similar reasons, rather\nthan as a long list of algorithms that each have separate justifications.\n\n5.11 Challenges Motivating Deep Learning\n\nThe simple machine learning algorithms described in this chapter work very well on\na wide variety of important problems. However, they have not succeeded in solving\nthe central problems in AI, such as recognizing speech or recognizing objects.\n\nThe development of deep learning was motivated in part by the failure of\ntraditional algorithms to generalize well on such AI tasks.\n\nThis section is about how the challenge of generalizing to new examples becomes\nexponentially more difficult when working with high-dimensional data, and how\nthe mechanisms used to achieve generalization in traditional machine learning\nare insufficient to learn complicated functions in high-dimensional spaces. Such\nspaces also often impose high computational costs. Deep learning was designed to\novercome these and other obstacles.\n\n5.11.1 The Curse of Dimensionality\n\nMany machine learning problems become exceedingly difficult when the number\nof dimensions in the data is high. This phenomenon is known as the curse of\ndimensionality. Of particular concern is that the number of possible distinct\nconfigurations of a set of variables increases exponentially as the number of variables\nincreases.\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nFigure 5.9: As the number of relevant dimensions of the data increases (from left to\nright), the number of configurations of interest may grow exponentially. (Left)In this\none-dimensional example, we have one variable for which we only care to distinguish 10\nregions of interest. With enough examples falling within each of these regions (each region\ncorresponds to a cell in the illustration), learning algorithms can easily generalize correctly.\nA straightforward way to generalize is to estimate the value of the target function within\neach region (and possibly interpolate between neighboring regions). (Center)With 2\ndimensions it is more difficult to distinguish 10 different values of each variable. We need\nto keep track of up to 10x10=100 regions, and we need at least that many examples to\ncover all those regions. (Right)With 3 dimensions this grows to 10\u00b0 = 1000 regions and at\nleast that many examples. For d dimensions and v values to be distinguished along each\naxis, we seem to need O(v\u201c) regions and examples. This is an instance of the curse of\ndimensionality. Figure graciously provided by Nicolas Chapados.\n\nThe curse of dimensionality arises in many places in computer science, and\nespecially so in machine learning.\n\nOne challenge posed by the curse of dimensionality is a statistical challenge.\nAs illustrated in figure 5.9, a statistical challenge arises because the number of\npossible configurations of \u00ab is much larger than the number of training examples.\nTo understand the issue, let us consider that the input space is organized into a\ngrid, like in the figure. We can describe low-dimensional space with a low number\nof grid cells that are mostly occupied by the data. When generalizing to a new data\npoint, we can usually tell what to do simply by inspecting the training examples\nthat lie in the same cell as the new input. For example, if estimating the probability\ndensity at some point x, we can just return the number of training examples in\nthe same unit volume cell as x, divided by the total number of training examples.\nIf we wish to classify an example, we can return the most common class of training\nexamples in the same cell. If we are doing regression we can average the target\nvalues observed over the examples in that cell. But what about the cells for which\nwe have seen no example? Because in high-dimensional spaces the number of\nconfigurations is huge, much larger than our number of examples, a typical grid cell\nhas no training example associated with it. How could we possibly say something\n\n156\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nmeaningful about these new configurations? Many traditional machine learning\nalgorithms simply assume that the output at a new point should be approximately\nthe same as the output at the nearest training point.\n\n5.11.2 Local Constancy and Smoothness Regularization\n\nIn order to generalize well, machine learning algorithms need to be guided by prior\nbeliefs about what kind of function they should learn. Previously, we have seen\nthese priors incorporated as explicit beliefs in the form of probability distributions\nover parameters of the model. More informally, we may also discuss prior beliefs as\ndirectly influencing the function itself and only indirectly acting on the parameters\nvia their effect on the function. Additionally, we informally discuss prior beliefs as\nbeing expressed implicitly, by choosing algorithms that are biased toward choosing\nsome class of functions over another, even though these biases may not be expressed\n(or even possible to express) in terms of a probability distribution representing our\ndegree of belief in various functions.\n\nAmong the most widely used of these implicit \u201cpriors\u201d is the smoothness\nprior or local constancy prior. This prior states that the function we learn\nshould not change very much within a small region.\n\nMany simpler algorithms rely exclusively on this prior to generalize well, and\nas a result they fail to scale to the statistical challenges involved in solving AI-\nlevel tasks. Throughout this book, we will describe how deep learning introduces\nadditional (explicit and implicit) priors in order to reduce the generalization\nerror on sophisticated tasks. Here, we explain why the smoothness prior alone is\ninsufficient for these tasks.\n\nThere are many different ways to implicitly or explicitly express a prior belief\nthat the learned function should be smooth or locally constant. All of these different\nmethods are designed to encourage the learning process to learn a function f* that\nsatisfies the condition\n\nf(x) \u00a9 f*(a@+e) (5.103)\n\nfor most configurations z and small change e. In other words, if we know a good\nanswer for an input @ (for example, if a is a labeled training example) then that\nanswer is probably good in the neighborhood of a. If we have several good answers\nin some neighborhood we would combine them (by some form of averaging or\ninterpolation) to produce an answer that agrees with as many of them as much as\npossible.\n\nAn extreme example of the local constancy approach is the k-nearest neighbors\nfamily of learning algorithms. These predictors are literally constant over each\n\n157\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nregion containing all the points x that have the same set of k nearest neighbors in\nthe training set. For k = 1, the number of distinguishable regions cannot be more\nthan the number of training examples.\n\nWhile the k-nearest neighbors algorithm copies the output from nearby training\nexamples, most kernel machines interpolate between training set outputs associated\nwith nearby training examples. An important class of kernels is the family of local\nkernels where k(u, v) is large when wu = v and decreases as u and v grow farther\napart from each other. A local kernel can be thought of as a similarity function\nthat performs template matching, by measuring how closely a test example x\nresembles each training example \u00ab). Much of the modern motivation for deep\nlearning is derived from studying the limitations of local template matching and\nhow deep models are able to succeed in cases where local template matching fails\n(Bengio e\u00a2 al., 2006b).\n\nDecision trees also suffer from the limitations of exclusively smoothness-based\nlearning because they break the input space into as many regions as there are\nleaves and use a separate parameter (or sometimes many parameters for extensions\nof decision trees) in each region. If the target function requires a tree with a\nleast n leaves to be represented accurately, then at least n training examples are\nrequired to fit the tree. A multiple of n is needed to achieve some level of statistical\n\nconfidence in the predicted output.\n\nIn general, to distinguish O(k) regions in input space, all of these methods\nrequire O(k) examples. Typically there are O (k) parameters, with O(1) parameters\nassociated with each of the O(k) regions. The case of a nearest neighbor scenario,\nwhere each training example can be used to define at most one region, is illustrated\nin figure 5.10.\n\nIs there a way to represent a complex function that has many more regions\nto be distinguished than the number of training examples? Clearly, assuming\nonly smoothness of the underlying function will not allow a learner to do that.\nFor example, imagine that the target function is a kind of checkerboard. A\n\ncheckerboard contains many variations but there is a simple structure to them.\nImagine what happens when the number of training examples is substantially\nsmaller than the number of black and white squares on the checkerboard. Based\non only local generalization and the smoothness or local constancy prior, we would\nbe guaranteed to correctly guess the color of a new point if it lies within the same\ncheckerboard square as a training example. There is no guarantee that the learner\ncould correctly extend the checkerboard pattern to points lying in squares that do\nnot contain training examples. With this prior alone, the only information that an\nexample tells us is the color of its square, and the only way to get the colors of the\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nFigure 5.10: Illustration of how the nearest neighbor algorithm breaks up the input space\ninto regions. An example (represented here by a circle) within each region defines the\nregion boundary (represented here by the lines). The y value associated with each example\ndefines what the output should be for all points within the corresponding region. The\nregions defined by nearest neighbor matching form a geometric pattern called a Voronoi\ndiagram. The number of these contiguous regions cannot grow faster than the number\nof training examples. While this figure illustrates the behavior of the nearest neighbor\nalgorithm specifically, other machine learning algorithms that rely exclusively on the\nlocal smoothness prior for generalization exhibit similar behaviors: each training example\nonly informs the learner about how to generalize in some neighborhood immediately\nsurrounding that example.\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nentire checkerboard right is to cover each of its cells with at least one example.\n\nThe smoothness assumption and the associated non-parametric learning algo-\nrithms work extremely well so long as there are enough examples for the learning\nalgorithm to observe high points on most peaks and low points on most valleys\nof the true underlying function to be learned. This is generally true when the\nfunction to be learned is smooth enough and varies in few enough dimensions.\nIn high dimensions, even a very smooth function can change smoothly but in a\ndifferent way along each dimension. If the function additionally behaves differently\nin different regions, it can become extremely complicated to describe with a set of\ntraining examples. If the function is complicated (we want to distinguish a huge\nnumber of regions compared to the number of examples), is there any hope to\ngeneralize well?\n\nThe answer to both of these questions\u2014whether it is possible to represent\na complicated function efficiently, and whether it is possible for the estimated\nfunction to generalize well to new inputs\u2014is yes. The key insight is that a very\nlarge number of regions, e.g., O(2\"), can be defined with O(k) examples, so long\nas we introduce some dependencies between the regions via additional assumptions\nabout the underlying data generating distribution. In this way, we can actually\ngeneralize non-locally (Bengio and Monperrus, 2005; Bengio et al., 2006c). Many\ndifferent deep learning algorithms provide implicit or explicit assumptions that are\nreasonable for a broad range of AI tasks in order to capture these advantages.\n\nOther approaches to machine learning often make stronger, task-specific as-\nsumptions. For example, we could easily solve the checkerboard task by providing\nthe assumption that the target function is periodic. Usually we do not include such\nstrong, task-specific assumptions into neural networks so that they can generalize\nto a much wider variety of structures. AI tasks have structure that is much too\ncomplex to be limited to simple, manually specified properties such as periodicity,\nso we want learning algorithms that embody more general-purpose assumptions.\nThe core idea in deep learning is that we assume that the data was generated by\nthe composition of factors or features, potentially at multiple levels in a hierarchy.\nMany other similarly generic assumptions can further improve deep learning al-\ngorithms. These apparently mild assumptions allow an exponential gain in the\nrelationship between the number of examples and the number of regions that can\nbe distinguished. These exponential gains are described more precisely in sections\n6.4.1, 15.4 and 15.5. The exponential advantages conferred by the use of deep,\ndistributed representations counter the exponential challenges posed by the curse\nof dimensionality.\n\n160\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n5.11.3 Manifold Learning\n\nAn important concept underlying many ideas in machine learning is that of a\nmanifold.\n\nA manifold is a connected region. Mathematically, it is a set of points,\nassociated with a neighborhood around each point. From any given point, the\nmanifold locally appears to be a Euclidean space. In everyday life, we experience\nthe surface of the world as a 2-D plane, but it is in fact a spherical manifold in\n3-D space.\n\nThe definition of a neighborhood surrounding each point implies the existence\nof transformations that can be applied to move on the manifold from one position\nto a neighboring one. In the example of the world\u2019s surface as a manifold, one can\nwalk north, south, east, or west.\n\nAlthough there is a formal mathematical meaning to the term \u201cmanifold,\u201d in\nmachine learning it tends to be used more loosely to designate a connected set\nof points that can be approximated well by considering only a small number of\ndegrees of freedom, or dimensions, embedded in a higher-dimensional space. Each\ndimension corresponds to a local direction of variation. See figure 5.11 for an\nexample of training data lying near a one-dimensional manifold embedded in two-\ndimensional space. In the context of machine learning, we allow the dimensionality\nof the manifold to vary from one point to another. This often happens when a\nmanifold intersects itself. For example, a figure eight is a manifold that has a single\ndimension in most places but two dimensions at the intersection at the center.\n\n\u201c0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0\nFigure 5.11: Data sampled from a distribution in a two-dimensional space that is actually\nconcentrated near a one-dimensional manifold, like a twisted string. The solid line indicates\n\nthe underlying manifold that the learner should infer.\n\n161\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nMany machine learning problems seem hopeless if we expect the machine\nlearning algorithm to learn functions with interesting variations across all of R\u201d.\nManifold learning algorithms surmount this obstacle by assuming that most\nof R\u201d consists of invalid inputs, and that interesting inputs occur only along\na collection of manifolds containing a small subset of points, with interesting\nvariations in the output of the learned function occurring only along directions\nthat lie on the manifold, or with interesting variations happening only when we\nmove from one manifold to another. Manifold learning was introduced in the case\nof continuous-valued data and the unsupervised learning setting, although this\nprobability concentration idea can be generalized to both discrete data and the\nsupervised learning setting: the key assumption remains that probability mass is\nhighly concentrated.\n\nThe assumption that the data lies along a low-dimensional manifold may not\nalways be correct or useful. We argue that in the context of AI tasks, such as\nthose that involve processing images, sounds, or text, the manifold assumption is\nat least approximately correct. The evidence in favor of this assumption consists\nof two categories of observations.\n\nThe first observation in favor of the manifold hypothesis is that the proba-\nbility distribution over images, text strings, and sounds that occur in real life is\nhighly concentrated. Uniform noise essentially never resembles structured inputs\nfrom these domains. Figure 5.12 shows how, instead, uniformly sampled points\nlook like the patterns of static that appear on analog television sets when no signal\nis available. Similarly, if you generate a document by picking letters uniformly at\nrandom, what is the probability that you will get a meaningful English-language\ntext? Almost zero, again, because most of the long sequences of letters do not\ncorrespond to a natural language sequence: the distribution of natural language\nsequences occupies a very small volume in the total space of sequences of letters.\n\n162\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nFigure 5.12: Sampling images uniformly at random (by randomly picking each pixel\naccording to a uniform distribution) gives rise to noisy images. Although there is a non-\nzero probability to generate an image of a face or any other object frequently encountered\nin AI applications, we never actually observe this happening in practice. This suggests\nthat the images encountered in AI applications occupy a negligible proportion of the\nvolume of image space.\n\nOf course, concentrated probability distributions are not sufficient to show\nthat the data lies on a reasonably small number of manifolds. We must also\nestablish that the examples we encounter are connected to each other by other\n\n163\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\nexamples, with each example surrounded by other highly similar examples that\nmay be reached by applying transformations to traverse the manifold. The second\nargument in favor of the manifold hypothesis is that we can also imagine such\nneighborhoods and transformations, at least informally. In the case of images, we\ncan certainly think of many possible transformations that allow us to trace out a\nmanifold in image space: we can gradually dim or brighten the lights, gradually\nmove or rotate objects in the image, gradually alter the colors on the surfaces of\nobjects, etc. It remains likely that there are multiple manifolds involved in most\napplications. For example, the manifold of images of human faces may not be\nconnected to the manifold of images of cat faces.\n\nThese thought experiments supporting the manifold hypotheses convey some in-\ntuitive reasons supporting it. More rigorous experiments (Cayton, 2005; Narayanan\nand Mitter, 2010; Schdlkopf et al., 1998; Roweis and Saul, 2000; Tenenbaum et al.,\n2000; Brand, 2003; Belkin and Niyogi, 2003; Donoho and Grimes, 2003; Weinberger\nand Saul, 2004) clearly support the hypothesis for a large class of datasets of\ninterest in AI.\n\nWhen the data lies on a low-dimensional manifold, it can be most natural\nfor machine learning algorithms to represent the data in terms of coordinates on\nthe manifold, rather than in terms of coordinates in R\". In everyday life, we can\nthink of roads as 1-D manifolds embedded in 3-D space. We give directions to\nspecific addresses in terms of address numbers along these 1-D roads, not in terms\nof coordinates in 3-D space. Extracting these manifold coordinates is challenging,\nbut holds the promise to improve many machine learning algorithms. This general\nprinciple is applied in many contexts. Figure 5.13 shows the manifold structure of\na dataset consisting of faces. By the end of this book, we will have developed the\nmethods necessary to learn such a manifold structure. In figure 20.6, we will see\nhow a machine learning algorithm can successfully accomplish this goal.\n\nThis concludes part I, which has provided the basic concepts in mathematics\nand machine learning which are employed throughout the remaining parts of the\nbook. You are now prepared to embark upon your study of deep learning.\n\n164\n", "CHAPTER 5. MACHINE LEARNING BASICS\n\n3a Ss\nSeEEREE \u201c3\u00b0:\n\n13 RARER eB]\naa Pi ahs ee as Ps\nCREE CPE E Emo\nEERREREEEEEnnED\n\nFigure 5.13: Training examples from the QMUL Multiview Face Dataset (Gong et al., 2000)\nfor which the subjects were asked to move in such a way as to cover the two-dimensional\nmanifold corresponding to two angles of rotation. We would like learning algorithms to be\nable to discover and disentangle such manifold coordinates. Figure 20.6 illustrates such a\nfeat.\n\nds\nEP EY BES\nBEE\nBEEE\n\nEe\nAa =a 2\n", "Part II\n\nDeep Networks: Modern\nPractices\n\n166\n", "This part of the book summarizes the state of modern deep learning as it is\nused to solve practical applications.\n\nDeep learning has a long history and many aspirations. Several approaches\nhave been proposed that have yet to entirely bear fruit. Several ambitious goals\nhave yet to be realized. These less-developed branches of deep learning appear in\nthe final part of the book.\n\nThis part focuses only on those approaches that are essentially working tech-\nnologies that are already used heavily in industry.\n\nModern deep learning provides a very powerful framework for supervised\nlearning. By adding more layers and more units within a layer, a deep network can\nrepresent functions of increasing complexity. Most tasks that consist of mapping an\ninput vector to an output vector, and that are easy for a person to do rapidly, can\nbe accomplished via deep learning, given sufficiently large models and sufficiently\nlarge datasets of labeled training examples. Other tasks, that can not be described\nas associating one vector to another, or that are difficult enough that a person\nwould require time to think and reflect in order to accomplish the task, remain\nbeyond the scope of deep learning for now.\n\nThis part of the book describes the core parametric function approximation\ntechnology that is behind nearly all modern practical applications of deep learning.\nWe begin by describing the feedforward deep network model that is used to\nrepresent these functions. Next, we present advanced techniques for regularization\nand optimization of such models. Scaling these models to large inputs such as high\nresolution images or long temporal sequences requires specialization. We introduce\nthe convolutional network for scaling to large images and the recurrent neural\nnetwork for processing temporal sequences. Finally, we present general guidelines\nfor the practical methodology involved in designing, building, and configuring an\napplication involving deep learning, and review some of the applications of deep\nlearning.\n\nThese chapters are the most important for a practitioner\u2014someone who wants\nto begin implementing and using deep learning algorithms to solve real-world\nproblems today.\n\n167\n", "Chapter 6\n\nDeep Feedforward Networks\n\nDeep feedforward networks, also often called feedforward neural networks,\nor multilayer perceptrons (MLPs), are the quintessential deep learning models.\nThe goal of a feedforward network is to approximate some function f*. For example,\nfor a classifier, y = f*(a) maps an input x to a category y. A feedforward network\ndefines a mapping y = f(a; 6) and learns the value of the parameters @ that result\nin the best function approximation.\n\nThese models are called feedforward because information flows through the\nfunction being evaluated from x, through the intermediate computations used to\ndefine f, and finally to the output y. There are no feedback connections in which\noutputs of the model are fed back into itself. When feedforward neural networks\nare extended to include feedback connections, they are called recurrent neural\nnetworks, presented in chapter 10.\n\nFeedforward networks are of extreme importance to machine learning practi-\ntioners. They form the basis of many important commercial applications. For\nexample, the convolutional networks used for object recognition from photos are a\nspecialized kind of feedforward network. Feedforward networks are a conceptual\nstepping stone on the path to recurrent networks, which power many natural\nlanguage applications.\n\nFeedforward neural networks are called networks because they are typically\nrepresented by composing together many different functions. The model is asso-\nciated with a directed acyclic graph describing how the functions are composed\ntogether. For example, we might have three functions f(), f@, and f@) connected\nin a chain, to form f(x) = f\u00ae)(f(fM(a))). These chain structures are the most\ncommonly used structures of neural networks. In this case, f\u201c) is called the first\nlayer of the network, f@) is called the second layer, and so on. The overall\n\n168\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nlength of the chain gives the depth of the model. It is from this terminology that\nthe name \u201cdeep learning\u201d arises. The final layer of a feedforward network is called\nthe output layer. During neural network training, we drive f(a) to match f*(a).\nThe training data provides us with noisy, approximate examples of f*(a) evaluated\nat different training points. Each example x is accompanied by a label y ~ f*(ax).\nThe training examples specify directly what the output layer must do at each point\nzx; it must produce a value that is close to y. The behavior of the other layers is\nnot directly specified by the training data. The learning algorithm must decide\nhow to use those layers to produce the desired output, but the training data does\nnot say what each individual layer should do. Instead, the learning algorithm must\ndecide how to use these layers to best implement an approximation of f*. Because\nthe training data does not show the desired output for each of these layers, these\nlayers are called hidden layers.\n\nFinally, these networks are called neural because they are loosely inspired by\nneuroscience. Each hidden layer of the network is typically vector-valued. The\ndimensionality of these hidden layers determines the width of the model. Each\nelement of the vector may be interpreted as playing a role analogous to a neuron.\nRather than thinking of the layer as representing a single vector-to-vector function,\nwe can also think of the layer as consisting of many units that act in parallel,\neach representing a vector-to-scalar function. Each unit resembles a neuron in\nthe sense that it receives input from many other units and computes its own\nactivation value. The idea of using many layers of vector-valued representation\nis drawn from neuroscience. The choice of the functions f (a) used to compute\nthese representations is also loosely guided by neuroscientific observations about\nthe functions that biological neurons compute. However, modern neural network\nresearch is guided by many mathematical and engineering disciplines, and the\ngoal of neural networks is not to perfectly model the brain. It is best to think of\nfeedforward networks as function approximation machines that are designed to\nachieve statistical generalization, occasionally drawing some insights from what we\nknow about the brain, rather than as models of brain function.\n\nOne way to understand feedforward networks is to begin with linear models\nand consider how to overcome their limitations. Linear models, such as logistic\nregression and linear regression, are appealing because they may be fit efficiently\nand reliably, either in closed form or with convex optimization. Linear models also\nhave the obvious defect that the model capacity is limited to linear functions, so\nthe model cannot understand the interaction between any two input variables.\n\nTo extend linear models to represent nonlinear functions of x, we can apply\nthe linear model not to \u00ab itself but to a transformed input \u00a2(@), where \u00a2 is a\n\n169\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nnonlinear transformation. Equivalently, we can apply the kernel trick described in\nsection 5.7.2, to obtain a nonlinear learning algorithm based on implicitly applying\nthe \u00a2 mapping. We can think of \u00a2 as providing a set of features describing a, or\nas providing a new representation for x.\n\nThe question is then how to choose the mapping \u00a2.\n\n1. One option is to use a very generic \u00a2, such as the infinite-dimensional \u00a2 that\nis implicitly used by kernel machines based on the RBF kernel. If \u00a2(a) is\nof high enough dimension, we can always have enough capacity to fit the\ntraining set, but generalization to the test set often remains poor. Very\ngeneric feature mappings are usually based only on the principle of local\nsmoothness and do not encode enough prior information to solve advanced\nproblems.\n\n2. Another option is to manually engineer \u00a2. Until the advent of deep learning,\nthis was the dominant approach. This approach requires decades of human\neffort for each separate task, with practitioners specializing in different\ndomains such as speech recognition or computer vision, and with little\ntransfer between domains.\n\n3. The strategy of deep learning is to learn \u00a2. In this approach, we have a model\ny = f(x; 0, w) = o(@;0)'w. We now have parameters @ that we use to learn\n\u00a2 from a broad class of functions, and parameters w that map from \u00a2(a) to\nthe desired output. This is an example of a deep feedforward network, with\n\u00a2 defining a hidden layer. This approach is the only one of the three that\ngives up on the convexity of the training problem, but the benefits outweigh\nthe harms. In this approach, we parametrize the representation as $(a; 6)\nand use the optimization algorithm to find the 6 that corresponds to a good\nrepresentation. If we wish, this approach can capture the benefit of the first\napproach by being highly generic\u2014we do so by using a very broad family\n\u00a2(a;0). This approach can also capture the benefit of the second approach.\nHuman practitioners can encode their knowledge to help generalization by\ndesigning families \u00a2(a; 8) that they expect will perform well. The advantage\nis that the human designer only needs to find the right general function\nfamily rather than finding precisely the right function.\n\nThis general principle of improving models by learning features extends beyond\nthe feedforward networks described in this chapter. It is a recurring theme of deep\nlearning that applies to all of the kinds of models described throughout this book.\nFeedforward networks are the application of this principle to learning deterministic\n\n170\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nmappings from x to y that lack feedback connections. Other models presented\nlater will apply these principles to learning stochastic mappings, learning functions\nwith feedback, and learning probability distributions over a single vector.\n\nWe begin this chapter with a simple example of a feedforward network. Next,\nwe address each of the design decisions needed to deploy a feedforward network.\nFirst, training a feedforward network requires making many of the same design\ndecisions as are necessary for a linear model: choosing the optimizer, the cost\nfunction, and the form of the output units. We review these basics of gradient-based\nlearning, then proceed to confront some of the design decisions that are unique\nto feedforward networks. Feedforward networks have introduced the concept of a\nhidden layer, and this requires us to choose the activation functions that will\nbe used to compute the hidden layer values. We must also design the architecture\nof the network, including how many layers the network should contain, how these\nlayers should be connected to each other, and how many units should be in\neach layer. Learning in deep neural networks requires computing the gradients\nof complicated functions. We present the back-propagation algorithm and its\nmodern generalizations, which can be used to efficiently compute these gradients.\nFinally, we close with some historical perspective.\n\n6.1 Example: Learning XOR\n\nTo make the idea of a feedforward network more concrete, we begin with an\nexample of a fully functioning feedforward network on a very simple task: learning\nthe XOR function.\n\nThe XOR function (\u201cexclusive or\u201d) is an operation on two binary values, 21\nand 22. When exactly one of these binary values is equal to 1, the XOR function\nreturns 1. Otherwise, it returns 0. The XOR function provides the target function\ny = f*(a) that we want to learn. Our model provides a function y = f(a;@) and\nour learning algorithm will adapt the parameters 0 to make f as similar as possible\nto f*.\n\nIn this simple example, we will not be concerned with statistical generalization.\nWe want our network to perform correctly on the four points X = {[0,0]\", [0,1]',\n[1,0] \", and [1,1]'}. We will train the network on all four of these points. The\nonly challenge is to fit the training set.\n\nWe can treat this problem as a regression problem and use a mean squared\nerror loss function. We choose this loss function to simplify the math for this\nexample as much as possible. In practical applications, MSE is usually not an\n\n171\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nappropriate cost function for modeling binary data. More appropriate approaches\nare described in section 6.2.2.2.\n\nEvaluated on our whole training set, the MSE loss function is\n\nHO) = 5 SU\" (@) ~ Fle)? (6.1)\n\nxeEX\n\nNow we must choose the form of our model, f(x;0). Suppose that we choose\na linear model, with 0 consisting of w and b. Our model is defined to be\n\nf(a;w,b) =a'w tb. (6.2)\n\nWe can minimize J(@) in closed form with respect to w and 6 using the normal\nequations.\n\nAfter solving the normal equations, we obtain w = 0 and b = 5- The linear\nmodel simply outputs 0.5 everywhere. Why does this happen? Figure 6.1 shows\nhow a linear model is not able to represent the XOR function. One way to solve\nthis problem is to use a model that learns a different feature space in which a\nlinear model is able to represent the solution.\n\nSpecifically, we will introduce a very simple feedforward network with one\nhidden layer containing two hidden units. See figure 6.2 for an illustration of\nthis model. This feedforward network has a vector of hidden units h that are\ncomputed by a function f Oa; W,,c). The values of these hidden units are then\nused as the input for a second layer. The second layer is the output layer of the\nnetwork. The output layer is still just a linear regression model, but now it is\napplied to h rather than to z. The network now contains two functions chained\ntogether: h = f(a; W,c) and y = f@)(h; w, b), with the complete model being\nf(x; W,c,w, b) = fO(FO (a).\n\nWhat function should f\u201c compute? Linear models have served us well so far,\nand it may be tempting to make f () be linear as well. Unfortunately, if f\u201c) were\nlinear, then the feedforward network as a whole would remain a linear function of\nits input. Ignoring the intercept terms for the moment, suppose f() (2) =W'a\nand f?)(h) =h'w. Then f (#2) = w'W'a. We could represent this function as\nf(a) =a! w! where w\u2019 = Ww.\n\nClearly, we must use a nonlinear function to describe the features. Most neural\n\nnetworks do so using an affine transformation controlled by learned parameters,\nfollowed by a fixed, nonlinear function called an activation function. We use that\nstrategy here, by defining h = g(W' a +c), where W provides the weights of a\nlinear transformation and c the biases. Previously, to describe a linear regression\n\n172\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nOriginal a space Learned h space\n\nxy hy\n\nFigure 6.1: Solving the XOR problem by learning a representation. The bold numbers\nprinted on the plot indicate the value that the learned function must output at each point.\n(Left)A linear model applied directly to the original input cannot implement the XOR\nfunction. When x, = 0, the model\u2019s output must increase as x2 increases. When 2, = 1,\nthe model\u2019s output must decrease as x2 increases. A linear model must apply a fixed\ncoefficient wz to x2. The linear model therefore cannot use the value of x1 to change\nthe coefficient on \u00ab2 and cannot solve this problem. (Right)In the transformed space\nrepresented by the features extracted by a neural network, a linear model can now solve\nthe problem. In our example solution, the two points that must have output 1 have been\ncollapsed into a single point in feature space. In other words, the nonlinear features have\nmapped both a = [1,0] ' and 2 = [0,1]' to a single point in feature space, h = [1,0] '.\nThe linear model can now describe the function as increasing in ), and decreasing in ho.\nIn this example, the motivation for learning the feature space is only to make the model\ncapacity greater so that it can fit the training set. In more realistic applications, learned\nrepresentations can also help the model to generalize.\n\n173\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nMc \u00a5\nFigure 6.2: An example of a feedforward network, drawn in two different styles. Specifically,\nthis is the feedforward network we use to solve the XOR example. It has a single hidden\nlayer containing two units. (Left)In this style, we draw every unit as a node in the graph.\nThis style is very explicit and unambiguous but for networks larger than this example\nit can consume too much space. (Right)In this style, we draw a node in the graph for\neach entire vector representing a layer\u2019s activations. This style is much more compact.\nSometimes we annotate the edges in this graph with the name of the parameters that\ndescribe the relationship between two layers. Here, we indicate that a matrix W describes\nthe mapping from x to h, and a vector w describes the mapping from h to y. We\n\ntypically omit the intercept parameters associated with each layer when labeling this kind\nof drawing.\n\nmodel, we used a vector of weights and a scalar bias parameter to describe an\naffine transformation from an input vector to an output scalar. Now, we describe\nan affine transformation from a vector x to a vector h, so an entire vector of bias\nparameters is needed. The activation function g is typically chosen to be a function\nthat is applied element-wise, with h; = g(a'W.;+c;). In modern neural networks,\nthe default recommendation is to use the rectified linear unit or ReLU (Jarrett\net al., 2009; Nair and Hinton, 2010; Glorot ef al., 201la) defined by the activation\nfunction g(z) = max{0, z} depicted in figure 6.3.\n\nWe can now specify our complete network as\nf(a;W,c,w,b) = w! max{0,Wla +c}+d. (6.3)\n\nWe can now specify a solution to the XOR problem. Let\n\nw=} ac (6.4)\n\nc-[| 9]. (6.5)\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nmax{0, 2}\n\n9(z)\n\nFigure 6.3: The rectified linear activation function. This activation function is the default\nactivation function recommended for use with most feedforward neural networks. Applying\nhis function to the output of a linear transformation yields a nonlinear transformation.\nHowever, the function remains very close to linear, in the sense that is a piecewise linear\nfunction with two linear pieces. Because rectified linear units are nearly linear, they\npreserve many of the properties that make linear models easy to optimize with gradient-\nbased methods. They also preserve many of the properties that make linear models\ngeneralize well. A common principle throughout computer science is that we can build\ncomplicated systems from minimal components. Much as a Turing machine\u2019s memory\n\nneeds only to be able to store 0 or 1 states, we can build a universal function approximator\nrom rectified linear functions.\n\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n1\nw= - | . (6.6)\nand b= 0.\n\nWe can now walk through the way that the model processes a batch of inputs.\nLet X be the design matrix containing all four points in the binary input space,\nwith one example per row:\n\n0 0\nfoo (6.7)\n\nron\n\nThe first step in the neural network is to multiply the input matrix by the first\nlayer\u2019s weight matrix:\n\n0 0\n1 1\nXW = 11 (6.8)\n2 2\nNext, we add the bias vector c, to obtain\n0 -1\n1 O\n1 0 (6.9)\n2 1\n\nIn this space, all of the examples lie along a line with slope 1. As we move along\nthis line, the output needs to begin at 0, then rise to 1, then drop back down to 0.\nA linear model cannot implement such a function. To finish computing the value\nof h for each example, we apply the rectified linear transformation:\n\nfi]\n1 0\n\n(6.10)\n[2 |\n\nThis transformation has changed the relationship between the examples. They no\nlonger lie on a single line. As shown in figure 6.1, they now lie in a space where a\nlinear model can solve the problem.\n\nWe finish by multiplying by the weight vector w:\n0\n(6.11)\n\n176\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nThe neural network has obtained the correct answer for every example in the batch.\n\nIn this example, we simply specified the solution, then showed that it obtained\nzero error. In a real situation, there might be billions of model parameters and\nbillions of training examples, so one cannot simply guess the solution as we did\nhere. Instead, a gradient-based optimization algorithm can find parameters that\nproduce very little error. The solution we described to the XOR problem is at a\nglobal minimum of the loss function, so gradient descent could converge to this\npoint. There are other equivalent solutions to the XOR problem that gradient\ndescent could also find. The convergence point of gradient descent depends on the\ninitial values of the parameters. In practice, gradient descent would usually not\nfind clean, easily understood, integer-valued solutions like the one we presented\nhere.\n\n6.2 Gradient-Based Learning\n\nDesigning and training a neural network is not much different from training any\nother machine learning model with gradient descent. In section 5.10, we described\nhow to build a machine learning algorithm by specifying an optimization procedure,\na cost function, and a model family.\n\nThe largest difference between the linear models we have seen so far and neural\nnetworks is that the nonlinearity of a neural network causes most interesting loss\nfunctions to become non-convex. This means that neural networks are usually\ntrained by using iterative, gradient-based optimizers that merely drive the cost\nfunction to a very low value, rather than the linear equation solvers used to train\nlinear regression models or the convex optimization algorithms with global conver-\ngence guarantees used to train logistic regression or SVMs. Convex optimization\nconverges starting from any initial parameters (in theory\u2014in practice it is very\nrobust but can encounter numerical problems). Stochastic gradient descent applied\nto non-convex loss functions has no such convergence guarantee, and is sensitive\nto the values of the initial parameters. For feedforward neural networks, it is\nimportant to initialize all weights to small random values. The biases may be\ninitialized to zero or to small positive values. The iterative gradient-based opti-\nmization algorithms used to train feedforward networks and almost all other deep\nmodels will be described in detail in chapter 8, with parameter initialization in\nparticular discussed in section 8.4. For the moment, it suffices to understand that\nthe training algorithm is almost always based on using the gradient to descend the\ncost function in one way or another. The specific algorithms are improvements\nand refinements on the ideas of gradient descent, introduced in section 4.3, and,\n\n177\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nmore specifically, are most often improvements of the stochastic gradient descent\nalgorithm, introduced in section 5.9.\n\nWe can of course, train models such as linear regression and support vector\nmachines with gradient descent too, and in fact this is common when the training\nset is extremely large. From this point of view, training a neural network is not\nmuch different from training any other model. Computing the gradient is slightly\nmore complicated for a neural network, but can still be done efficiently and exactly.\nSection 6.5 will describe how to obtain the gradient using the back-propagation\nalgorithm and modern generalizations of the back-propagation algorithm.\n\nAs with other machine learning models, to apply gradient-based learning we\nmust choose a cost function, and we must choose how to represent the output of\nthe model. We now revisit these design considerations with special emphasis on\nthe neural networks scenario.\n\n6.2.1 Cost Functions\n\nAn important aspect of the design of a deep neural network is the choice of the\ncost function. Fortunately, the cost functions for neural networks are more or less\nthe same as those for other parametric models, such as linear models.\n\nIn most cases, our parametric model defines a distribution p(y | #;@) and\nwe simply use the principle of maximum likelihood. This means we use the\ncross-entropy between the training data and the model\u2019s predictions as the cost\nfunction.\n\nSometimes, we take a simpler approach, where rather than predicting a complete\nprobability distribution over y, we merely predict some statistic of y conditioned\non a. Specialized loss functions allow us to train a predictor of these estimates.\n\nThe total cost function used to train a neural network will often combine one\nof the primary cost functions described here with a regularization term. We have\nalready seen some simple examples of regularization applied to linear models in\nsection 5.2.2. The weight decay approach used for linear models is also directly\napplicable to deep neural networks and is among the most popular regularization\nstrategies. More advanced regularization strategies for neural networks will be\ndescribed in chapter 7.\n\n6.2.1.1 Learning Conditional Distributions with Maximum Likelihood\n\nMost modern neural networks are trained using maximum likelihood. This means\nthat the cost function is simply the negative log-likelihood, equivalently described\n\n178\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nas the cross-entropy between the training data and the model distribution. This\ncost function is given by\n\nJ(@) = \u2014Ex,y~Baata log Pmodel (Y | x). (6.12)\n\nThe specific form of the cost function changes from model to model, depending\non the specific form of log pmodel. The expansion of the above equation typically\nyields some terms that do not depend on the model parameters and may be dis-\ncarded. For example, as we saw in section 5.5.1, if pmoda(y | e) = Ny; f(a; 9), 7),\nthen we recover the mean squared error cost,\n\nJ(8) = SE x.y~ius lly \u2014 f(a; 8)||? + const, (6.13)\n\nup to a scaling factor of 3 and a term that does not depend on @. The discarded\nconstant is based on the variance of the Gaussian distribution, which in this case\nwe chose not to parametrize. Previously, we saw that the equivalence between\nmaximum likelihood estimation with an output distribution and minimization of\nmean squared error holds for a linear model, but in fact, the equivalence holds\nregardless of the f(a; 6) used to predict the mean of the Gaussian.\n\nAn advantage of this approach of deriving the cost function from maximum\nlikelihood is that it removes the burden of designing cost functions for each model.\nSpecifying a model p(y | x) automatically determines a cost function log p(y | x).\n\nOne recurring theme throughout neural network design is that the gradient of\nthe cost function must be large and predictable enough to serve as a good guide\nfor the learning algorithm. Functions that saturate (become very flat) undermine\nthis objective because they make the gradient become very small. In many cases\nthis happens because the activation functions used to produce the output of the\nhidden units or the output units saturate. The negative log-likelihood helps to\navoid this problem for many models. Many output units involve an exp function\nthat can saturate when its argument is very negative. The log function in the\nnegative log-likelihood cost function undoes the exp of some output units. We will\ndiscuss the interaction between the cost function and the choice of output unit in\nsection 6.2.2.\n\nOne unusual property of the cross-entropy cost used to perform maximum\nlikelihood estimation is that it usually does not have a minimum value when applied\nto the models commonly used in practice. For discrete output variables, most\nmodels are parametrized in such a way that they cannot represent a probability\nof zero or one, but can come arbitrarily close to doing so. Logistic regression\nis an example of such a model. For real-valued output variables, if the model\n\n179\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\ncan control the density of the output distribution (for example, by learning the\nvariance parameter of a Gaussian output distribution) then it becomes possible\nto assign extremely high density to the correct training set outputs, resulting in\ncross-entropy approaching negative infinity. Regularization techniques described\nin chapter 7 provide several different ways of modifying the learning problem so\nthat the model cannot reap unlimited reward in this way.\n\n6.2.1.2 Learning Conditional Statistics\n\nInstead of learning a full probability distribution p(y | #; 6) we often want to learn\njust one conditional statistic of y given a.\n\nFor example, we may have a predictor f(x; 6) that we wish to predict the mean\nof y.\n\nIf we use a sufficiently powerful neural network, we can think of the neural\nnetwork as being able to represent any function f from a wide class of functions,\nwith this class being limited only by features such as continuity and boundedness\nrather than by having a specific parametric form. From this point of view, we\ncan view the cost function as being a functional rather than just a function. A\nfunctional is a mapping from functions to real numbers. We can thus think of\nlearning as choosing a function rather than merely choosing a set of parameters.\nWe can design our cost functional to have its minimum occur at some specific\nfunction we desire. For example, we can design the cost functional to have its\nminimum lie on the function that maps a to the expected value of y given a.\nSolving an optimization problem with respect to a function requires a mathematical\ntool called calculus of variations, described in section 19.4.2. It is not necessary\nto understand calculus of variations to understand the content of this chapter. At\nthe moment, it is only necessary to understand that calculus of variations may be\nused to derive the following two results.\n\nOur first result derived using calculus of variations is that solving the optimiza-\ntion problem\n\nf= arg min Sx.y~Paata IY \u2014 f(#)IP (6.14)\nyields\nf (@) = Eynpasta(yle) Yl (6.15)\n\nso long as this function lies within the class we optimize over. In other words, if we\ncould train on infinitely many samples from the true data generating distribution,\nminimizing the mean squared error cost function gives a function that predicts the\nmean of y for each value of x.\n\n180\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nDifferent cost functions give different statistics. A second result derived using\ncalculus of variations is that\n\nfr= arg min Excy~Pasia lly \u2014 F(a)|h (6.16)\n\nyields a function that predicts the median value of y for each x, so long as such a\nfunction may be described by the family of functions we optimize over. This cost\nfunction is commonly called mean absolute error.\n\nUnfortunately, mean squared error and mean absolute error often lead to poor\nresults when used with gradient-based optimization. Some output units that\nsaturate produce very small gradients when combined with these cost functions.\nThis is one reason that the cross-entropy cost function is more popular than mean\nsquared error or mean absolute error, even when it is not necessary to estimate an\nentire distribution p(y | x).\n\n6.2.2 Output Units\n\nThe choice of cost function is tightly coupled with the choice of output unit. Most\nof the time, we simply use the cross-entropy between the data distribution and the\nmodel distribution. The choice of how to represent the output then determines\nthe form of the cross-entropy function.\n\nAny kind of neural network unit that may be used as an output can also be\nused as a hidden unit. Here, we focus on the use of these units as outputs of the\nmodel, but in principle they can be used internally as well. We revisit these units\nwith additional detail about their use as hidden units in section 6.3.\n\nThroughout this section, we suppose that the feedforward network provides a\nset of hidden features defined by h = f(a#;0@). The role of the output layer is then\nto provide some additional transformation from the features to complete the task\nthat the network must perform.\n\n6.2.2.1 Linear Units for Gaussian Output Distributions\n\nOne simple kind of output unit is an output unit based on an affine transformation\nwith no nonlinearity. These are often just called linear units.\n\nGiven features h, a layer of linear output units produces a vector y = W'h+b.\n\nLinear output layers are often used to produce the mean of a conditional\nGaussian distribution:\n\nply | 2) =N(y;\u00a5, I). (6.17)\n181\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nMaximizing the log-likelihood is then equivalent to minimizing the mean squared\nerror.\n\nThe maximum likelihood framework makes it straightforward to learn the\ncovariance of the Gaussian too, or to make the covariance of the Gaussian be a\nfunction of the input. However, the covariance must be constrained to be a positive\ndefinite matrix for all inputs. It is difficult to satisfy such constraints with a linear\noutput layer, so typically other output units are used to parametrize the covariance.\nApproaches to modeling the covariance are described shortly, in section 6.2.2.4.\n\nBecause linear units do not saturate, they pose little difficulty for gradient-\nbased optimization algorithms and may be used with a wide variety of optimization\nalgorithms.\n\n6.2.2.2 Sigmoid Units for Bernoulli Output Distributions\n\nMany tasks require predicting the value of a binary variable y. Classification\nproblems with two classes can be cast in this form.\n\nThe maximum-likelihood approach is to define a Bernoulli distribution over y\nconditioned on a.\n\nA Bernoulli distribution is defined by just a single number. The neural net\nneeds to predict only P(y = 1| x). For this number to be a valid probability, it\nmust lie in the interval [0, 1].\n\nSatisfying this constraint requires some careful design effort. Suppose we were\nto use a linear unit, and threshold its value to obtain a valid probability:\n\nP(y=1|#) = max {0,min {1,w'h +o}. (6.18)\n\nThis would indeed define a valid conditional distribution, but we would not be able\nto train it very effectively with gradient descent. Any time that w'h +6 strayed\noutside the unit interval, the gradient of the output of the model with respect to\nits parameters would be 0. A gradient of 0 is typically problematic because the\nlearning algorithm no longer has a guide for how to improve the corresponding\nparameters.\n\nInstead, it is better to use a different approach that ensures there is always a\nstrong gradient whenever the model has the wrong answer. This approach is based\non using sigmoid output units combined with maximum likelihood.\n\nA sigmoid output unit is defined by\n\nj=o (wih + b) (6.19)\n182\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nwhere g is the logistic sigmoid function described in section 3.10.\n\nWe can think of the sigmoid output unit as having two components. First, it\nuses a linear layer to compute z = w'h +b. Next, it uses the sigmoid activation\nfunction to convert z into a probability.\n\nWe omit the dependence on a for the moment to discuss how to define a\nprobability distribution over y using the value z. The sigmoid can be motivated\nby constructing an unnormalized probability distribution Ply), which does not\nsum to 1. We can then divide by an appropriate constant to obtain a valid\nprobability distribution. If we begin with the assumption that the unnormalized log\nprobabilities are linear in y and z, we can exponentiate to obtain the unnormalized\nprobabilities. We then normalize to see that this yields a Bernoulli distribution\ncontrolled by a sigmoidal transformation of 2:\n\nlog P(y) = yz (6.20)\nP(y) = exp(yz) (6.21)\n\n_ _ exp(yz)\nPly) = EF _, exp) (6.22)\nPly) =\u00a2 ((2y\u20141)z). (6.23)\n\nProbability distributions based on exponentiation and normalization are common\nthroughout the statistical modeling literature. The z variable defining such a\ndistribution over binary variables is called a logit.\n\nThis approach to predicting the probabilities in log-space is natural to use\nwith maximum likelihood learning. Because the cost function used with maximum\nlikelihood is \u2014 log P(y | x), the log in the cost function undoes the exp of the\nsigmoid. Without this effect, the saturation of the sigmoid could prevent gradient-\nbased learning from making good progress. The loss function for maximum\nlikelihood learning of a Bernoulli parametrized by a sigmoid is\n\nJ(0) = \u2014log P(y| a) (6.24)\n= \u2014 loga ((2y \u2014 1)z) (6.25)\n=\u00a2((1\u2014 2y)z). (6.26)\n\nThis derivation makes use of some properties from section 3.10. By rewriting\nthe loss in terms of the softplus function, we can see that it saturates only when\n(1 \u2014 2y)z is very negative. Saturation thus occurs only when the model already\nhas the right answer\u2014when y = 1 and z is very positive, or y= 0 and z is very\nnegative. When z has the wrong sign, the argument to the softplus function,\n\n183\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n(1 \u20142y)z, may be simplified to |z|. As |z| becomes large while z has the wrong sign,\nthe softplus function asymptotes toward simply returning its argument |z|. The\nderivative with respect to z asymptotes to sign(z), so, in the limit of extremely\nincorrect z, the softplus function does not shrink the gradient at all. This property\nis very useful because it means that gradient-based learning can act to quickly\ncorrect a mistaken z.\n\nWhen we use other loss functions, such as mean squared error, the loss can\nsaturate anytime o(z) saturates. The sigmoid activation function saturates to 0\nwhen z becomes very negative and saturates to 1 when z becomes very positive.\nThe gradient can shrink too small to be useful for learning whenever this happens,\nwhether the model has the correct answer or the incorrect answer. For this reason,\nmaximum likelihood is almost always the preferred approach to training sigmoid\noutput units.\n\nAnalytically, the logarithm of the sigmoid is always defined and finite, because\nthe sigmoid returns values restricted to the open interval (0,1), rather than using\nthe entire closed interval of valid probabilities [0,1]. In software implementations,\nto avoid numerical problems, it is best to write the negative log-likelihood as a\nfunction of z, rather than as a function of g = o(z). If the sigmoid function\nunderflows to zero, then taking the logarithm of g yields negative infinity.\n\n6.2.2.3 Softmax Units for Multinoulli Output Distributions\n\nAny time we wish to represent a probability distribution over a discrete variable\nwith n possible values, we may use the softmax function. This can be seen as a\ngeneralization of the sigmoid function which was used to represent a probability\ndistribution over a binary variable.\n\nSoftmax functions are most often used as the output of a classifier, to represent\nthe probability distribution over n different classes. More rarely, softmax functions\ncan be used inside the model itself, if we wish the model to choose between one of\nn different options for some internal variable.\n\nIn the case of binary variables, we wished to produce a single number\ng\u00a7=P(y=1|2). (6.27)\n\nBecause this number needed to lie between 0 and 1, and because we wanted the\nlogarithm of the number to be well-behaved for gradient-based optimization of\nthe log-likelihood, we chose to instead predict a number z = log Ply =1 | 2).\nExponentiating and normalizing gave us a Bernoulli distribution controlled by the\nsigmoid function.\n\n184\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nTo generalize to the case of a discrete variable with n values, we now need\nto produce a vector g, with y; = P(y =i |x). We require not only that each\nelement of \u00a5; be between 0 and 1, but also that the entire vector sums to 1 so that\nit represents a valid probability distribution. The same approach that worked for\nthe Bernoulli distribution generalizes to the multinoulli distribution. First, a linear\nlayer predicts unnormalized log probabilities:\n\nz=W'h+b, (6.28)\n\nwhere z; = log P(y = i | x). The softmax function can then exponentiate and\nnormalize z to obtain the desired y. Formally, the softmax function is given by\n\nexp(i)\n\ndoy exp(4) 629)\n\nsoftmax(z); =\n\nAs with the logistic sigmoid, the use of the exp function works very well when\ntraining the softmax to output a target value y using maximum log-likelihood. In\nthis case, we wish to maximize log P(y = i;z) = logsoftmax(z);. Defining the\nsoftmax in terms of exp is natural because the log in the log-likelihood can undo\nthe exp of the softmax:\n\nlog softmax(z); = 4 \u2014 log > exp(z;). (6.30)\nj\n\nThe first term of equation 6.30 shows that the input z; always has a direct\ncontribution to the cost function. Because this term cannot saturate, we know\nthat learning can proceed, even if the contribution of z; to the second term of\nequation 6.30 becomes very small. When maximizing the log-likelihood, the first\nterm encourages z; to be pushed up, while the second term encourages all of z to be\npushed down. To gain some intuition for the second term, log )> j exp(z;), observe\nthat this term can be roughly approximated by max; z;. This approximation is\nbased on the idea that exp (z,) is insignificant for any z;, that is noticeably less than\nmax; z;. The intuition we can gain from this approximation is that the negative\nlog-likelihood cost function always strongly penalizes the most active incorrect\nprediction. If the correct answer already has the largest input to the softmax, then\nthe \u2014z; term and the log}? ,exp(zj) \u00a9 max; zj = 2% terms will roughly cancel.\nThis example will then contribute little to the overall training cost, which will be\ndominated by other examples that are not yet correctly classified.\n\nSo far we have discussed only a single example. Overall, unregularized maximum\nlikelihood will drive the model to learn parameters that drive the softmax to predict\n\n185\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nthe fraction of counts of each outcome observed in the training set:\n\nm\njt LOzie Dan\nj=l tae O=x\n\nBecause maximum likelihood is a consistent estimator, this is guaranteed to happen\nso long as the model family is capable of representing the training distribution. In\npractice, limited model capacity and imperfect optimization will mean that the\nmodel is only able to approximate these fractions.\n\n(6.31)\n\nsoftmax(z(a; 0)); &\n\nMany objective functions other than the log-likelihood do not work as well\nwith the softmax function. Specifically, objective functions that do not use a log to\nundo the exp of the softmax fail to learn when the argument to the exp becomes\nvery negative, causing the gradient to vanish. In particular, squared error is a\npoor loss function for softmax units, and can fail to train the model to change its\noutput, even when the model makes highly confident incorrect predictions (Bridle,\n1990). To understand why these other loss functions can fail, we need to examine\nthe softmax function itself.\n\nLike the sigmoid, the softmax activation can saturate. The sigmoid function has\na single output that saturates when its input is extremely negative or extremely\npositive. In the case of the softmax, there are multiple output values. These\noutput values can saturate when the differences between input values become\nextreme. When the softmax saturates, many cost functions based on the softmax\nalso saturate, unless they are able to invert the saturating activating function.\n\nTo see that the softmax function responds to the difference between its inputs,\nobserve that the softmax output is invariant to adding the same scalar to all of its\ninputs:\n\nsoftmax(z) = softmax(z + c). (6.32)\n\nUsing this property, we can derive a numerically stable variant of the softmax:\nsoftmax(z) = softmax(z \u2014 max x). (6.33)\na\n\nThe reformulated version allows us to evaluate softmax with only small numerical\nerrors even when z contains extremely large or extremely negative numbers. Ex-\namining the numerically stable variant, we see that the softmax function is driven\nby the amount that its arguments deviate from max; 2;.\n\nAn output softmax(z); saturates to 1 when the corresponding input is maximal\n(zi = maxjz;) and y% is much greater than all of the other inputs. The output\nsoftmax(z); can also saturate to 0 when % is not maximal and the maximum is\nmuch greater. This is a generalization of the way that sigmoid units saturate, and\n\n186\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\ncan cause similar difficulties for learning if the loss function is not designed to\ncompensate for it.\n\nThe argument z to the softmax function can be produced in two different ways.\nThe most common is simply to have an earlier layer of the neural network output\nevery element of z, as described above using the linear layer z = W 'h+b. While\nstraightforward, this approach actually overparametrizes the distribution. The\nconstraint that the n outputs must sum to 1 means that only n \u20141 parameters are\nnecessary; the probability of the n-th value may be obtained by subtracting the\nfirst n\u2014 1 probabilities from 1. We can thus impose a requirement that one element\nof z be fixed. For example, we can require that z, = 0. Indeed, this is exactly\nwhat the sigmoid unit does. Defining P(y=1 | \u00ab) = o(z) is equivalent to defining\nP(y=1| x) = softmax(z): with a two-dimensional z and z = 0. Both the n\u20141\nargument and the n argument approaches to the softmax can describe the same\nset of probability distributions, but have different learning dynamics. In practice,\nthere is rarely much difference between using the overparametrized version or the\nrestricted version, and it is simpler to implement the overparametrized version.\n\nFrom a neuroscientific point of view, it is interesting to think of the softmax as\na way to create a form of competition between the units that participate in it: the\nsoftmax outputs always sum to | so an increase in the value of one unit necessarily\ncorresponds to a decrease in the value of others. This is analogous to the lateral\ninhibition that is believed to exist between nearby neurons in the cortex. At the\nextreme (when the difference between the maximal a; and the others is large in\nmagnitude) it becomes a form of winner-take-all (one of the outputs is nearly 1\nand the others are nearly 0).\n\nThe name \u201csoftmax\u201d can be somewhat confusing. The function is more closely\nrelated to the arg max function than the max function. The term \u201csoft\u201d derives\nfrom the fact that the softmax function is continuous and differentiable. The\narg max function, with its result represented as a one-hot vector, is not continuous\nor differentiable. The softmax function thus provides a \u201csoftened\u201d version of the\narg max. The corresponding soft version of the maximum function is softmax(z) ' z.\nIt would perhaps be better to call the softmax function \u201csoftargmax,\u201d but the\ncurrent name is an entrenched convention.\n\n6.2.2.4 Other Output Types\n\nThe linear, sigmoid, and softmax output units described above are the most\ncommon. Neural networks can generalize to almost any kind of output layer that\nwe wish. The principle of maximum likelihood provides a guide for how to design\n\n187\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\na good cost function for nearly any kind of output layer.\n\nIn general, if we define a conditional distribution p(y | x; 0), the principle of\nmaximum likelihood suggests we use \u2014 log p(y | #;@) as our cost function.\n\nIn general, we can think of the neural network as representing a function f(a;6).\nThe outputs of this function are not direct predictions of the value y. Instead,\nf (@;0) = w provides the parameters for a distribution over y. Our loss function\ncan then be interpreted as \u2014 log p(y; w(a)).\n\nFor example, we may wish to learn the variance of a conditional Gaussian for y,\ngiven x. In the simple case, where the variance o? is a constant, there is a closed\nform expression because the maximum likelihood estimator of variance is simply the\nempirical mean of the squared difference between observations y and their expected\nvalue. A computationally more expensive approach that does not require writing\nspecial-case code is to simply include the variance as one of the properties of the\ndistribution p(y | z) that is controlled by w = f(a; 0). The negative log-likelihood\n\u2014 log p(y;w(ax)) will then provide a cost function with the appropriate terms\nnecessary to make our optimization procedure incrementally learn the variance. In\nthe simple case where the standard deviation does not depend on the input, we\ncan make a new parameter in the network that is copied directly into w. This new\nparameter might be o itself or could be a parameter y representing o? or it could\nbe a parameter 6 representing >, depending on how we choose to parametrize\nthe distribution. We may wish our model to predict a different amount of variance\nin y for different values of x. This is called a heteroscedastic model. In the\nheteroscedastic case, we simply make the specification of the variance be one of\nthe values output by f(x;@). A typical way to do this is to formulate the Gaussian\ndistribution using precision, rather than variance, as described in equation 3.22.\nIn the multivariate case it is most common to use a diagonal precision matrix\n\ndiag(@). (6.34)\n\nThis formulation works well with gradient descent because the formula for the\nlog-likelihood of the Gaussian distribution parametrized by @ involves only mul-\ntiplication by 6; and addition of log G@;. The gradient of multiplication, addition,\nand logarithm operations is well-behaved. By comparison, if we parametrized the\noutput in terms of variance, we would need to use division. The division function\nbecomes arbitrarily steep near zero. While large gradients can help learning,\narbitrarily large gradients usually result in instability. If we parametrized the\noutput in terms of standard deviation, the log-likelihood would still involve division,\nand would also involve squaring. The gradient through the squaring operation\ncan vanish near zero, making it difficult to learn parameters that are squared.\n\n188\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nRegardless of whether we use standard deviation, variance, or precision, we must\nensure that the covariance matrix of the Gaussian is positive definite. Because\nthe eigenvalues of the precision matrix are the reciprocals of the eigenvalues of\nthe covariance matrix, this is equivalent to ensuring that the precision matrix is\npositive definite. If we use a diagonal matrix, or a scalar times the diagonal matrix,\nthen the only condition we need to enforce on the output of the model is positivity.\nIf we suppose that a is the raw activation of the model used to determine the\ndiagonal precision, we can use the softplus function to obtain a positive precision\nvector: 3 = \u00a2(a). This same strategy applies equally if using variance or standard\ndeviation rather than precision or if using a scalar times identity rather than\ndiagonal matrix.\n\nIt is rare to learn a covariance or precision matrix with richer structure than\ndiagonal. If the covariance is full and conditional, then a parametrization must\nbe chosen that guarantees positive-definiteness of the predicted covariance matrix.\nThis can be achieved by writing =(a#) = B(a)B' (a), where B is an unconstrained\nsquare matrix. One practical issue if the matrix is full rank is that computing the\nlikelihood is expensive, with a d x d matrix requiring O(d\u00b0 ) computation for the\ndeterminant and inverse of \u00a9(a) (or equivalently, and more commonly done, its\neigendecomposition or that of B(a)).\n\nWe often want to perform multimodal regression, that is, to predict real values\nthat come from a conditional distribution p(y | x) that can have several different\npeaks in y space for the same value of w. In this case, a Gaussian mixture is\na natural representation for the output (Jacobs et al., 1991; Bishop, 1994).\nNeural networks with Gaussian mixtures as their output are often called mixture\ndensity networks. A Gaussian mixture output with n components is defined by\nthe conditional probability distribution\n\nn\np(y | @) = $7 ple =i] @)N (ys w(x), 20 (a). (6.35)\ni=1\nThe neural network must have three outputs: a vector defining p(c =i |x), a\nmatrix providing yw\u201c (a) for all i, and a tensor providing \u00a9\u201c(\u00ab) for all i. These\noutputs must satisfy different constraints:\n\n1. Mixture components p(c = i | x): these form a multinoulli distribution\nover the n different components associated with latent variable! c, and can\n\nWe consider c to be latent because we do not observe it in the data: given input x and target\ny, it is not possible to know with certainty which Gaussian component was responsible for y, but\nwe can imagine that y was generated by picking one of them, and make that unobserved choice a\nrandom variable.\n\n189\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\ntypically be obtained by a softmax over an n-dimensional vector, to guarantee\nthat these outputs are positive and sum to 1.\n\n2. Means p)(a): these indicate the center or mean associated with the i-th\nGaussian component, and are unconstrained (typically with no nonlinearity\nat all for these output units). If y is a dvector, then the network must output\nann x d matrix containing all n of these d-dimensional vectors. Learning\nthese means with maximum likelihood is slightly more complicated than\nlearning the means of a distribution with only one output mode. We only\nwant to update the mean for the component that actually produced the\nobservation. In practice, we do not know which component produced each\nobservation. The expression for the negative log-likelihood naturally weights\neach example\u2019s contribution to the loss for each component by the probability\nthat the component produced the example.\n\n3. Covariances SO(ax): these specify the covariance matrix for each component\ni. As when learning a single Gaussian component, we typically use a diagonal\nmatrix to avoid needing to compute determinants. As with learning the means\nof the mixture, maximum likelihood is complicated by needing to assign\npartial responsibility for each point to each mixture component. Gradient\ndescent will automatically follow the correct process if given the correct\nspecification of the negative log-likelihood under the mixture model.\n\nIt has been reported that gradient-based optimization of conditional Gaussian\nmixtures (on the output of neural networks) can be unreliable, in part because one\ngets divisions (by the variance) which can be numerically unstable (when some\nvariance gets to be small for a particular example, yielding very large gradients).\nOne solution is to clip gradients (see section 10.11.1) while another is to scale\nthe gradients heuristically (Murray and Larochelle, 2014).\n\nGaussian mixture outputs are particularly effective in generative models of\nspeech (Schuster, 1999) or movements of physical objects (Graves, 2013). The\nmixture density strategy gives a way for the network to represent multiple output\nmodes and to control the variance of its output, which is crucial for obtaining\na high degree of quality in these real-valued domains. An example of a mixture\ndensity network is shown in figure 6.4.\n\nIn general, we may wish to continue to model larger vectors y containing more\nvariables, and to impose richer and richer structures on these output variables. For\nexample, we may wish for our neural network to output a sequence of characters\nthat forms a sentence. In these cases, we may continue to use the principle\nof maximum likelihood applied to our model p(y; w(x)), but the model we use\n\n190\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nFigure 6.4: Samples drawn from a neural network with a mixture density output layer.\nThe input x is sampled from a uniform distribution and the output y is sampled from\nPmodel(y | z). The neural network is able to learn nonlinear mappings from the input to\nthe parameters of the output distribution. These parameters include the probabilities\ngoverning which of three mixture components will generate the output as well as the\nparameters for each mixture component. Each mixture component is Gaussian with\npredicted mean and variance. All of these aspects of the output distribution are able to\nvary with respect to the input x, and to do so in nonlinear ways.\n\nto describe y becomes complex enough to be beyond the scope of this chapter.\nChapter 10 describes how to use recurrent neural networks to define such models\nover sequences, and part III describes advanced techniques for modeling arbitrary\nprobability distributions.\n\n6.3 Hidden Units\n\nSo far we have focused our discussion on design choices for neural networks that\nare common to most parametric machine learning models trained with gradient-\nbased optimization. Now we turn to an issue that is unique to feedforward neural\nnetworks: how to choose the type of hidden unit to use in the hidden layers of the\nmodel.\n\nThe design of hidden units is an extremely active area of research and does not\nyet have many definitive guiding theoretical principles.\n\nRectified linear units are an excellent default choice of hidden unit. Many other\ntypes of hidden units are available. It can be difficult to determine when to use\nwhich kind (though rectified linear units are usually an acceptable choice). We\n\n191\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\ndescribe here some of the basic intuitions motivating each type of hidden units.\nThese intuitions can help decide when to try out each of these units. It is usually\nimpossible to predict in advance which will work best. The design process consists\nof trial and error, intuiting that a kind of hidden unit may work well, and then\ntraining a network with that kind of hidden unit and evaluating its performance\non a validation set.\n\nSome of the hidden units included in this list are not actually differentiable at\nall input points. For example, the rectified linear function g(z) = max{0, z} is not\ndifferentiable at z = 0. This may seem like it invalidates g for use with a gradient-\nbased learning algorithm. In practice, gradient descent still performs well enough\nfor these models to be used for machine learning tasks. This is in part because\nneural network training algorithms do not usually arrive at a local minimum of\nthe cost function, but instead merely reduce its value significantly, as shown in\nfigure 4.3. These ideas will be described further in chapter 8. Because we do not\nexpect training to actually reach a point where the gradient is 0, it is acceptable\nfor the minima of the cost function to correspond to points with undefined gradient.\nHidden units that are not differentiable are usually non-differentiable at only a\nsmall number of points. In general, a function g(z) has a left derivative defined\nby the slope of the function immediately to the left of z and a right derivative\ndefined by the slope of the function immediately to the right of z. A function\nis differentiable at z only if both the left derivative and the right derivative are\ndefined and equal to each other. The functions used in the context of neural\nnetworks usually have defined left derivatives and defined right derivatives. In the\ncase of g(z) = max{0, z}, the left derivative at z = 0 is 0 and the right derivative\nis 1. Software implementations of neural network training usually return one of\nthe one-sided derivatives rather than reporting that the derivative is undefined or\nraising an error. This may be heuristically justified by observing that gradient-\nbased optimization on a digital computer is subject to numerical error anyway.\nWhen a function is asked to evaluate g(0), it is very unlikely that the underlying\nvalue truly was 0. Instead, it was likely to be some small value \u00a2\u20ac that was rounded\nto 0. In some contexts, more theoretically pleasing justifications are available, but\nthese usually do not apply to neural network training. The important point is tha\nin practice one can safely disregard the non-differentiability of the hidden uni\nactivation functions described below.\n\nUnless indicated otherwise, most hidden units can be described as accepting\na vector of inputs 2, computing an affine transformation z = W'a+ b, and\nthen applying an element-wise nonlinear function g(z). Most hidden units are\ndistinguished from each other only by the choice of the form of the activation\nfunction g(z).\n\n192\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n6.3.1 Rectified Linear Units and Their Generalizations\n\nRectified linear units use the activation function g(z) = max{0, z}.\n\nRectified linear units are easy to optimize because they are so similar to linear\nunits. The only difference between a linear unit and a rectified linear unit is\nthat a rectified linear unit outputs zero across half its domain. This makes the\nderivatives through a rectified linear unit remain large whenever the unit is active.\nThe gradients are not only large but also consistent. The second derivative of the\nrectifying operation is 0 almost everywhere, and the derivative of the rectifying\noperation is 1 everywhere that the unit is active. This means that the gradient\ndirection is far more useful for learning than it would be with activation functions\nthat introduce second-order effects.\n\nRectified linear units are typically used on top of an affine transformation:\nh=g(W'ax +b). (6.36)\n\nWhen initializing the parameters of the affine transformation, it can be a good\npractice to set all elements of b to a small, positive value, such as 0.1. This makes\nit very likely that the rectified linear units will be initially active for most inputs\nin the training set and allow the derivatives to pass through.\n\nSeveral generalizations of rectified linear units exist. Most of these general-\nizations perform comparably to rectified linear units and occasionally perform\nbetter.\n\nOne drawback to rectified linear units is that they cannot learn via gradient-\nbased methods on examples for which their activation is zero. A variety of\ngeneralizations of rectified linear units guarantee that they receive gradient every-\nwhere.\n\nThree generalizations of rectified linear units are based on using a non-zero\nslope a; when % <0: hi = g(z, a); = max(0, %) + aj min(0, 2). Absolute value\nrectification fixes a; = \u20141 to obtain g(z) = |z|. It is used for object recognition\nfrom images (Jarrett et al., 2009), where it makes sense to seek features that are\ninvariant under a polarity reversal of the input illumination. Other generalizations\nof rectified linear units are more broadly applicable. A leaky ReLU (Maas ec? ai.,\n2013) fixes a; to a small value like 0.01 while a parametric ReLU or PReLU\ntreats a; as a learnable parameter (He ei al., 2015).\n\nMaxout units (Goodfellow ef al., 2013a) generalize rectified linear units\nfurther. Instead of applying an element-wise function g(z), maxout units divide z\ninto groups of k values. Each maxout unit then outputs the maximum element of\n\n193\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\none of these groups:\ng(2)i = max % (6.37)\njeG@\nwhere G\u201d is the set of indices into the inputs for group i, { (i \u2014 1)k+1,..., ik}.\nThis provides a way of learning a piecewise linear function that responds to multiple\ndirections in the input a space.\n\nA maxout unit can learn a piecewise linear, convex function with up to k pieces.\nMaxout units can thus be seen as learning the activation function itself rather\nthan just the relationship between units. With large enough k, a maxout unit can\nlearn to approximate any convex function with arbitrary fidelity. In particular,\na maxout layer with two pieces can learn to implement the same function of the\ninput x as a traditional layer using the rectified linear activation function, absolute\nvalue rectification function, or the leaky or parametric ReLU, or can learn to\nimplement a totally different function altogether. The maxout layer will of course\nbe parametrized differently from any of these other layer types, so the learning\ndynamics will be different even in the cases where maxout learns to implement the\nsame function of # as one of the other layer types.\n\nEach maxout unit is now parametrized by k weight vectors instead of just one,\nso maxout units typically need more regularization than rectified linear units. They\ncan work well without regularization if the training set is large and the number of\npieces per unit is kept low (Cai et al., 2013).\n\nMaxout units have a few other benefits. In some cases, one can gain some sta-\ntistical and computational advantages by requiring fewer parameters. Specifically,\nif the features captured by n different linear filters can be summarized without\nlosing information by taking the max over each group of k features, then the next\nlayer can get by with k times fewer weights.\n\nBecause each unit is driven by multiple filters, maxout units have some redun-\ndancy that helps them to resist a phenomenon called catastrophic forgetting\nin which neural networks forget how to perform tasks that they were trained on in\nthe past (Goodfellow et al., 2014a).\n\nRectified linear units and all of these generalizations of them are based on the\nprinciple that models are easier to optimize if their behavior is closer to linear.\nThis same general principle of using linear behavior to obtain easier optimization\nalso applies in other contexts besides deep linear networks. Recurrent networks can\nlearn from sequences and produce a sequence of states and outputs. When training\nthem, one needs to propagate information through several time steps, which is much\neasier when some linear computations (with some directional derivatives being of\nmagnitude near 1) are involved. One of the best-performing recurrent network\n\n194\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\narchitectures, the LSTM, propagates information through time via summation\u2014a\nparticular straightforward kind of such linear activation. This is discussed further\nin section 10.10.\n\n6.3.2 Logistic Sigmoid and Hyperbolic Tangent\n\nPrior to the introduction of rectified linear units, most neural networks used the\nlogistic sigmoid activation function\n\n(2) = o(2) (6.38)\nor the hyperbolic tangent activation function\ng(z) = tanh(z). (6.39)\n\nThese activation functions are closely related because tanh(z) = 20(2z) \u2014 1.\n\nWe have already seen sigmoid units as output units, used to predict the\nprobability that a binary variable is 1. Unlike piecewise linear units, sigmoidal\nunits saturate across most of their domain\u2014they saturate to a high value when\nz is very positive, saturate to a low value when z is very negative, and are only\nstrongly sensitive to their input when z is near 0. The widespread saturation of\nsigmoidal units can make gradient-based learning very difficult. For this reason,\ntheir use as hidden units in feedforward networks is now discouraged. Their use\nas output units is compatible with the use of gradient-based learning when an\nappropriate cost function can undo the saturation of the sigmoid in the output\nlayer.\n\nWhen a sigmoidal activation function must be used, the hyperbolic tangent\nactivation function typically performs better than the logistic sigmoid. It resembles\nthe identity function more closely, in the sense that tanh(0) = 0 while o(0) = 3.\nBecause tanh is similar to the identity function near 0, training a deep neural\nnetwork \u00a2 = w! tanh(U' tanh(V'\u00ab)) resembles training a linear model g =\nw'U'V'z so long as the activations of the network can be kept small. This\n\nmakes training the tanh network easier.\n\nSigmoidal activation functions are more common in settings other than feed-\nforward networks. Recurrent networks, many probabilistic models, and some\nautoencoders have additional requirements that rule out the use of piecewise\nlinear activation functions and make sigmoidal units more appealing despite the\ndrawbacks of saturation.\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n6.3.3. Other Hidden Units\n\nMany other types of hidden units are possible, but are used less frequently.\n\nIn general, a wide variety of differentiable functions perform perfectly well.\nMany unpublished activation functions perform just as well as the popular ones.\nTo provide a concrete example, the authors tested a feedforward network using\nh =cos(Wz\u00ab + b) on the MNIST dataset and obtained an error rate of less than\n1%, which is competitive with results obtained using more conventional activation\nfunctions. During research and development of new techniques, it is common\nto test many different activation functions and find that several variations on\nstandard practice perform comparably. This means that usually new hidden unit\ntypes are published only if they are clearly demonstrated to provide a significant\nimprovement. New hidden unit types that perform roughly comparably to known\ntypes are so common as to be uninteresting.\n\nIt would be impractical to list all of the hidden unit types that have appeared\nin the literature. We highlight a few especially useful and distinctive ones.\n\nOne possibility is to not have an activation g(z) at all. One can also think of\nthis as using the identity function as the activation function. We have already\nseen that a linear unit can be useful as the output of a neural network. It may\nalso be used as a hidden unit. If every layer of the neural network consists of only\nlinear transformations, then the network as a whole will be linear. However, it\nis acceptable for some layers of the neural network to be purely linear. Consider\na neural network layer with n inputs and p outputs, h = g(W'a +b). We may\nreplace this with two layers, with one layer using weight matrix U and the other\nusing weight matrix V. If the first layer has no activation function, then we have\nessentially factored the weight matrix of the original layer based on W. The\nfactored approach is to compute h =g(V'U' & +b). If U produces q outputs,\nthen U and V together contain only (n + p)q parameters, while W contains np\nparameters. For small q, this can be a considerable saving in parameters. It\ncomes at the cost of constraining the linear transformation to be low-rank, but\nthese low-rank relationships are often sufficient. Linear hidden units thus offer an\neffective way of reducing the number of parameters in a network.\n\nSoftmax units are another kind of unit that is usually used as an output (as\ndescribed in section 6.2.2.3) but may sometimes be used as a hidden unit. Softmax\nunits naturally represent a probability distribution over a discrete variable with k\npossible values, so they may be used as a kind of switch. These kinds of hidden\nunits are usually only used in more advanced architectures that explicitly learn to\nmanipulate memory, described in section 10.12.\n\n196\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nA few other reasonably common hidden unit types include:\n\ne Radial basis function or RBF unit: hj exp ( = |W. 2\\|?). This\nfunction becomes more active as z approaches a template W.;. Because it\nsaturates to 0 for most x, it can be difficult to optimize.\n\nSoftplus: g(a) = \u00a2(a) = log(1+e*). This is a smooth version of the rectifier,\nintroduced by Dugas et al. (2001) for function approximation and by Nair\nand Hinton (2010) for the conditional distributions of undirected probabilistic\nmodels. Glorot ef al. (2011a) compared the softplus and rectifier and found\nbetter results with the latter. The use of the softplus is generally discouraged.\nThe softplus demonstrates that the performance of hidden unit types can\nbe very counterintuitive\u2014one might expect it to have an advantage over\nthe rectifier due to being differentiable everywhere or due to saturating less\ncompletely, but empirically it does not.\n\ne Hard tanh: this is shaped similarly to the tanh and the rectifier but unlike\nthe latter, it is bounded, g(a) = max(\u20141,min(1,q)). It was introduced\nby Collobert (2004).\n\nHidden unit design remains an active area of research and many useful hidden\nunit types remain to be discovered.\n\n6.4 Architecture Design\n\nAnother key design consideration for neural networks is determining the architecture.\nThe word architecture refers to the overall structure of the network: how many\nunits it should have and how these units should be connected to each other.\n\nMost neural networks are organized into groups of units called layers. Most\nneural network architectures arrange these layers in a chain structure, with each\nlayer being a function of the layer that preceded it. In this structure, the first layer\nis given by\n\nAY = g (Wa 4 Bi) (6.40)\nthe second layer is given by\nn\u00ae = g\u00ae (wer Ao + B\u201d)) (6.41)\nand so on.\n\n197\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nIn these chain-based architectures, the main architectural considerations are\nto choose the depth of the network and the width of each layer. As we will see,\na network with even one hidden layer is sufficient to fit the training set. Deeper\nnetworks often are able to use far fewer units per layer and far fewer parameters\nand often generalize to the test set, but are also often harder to optimize. The\nideal network architecture for a task must be found via experimentation guided by\nmonitoring the validation set error.\n\n6.4.1 Universal Approximation Properties and Depth\n\nA linear model, mapping from features to outputs via matrix multiplication, can\nby definition represent only linear functions. It has the advantage of being easy to\ntrain because many loss functions result in convex optimization problems when\napplied to linear models. Unfortunately, we often want to learn nonlinear functions.\n\nAt first glance, we might presume that learning a nonlinear function requires\ndesigning a specialized model family for the kind of nonlinearity we want to learn.\nFortunately, feedforward networks with hidden layers provide a universal approxi-\nmation framework. Specifically, the universal approximation theorem (Hornik\net al., 1989; Cybenko, 1989) states that a feedforward network with a linear output\nlayer and at least one hidden layer with any \u201csquashing\u201d activation function (such\nas the logistic sigmoid activation function) can approximate any Borel measurable\nfunction from one finite-dimensional space to another with any desired non-zero\namount of error, provided that the network is given enough hidden units. The\nderivatives of the feedforward network can also approximate the derivatives of the\nfunction arbitrarily well (Hornik et al., 1990). The concept of Borel measurability\nis beyond the scope of this book; for our purposes it suffices to say that any\ncontinuous function on a closed and bounded subset of R\u201d is Borel measurable\nand therefore may be approximated by a neural network. A neural network may\nalso approximate any function mapping from any finite dimensional discrete space\nto another. While the original theorems were first stated in terms of units with\nactivation functions that saturate both for very negative and for very positive\narguments, universal approximation theorems have also been proved for a wider\nclass of activation functions, which includes the now commonly used rectified linear\nunit (Leshno et al., 1993).\n\nThe universal approximation theorem means that regardless of what function\nwe are trying to learn, we know that a large MLP will be able to represent this\nfunction. However, we are not guaranteed that the training algorithm will be able\nto learn that function. Even if the MLP is able to represent the function, learning\ncan fail for two different reasons. First, the optimization algorithm used for training\n\n198\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nmay not be able to find the value of the parameters that corresponds to the desired\nfunction. Second, the training algorithm might choose the wrong function due to\noverfitting. Recall from section 5.2.1 that the \u201cno free lunch\u201d theorem shows that\nthere is no universally superior machine learning algorithm. Feedforward networks\nprovide a universal system for representing functions, in the sense that, given a\nfunction, there exists a feedforward network that approximates the function. There\nis no universal procedure for examining a training set of specific examples and\nchoosing a function that will generalize to points not in the training set.\n\nThe universal approximation theorem says that there exists a network large\nenough to achieve any degree of accuracy we desire, but the theorem does not\nsay how large this network will be. Barron (1993) provides some bounds on the\nsize of a single-layer network needed to approximate a broad class of functions.\nUnfortunately, in the worse case, an exponential number of hidden units (possibly\nwith one hidden unit corresponding to each input configuration that needs to be\ndistinguished) may be required. This is easiest to see in the binary case: the\nnumber of possible binary functions on vectors v \u20ac {0, 1}\u201d is 2?\" and selecting\none such function requires 2\u201d bits, which will in general require O(2\u201d) degrees of\nfreedom.\n\nIn summary, a feedforward network with a single layer is sufficient to represent\nany function, but the layer may be infeasibly large and may fail to learn and\ngeneralize correctly. In many circumstances, using deeper models can reduce the\nnumber of units required to represent the desired function and can reduce the\namount of generalization error.\n\nThere exist families of functions which can be approximated efficiently by an\narchitecture with depth greater than some value d, but which require a much larger\nmodel if depth is restricted to be less than or equal to d. In many cases, the number\nof hidden units required by the shallow model is exponential in n. Such results\nwere first proved for models that do not resemble the continuous, differentiable\nneural networks used for machine learning, but have since been extended to these\nmodels. The first results were for circuits of logic gates (Hastad, 1986). Later\nwork extended these results to linear threshold units with non-negative weights\n(Hastad and Goldmann, 1991; Hajnal et al., 1993), and then to networks with\ncontinuous-valued activations (Maass, 1992; Maass et al., 1994). Many modern\nneural networks use rectified linear units. Leshno ei al. (1993) demonstrated\nthat shallow networks with a broad family of non-polynomial activation functions,\nincluding rectified linear units, have universal approximation properties, but these\nresults do not address the questions of depth or efficiency\u2014they specify only that\na sufficiently wide rectifier network could represent any function. Montufar ef al.\n\n199\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n(2014) showed that functions representable with a deep rectifier net can require\nan exponential number of hidden units with a shallow (one hidden layer) network.\nMore precisely, they showed that piecewise linear networks (which can be obtained\nfrom rectifier nonlinearities or maxout units) can represent functions with a number\nof regions that is exponential in the depth of the network. Figure 6.5 illustrates how\na network with absolute value rectification creates mirror images of the function\ncomputed on top of some hidden unit, with respect to the input of that hidden\nunit. Each hidden unit specifies where to fold the input space in order to create\nmirror responses (on both sides of the absolute value nonlinearity). By composing\nthese folding operations, we obtain an ae reeler ( large number of piecewise\nlinear regions which can capture all kinds of regular (e.g., repeating) patterns.\n\nDb\n\nFigure 6.5: An intuitive, geometric explanation of the exponential advantage of deeper\nrectifier networks formally by Montufar et al. (2014). (Left)An absolute value rectification\nunit has the same output for every pair of mirror points in its input. The mirror axis\nof symmetry is given by the hyperplane defined by the weights and bias of the unit. A\nfunction computed on top of that unit (the green decision surface) will be a mirror image\nof a simpler pattern across that axis of symmetry. (Center)The function can be obtained\nby folding the space around the axis of symmetry. (Right)Another repeating pattern can\nbe folded on top of the first (by another downstream unit) to obtain another symmetry\n(which is now repeated four times, with two hidden layers). Figure reproduced with\npermission from Montufar ef al. (2014).\n\nMore precisely, the main theorem in Montufar et al. (2014) states that the\nnumber of linear regions carved out by a deep rectifier network with d inputs,\ndepth J, and n units per hidden layer, is\n\nO (i) \"*\") ; (6.42)\n\ni.e., exponential in the depth /. In the case of maxout networks with & filters per\nunit, the number of linear regions is\n\nO (A+) , (6.43)\n\n200\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nOf course, there is no guarantee that the kinds of functions we want to learn in\napplications of machine learning (and in particular for AI) share such a property.\n\nWe may also want to choose a deep model for statistical reasons. Any time\nwe choose a specific machine learning algorithm, we are implicitly stating some\nset of prior beliefs we have about what kind of function the algorithm should\nlearn. Choosing a deep model encodes a very general belief that the function we\nwant to learn should involve composition of several simpler functions. This can be\ninterpreted from a representation learning point of view as saying that we believe\nthe learning problem consists of discovering a set of underlying factors of variation\nthat can in turn be described in terms of other, simpler underlying factors of\nvariation. Alternately, we can interpret the use of a deep architecture as expressing\na belief that the function we want to learn is a computer program consisting of\nmultiple steps, where each step makes use of the previous step\u2019s output. These\nintermediate outputs are not necessarily factors of variation, but can instead be\nanalogous to counters or pointers that the network uses to organize its internal\nprocessing. Empirically, greater depth does seem to result in better generalization\nfor a wide variety of tasks (Bengio et al., 2007; Erhan et al., 2009; Bengio, 2009;\nMesnil et al., 2011; Ciresan et al., 2012; Krizhevsky et al., 2012; Sermanet et al.,\n2013; Farabet et al., 2013; Couprie et al., 2013; Kahou et al., 2013; Goodfellow\net al., 2014d; Szegedy et al., 2014a). See figure 6.6 and figure 6.7 for examples of\nsome of these empirical results. This suggests that using deep architectures does\nindeed express a useful prior over the space of functions the model learns.\n\n6.4.2. Other Architectural Considerations\n\nSo far we have described neural networks as being simple chains of layers, with the\nmain considerations being the depth of the network and the width of each layer.\nIn practice, neural networks show considerably more diversity.\n\nMany neural network architectures have been developed for specific tasks.\nSpecialized architectures for computer vision called convolutional networks are\ndescribed in chapter 9. Feedforward networks may also be generalized to the\nrecurrent neural networks for sequence processing, described in chapter 10, which\nhave their own architectural considerations.\n\nIn general, the layers need not be connected in a chain, even though this is the\nmost common practice. Many architectures build a main chain but then add extra\narchitectural features to it, such as skip connections going from layer 7 to layer\ni+2 or higher. These skip connections make it easier for the gradient to flow from\noutput layers to layers nearer the input.\n\n201\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nTest accuracy (percent)\n\n3 4 5 6 7 8 9 10 11\n\nFigure 6.6: Empirical results showing that deeper networks generalize better when used\nto transcribe multi-digit numbers from photographs of addresses. Data from Goodfellow\net al. (2014d). The test set accuracy consistently increases with increasing depth. See\nfigure 6.7 for a control experiment demonstrating that other increases to the model size\ndo not yield the same effect.\n\nAnother key consideration of architecture design is exactly how to connect a\npair of layers to each other. In the default neural network layer described by a linear\ntransformation via a matrix W, every input unit is connected to every output\nunit. Many specialized networks in the chapters ahead have fewer connections, so\nthat each unit in the input layer is connected to only a small subset of units in\nthe output layer. These strategies for reducing the number of connections reduce\nthe number of parameters and the amount of computation required to evaluate\nthe network, but are often highly problem-dependent. For example, convolutional\nnetworks, described in chapter 9, use specialized patterns of sparse connections\nthat are very effective for computer vision problems. In this chapter, it is difficult\nto give much more specific advice concerning the architecture of a generic neural\nnetwork. Subsequent chapters develop the particular architectural strategies that\nhave been found to work well for different application domains.\n\n202\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\ne\u2014e 3, convolutional |\n\n+\u2014+- 3, fully connected\nVV 11, convolutional\n\nTest accuracy (percent)\n\n0.0 0.2 0.4 0.6 0.8 1.0\n\nNumber of parameters x 108\n\nFigure 6.7: Deeper models tend to perform better. This is not merely because the model is\narger. This experiment from Goodfellow et al. (2014d) shows that increasing the number\nof parameters in layers of convolutional networks without increasing their depth is not\nnearly as effective at increasing test set performance. The legend indicates the depth of\nnetwork used to make each curve and whether the curve represents variation in the size of\nhe convolutional or the fully connected layers. We observe that shallow models in this\ncontext overfit at around 20 million parameters while deep ones can benefit from having\nover 60 million. This suggests that using a deep model expresses a useful preference over\nhe space of functions the model can learn. Specifically, it expresses a belief that the\nunction should consist of many simpler functions composed together. This could result\neither in learning a representation that is composed in turn of simpler representations (e.g.,\ncorners defined in terms of edges) or in learning a program with sequentially dependent\nsteps (e.g., first locate a set of objects, then segment them from each other, then recognize\nhem).\n\n203\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n6.5 Back-Propagation and Other Differentiation Algo-\nrithms\n\nWhen we use a feedforward neural network to accept an input \u00abx and produce an\noutput \u00a5, information flows forward through the network. The inputs x provide\nthe initial information that then propagates up to the hidden units at each layer\nand finally produces y. This is called forward propagation. During training,\nforward propagation can continue onward until it produces a scalar cost J(@).\nThe back-propagation algorithm (Rumelhart ef a/., 1986a), often simply called\nbackprop, allows the information from the cost to then flow backwards through\nthe network, in order to compute the gradient.\n\nComputing an analytical expression for the gradient is straightforward, but\nnumerically evaluating such an expression can be computationally expensive. The\nback-propagation algorithm does so using a simple and inexpensive procedure.\n\nThe term back-propagation is often misunderstood as meaning the whole\nlearning algorithm for multi-layer neural networks. Actually, back-propagation\nrefers only to the method for computing the gradient, while another algorithm,\nsuch as stochastic gradient descent, is used to perform learning using this gradient.\nFurthermore, back-propagation is often misunderstood as being specific to multi-\nlayer neural networks, but in principle it can compute derivatives of any function\n(for some functions, the correct response is to report that the derivative of the\nfunction is undefined). Specifically, we will describe how to compute the gradient\nVa f(a, y) for an arbitrary function f, where is a set of variables whose derivatives\nare desired, and y is an additional set of variables that are inputs to the function\nbut whose derivatives are not required. In learning algorithms, the gradient we most\noften require is the gradient of the cost function with respect to the parameters,\nVoJ(0). Many machine learning tasks involve computing other derivatives, either\nas part of the learning process, or to analyze the learned model. The back-\npropagation algorithm can be applied to these tasks as well, and is not restricted\nto computing the gradient of the cost function with respect to the parameters. The\nidea of computing derivatives by propagating information through a network is\nvery general, and can be used to compute values such as the Jacobian of a function\nf with multiple outputs. We restrict our description here to the most commonly\nused case where f has a single output.\n\n204\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n6.5.1 Computational Graphs\n\nSo far we have discussed neural networks with a relatively informal graph language.\nTo describe the back-propagation algorithm more precisely, it is helpful to have a\nmore precise computational graph language.\n\nMany ways of formalizing computation as graphs are possible.\n\nHere, we use each node in the graph to indicate a variable. The variable may\nbe a scalar, vector, matrix, tensor, or even a variable of another type.\n\nTo formalize our graphs, we also need to introduce the idea of an operation.\nAn operation is a simple function of one or more variables. Our graph language\nis accompanied by a set of allowable operations. Functions more complicated\nthan the operations in this set may be described by composing many operations\ntogether.\n\nWithout loss of generality, we define an operation to return only a single\noutput variable. This does not lose generality because the output variable can have\nmultiple entries, such as a vector. Software implementations of back-propagation\nusually support operations with multiple outputs, but we avoid this case in our\ndescription because it introduces many extra details that are not important to\nconceptual understanding.\n\nIf a variable y is computed by applying an operation to a variable x, then\nwe draw a directed edge from x to y. We sometimes annotate the output node\nwith the name of the operation applied, and other times omit this label when the\noperation is clear from context.\n\nExamples of computational graphs are shown in figure 6.8.\n\n6.5.2 Chain Rule of Calculus\n\nThe chain rule of calculus (not to be confused with the chain rule of probability) is\nused to compute the derivatives of functions formed by composing other functions\nwhose derivatives are known. Back-propagation is an algorithm that computes the\nchain rule, with a specific order of operations that is highly efficient.\n\nLet x be a real number, and let f and g both be functions mapping from a real\nnumber to a real number. Suppose that y = g(x) and z= f(g(x)) = f(y). Then\nthe chain rule states that\n\n=\u2014\u2014. (6.44)\nWe can generalize this beyond the scalar case. Suppose that \u00ab \u20ac R\u2122, y \u20ac R\u201d,\n\n205\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nFigure 6.8: Examples of computational graphs. (a)The graph using the x operation to\ncompute z= ay. (b/The graph for the logistic regression prediction 9 = o (a'w +).\nSome of the intermediate expressions do not have names in the algebraic expression\nbut need names in the graph. We simply name the i-th such variable wu, (c)The\ncomputational graph for the expression H = max{0, XW + 6b}, which computes a design\nmatrix of rectified linear unit activations H given a design matrix containing a minibatch\nof inputs X. (d)Examples a-c applied at most one operation to each variable, but it\nis possible to apply more than one operation. Here we show a computation graph that\napplies more than one operation to the weights w of a linear regression model. The\nweights are used to make both the prediction 7 and the weight decay penalty A >, w?.\n\n206\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\ng maps from R\u2122 to R\", and f maps from R\u201d to R. Ify = g(a) and z= f(y), then\nOz _ S> Oz Oy (6.45)\n\nIn vector notation, this may be equivalently written as\n\n+\nVat= (5!) Vy% (6.46)\n\nwhere ou is the n x m Jacobian matrix of g.\n\nFrom this we see that the gradient of a variable x can be obtained by multiplying\na Jacobian matrix ou by a gradient Vyz. The back-propagation algorithm consists\nof performing such a Jacobian-gradient product for each operation in the graph.\n\nUsually we do not apply the back-propagation algorithm merely to vectors,\nbut rather to tensors of arbitrary dimensionality. Conceptually, this is exactly the\nsame as back-propagation with vectors. The only difference is how the numbers\nare arranged in a grid to form a tensor. We could imagine flattening each tensor\ninto a vector before we run back-propagation, computing a vector-valued gradient,\nand then reshaping the gradient back into a tensor. In this rearranged view,\nback-propagation is still just multiplying Jacobians by gradients.\n\nTo denote the gradient of a value z with respect to a tensor X, we write Vxz,\njust as if X were a vector. The indices into X now have multiple coordinates\u2014for\nexample, a 3-D tensor is indexed by three coordinates. We can abstract this away\nby using a single variable 7 to represent the complete tuple of indices. For all\npossible index tuples i, (Vx z)i gives #. This is exactly the same as how for all\npossible integer indices i into a vector, (Vez); gives x. Using this notation, we\ncan write the chain rule as it applies to tensors. If Y = g(X) and z = f(Y), then\n\nVx z= 0 (Vx; Fa (6.47)\n\nJ\n\n6.5.3 Recursively Applying the Chain Rule to Obtain Backprop\n\nUsing the chain rule, it is straightforward to write down an algebraic expression for\nthe gradient of a scalar with respect to any node in the computational graph that\nproduced that scalar. However, actually evaluating that expression in a computer\nintroduces some extra considerations.\n\nSpecifically, many subexpressions may be repeated several times within the\noverall expression for the gradient. Any procedure that computes the gradient\n\n207\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nwill need to choose whether to store these subexpressions or to recompute them\nseveral times. An example of how these repeated subexpressions arise is given in\nfigure 6.9. In some cases, computing the same subexpression twice would simply\nbe wasteful. For complicated graphs, there can be exponentially many of these\nwasted computations, making a naive implementation of the chain rule infeasible.\nIn other cases, computing the same subexpression twice could be a valid way to\nreduce memory consumption at the cost of higher runtime.\n\nWe first begin by a version of the back-propagation algorithm that specifies the\nactual gradient computation directly (algorithm 6.2 along with algorithm 6.1 for the\nassociated forward computation), in the order it will actually be done and according\nto the recursive application of chain rule. One could either directly perform these\ncomputations or view the description of the algorithm as a symbolic specification\nof the computational graph for computing the back-propagation. However, this\nformulation does not make explicit the manipulation and the construction of the\nsymbolic graph that performs the gradient computation. Such a formulation is\npresented below in section 6.5.6, with algorithm 6.5, where we also generalize to\nnodes that contain arbitrary tensors.\n\nFirst consider a computational graph describing how to compute a single scalar\nul\u201d) (say the loss on a training example). This scalar is the quantity whose\ngradient we want to obtain, with respect to the nj input nodes u to u\\\u2122), In\nother words we wish to compute au for all i \u20ac {1,2,..., ni}. In the application\nof back-propagation to computing gradients for gradient descent over parameters,\nul\u201d) will be the cost associated with an example or a minibatch, while u to u(\u2122)\ncorrespond to the parameters of the model.\n\nWe will assume that the nodes of the graph have been ordered in such a way\nthat we can compute their output one after the other, starting at ut) and\ngoing up to u\\\"). As defined in algorithm 6.1, each node u is associated with an\noperation f@ and is computed by evaluating the function\n\nu) = f(A) (6.48)\n\nwhere A is the set of all nodes that are parents of u\u201c),\n\nThat algorithm specifies the forward propagation computation, which we could\nput in a graph G. In order to perform back-propagation, we can construct a\ncomputational graph that depends on G and adds to it an extra set of nodes. These\nform a subgraph B with one node per node of G. Computation in B proceeds in\nexactly the reverse of the order of computation in G, and each node of 6B computes\n\nthe derivative aut associated with the forward graph node u\u2122. This is done\n\n208\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nAlgorithm 6.1 A procedure that performs the computations mapping n; inputs\nu to wu to an output wu\u2019. This defines a computational graph where each node\ncomputes numerical value wu\u201c) by applying a function f to the set of arguments\nA\u00ae that comprises the values of previous nodes u, 7 < i, with j \u20ac Pa(u). The\ninput to the computational graph is the vector x, and is set into the first n; nodes\nu\u00ae to ul). The output of the computational graph is read off the last (output)\nnode u(\u201d),\n\nfori=n, +1,...,n do\nAME ful) |je Pa(u)}\nuO \u2014 FO (AM)\n\nend for\n\nreturn u\u201d)\n\nusing the chain rule with respect to scalar output ul:\n\ndu 3 du\u2122 Ay\n\naud) au\u00ae ard)\ni:jePa(u )\n\n(6.49)\n\nas specified by algorithm 6.2. The subgraph 6 contains exactly one edge for each\n\nedge from node wu\u201c) to node u of G. The edge from u) to u is associated with\noe\nbetween the gradient already computed with respect to nodes u that are children\nof uM and the vector containing the partial derivatives aa for the same children\nnodes u). To summarize, the amount of computation required for performing\nthe back-propagation scales linearly with the number of edges in G, where the\ncomputation for each edge corresponds to computing a partial derivative (of one\nnode with respect to one of its parents) as well as performing one multiplication\nand one addition. Below, we generalize this analysis to tensor-valued nodes, which\nis just a way to group multiple scalar values in the same node and enable more\n\nefficient implementations.\n\nthe computation of\n\nIn addition, a dot product is performed for each node,\n\nThe back-propagation algorithm is designed to reduce the number of common\nsubexpressions without regard to memory. Specifically, it performs on the order\nof one Jacobian product per node in the graph. This can be seen from the fact\nthat backprop (algorithm 6.2) visits each edge from node u to node u of\n\nthe graph exactly once in order to obtain the associated partial derivative ou.\n\n209\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nAlgorithm 6.2 Simplified version of the back-propagation algorithm for computing\nthe derivatives of u\u2122 with respect to the variables in the graph. This example is\nintended to further understanding by showing a simplified case where all variables\nare scalars, and we wish to compute the derivatives with respect to u,..., ul),\nThis simplified version computes the derivatives of all nodes in the graph. The\ncomputational cost of this algorithm is proportional to the number of edges in\nthe graph, assuming that the partial derivative associated with each edge requires\na constant time. This is of the same order as the number of computations for\nee is a function of the parents u of u, thus\nlinking the nodes of the forward graph to those added for the back-propagation\ngraph.\n\nthe forward propagation. Each\n\nRun forward propagation (algorithm 6.1 for this example) to obtain the activa-\ntions of the network\n\nInitialize grad_table, a data structure that will store the derivatives that have\nbeen computed. The entry grad_table[ul)] will store the computed value of\noor\n\ngrad_table[u\u201d] - 1\n\nfor j = n\u20141 down to 1 do\n\nBul) __ ak\u201d Gu |. .\na = VizjePa(u\u00ae) Qu@ oul using stored values:\n\niy) Ou\nOlan\n\nThe next line computes\ngrad_table[u\u2018)] \u2014 >\nend for\nreturn {grad_table[u(] | i=1,..., ni}\n\nijePa(uli)) Srad_table[u\n\nBack-propagation thus avoids the exponential explosion in repeated subexpressions.\nHowever, other algorithms may be able to avoid more subexpressions by performing\nsimplifications on the computational graph, or may be able to conserve memory by\nrecomputing rather than storing some subexpressions. We will revisit these ideas\nafter describing the back-propagation algorithm itself.\n\n6.5.4 Back-Propagation Computation in Fully-Connected MLP\n\nTo clarify the above definition of the back-propagation computation, let us consider\nthe specific graph associated with a fully-connected multi-layer MLP.\n\nAlgorithm 6.3 first shows the forward propagation, which maps parameters to\nthe supervised loss L(y, y) associated with a single (input,target) training example\n(a, y), with y the output of the neural network when & is provided in input.\n\nAlgorithm 6.4 then shows the corresponding computation to be done for\n\n210\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nFigure 6.9: A computational graph that results in repeated subexpressions when computing\nthe gradient. Let w \u20ac R be the input to the graph. We use the same function f :R\u2014 R\n\nas the operation that we apply at every step of a chain: \u00ab = f(w), y = f(a), z= f(y).\nTo compute 2 , we apply equation 6.44 and obtain:\nOz\nDw (6.50\n_ Oz Oy Ox\n=f\"(y)f (2) fw) (6.52\n=f\"(F(f(w))) FF w)) fw) (6.53\n\nEquation 6.52 suggests an implementation in which we compute the value of f (w) only\nonce and store it in the variable x. This is the approach taken by the back-propagation\nalgorithm. An alternative approach is suggested by equation 6.53, where the subexpression\nf(w) appears more than once. In the alternative approach, f(w) is recomputed each time\nit is needed. When the memory required to store the value of these expressions is low, the\nback-propagation approach of equation 6.52 is clearly preferable because of its reduced\nruntime. However, equation 6.53 is also a valid implementation of the chain rule, and is\nuseful when memory is limited.\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\napplying the back-propagation algorithm to this graph.\n\nAlgorithms 6.3 and 6.4 are demonstrations that are chosen to be simple and\nstraightforward to understand. However, they are specialized to one specific\nproblem.\n\nModern software implementations are based on the generalized form of back-\npropagation described in section 6.5.6 below, which can accommodate any compu-\ntational graph by explicitly manipulating a data structure for representing symbolic\ncomputation.\n\nAlgorithm 6.3 Forward propagation through a typical deep neural network and\nthe computation of the cost function. The loss L(g, y) depends on the output\ny and on the target y (see section 6.2.1.1 for examples of loss functions). To\nobtain the total cost J, the loss may be added to a regularizer (0), where 0\ncontains all the parameters (weights and biases). Algorithm 6.4 shows how to\ncompute gradients of J with respect to parameters W and b. For simplicity, this\ndemonstration uses only a single input example x. Practical applications should\nuse a minibatch. See section 6.5.7 for a more realistic demonstration.\n\nRequire: Network depth, |\nRequire: W,i \u20ac {1,...,}, the weight matrices of the model\nRequire: b,i \u20ac {1,...,/}, the bias parameters of the model\nRequire: \u00abx, the input to process\nRequire: y, the target output\nhO = 2\nfork =1,...,l do\na\u00ae) =~ 4 wepl-D\nh\u00ae = f(a)\nend for\ng=h\u00a9\nJ = L(y) + 26)\n\n6.5.5 Symbol-to-Symbol Derivatives\n\nAlgebraic expressions and computational graphs both operate on symbols, or\nvariables that do not have specific values. These algebraic and graph-based\nrepresentations are called symbolic representations. When we actually use or\ntrain a neural network, we must assign specific values to these symbols. We\nreplace a symbolic input to the network x with a specific numeric value, such as\n[1.2, 3.765, \u20141.8]\".\n\n212\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nAlgorithm 6.4 Backward computation for the deep neural network of algo-\nrithm 6.3, which uses in addition to the input x a target y. This computation\nyields the gradients on the activations a\u2018\u00ae) for each layer &, starting from the\noutput layer and going backwards to the first hidden layer. From these gradients,\nwhich can be interpreted as an indication of how each layer\u2019s output should change\nto reduce error, one can obtain the gradient on the parameters of each layer. The\ngradients on weights and biases can be immediately used as part of a stochas-\ntic gradient update (performing the update right after the gradients have been\ncomputed) or used with other gradient-based optimization methods.\n\nAfter the forward computation, compute the gradient on the output layer:\ngc Vat = VoLl.y)\nfor k =1,1\u20141,...,1 do\nConvert the gradient on the layer\u2019s output into a gradient into the pre-\nnonlinearity activation (element-wise multiplication if f is element-wise):\ng+\u2014VawJ=gO f(a)\nCompute gradients on weights and biases (including the regularization term,\nwhere needed):\nView = 9 + AV gw Q(8)\nVw! = g ROY + Wry (8)\nPropagate the gradients w.r.t. the next lower-level hidden layer\u2019s activations:\ng\u2014 Vay J = WT g\nend for\n\n213\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nFigure 6.10: An example of the symbol-to-symbol approach to computing derivatives. In\nthis approach, the back-propagation algorithm does not need to ever access any actual\nspecific numeric values. Instead, it adds nodes to a computational graph describing how\nto compute these derivatives. A generic graph evaluation engine can later compute the\nderivatives for any specific numeric values. (Left)/In this example, we begin with a graph\nrepresenting z = f (f(f(w))). (Right)We run the back-propagation algorithm, instructing\nit to construct the graph for the expression corresponding to & . In this example, we do\nnot explain how the back-propagation algorithm works. The purpose is only to illustrate\nwhat the desired result is: a computational graph with a symbolic description of the\nderivative.\n\nSome approaches to back-propagation take a computational graph and a set\nof numerical values for the inputs to the graph, then return a set of numerical\nvalues describing the gradient at those input values. We call this approach \u201csymbol-\nto-number\u201d differentiation. This is the approach used by libraries such as Torch\n(Collobert et al., 2011b) and Caffe (Jia, 2013).\n\nAnother approach is to take a computational graph and add additional nodes\nto the graph that provide a symbolic description of the desired derivatives. This\nis the approach taken by Theano (Bergstra ef al., 2010; Bastien ef al., 2012)\nand TensorFlow (Abadi et al., 2015). An example of how this approach works\nis illustrated in figure 6.10. The primary advantage of this approach is that\nthe derivatives are described in the same language as the original expression.\nBecause the derivatives are just another computational graph, it is possible to run\nback-propagation again, differentiating the derivatives in order to obtain higher\nderivatives. Computation of higher-order derivatives is described in section 6.5.10.\n\nWe will use the latter approach and describe the back-propagation algorithm in\n\n214\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nterms of constructing a computational graph for the derivatives. Any subset of the\ngraph may then be evaluated using specific numerical values at a later time. This\nallows us to avoid specifying exactly when each operation should be computed.\nInstead, a generic graph evaluation engine can evaluate every node as soon as its\nparents\u2019 values are available.\n\nThe description of the symbol-to-symbol based approach subsumes the symbol-\nto-number approach. The symbol-to-number approach can be understood as\nperforming exactly the same computations as are done in the graph built by the\nsymbol-to-symbol approach. The key difference is that the symbol-to-number\napproach does not expose the graph.\n\n6.5.6 General Back-Propagation\n\nThe back-propagation algorithm is very simple. To compute the gradient of some\nscalar z with respect to one of its ancestors # in the graph, we begin by observing\nthat the gradient with respect to z is given by & = 1. We can then compute\nthe gradient with respect to each parent of z in the graph by multiplying the\ncurrent gradient by the Jacobian of the operation that produced z. We continue\nmultiplying by Jacobians traveling backwards through the graph in this way until\nwe reach a. For any node that may be reached by going backwards from z through\ntwo or more paths, we simply sum the gradients arriving from different paths at\nthat node.\n\nMore formally, each node in the graph G corresponds to a variable. To achieve\nmaximum generality, we describe this variable as being a tensor V. Tensor can\nin general have any number of dimensions. They subsume scalars, vectors, and\nmatrices.\n\nWe assume that each variable V is associated with the following subroutines:\n\ne get_operation(V): This returns the operation that computes V, repre-\nsented by the edges coming into V in the computational graph. For example,\nthere may be a Python or C++ class representing the matrix multiplication\noperation, and the get_operation function. Suppose we have a variable that\nis created by matrix multiplication, C = AB. Then get_operation(V)\nreturns a pointer to an instance of the corresponding C++ class.\n\ne get_consumers(V,G): This returns the list of variables that are children of\nV in the computational graph G.\n\ne get _inputs(V,G): This returns the list of variables that are parents of V\nin the computational graph G.\n\n215\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nEach operation op is also associated with a bprop operation. This bprop\noperation can compute a Jacobian-vector product as described by equation 6.47.\nThis is how the back-propagation algorithm is able to achieve great generality.\nEach operation is responsible for knowing how to back-propagate through the\nedges in the graph that it participates in. For example, we might use a matrix\nmultiplication operation to create a variable C = AB. Suppose that the gradient\nof a scalar z with respect to C' is given by G. The matrix multiplication operation\nis responsible for defining two back-propagation rules, one for each of its input\narguments. If we call the bprop method to request the gradient with respect to\nA given that the gradient on the output is G, then the bprop method of the\nmatrix multiplication operation must state that the gradient with respect to A\nis given by GB'. Likewise, if we call the bprop method to request the gradient\nwith respect to B, then the matrix operation is responsible for implementing the\nbprop method and specifying that the desired gradient is given by A'G. The\nback-propagation algorithm itself does not need to know any differentiation rules. It\nonly needs to call each operation\u2019s bprop rules with the right arguments. Formally,\nop.bprop(inputs, X,G) must return\n\nS> (V xop.f (inputs) ;) Gi, (6.54)\n\na\n\nwhich is just an implementation of the chain rule as expressed in equation 6.47.\nHere, inputs is a list of inputs that are supplied to the operation, op.f is the\nmathematical function that the operation implements, X is the input whose gradient\nwe wish to compute, and G is the gradient on the output of the operation.\n\nThe op.bprop method should always pretend that all of its inputs are distinct\nfrom each other, even if they are not. For example, if the mul operator is passed\ntwo copies of x to compute x\u201d, the op.bprop method should still return \u00ab as the\nderivative with respect to both inputs. The back-propagation algorithm will later\nadd both of these arguments together to obtain 2\u201d, which is the correct total\nderivative on x.\n\nSoftware implementations of back-propagation usually provide both the opera-\ntions and their bprop methods, so that users of deep learning software libraries are\nable to back-propagate through graphs built using common operations like matrix\nmultiplication, exponents, logarithms, and so on. Software engineers who build a\nnew implementation of back-propagation or advanced users who need to add their\nown operation to an existing library must usually derive the op.bprop method for\nany new operations manually.\n\nThe back-propagation algorithm is formally described in algorithm 6.5.\n\n216\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nAlgorithm 6.5 The outermost skeleton of the back-propagation algorithm. This\nportion does simple setup and cleanup work. Most of the important work happens\nin the build_grad subroutine of algorithm 6.6\n\nRequire: T, the target set of variables whose gradients must be computed.\nRequire: G, the computational graph\nRequire: z, the variable to be differentiated\nLet G\u2019 be G pruned to contain only nodes that are ancestors of z and descendents\nof nodes in T.\nInitialize grad_table, a data structure associating tensors to their gradients\ngrad_table|z]+ 1\nfor V in T do\nbuild_grad(V,G,G\u2019,grad_table)\nend for\nReturn grad_table restricted to T\n\nIn section 6.5.2, we explained that back-propagation was developed in order to\navoid computing the same subexpression in the chain rule multiple times. The naive\nalgorithm could have exponential runtime due to these repeated subexpressions.\nNow that we have specified the back-propagation algorithm, we can understand its\ncomputational cost. If we assume that each operation evaluation has roughly the\nsame cost, then we may analyze the computational cost in terms of the number\nof operations executed. Keep in mind here that we refer to an operation as the\nfundamental unit of our computational graph, which might actually consist of very\nmany arithmetic operations (for example, we might have a graph that treats matrix\nmultiplication as a single operation). Computing a gradient in a graph with n nodes\nwill never execute more than O(n?) operations or store the output of more than\nO(n?) operations. Here we are counting operations in the computational graph, not\nindividual operations executed by the underlying hardware, so it is important to\nremember that the runtime of each operation may be highly variable. For example,\nmultiplying two matrices that each contain millions of entries might correspond to\na single operation in the graph. We can see that computing the gradient requires as\nmost O(n?) operations because the forward propagation stage will at worst execute\nall n nodes in the original graph (depending on which values we want to compute,\nwe may not need to execute the entire graph). The back-propagation algorithm\nadds one Jacobian-vector product, which should be expressed with O(1) nodes, per\nedge in the original graph. Because the computational graph is a directed acyclic\ngraph it has at most O(n?) edges. For the kinds of graphs that are commonly used\nin practice, the situation is even better. Most neural network cost functions are\n\n217\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nAlgorithm 6.6 The inner loop subroutine build_grad(V,G,G\u2019,grad_ table) of\nthe back-propagation algorithm, called by the back-propagation algorithm defined\nin algorithm 6.5.\n\nRequire: V, the variable whose gradient should be added to G and grad_table.\nRequire: G, the graph to modify.\nRequire: G\u2019, the restriction of G to nodes that participate in the gradient.\nRequire: grad_table, a data structure mapping nodes to their gradients\nif V is in grad_table then\nReturn grad_table[V]\nend if\niol\nfor C in get_consumers(V,G\u2019) do\nop + get_operation(C)\nD+ build_grad(C,G,G\u2019, grad_table)\nG\u00ae & op.bprop(get_inputs(C, G\u2019), V, D)\ntHitl\nend for\nGey, G6\ngrad_table|V]=G\nInsert G and the operations creating it into G\nReturn G\n\nroughly chain-structured, causing back-propagation to have O(n) cost. This is far\nbetter than the naive approach, which might need to execute exponentially many\nnodes. This potentially exponential cost can be seen by expanding and rewriting\nthe recursive chain rule (equation 6.49) non-recursively:\n\ndu\u201d)\ndua) \u00bb te a 1) (6.55)\n\npath (u(*1),u(72),...u(*)), k=2\nfrom 71=j to my~=n\n\nSince the number of paths from node j to node n can grow exponentially in the\nlength of these paths, the number of terms in the above sum, which is the number\nof such paths, can grow exponentially with the depth of the forward propagation\ngraph. This large cost would be incurred because the same computation for\nout would be redone many times. To avoid such recomputation, we can think\nof back-propagation as. a table-filling algorithm that takes advantage of storing\nintermediate results 2 a 7 Each node in the graph has a corresponding slot in a\ntable to store the gradient for that node. By filling in these table entries in order,\n\n218\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nback-propagation avoids repeating many common subexpressions. This table-filling\nstrategy is sometimes called dynamic programming.\n\n6.5.7 Example: Back-Propagation for MLP Training\n\nAs an example, we walk through the back-propagation algorithm as it is used to\ntrain a multilayer perceptron.\n\nHere we develop a very simple multilayer perception with a single hidden\nlayer. To train this model, we will use minibatch stochastic gradient descent.\nThe back-propagation algorithm is used to compute the gradient of the cost on a\nsingle minibatch. Specifically, we use a minibatch of examples from the training\nset formatted as a design matrix X and a vector of associated class labels y.\nThe network computes a layer of hidden features H = max{0,XW}. To\nsimplify the presentation we do not use biases in this model. We assume that our\ngraph language includes a relu operation that can compute max{0, Z} element-\nwise. The predictions of the unnormalized log probabilities over classes are then\ngiven by HW). We assume that our graph language includes a cross_entropy\noperation that computes the cross-entropy between the targets y and the probability\ndistribution defined by these unnormalized log probabilities. The resulting cross-\nentropy defines the cost Jin. Minimizing this cross-entropy performs maximum\nlikelihood estimation of the classifier. However, to make this example more realistic,\nwe also include a regularization term. The total cost\n\n2 2\n\nJ = Jie + S> (wi?) + S> (wi?) (6.56)\niJ aj\n\nconsists of the cross-entropy and a weight decay term with coefficient A. The\n\ncomputational graph is illustrated in figure 6.11.\n\nThe computational graph for the gradient of this example is large enough that\nit would be tedious to draw or to read. This demonstrates one of the benefits\nof the back-propagation algorithm, which is that it can automatically generate\ngradients that would be straightforward but tedious for a software engineer to\nderive manually.\n\nWe can roughly trace out the behavior of the back-propagation algorithm\nby looking at the forward propagation graph in figure 6.11. To train, we wish\nto compute both VywJ and VyJ. There are two different paths leading\nbackward from J to the weights: one through the cross-entropy cost, and one\nthrough the weight decay cost. The weight decay cost is relatively simple; it will\nalways contribute 2\\W\u00a9 to the gradient on W.\n\n219\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nFigure 6.11: The computational graph used to compute the cost used to train our example\nof a single-layer MLP using the cross-entropy loss and weight decay.\n\nThe other path through the cross-entropy cost is slightly more complicated.\nLet G be the gradient on the unnormalized log probabilities U' (2) provided by\nthe cross_entropy operation. The back-propagation algorithm now needs to\nexplore two different branches. On the shorter branch, it adds H'G to the\ngradient on W), using the back-propagation rule for the second argument to\nthe matrix multiplication operation. The other branch corresponds to the longer\nchain descending further along the network. First, the back-propagation algorithm\ncomputes VyJ =GW)\" using the back-propagation rule for the first argument\nto the matrix multiplication operation. Next, the relu operation uses its back-\npropagation rule to zero out components of the gradient corresponding to entries\nof U that were less than 0. Let the result be called G\u2019. The last step of the\nback-propagation algorithm is to use the back-propagation rule for the second\nargument of the matmul operation to add X'G\u2019 to the gradient on W\u201c).\n\nAfter these gradients have been computed, it is the responsibility of the gradient\ndescent algorithm, or another optimization algorithm, to use these gradients to\nupdate the parameters.\n\nFor the MLP, the computational cost is dominated by the cost of matrix\nmultiplication. During the forward propagation stage, we multiply by each weight\n\n220\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nmatrix, resulting in O(w) multiply-adds, where w is the number of weights. During\nthe backward propagation stage, we multiply by the transpose of each weight\nmatrix, which has the same computational cost. The main memory cost of the\nalgorithm is that we need to store the input to the nonlinearity of the hidden layer.\nThis value is stored from the time it is computed until the backward pass has\nreturned to the same point. The memory cost is thus O(mn,;,), where m is the\nnumber of examples in the minibatch and n,, is the number of hidden units.\n\n6.5.8 Complications\n\nOur description of the back-propagation algorithm here is simpler than the imple-\nmentations actually used in practice.\n\nAs noted above, we have restricted the definition of an operation to be a\nfunction that returns a single tensor. Most software implementations need to\nsupport operations that can return more than one tensor. For example, if we wish\nto compute both the maximum value in a tensor and the index of that value, it is\nbest to compute both in a single pass through memory, so it is most efficient to\nimplement this procedure as a single operation with two outputs.\n\nWe have not described how to control the memory consumption of back-\npropagation. Back-propagation often involves summation of many tensors together.\nIn the naive approach, each of these tensors would be computed separately, then\nall of them would be added in a second step. The naive approach has an overly\nhigh memory bottleneck that can be avoided by maintaining a single buffer and\nadding each value to that buffer as it is computed.\n\nReal-world implementations of back-propagation also need to handle various\ndata types, such as 32-bit floating point, 64-bit floating point, and integer values.\nThe policy for handling each of these types takes special care to design.\n\nSome operations have undefined gradients, and it is important to track these\ncases and determine whether the gradient requested by the user is undefined.\n\nVarious other technicalities make real-world differentiation more complicated.\nThese technicalities are not insurmountable, and this chapter has described the key\nintellectual tools needed to compute derivatives, but it is important to be aware\nthat many more subtleties exist.\n\n6.5.9 Differentiation outside the Deep Learning Community\n\nThe deep learning community has been somewhat isolated from the broader\ncomputer science community and has largely developed its own cultural attitudes\n\n221\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nconcerning how to perform differentiation. More generally, the field of automatic\ndifferentiation is concerned with how to compute derivatives algorithmically.\nThe back-propagation algorithm described here is only one approach to automatic\ndifferentiation. It is a special case of a broader class of techniques called reverse\nmode accumulation. Other approaches evaluate the subexpressions of the chain\nrule in different orders. In general, determining the order of evaluation that\nresults in the lowest computational cost is a difficult problem. Finding the optimal\nsequence of operations to compute the gradient is NP-complete (Naumann, 2008),\nin the sense that it may require simplifying algebraic expressions into their least\nexpensive form.\n\nFor example, suppose we have variables p1, p2,..., Pn representing probabilities\nand variables 21, 22,..., 2 representing unnormalized log probabilities. Suppose\nwe define\n\nexp(zi)\n\n\u00ae expla)\u2019 oo)\nwhere we build the softmax function out of exponentiation, summation and division\noperations, and construct a cross-entropy loss J = \u2014 3\u00b0, p;logq;. A human\nmathematician can observe that the derivative of J with respect to z; takes a very\nsimple form: qi \u2014 pj. The back-propagation algorithm is not capable of simplifying\nthe gradient this way, and will instead explicitly propagate gradients through all of\nthe logarithm and exponentiation operations in the original graph. Some software\nlibraries such as Theano (Bergstra ef al., 2010; Bastien ef al., 2012) are able to\nperform some kinds of algebraic substitution to improve over the graph proposed\nby the pure back-propagation algorithm.\n\nWhen the forward graph G has a single output node and each partial derivative\nouts can be computed with a constant amount of computation, back-propagation\nguarantees that the number of computations for the gradient computation is of\nthe same order as the number of computations for the forward computation: this\ncan be seen in algorithm 6.2 because each local partial derivative ou needs to\nbe computed only once along with an associated multiplication and addition for\nthe recursive chain-rule formulation (equation 6.49). The overall computation is\ntherefore O(# edges). However, it can potentially be reduced by simplifying the\ncomputational graph constructed by back-propagation, and this is an NP-complete\ntask. Implementations such as Theano and TensorF low use heuristics based on\nmatching known simplification patterns in order to iteratively attempt to simplify\nthe graph. We defined back-propagation only for the computation of a gradient of a\nscalar output but back-propagation can be extended to compute a Jacobian (either\nof k different scalar nodes in the graph, or of a tensor-valued node containing k\nvalues). A naive implementation may then need k times more computation: for\n\n222\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\neach scalar internal node in the original forward graph, the naive implementation\ncomputes /; gradients instead of a single gradient. When the number of outputs of\nthe graph is larger than the number of inputs, it is sometimes preferable to use\nanother form of automatic differentiation called forward mode accumulation.\nForward mode computation has been proposed for obtaining real-time computation\nof gradients in recurrent networks, for example (Williams and Zipser, 1989). This\nalso avoids the need to store the values and gradients for the whole graph, trading\noff computational efficiency for memory. The relationship between forward mode\nand backward mode is analogous to the relationship between left-multiplying versus\nright-multiplying a sequence of matrices, such as\n\nABCD, (6.58)\n\nwhere the matrices can be thought of as Jacobian matrices. For example, if D\nis a column vector while A has many rows, this corresponds to a graph with a\nsingle output and many inputs, and starting the multiplications from the end\nand going backwards only requires matrix-vector products. This corresponds to\nthe backward mode. Instead, starting to multiply from the left would involve a\nseries of matrix-matrix products, which makes the whole computation much more\nexpensive. However, if A has fewer rows than D has columns, it is cheaper to run\nthe multiplications left-to-right, corresponding to the forward mode.\n\nIn many communities outside of machine learning, it is more common to im-\nplement differentiation software that acts directly on traditional programming\nlanguage code, such as Python or C code, and automatically generates programs\nthat differentiate functions written in these languages. In the deep learning com-\nmunity, computational graphs are usually represented by explicit data structures\ncreated by specialized libraries. The specialized approach has the drawback of\nrequiring the library developer to define the bprop methods for every operation\nand limiting the user of the library to only those operations that have been defined.\nHowever, the specialized approach also has the benefit of allowing customized\nback-propagation rules to be developed for each operation, allowing the developer\nto improve speed or stability in non-obvious ways that an automatic procedure\nwould presumably be unable to replicate.\n\nBack-propagation is therefore not the only way or the optimal way of computing\nthe gradient, but it is a very practical method that continues to serve the deep\nlearning community very well. In the future, differentiation technology for deep\nnetworks may improve as deep learning practitioners become more aware of advances\nin the broader field of automatic differentiation.\n\n223\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\n6.5.10 Higher-Order Derivatives\n\nSome software frameworks support the use of higher-order derivatives. Among the\ndeep learning software frameworks, this includes at least Theano and TensorFlow.\nThese libraries use the same kind of data structure to describe the expressions for\nderivatives as they use to describe the original function being differentiated. This\nmeans that the symbolic differentiation machinery can be applied to derivatives.\n\nIn the context of deep learning, it is rare to compute a single second derivative\nof a scalar function. Instead, we are usually interested in properties of the Hessian\nmatrix. If we have a function f : R\u201d \u2014 R, then the Hessian matrix is of size n x n.\nIn typical deep learning applications, n will be the number of parameters in the\nmodel, which could easily number in the billions. The entire Hessian matrix is\nthus infeasible to even represent.\n\nInstead of explicitly computing the Hessian, the typical deep learning approach\nis to use Krylov methods. Krylov methods are a set of iterative techniques for\nperforming various operations like approximately inverting a matrix or finding\napproximations to its eigenvectors or eigenvalues, without using any operation\nother than matrix-vector products.\n\nIn order to use Krylov methods on the Hessian, we only need to be able to\ncompute the product between the Hessian matrix H and an arbitrary vector v. A\nstraightforward technique (Christianson, 1992) for doing so is to compute\n\nHv =Ve|(Vef(x))'v}. (6.59)\n\nBoth of the gradient computations in this expression may be computed automati-\ncally by the appropriate software library. Note that the outer gradient expression\ntakes the gradient of a function of the inner gradient expression.\n\nIf v is itself a vector produced by a computational graph, it is important to\nspecify that the automatic differentiation software should not differentiate through\nthe graph that produced v.\n\nWhile computing the Hessian is usually not advisable, it is possible to do with\nHessian vector products. One simply computes H e\u00ae for alli =1,...,n, where\n\n(@)\n\ne is the one-hot vector with Ee; = 1 and all other entries equal to 0.\n\n6.6 Historical Notes\n\nFeedforward networks can be seen as efficient nonlinear function approximators\nbased on using gradient descent to minimize the error in a function approximation.\n\n224\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nFrom this point of view, the modern feedforward network is the culmination of\ncenturies of progress on the general function approximation task.\n\nThe chain rule that underlies the back-propagation algorithm was invented\nin the 17th century (Leibniz, 1676; L\u2019 Hopital, 1696). Calculus and algebra have\nlong been used to solve optimization problems in closed form, but gradient descent\nwas not introduced as a technique for iteratively approximating the solution to\noptimization problems until the 19th century (Cauchy, 1847).\n\nBeginning in the 1940s, these function approximation techniques were used to\nmotivate machine learning models such as the perceptron. However, the earliest\nmodels were based on linear models. Critics including Marvin Minsky pointed out\nseveral of the flaws of the linear model family, such as its inability to learn the\nXOR function, which led to a backlash against the entire neural network approach.\n\nLearning nonlinear functions required the development of a multilayer per-\nceptron and a means of computing the gradient through such a model. Efficient\napplications of the chain rule based on dynamic programming began to appear\nin the 1960s and 1970s, mostly for control applications (Kelley, 1960; Bryson and\nDenham, 1961; Dreyfus, 1962; Bryson and Ho, 1969; Dreyfus, 1973) but also for\nsensitivity analysis (Linnainmaa, 1976). Werbos (1981) proposed applying these\ntechniques to training artificial neural networks. The idea was finally developed\nin practice after being independently rediscovered in different ways (LeCun, 1985;\nParker, 1985; Rumelhart ef al., 1986a). The book Parallel Distributed Pro-\ncessing presented the results of some of the first successful experiments with\nback-propagation in a chapter (Rumelhart e\u00a2 al., 1986b) that contributed greatly\nto the popularization of back-propagation and initiated a very active period of\nresearch in multi-layer neural networks. However, the ideas put forward by the\nauthors of that book and in particular by Rumelhart and Hinton go much beyond\nback-propagation. They include crucial ideas about the possible computational\nimplementation of several central aspects of cognition and learning, which came\nunder the name of \u201cconnectionism\u201d because of the importance this school of thought\nplaces on the connections between neurons as the locus of learning and memory.\nIn particular, these ideas include the notion of distributed representation (Hinton\net al., 1986).\n\nFollowing the success of back-propagation, neural network research gained pop-\nularity and reached a peak in the early 1990s. Afterwards, other machine learning\ntechniques became more popular until the modern deep learning renaissance that\nbegan in 2006.\n\nThe core ideas behind modern feedforward networks have not changed sub-\nstantially since the 1980s. The same back-propagation algorithm and the same\n\n225\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\napproaches to gradient descent are still in use. Most of the improvement in neural\nnetwork performance from 1986 to 2015 can be attributed to two factors. First,\nlarger datasets have reduced the degree to which statistical generalization is a\nchallenge for neural networks. Second, neural networks have become much larger,\ndue to more powerful computers, and better software infrastructure. However, a\nsmall number of algorithmic changes have improved the performance of neural\nnetworks noticeably.\n\nOne of these algorithmic changes was the replacement of mean squared error\nwith the cross-entropy family of loss functions. Mean squared error was popular in\nthe 1980s and 1990s, but was gradually replaced by cross-entropy losses and the\nprinciple of maximum likelihood as ideas spread between the statistics community\nand the machine learning community. The use of cross-entropy losses greatly\nimproved the performance of models with sigmoid and softmax outputs, which\nhad previously suffered from saturation and slow learning when using the mean\nsquared error loss.\n\nThe other major algorithmic change that has greatly improved the performance\nof feedforward networks was the replacement of sigmoid hidden units with piecewise\nlinear hidden units, such as rectified linear units. Rectification using the max{0, z}\nfunction was introduced in early neural network models and dates back at least\nas far as the Cognitron and Neocognitron (Fukushima, 1975, 1980). These early\nmodels did not use rectified linear units, but instead applied rectification to\nnonlinear functions. Despite the early popularity of rectification, rectification was\nlargely replaced by sigmoids in the 1980s, perhaps because sigmoids perform better\nwhen neural networks are very small. As of the early 2000s, rectified linear units\nwere avoided due to a somewhat superstitious belief that activation functions with\nnon-differentiable points must be avoided. This began to change in about 2009.\nJarrett et al. (2009) observed that \u201cusing a rectifying nonlinearity is the single most\nimportant factor in improving the performance of a recognition system\u201d among\nseveral different factors of neural network architecture design.\n\nFor small datasets, Jarrett et al. (2009) observed that using rectifying non-\nlinearities is even more important than learning the weights of the hidden layers.\nRandom weights are sufficient to propagate useful information through a rectified\nlinear network, allowing the classifier layer at the top to learn how to map different\nfeature vectors to class identities.\n\nWhen more data is available, learning begins to extract enough useful knowledge\nto exceed the performance of randomly chosen parameters. Glorot et al. (201 1a)\nshowed that learning is far easier in deep rectified linear networks than in deep\nnetworks that have curvature or two-sided saturation in their activation functions.\n\n226\n", "CHAPTER 6. DEEP FEEDFORWARD NETWORKS\n\nRectified linear units are also of historical interest because they show that\nneuroscience has continued to have an influence on the development of deep\nlearning algorithms. Glorot ef al. (201la) motivate rectified linear units from\nbiological considerations. The half-rectifying nonlinearity was intended to capture\nthese properties of biological neurons: 1) For some inputs, biological neurons are\ncompletely inactive. 2) For some inputs, a biological neuron\u2019s output is proportional\nto its input. 3) Most of the time, biological neurons operate in the regime where\nthey are inactive (i.e., they should have sparse activations).\n\nWhen the modern resurgence of deep learning began in 2006, feedforward\nnetworks continued to have a bad reputation. From about 2006-2012, it was widely\nbelieved that feedforward networks would not perform well unless they were assisted\nby other models, such as probabilistic models. Today, it is now known that with the\nright resources and engineering practices, feedforward networks perform very well.\nToday, gradient-based learning in feedforward networks is used as a tool to develop\nprobabilistic models, such as the variational autoencoder and generative adversarial\nnetworks, described in chapter 20. Rather than being viewed as an unreliable\ntechnology that must be supported by other techniques, gradient-based learning in\nfeedforward networks has been viewed since 2012 as a powerful technology that\nmay be applied to many other machine learning tasks. In 2006, the community\nused unsupervised learning to support supervised learning, and now, ironically, it\nis more common to use supervised learning to support unsupervised learning.\n\nFeedforward networks continue to have unfulfilled potential. In the future, we\nexpect they will be applied to many more tasks, and that advances in optimization\nalgorithms and model design will improve their performance even further. This\nchapter has primarily described the neural network family of models. In the\nsubsequent chapters, we turn to how to use these models\u2014how to regularize and\ntrain them.\n\n227\n", "Chapter 7\n\nRegularization for Deep Learning\n\nA central problem in machine learning is how to make an algorithm that will\nperform well not just on the training data, but also on new inputs. Many strategies\nused in machine learning are explicitly designed to reduce the test error, possibly\nat the expense of increased training error. These strategies are known collectively\nas regularization. As we will see there are a great many forms of regularization\navailable to the deep learning practitioner. In fact, developing more effective\nregularization strategies has been one of the major research efforts in the field.\n\nChapter 5 introduced the basic concepts of generalization, underfitting, overfit-\nting, bias, variance and regularization. If you are not already familiar with these\nnotions, please refer to that chapter before continuing with this one.\n\nIn this chapter, we describe regularization in more detail, focusing on regular-\nization strategies for deep models or models that may be used as building blocks\nto form deep models.\n\nSome sections of this chapter deal with standard concepts in machine learning.\nIf you are already familiar with these concepts, feel free to skip the relevant\nsections. However, most of this chapter is concerned with the extension of these\nbasic concepts to the particular case of neural networks.\n\nIn section 5.2.2, we defined regularization as \u201cany modification we make to\na learning algorithm that is intended to reduce its generalization error but not\nits training error.\u201d There are many regularization strategies. Some put extra\nconstraints on a machine learning model, such as adding restrictions on the\nparameter values. Some add extra terms in the objective function that can be\nthought of as corresponding to a soft constraint on the parameter values. If chosen\ncarefully, these extra constraints and penalties can lead to improved performance\n\n228\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\non the test set. Sometimes these constraints and penalties are designed to encode\nspecific kinds of prior knowledge. Other times, these constraints and penalties\nare designed to express a generic preference for a simpler model class in order to\npromote generalization. Sometimes penalties and constraints are necessary to make\nan underdetermined problem determined. Other forms of regularization, known as\nensemble methods, combine multiple hypotheses that explain the training data.\n\nIn the context of deep learning, most regularization strategies are based on\nregularizing estimators. Regularization of an estimator works by trading increased\nbias for reduced variance. An effective regularizer is one that makes a profitable\ntrade, reducing variance significantly while not overly increasing the bias. When we\ndiscussed generalization and overfitting in chapter 5, we focused on three situations,\nwhere the model family being trained either (1) excluded the true data generating\nprocess\u2014corresponding to underfitting and inducing bias, or (2) matched the true\ndata generating process, or (3) included the generating process but also many\nother possible generating processes\u2014the overfitting regime where variance rather\nthan bias dominates the estimation error. The goal of regularization is to take a\nmodel from the third regime into the second regime.\n\nIn practice, an overly complex model family does not necessarily include the\ntarget function or the true data generating process, or even a close approximation\nof either. We almost never have access to the true data generating process so\nwe can never know for sure if the model family being estimated includes the\ngenerating process or not. However, most applications of deep learning algorithms\nare to domains where the true data generating process is almost certainly outside\nthe model family. Deep learning algorithms are typically applied to extremely\ncomplicated domains such as images, audio sequences and text, for which the true\ngeneration process essentially involves simulating the entire universe. To some\nextent, we are always trying to fit a square peg (the data generating process) into\na round hole (our model family).\n\nWhat this means is that controlling the complexity of the model is not a\nsimple matter of finding the model of the right size, with the right number of\nparameters. Instead, we might find\u2014and indeed in practical deep learning scenarios,\nwe almost always do find\u2014that the best fitting model (in the sense of minimizing\ngeneralization error) is a large model that has been regularized appropriately.\n\nWe now review several strategies for how to create such a large, deep, regularized\nmodel.\n\n229\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\n7.1 Parameter Norm Penalties\n\nRegularization has been used for decades prior to the advent of deep learning. Linear\nmodels such as linear regression and logistic regression allow simple, straightforward,\nand effective regularization strategies.\n\nMany regularization approaches are based on limiting the capacity of models,\nsuch as neural networks, linear regression, or logistic regression, by adding a pa-\nrameter norm penalty (8) to the objective function J. We denote the regularized\nobjective function by J:\n\nJ(0;X,y) = J(@;X,y) + aN(G) (7.1)\n\nwhere a \u20ac [0, 00) is a hyperparameter that weights the relative contribution of the\nnorm penalty term, 2, relative to the standard objective function J. Setting a to 0\nresults in no regularization. Larger values of a correspond to more regularization.\n\nWhen our training algorithm minimizes the regularized objective function J it\nwill decrease both the original objective J on the training data and some measure\nof the size of the parameters @ (or some subset of the parameters). Different\nchoices for the parameter norm (2 can result in different solutions being preferred.\nIn this section, we discuss the effects of the various norms when used as penalties\non the model parameters.\n\nBefore delving into the regularization behavior of different norms, we note that\nfor neural networks, we typically choose to use a parameter norm penalty Q that\npenalizes only the weights of the affine transformation at each layer and leaves\nthe biases unregularized. The biases typically require less data to fit accurately\nthan the weights. Each weight specifies how two variables interact. Fitting the\nweight well requires observing both variables in a variety of conditions. Each\nbias controls only a single variable. This means that we do not induce too much\nvariance by leaving the biases unregularized. Also, regularizing the bias parameters\ncan introduce a significant amount of underfitting. We therefore use the vector w\nto indicate all of the weights that should be affected by a norm penalty, while the\nvector @ denotes all of the parameters, including both w and the unregularized\nparameters.\n\nIn the context of neural networks, it is sometimes desirable to use a separate\npenalty with a different a coefficient for each layer of the network. Because it can\nbe expensive to search for the correct value of multiple hyperparameters, it is still\nreasonable to use the same weight decay at all layers just to reduce the size of\nsearch space.\n\n230\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\n7.1.1 L? Parameter Regularization\n\nWe have already seen, in section 5.2.2, one of the simplest and most common kinds\nof parameter norm penalty: the L? parameter norm penalty commonly known as\nweight decay. This regularization strategy drives the weights closer to the origin!\nby adding a regularization term Q(6) = 3||w||3 to the objective function. In other\nacademic communities, L? regularization is also known as ridge regression or\nTikhonov regularization.\n\nWe can gain some insight into the behavior of weight decay regularization\nby studying the gradient of the regularized objective function. To simplify the\npresentation, we assume no bias parameter, so 0 is just w. Such a model has the\nfollowing total objective function:\n\nI(w; X,y) = Sw\" w+ J(w:X,y), (7.2)\n\nwith the corresponding parameter gradient\n\nVw (w;X,y) = aw + Vwd(w; X,y). (7.3)\nTo take a single gradient step to update the weights, we perform this update:\nwe w\u2014\u20ace(awt+ VyJ(w;X,y)). (7.4)\nWritten another way, the update is:\nw < (1 \u2014ca)w \u2014 eVwJ(w; X,y). (7.5)\n\nWe can see that the addition of the weight decay term has modified the learning\nrule to multiplicatively shrink the weight vector by a constant factor on each step,\njust before performing the usual gradient update. This describes what happens in\na single step. But what happens over the entire course of training?\n\nWe will further simplify the analysis by making a quadratic approximation\nto the objective function in the neighborhood of the value of the weights that\nobtains minimal unregularized training cost, w* = arg min,, J(w). If the objective\nfunction is truly quadratic, as in the case of fitting a linear regression model with\n\n\u2018More generally, we could regularize the parameters to be near any specific point in space\nand, surprisingly, still get a regularization effect, but better results will be obtained for a value\ncloser to the true one, with zero being a default value that makes sense when we do not know if\nthe correct value should be positive or negative. Since it is far more common to regularize the\nmodel parameters towards zero, we will focus on this special case in our exposition.\n\n231\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nmean squared error, then the approximation is perfect. The approximation J is\ngiven by\n\n\u00bb 1\n\nJ(8) = J(w*) + 5(w \u2014 w*)'H(w\u2014 w*), (7.6)\nwhere HI is the Hessian matrix of J with respect to w evaluated at w*. There is\nno first-order term in this quadratic approximation, because w* is defined to be a\n\nminimum, where the gradient vanishes. Likewise, because w* is the location of a\nminimum of J, we can conclude that H is positive semidefinite.\n\nThe minimum of J occurs where its gradient\nVwd (w) = H(w \u2014 w*) (7.7)\n\nis equal to 0.\n\nTo study the effect of weight decay, we modify equation 7.7 by adding the\nweight decay gradient. We can now solve for the minimum of the regularized\nversion of J. We use the variable W to represent the location of the minimum.\n\naw + H(w\u2014 w*) =0 (7.8)\n(H +al)w = Hw*\nw = (H +al)\"'Hw\u2019*. (7.10)\n\nAs a approaches 0, the regularized solution wW approaches w*. But what\nhappens as a grows? Because His real and symmetric, we can decompose it\ninto a diagonal matrix A and an orthonormal basis of eigenvectors, Q, such that\nH = QAQ. Applying the decomposition to equation 7.10, we obtain:\n\nw = (QAQ' +al)\u201c'QAQ 'w* (7.11)\n=[Q(A +01)Q\") QaQrw* (7.12)\n=Q(A+alI) AQ\u2018 u*. (7.13)\n\nWe see that the effect of weight decay is to rescale w* along the axes defined by\nthe eigenvectors of H. Specifically, the component of w* that is aligned with the\ni-th eigenvector of H is rescaled by a factor of oe (You may wish to review\nhow this kind of scaling works, first explained in figure 2.3).\n\nAlong the directions where the eigenvalues of H1 are relatively large, for example,\nwhere A; > a, the effect of regularization is relatively small. However, components\nwith A; < a will be shrunk to have nearly zero magnitude. This effect is illustrated\nin figure 7.1.\n\n232\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nFigure 7.1: An illustration of the effect of L? (or weight decay) regularization on the value\nof the optimal w. The solid ellipses represent contours of equal value of the unregularized\nobjective. The dotted circles represent contours of equal value of the L? regularizer. At\nthe point w, these competing objectives reach an equilibrium. In the first dimension, the\neigenvalue of the Hessian of J is small. The objective function does not increase much\nwhen moving horizontally away from w*. Because the objective function does not express\na strong preference along this direction, the regularizer has a strong effect on this axis.\nThe regularizer pulls w, close to zero. In the second dimension, the objective function\nis very sensitive to movements away from w*. The corresponding eigenvalue is large,\nindicating high curvature. As a result, weight decay affects the position of wz relatively\nlittle.\n\nOnly directions along which the parameters contribute significantly to reducing\nthe objective function are preserved relatively intact. In directions that do not\ncontribute to reducing the objective function, a small eigenvalue of the Hessian\ntells us that movement in this direction will not significantly increase the gradient.\nComponents of the weight vector corresponding to such unimportant directions\nare decayed away through the use of the regularization throughout training.\n\nSo far we have discussed weight decay in terms of its effect on the optimization\nof an abstract, general, quadratic cost function. How do these effects relate to\nmachine learning in particular? We can find out by studying linear regression, a\nmodel for which the true cost function is quadratic and therefore amenable to the\nsame kind of analysis we have used so far. Applying the analysis again, we will\nbe able to obtain a special case of the same results, but with the solution now\nphrased in terms of the training data. For linear regression, the cost function is\n\n233\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nthe sum of squared errors:\n(Xw \u2014y)'(Xw \u2014 y). (7.14)\nWhen we add L? regularization, the objective function changes to\n(Xw\u2014y)\"(Xw\u2014y)+50w'w. (7.15)\nThis changes the normal equations for the solution from\nw=(X'X)lxTy (7.16)\n\nto\n\nw=(X'X+al) lxXTy. (7.17)\nThe matrix X ' X in equation 7.16 is proportional to the covariance matrix a X'X.\nUsing L? regularization replaces this matrix with (xX'X + al yt in equation 7.17.\nThe new matrix is the same as the original one, but with the addition of a to the\ndiagonal. The diagonal entries of this matrix correspond to the variance of each\ninput feature. We can see that L? regularization causes the learning algorithm\nto \u201cperceive\u201d the input X as having higher variance, which makes it shrink the\nweights on features whose covariance with the output target is low compared to\nthis added variance.\n\n7.1.2 L' Regularization\n\nWhile L? weight decay is the most common form of weight decay, there are other\nways to penalize the size of the model parameters. Another option is to use L!\nregularization.\n\nFormally, L' regularization on the model parameter w is defined as:\n\n(8) = |lwlh, = > lesl, (7.18)\n\nthat is, as the sum of absolute values of the individual parameters.? We will\nnow discuss the effect of L' regularization on the simple linear regression model,\nwith no bias parameter, that we studied in our analysis of L? regularization. In\nparticular, we are interested in delineating the differences between L! and L? forms\n\n? As with L? regularization, we could regularize the parameters towards a value that is not\nzero, but instead towards some parameter value w). In that case the L* regularization would\nintroduce the term (0) = ||w \u2014 w ||1 = Y, [wi ww? |.\n\n234\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nof regularization. As with L? weight decay, L' weight decay controls the strength\nof the regularization by scaling the penalty Q using a positive hyperparameter a.\nThus, the regularized objective function J(w;X, y) is given by\n\nJ(w; X,y) =allwlhi + J(w; X,y), (7.19)\n\nwith the corresponding gradient (actually, sub-gradient):\n\nVw (w; X,y) = asign(w) + VwI(X, y;w) (7.20)\n\nwhere sign(w) is simply the sign of w applied element-wise.\n\nBy inspecting equation 7.20, we can see immediately that the effect of L1\nregularization is quite different from that of L? regularization. Specifically, we can\nsee that the regularization contribution to the gradient no longer scales linearly\nwith cach w;; instead it is a constant factor with a sign equal to sign(w;). One\nconsequence of this form of the gradient is that we will not necessarily see clean\nalgebraic solutions to quadratic approximations of J(X,y;w) as we did for L?\nregularization.\n\nOur simple linear model has a quadratic cost function that we can represent\nvia its Taylor series. Alternately, we could imagine that this is a truncated Taylor\nseries approximating the cost function of a more sophisticated model. The gradient\nin this setting is given by\n\nVwJ(w) = H(w \u2014 w%), (7.21)\nwhere, again, H is the Hessian matrix of J with respect to w evaluated at w\u201d.\n\nBecause the L' penalty does not admit clean algebraic expressions in the case\nof a fully general Hessian, we will also make the further simplifying assumption\nthat the Hessian is diagonal, H = diag([Hi1,...,Hnn]), where each Hi; > 0.\nThis assumption holds if the data for the linear regression problem has been\npreprocessed to remove all correlation between the input features, which may be\naccomplished using PCA.\n\nOur quadratic approximation of the L' regularized objective function decom-\nposes into a sum over the parameters:\n\nJ(w; X,y) = J(w*; X,y) 4 S> Sis w*) 4 alusl). (7.22)\n\nThe problem of minimizing this approximate cost function has an analytical solution\n(for each dimension 7), with the following form:\n\nwi = sign(w;) max {lei - oh . (7.23)\nat\n\n235\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nConsider the situation where w; > 0 for all 7. There are two possible outcomes:\n\n1. The case where w7 < is Here the optimal value of w; under the regularized\nobjective is simply w; = 0. This occurs because the contribution of J (w;X,y)\nto the regularized objective J(w;X,y) is overwhelmed\u2014in direction i\u2014by\n\nthe L! regularization which pushes the value of w; to zero.\n\n2. The case where w* > Ae . In this case, the regularization does not move the\noptimal value of w; to zero but instead it just shifts it in that direction by a\ndistance equal to Ae\n\nA similar process happens when w; < 0, but with the L* penalty making w; less\nnegative by Hs or 0.\n\nIn comparison to L? regularization, L' regularization results in a solution that\nis more sparse. Sparsity in this context refers to the fact that some parameters\nhave an optimal value of zero. The sparsity of L! regularization is a qualitatively\ndifferent behavior than arises with L? regularization. Equation 7.13 gave the\nsolution w for L? regularization. If we revisit that equation using the assumption\nof a diagonal and positive definite Hessian H that we introduced for our analysis of\n\ni,t\n\n. ~ H, ~ .\nL* regularization, we find that w; = Hat = wi. If wi was nonzero, then w; remains\nii\n\nnonzero. This demonstrates that L? regularization does not cause the parameters\nto become sparse, while L! regularization may do so for large enough a.\n\nThe sparsity property induced by L! regularization has been used extensively\nas a feature selection mechanism. Feature selection simplifies a machine learning\nproblem by choosing which subset of the available features should be used. In\nparticular, the well known LASSO (Tibshirani, 1995) (least absolute shrinkage and\nselection operator) model integrates an L penalty with a linear model and a least\nsquares cost function. The L! penalty causes a subset of the weights to become\nzero, suggesting that the corresponding features may safely be discarded.\n\nIn section 5.6.1, we saw that many regularization strategies can be interpreted\nas MAP Bayesian inference, and that in particular, L? regularization is equivalent\nto MAP Bayesian inference with a Gaussian prior on the weights. For L! regu-\nlarization, the penalty aQ(w) = a)\u00b0; |w| used to regularize a cost function is\nequivalent to the log-prior term that is maximized by MAP Bayesian inference\nwhen the prior is an isotropic Laplace distribution (equation 3.26) over w \u20ac R\u201d:\n\n1\nlog p(w) = S- log Laplace(w \u00a2 0, a) = \u2014a||w||1 +nloga\u2014nlog2. (7.24)\n\na\n\n236\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nFrom the point of view of learning via maximization with respect to w, we can\nignore the log a \u2014 log 2 terms because they do not depend on w.\n\n7.2. Norm Penalties as Constrained Optimization\n\nConsider the cost function regularized by a parameter norm penalty:\nJ(8;X,y) = J(O; X,y) + aQ(6). (7.25)\n\nRecall from section 4.4 that we can minimize a function subject to constraints\nby constructing a generalized Lagrange function, consisting of the original objective\nfunction plus a set of penalties. Each penalty is a product between a coefficient,\ncalled a Karush-\u2014Kuhn\u2014Tucker (KKT) multiplier, and a function representing\nwhether the constraint is satisfied. If we wanted to constrain 2(@) to be less than\nsome constant k, we could construct a generalized Lagrange function\n\n\u00a3(0,0; X,y) = J(8; X,y) +.0(2(8) \u2014 hi). (7.26)\nThe solution to the constrained problem is given by\n\n6* = argmin max L(6,a). (7.27)\n\n() a,a>0\n\nAs described in section 4.4, solving this problem requires modifying both @\nand a. Section 4.5 provides a worked example of linear regression with an L?\nconstraint. Many different procedures are possible\u2014some may use gradient descent,\nwhile others may use analytical solutions for where the gradient is zero\u2014but in all\nprocedures a must increase whenever (0) > k and decrease whenever (2.(@) < k.\nAll positive @ encourage (8) to shrink. The optimal value a* will encourage 2(0)\nto shrink, but not so strongly to make 2(@) become less than k.\n\nTo gain some insight into the effect of the constraint, we can fix a* and view\nthe problem as just a function of 0:\n\n0* = arg min \u00a3(0, a*) = argmin J(0; X, y) + a*O(8). (7.28)\n0 6\n\nThis is exactly the same as the regularized training problem of minimizing J.\nWe can thus think of a parameter norm penalty as imposing a constraint on the\nweights. If Q is the L? norm, then the weights are constrained to lie in an L?\nball. If Q is the L! norm, then the weights are constrained to lie in a region of\n\n237\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nlimited L' norm. Usually we do not know the size of the constraint region that we\nimpose by using weight decay with coefficient a* because the value of a* does not\ndirectly tell us the value of &. In principle, one can solve for k, but the relationship\nbetween & and a* depends on the form of J. While we do not know the exact size\nof the constraint region, we can control it roughly by increasing or decreasing @\nin order to grow or shrink the constraint region. Larger a will result in a smaller\nconstraint region. Smaller a will result in a larger constraint region.\n\nSometimes we may wish to use explicit constraints rather than penalties. As\ndescribed in section 4.4, we can modify algorithms such as stochastic gradient\ndescent to take a step downhill on J(@) and then project @ back to the nearest\npoint that satisfies Q(0) < k. This can be useful if we have an idea of what value\nof k is appropriate and do not want to spend time searching for the value of a that\ncorresponds to this k.\n\nAnother reason to use explicit constraints and reprojection rather than enforcing\nconstraints with penalties is that penalties can cause non-convex optimization\nprocedures to get stuck in local minima corresponding to small 8. When training\nneural networks, this usually manifests as neural networks that train with several\n\u201cdead units.\u201d These are units that do not contribute much to the behavior of the\nfunction learned by the network because the weights going into or out of them are\nall very small. When training with a penalty on the norm of the weights, these\nconfigurations can be locally optimal, even if it is possible to significantly reduce\nJ by making the weights larger. Explicit constraints implemented by re-projection\ncan work much better in these cases because they do not encourage the weights\nto approach the origin. Explicit constraints implemented by re-projection only\nhave an effect when the weights become large and attempt to leave the constraint\nregion.\n\nFinally, explicit constraints with reprojection can be useful because they impose\nsome stability on the optimization procedure. When using high learning rates, it\nis possible to encounter a positive feedback loop in which large weights induce\nlarge gradients which then induce a large update to the weights. If these updates\nconsistently increase the size of the weights, then @ rapidly moves away from\nthe origin until numerical overflow occurs. Explicit constraints with reprojection\nprevent this feedback loop from continuing to increase the magnitude of the weights\nwithout bound. Hinton et al. (2012c) recommend using constraints combined with\na high learning rate to allow rapid exploration of parameter space while maintaining\nsome stability.\n\nIn particular, Hinton et al. (2012c) recommend a strategy introduced by Srebro\nand Shraibman (2005): constraining the norm of each column of the weight matrix\n\n238\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nof a neural net layer, rather than constraining the Frobenius norm of the entire\nweight matrix. Constraining the norm of each column separately prevents any one\nhidden unit from having very large weights. If we converted this constraint into a\npenalty in a Lagrange function, it would be similar to L? weight decay but with a\nseparate KKT multiplier for the weights of each hidden unit. Each of these KKT\nmultipliers would be dynamically updated separately to make each hidden unit\nobey the constraint. In practice, column norm limitation is always implemented as\nan explicit constraint with reprojection.\n\n7.3 Regularization and Under-Constrained Problems\n\nIn some cases, regularization is necessary for machine learning problems to be prop-\nerly defined. Many linear models in machine learning, including linear regression\nand PCA, depend on inverting the matrix X 'X. This is not possible whenever\nX! X is singular. This matrix can be singular whenever the data generating distri-\nbution truly has no variance in some direction, or when no variance is observed in\nsome direction because there are fewer examples (rows of X) than input features\n(columns of X). In this case, many forms of regularization correspond to inverting\nX! X +al instead. This regularized matrix is guaranteed to be invertible.\n\nThese linear problems have closed form solutions when the relevant matrix\nis invertible. It is also possible for a problem with no closed form solution to be\nunderdetermined. An example is logistic regression applied to a problem where\nthe classes are linearly separable. If a weight vector w is able to achieve perfect\nclassification, then 2w will also achieve perfect classification and higher likelihood.\nAn iterative optimization procedure like stochastic gradient descent will continually\nincrease the magnitude of w and, in theory, will never halt. In practice, a numerical\nimplementation of gradient descent will eventually reach sufficiently large weights\nto cause numerical overflow, at which point its behavior will depend on how the\nprogrammer has decided to handle values that are not real numbers.\n\nMost forms of regularization are able to guarantee the convergence of iterative\nmethods applied to underdetermined problems. For example, weight decay will\ncause gradient descent to quit increasing the magnitude of the weights when the\nslope of the likelihood is equal to the weight decay coefficient.\n\nThe idea of using regularization to solve underdetermined problems extends\nbeyond machine learning. The same idea is useful for several basic linear algebra\nproblems.\n\nAs we saw in section 2.9, we can solve underdetermined linear equations using\n\n239\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nthe Moore-Penrose pseudoinverse. Recall that one definition of the pseudoinverse\nX* of a matrix X is\n\nXt = lim(X'X + ar) 1X\". (7.29)\na\\0\n\nWe can now recognize equation 7.29 as performing linear regression with weight\ndecay. Specifically, equation 7.29 is the limit of equation 7.17 as the regularization\ncoefficient shrinks to zero. We can thus interpret the pseudoinverse as stabilizing\nunderdetermined problems using regularization.\n\n7.4 Dataset Augmentation\n\nThe best way to make a machine learning model generalize better is to train it on\nmore data. Of course, in practice, the amount of data we have is limited. One way\nto get around this problem is to create fake data and add it to the training set.\nFor some machine learning tasks, it is reasonably straightforward to create new\nfake data.\n\nThis approach is easiest for classification. A classifier needs to take a compli-\ncated, high dimensional input \u00ab2 and summarize it with a single category identity y.\nThis means that the main task facing a classifier is to be invariant to a wide variety\nof transformations. We can generate new (a, y) pairs easily just by transforming\nthe x inputs in our training set.\n\nThis approach is not as readily applicable to many other tasks. For example, it\nis difficult to generate new fake data for a density estimation task unless we have\nalready solved the density estimation problem.\n\nDataset augmentation has been a particularly effective technique for a specific\nclassification problem: object recognition. Images are high dimensional and include\nan enormous variety of factors of variation, many of which can be easily simulated.\nOperations like translating the training images a few pixels in each direction can\noften greatly improve generalization, even if the model has already been designed to\nbe partially translation invariant by using the convolution and pooling techniques\ndescribed in chapter 9. Many other operations such as rotating the image or scaling\nthe image have also proven quite effective.\n\nOne must be careful not to apply transformations that would change the correct\nclass. For example, optical character recognition tasks require recognizing the\ndifference between \u2018b\u2019 and \u2018d\u2019 and the difference between \u20186\u2019 and \u20189\u2019, so horizontal\nflips and 180\u00b0 rotations are not appropriate ways of augmenting datasets for these\ntasks.\n\n240\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nThere are also transformations that we would like our classifiers to be invariant\nto, but which are not easy to perform. For example, out-of-plane rotation can not\nbe implemented as a simple geometric operation on the input pixels.\n\nDataset augmentation is effective for speech recognition tasks as well (Jaitly\nand Hinton, 2013).\n\nInjecting noise in the input to a neural network (Sietsma and Dow, 1991)\ncan also be seen as a form of data augmentation. For many classification and\neven some regression tasks, the task should still be possible to solve even if small\nrandom noise is added to the input. Neural networks prove not to be very robust\nto noise, however (Tang and Eliasmith, 2010). One way to improve the robustness\nof neural networks is simply to train them with random noise applied to their\ninputs. Input noise injection is part of some unsupervised learning algorithms such\nas the denoising autoencoder (Vincent et al., 2008). Noise injection also works\nwhen the noise is applied to the hidden units, which can be seen as doing dataset\naugmentation at multiple levels of abstraction. Poole ef al. (2014) recently showed\nthat this approach can be highly effective provided that the magnitude of the\nnoise is carefully tuned. Dropout, a powerful regularization strategy that will be\ndescribed in section 7.12, can be seen as a process of constructing new inputs by\nmultiplying by noise.\n\nWhen comparing machine learning benchmark results, it is important to take\nthe effect of dataset augmentation into account. Often, hand-designed dataset\naugmentation schemes can dramatically reduce the generalization error of a machine\nlearning technique. To compare the performance of one machine learning algorithm\nto another, it is necessary to perform controlled experiments. When comparing\nmachine learning algorithm A and machine learning algorithm B, it is necessary\nto make sure that both algorithms were evaluated using the same hand-designed\ndataset augmentation schemes. Suppose that algorithm A performs poorly with\nno dataset augmentation and algorithm B performs well when combined with\nnumerous synthetic transformations of the input. In such a case it is likely the\nsynthetic transformations caused the improved performance, rather than the use\nof machine learning algorithm B. Sometimes deciding whether an experiment\nhas been properly controlled requires subjective judgment. For example, machine\nlearning algorithms that inject noise into the input are performing a form of dataset\naugmentation. Usually, operations that are generally applicable (such as adding\nGaussian noise to the input) are considered part of the machine learning algorithm,\nwhile operations that are specific to one application domain (such as randomly\ncropping an image) are considered to be separate pre-processing steps.\n\n241\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\n7.5 Noise Robustness\n\nSection 7.4 has motivated the use of noise applied to the inputs as a dataset\naugmentation strategy. For some models, the addition of noise with infinitesimal\nvariance at the input of the model is equivalent to imposing a penalty on the\nnorm of the weights (Bishop, 1995a,b). In the general case, it is important to\nremember that noise injection can be much more powerful than simply shrinking\nthe parameters, especially when the noise is added to the hidden units. Noise\napplied to the hidden units is such an important topic that it merit its own separate\ndiscussion; the dropout algorithm described in section 7.12 is the main development\nof that approach.\n\nAnother way that noise has been used in the service of regularizing models\nis by adding it to the weights. This technique has been used primarily in the\ncontext of recurrent neural networks (Jim et al., 1996; Graves, 2011). This can\nbe interpreted as a stochastic implementation of Bayesian inference over the\nweights. The Bayesian treatment of learning would consider the model weights\nto be uncertain and representable via a probability distribution that reflects this\nuncertainty. Adding noise to the weights is a practical, stochastic way to reflect\nthis uncertainty.\n\nNoise applied to the weights can also be interpreted as equivalent (under some\nassumptions) to a more traditional form of regularization, encouraging stability of\nthe function to be learned. Consider the regression setting, where we wish to train\na function \u00a7(x) that maps a set of features x to a scalar using the least-squares\ncost function between the model predictions g(a) and the true values y:\n\nJ = Ep(xy) [((@) \u2014 y)\"] . (7.30)\n\nThe training set consists of m labeled examples {(x (1) y), L.5(@ (m) yor\u2122)}.\n\nWe now assume that with each input presentation we also include a random\nperturbation ew ~ N(e; 0,7) of the network weights. Let us imagine that we\nhave a standard l-layer MLP. We denote the perturbed model as ey, (a). Despite\nthe injection of noise, we are still interested in minimizing the squared error of the\noutput of the network. The objective function thus becomes:\n\nJw = Epva,y,ew) [Gew (x) \u2014 w| (7.31)\n= E,(x,y,ew) ew (z) ~ 2yGew (a) + y\"] : (7.32)\n\nFor small 7, the minimization of J with added weight noise (with covariance\nnI) is equivalent to minimization of J with an additional regularization term:\n\n242\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nnEp(a,y) [IV w9(x)||?]. This form of regularization encourages the parameters to\ngo to regions of parameter space where small perturbations of the weights have\na relatively small influence on the output. In other words, it pushes the model\ninto regions where the model is relatively insensitive to small variations in the\nweights, finding points that are not merely minima, but minima surrounded by\nflat regions (Hochreiter and Schmidhuber, 1995). In the simplified case of linear\nregression (where, for instance, j(a) = w'a +), this regularization term collapses\ninto 7E,(e) [||||?], which is not a function of parameters and therefore does not\n\ncontribute to the gradient of Jw with respect to the model parameters.\n\n7.5.1 Injecting Noise at the Output Targets\n\nMost datasets have some amount of mistakes in the y labels. It can be harmful to\nmaximize log p(y | x) when y is a mistake. One way to prevent this is to explicitly\nmodel the noise on the labels. For example, we can assume that for some small\nconstant \u00a2\u20ac, the training set label y is correct with probability 1\u2014 \u20ac, and otherwise\nany of the other possible labels might be correct. This assumption is easy to\nincorporate into the cost function analytically, rather than by explicitly drawing\nnoise samples. For example, label smoothing regularizes a model based on a\nsoftmax with & output values by replacing the hard 0 and 1 classification targets\nwith targets of <4, and 1\u2014e, respectively. The standard cross-entropy loss may\nthen be used with these soft targets. Maximum likelihood learning with a softmax\nclassifier and hard targets may actually never converge\u2014the softmax can never\npredict a probability of exactly 0 or exactly 1, so it will continue to learn larger\nand larger weights, making more extreme predictions forever. It is possible to\nprevent this scenario using other regularization strategies like weight decay. Label\nsmoothing has the advantage of preventing the pursuit of hard probabilities without\ndiscouraging correct classification. This strategy has been used since the 1980s\nand continues to be featured prominently in modern neural networks (Szegedy\net al., 2015).\n\n7.6 Semi-Supervised Learning\n\nIn the paradigm of semi-supervised learning, both unlabeled examples from P(x)\nand labeled examples from P(x, y) are used to estimate P(y | x) or predict y from\nx.\n\nIn the context of deep learning, semi-supervised learning usually refers to\nlearning a representation h = f(a). The goal is to learn a representation so\n\n243\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nthat examples from the same class have similar representations. Unsupervised\nlearning can provide useful cues for how to group examples in representation\nspace. Examples that cluster tightly in the input space should be mapped to\nsimilar representations. A linear classifier in the new space may achieve better\ngeneralization in many cases (Belkin and Niyogi, 2002; Chapelle et al., 2003). A\nlong-standing variant of this approach is the application of principal components\nanalysis as a pre-processing step before applying a classifier (on the projected\ndata).\n\nInstead of having separate unsupervised and supervised components in the\nmodel, one can construct models in which a generative model of either P(x) or\nP(x,y) shares parameters with a discriminative model of P(y | x). One can\nthen trade-off the supervised criterion \u2014 log P(y | x) with the unsupervised or\ngenerative one (such as \u2014 log P(x) or \u2014 log P(x, y)). The generative criterion then\nexpresses a particular form of prior belief about the solution to the supervised\nlearning problem (Lasserre ef al., 2006), namely that the structure of P(x) is\nconnected to the structure of P(y | x) in a way that is captured by the shared\nparametrization. By controlling how much of the generative criterion is included\nin the total criterion, one can find a better trade-off than with a purely generative\nor a purely discriminative training criterion (Lasserre ef al., 2006; Larochelle and\nBengio, 2008).\n\nSalakhutdinov and Hinton (2008) describe a method for learning the kernel\nfunction of a kernel machine used for regression, in which the usage of unlabeled\nexamples for modeling P(x) improves P(y | x) quite significantly.\n\nSee Chapelle et al. (2006) for more information about semi-supervised learning.\n\n7.7 Multi-Task Learning\n\nMulti-task learning (Caruana, 1993) is a way to improve generalization by pooling\nthe examples (which can be seen as soft constraints imposed on the parameters)\narising out of several tasks. In the same way that additional training examples\nput more pressure on the parameters of the model towards values that generalize\nwell, when part of a model is shared across tasks, that part of the model is more\nconstrained towards good values (assuming the sharing is justified), often yielding\nbetter generalization.\n\nFigure 7.2 illustrates a very common form of multi-task learning, in which\ndifferent supervised tasks (predicting y) given x) share the same input x, as well\nas some intermediate-level representation h&#\"e4) capturing a common pool of\n\n244\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nfactors. The model can generally be divided into two kinds of parts and associated\nparameters:\n\n1. Task-specific parameters (which only benefit from the examples of their task\nto achieve good generalization). These are the upper layers of the neural\nnetwork in figure 7.2.\n\n2. Generic parameters, shared across all the tasks (which benefit from the\npooled data of all the tasks). These are the lower layers of the neural network\n\nin figure 7.2.\n\nFigure 7.2: Multi-task learning can be cast in several ways in deep learning frameworks\nand this figure illustrates the common situation where the tasks share a common input but\ninvolve different target random variables. The lower layers of a deep network (whether it\nis supervised and feedforward or includes a generative component with downward arrows)\ncan be shared across such tasks, while task-specific parameters (associated respectively\nwith the weights into and from h\u201c) and h'?)) can be learned on top of those yielding a\nshared representation hh@red), The underlying assumption is that there exists a common\npool of factors that explain the variations in the input x, while each task is associated\nwith a subset of these factors. In this example, it is additionally assumed that top-level\nhidden units h@ and h) are specialized to each task (respectively predicting y\u201c and\ny (?)) while some intermediate-level representation h#\"e9) is shared across all tasks. In\nthe unsupervised learning context, it makes sense for some of the top-level factors to be\nassociated with none of the output tasks (h)): these are the factors that explain some of\nthe input variations but are not relevant for predicting y\u201c or y\u00ae).\n\nImproved generalization and generalization error bounds (Baxter, 1995) can be\nachieved because of the shared parameters, for which statistical strength can be\n\n245\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\ne\u2014 Training set loss\n\n\u2014 Validation set loss\n\nLoss (negative log-likelihood)\n\n0 50 100 150 200 250\n\nTime (epochs)\n\nFigure 7.3: Learning curves showing how the negative log-likelihood loss changes over\ntime (indicated as number of training iterations over the dataset, or epochs). In this\nexample, we train a maxout network on MNIST. Observe that the training objective\ndecreases consistently over time, but the validation set average loss eventually begins to\nincrease again, forming an asymmetric U-shaped curve.\n\ngreatly improved (in proportion with the increased number of examples for the\nshared parameters, compared to the scenario of single-task models). Of course this\nwill happen only if some assumptions about the statistical relationship between\nthe different tasks are valid, meaning that there is something shared across some\nof the tasks.\n\nFrom the point of view of deep learning, the underlying prior belief is the\nfollowing: among the factors that explain the variations observed in the data\nassociated with the different tasks, some are shared across two or more tasks.\n\n7.8 Early Stopping\n\nWhen training large models with sufficient representational capacity to overfit\nthe task, we often observe that training error decreases steadily over time, but\nvalidation set error begins to rise again. See figure 7.3 for an example of this\nbehavior. This behavior occurs very reliably.\n\nThis means we can obtain a model with better validation set error (and thus,\nhopefully better test set error) by returning to the parameter setting at the point in\ntime with the lowest validation set error. Every time the error on the validation set\nimproves, we store a copy of the model parameters. When the training algorithm\nterminates, we return these parameters, rather than the latest parameters. The\n\n246\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nalgorithm terminates when no parameters have improved over the best recorded\nvalidation error for some pre-specified number of iterations. This procedure is\nspecified more formally in algorithm 7.1.\n\nAlgorithm 7.1 The early stopping meta-algorithm for determining the best\namount of time to train. This meta-algorithm is a general strategy that works\nwell with a variety of training algorithms and ways of quantifying error on the\nvalidation set.\nLet n be the number of steps between evaluations.\nLet p be the \u201cpatience,\u201d the number of times to observe worsening validation set\nerror before giving up.\nLet 0, be the initial parameters.\n0+ 90,\niO\nj<0\nve oO\nore\nwei\nwhile j < p do\nUpdate @ by running the training algorithm for n steps.\ntH\u2014ttn\nv\u2019 \u00a9 ValidationSetError(6)\nif v' <v then\nj<0\nore\nPot\nve\nelse\njogjtl\nend if\nend while\nBest parameters are 6*, best number of training steps is 7\n\nThis strategy is known as early stopping. It is probably the most commonly\nused form of regularization in deep learning. Its popularity is due both to its\neffectiveness and its simplicity.\n\nOne way to think of early stopping is as a very efficient hyperparameter selection\nalgorithm. In this view, the number of training steps is just another hyperparameter.\nWe can see in figure 7.3 that this hyperparameter has a U-shaped validation set\n\n247\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nperformance curve. Most hyperparameters that control model capacity have such a\nU-shaped validation set performance curve, as illustrated in figure 5.3. In the case of\nearly stopping, we are controlling the effective capacity of the model by determining\nhow many steps it can take to fit the training set. Most hyperparameters must be\nchosen using an expensive guess and check process, where we set a hyperparameter\nat the start of training, then run training for several steps to see its effect. The\n\u201ctraining time\u201d hyperparameter is unique in that by definition a single run of\ntraining tries out many values of the hyperparameter. The only significant cost\nto choosing this hyperparameter automatically via early stopping is running the\nvalidation set evaluation periodically during training. Ideally, this is done in\nparallel to the training process on a separate machine, separate CPU, or separate\nGPU from the main training process. If such resources are not available, then the\ncost of these periodic evaluations may be reduced by using a validation set that is\nsmall compared to the training set or by evaluating the validation set error less\nfrequently and obtaining a lower resolution estimate of the optimal training time.\n\nAn additional cost to early stopping is the need to maintain a copy of the\nbest parameters. This cost is generally negligible, because it is acceptable to store\nthese parameters in a slower and larger form of memory (for example, training in\nGPU memory, but storing the optimal parameters in host memory or on a disk\ndrive). Since the best parameters are written to infrequently and never read during\ntraining, these occasional slow writes have little effect on the total training time.\n\nEarly stopping is a very unobtrusive form of regularization, in that it requires\nalmost no change in the underlying training procedure, the objective function,\nor the set of allowable parameter values. This means that it is easy to use early\nstopping without damaging the learning dynamics. This is in contrast to weight\ndecay, where one must be careful not to use too much weight decay and trap the\nnetwork in a bad local minimum corresponding to a solution with pathologically\nsmall weights.\n\nEarly stopping may be used either alone or in conjunction with other regulariza-\ntion strategies. Even when using regularization strategies that modify the objective\nfunction to encourage better generalization, it is rare for the best generalization to\noccur at a local minimum of the training objective.\n\nEarly stopping requires a validation set, which means some training data is not\nfed to the model. To best exploit this extra data, one can perform extra training\nafter the initial training with early stopping has completed. In the second, extra\ntraining step, all of the training data is included. There are two basic strategies\none can use for this second training procedure.\n\nOne strategy (algorithm 7.2) is to initialize the model again and retrain on all\n\n248\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nof the data. In this second training pass, we train for the same number of steps as\nthe early stopping procedure determined was optimal in the first pass. There are\nsome subtleties associated with this procedure. For example, there is not a good\nway of knowing whether to retrain for the same number of parameter updates or\nthe same number of passes through the dataset. On the second round of training,\neach pass through the dataset will require more parameter updates because the\ntraining set is bigger.\n\nAlgorithm 7.2 A meta-algorithm for using early stopping to determine how long\nto train, then retraining on all the data.\n\nLet X (in) and yin) be the training set.\n\nSplit Xx (train) and yftrain) into (XSubtrain) | X (valid)) and (y(subtrain) | yvalid))\nrespectively.\n\nRun early stopping (algorithm 7.1) starting from random @ using X ( and\nyoubtrain) for training data and X04) and y*lid) for validation data. This\nreturns 7*, the optimal number of steps.\n\nSet 8 to random values again.\n\nTrain on XT\") and y(t\") for i steps.\n\nsubtrain)\n\nAnother strategy for using all of the data is to keep the parameters obtained\nfrom the first round of training and then continue training but now using all of\nthe data. At this stage, we now no longer have a guide for when to stop in terms\nof a number of steps. Instead, we can monitor the average loss function on the\nvalidation set, and continue training until it falls below the value of the training\nset objective at which the early stopping procedure halted. This strategy avoids\nthe high cost of retraining the model from scratch, but is not as well-behaved. For\nexample, there is not any guarantee that the objective on the validation set will\never reach the target value, so this strategy is not even guaranteed to terminate.\nThis procedure is presented more formally in algorithm 7.3.\n\nEarly stopping is also useful because it reduces the computational cost of the\ntraining procedure. Besides the obvious reduction in cost due to limiting the number\nof training iterations, it also has the benefit of providing regularization without\nrequiring the addition of penalty terms to the cost function or the computation of\nthe gradients of such additional terms.\n\nHow early stopping acts as a regularizer: So far we have stated that early\nstopping is a regularization strategy, but we have supported this claim only by\nshowing learning curves where the validation set error has a U-shaped curve. What\n\n249\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nAlgorithm 7.3 Meta-algorithm using early stopping to determine at what objec-\ntive value we start to overfit, then continue training until that value is reached.\n\nLet X(#i2) and yin) be the training set.\nSplit xX (train) and (train) into (X(subtrain) X (valid)) and (ysubtrain) | y(valid))\nrespectively.\nRun early stopping (algorithm 7.1) starting from random 6 using X*>t@in) and\nyoubtrain) for training data and X04) and y*lid) for validation data. This\nupdates 0.\nec J(6, X (subtrain) | ysubtrain)\nwhile J(0, X79), yl) > \u20ac do\n\nTrain on Xi) and y(t\u2122 for n steps.\n\nend while\n\nis the actual mechanism by which early stopping regularizes the model? Bishop\n(1995a) and Sj\u00e9berg and Ljung (1995) argued that early stopping has the effect of\nrestricting the optimization procedure to a relatively small volume of parameter\nspace in the neighborhood of the initial parameter value 05, as illustrated in\nfigure 7.4. More specifically, imagine taking 7 optimization steps (corresponding\nto 7 training iterations) and with learning rate \u00ab. We can view the product er\nas a measure of effective capacity. Assuming the gradient is bounded, restricting\nboth the number of iterations and the learning rate limits the volume of parameter\nspace reachable from 0,. In this sense, er behaves as if it were the reciprocal of\nthe coefficient used for weight decay.\n\nIndeed, we can show how\u2014in the case of a simple linear model with a quadratic\nerror function and simple gradient descent\u2014early stopping is equivalent to L?\nregularization.\n\nIn order to compare with classical [? regularization, we examine a simple\nsetting where the only parameters are linear weights (9 = w). We can model\nthe cost function J with a quadratic approximation in the neighborhood of the\nempirically optimal value of the weights w*:\n\nH(0) = J(w*) +3 (w ~ w\") Hw \u2014 w\"), (7.33)\n\nwhere H is the Hessian matrix of J with respect to w evaluated at w*. Given the\nassumption that w* is a minimum of J(w), we know that H is positive semidefinite.\nUnder a local Taylor series approximation, the gradient is given by:\n\nVwd(w) = H(w \u2014 w\u2019*). (7.34)\n250\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nFigure 7.4: An illustration of the effect of early stopping. (Left)/The solid contour lines\nindicate the contours of the negative log-likelihood. The dashed line indicates the trajectory\ntaken by SGD beginning from the origin. Rather than stopping at the point w* that\nminimizes the cost, early stopping results in the trajectory stopping at an earlier point w.\n(Right)An illustration of the effect of L? regularization for comparison. The dashed circles\nindicate the contours of the L? penalty, which causes the minimum of the total cost to lie\nnearer the origin than the minimum of the unregularized cost.\n\nWe are going to study the trajectory followed by the parameter vector during\ntraining. For simplicity, let us set the initial parameter vector to the origin,\u2019 that\nis w\u00a9 = 0. Let us study the approximate behavior of gradient descent on J by\nanalyzing gradient descent on J:\n\nw = wl) \u2014 Vy JS (we) (7.35)\n=w-) \u2014 eH (wl) \u2014 w*) (7.36)\nw \u2014 w* = (I\u2014\u00abH)(w?-) \u2014 w*). (7.37)\n\nLet us now rewrite this expression in the space of the eigenvectors of H, exploiting\n\nthe eigendecomposition of H: H = QAQ', where A is a diagonal matrix and Q\nis an orthonormal basis of eigenvectors.\n\nw \u2014w* = (I eQAQ\u2122)(w \u2014 w*) (7.38)\n\nQ'(w\u2122 \u2014 w*) = (T- eA)Q! (we!) \u2014 w\") (7.39)\n\n3For neural networks, to obtain symmetry breaking between hidden units, we cannot initialize\nall the parameters to 0, as discussed in section 6.2. However, the argument holds for any other\ninitial value w\u00a9.\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nAssuming that w = 0 and that \u00a2\u20ac is chosen to be small enough to guarantee\n|1\u2014\u00abA,| < 1, the parameter trajectory during training after tT parameter updates\nis as follows:\n\nQhw = [I \u2014 (I \u2014\u00abA)\"]Q' wu\u2019. (7.40)\n\nNow, the expression for Q'w in equation 7.13 for L? regularization can be rear-\nranged as:\n\nQ'w=(A+aI)'AQ 'w* (7.41)\nQ' w=([I-(A+al)\u201c'o|Q'w* (7.42)\n\nComparing equation 7.40 and equation 7.42, we see that if the hyperparameters e,\na, and 7 are chosen such that\n\n(I\u2014 A)\u2019 =(A+al)\"'a, (7.43)\n\nthen L? regularization and early stopping can be seen to be equivalent (at least\nunder the quadratic approximation of the objective function). Going even further,\nby taking logarithms and using the series expansion for log(1 +2), we can conclude\nthat if all A; are small (that is, ei \u00ab 1 and A;/a < 1) then\n\n1\n~~ 44\nTR, (7.44)\naw (7.45)\n7 :\n\nThat is, under these assumptions, the number of training iterations Tr plays a role\ninversely proportional to the L? regularization parameter, and the inverse of Te\nplays the role of the weight decay coefficient.\n\nParameter values corresponding to directions of significant curvature (of the\nobjective function) are regularized less than directions of less curvature. Of course,\nin the context of early stopping, this really means that parameters that correspond\nto directions of significant curvature tend to learn early relative to parameters\ncorresponding to directions of less curvature.\n\nThe derivations in this section have shown that a trajectory of length 7 ends\nat a point that corresponds to a minimum of the L?-regularized objective. Early\nstopping is of course more than the mere restriction of the trajectory length;\ninstead, early stopping typically involves monitoring the validation set error in\norder to stop the trajectory at a particularly good point in space. Early stopping\ntherefore has the advantage over weight decay that early stopping automatically\ndetermines the correct amount of regularization while weight decay requires many\ntraining experiments with different values of its hyperparameter.\n\n252\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\n7.9 Parameter Tying and Parameter Sharing\n\nThus far, in this chapter, when we have discussed adding constraints or penalties\nto the parameters, we have always done so with respect to a fixed region or point.\nFor example, L? regularization (or weight decay) penalizes model parameters for\ndeviating from the fixed value of zero. However, sometimes we may need other\nways to express our prior knowledge about suitable values of the model parameters.\nSometimes we might not know precisely what values the parameters should take\nbut we know, from knowledge of the domain and model architecture, that there\nshould be some dependencies between the model parameters.\n\nA common type of dependency that we often want to express is that certain\nparameters should be close to one another. Consider the following scenario: we\nhave two models performing the same classification task (with the same set of\nclasses) but with somewhat different input distributions. Formally, we have model\nA with parameters w4) and model B with parameters w'). The two models\nmap the input to two different, but related outputs: gA) = f(w), x) and\ng\u00ae = g(w\u00ae), x).\n\nLet us imagine that the tasks are similar enough (perhaps with similar input\nand output distributions) that we believe the model parameters should be close\nto each other: Vi, wi should be close to wi), We can leverage this information\nthrough regularization. Specifically, we can use a parameter norm penalty of the\nform: Q(w), w)) = |jw) \u2014 w)||2. Here we used an L? penalty, but other\nchoices are also possible.\n\nThis kind of approach was proposed by Lasserre et al. (2006), who regularized\nthe parameters of one model, trained as a classifier in a supervised paradigm, to\nbe close to the parameters of another model, trained in an unsupervised paradigm\n(to capture the distribution of the observed input data). The architectures were\nconstructed such that many of the parameters in the classifier model could be\npaired to corresponding parameters in the unsupervised model.\n\nWhile a parameter norm penalty is one way to regularize parameters to be\nclose to one another, the more popular way is to use constraints: to force sets\nof parameters to be equal. This method of regularization is often referred to as\nparameter sharing, because we interpret the various models or model components\nas sharing a unique set of parameters. A significant advantage of parameter sharing\nover regularizing the parameters to be close (via a norm penalty) is that only a\nsubset of the parameters (the unique set) need to be stored in memory. In certain\nmodels\u2014such as the convolutional neural network\u2014this can lead to significant\nreduction in the memory footprint of the model.\n\n253\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nConvolutional Neural Networks By far the most popular and extensive use\nof parameter sharing occurs in convolutional neural networks (CNNs) applied\nto computer vision.\n\nNatural images have many statistical properties that are invariant to translation.\nFor example, a photo of a cat remains a photo of a cat if it is translated one pixel\nto the right. CNNs take this property into account by sharing parameters across\nmultiple image locations. The same feature (a hidden unit with the same weights)\nis computed over different locations in the input. This means that we can find a\ncat with the same cat detector whether the cat appears at column 7 or column\ni+ 1 in the image.\n\nParameter sharing has allowed CNNs to dramatically lower the number of unique\nmodel parameters and to significantly increase network sizes without requiring a\ncorresponding increase in training data. It remains one of the best examples of\nhow to effectively incorporate domain knowledge into the network architecture.\n\nCNNs will be discussed in more detail in chapter 9.\n\n7.10 Sparse Representations\n\nWeight decay acts by placing a penalty directly on the model parameters. Another\nstrategy is to place a penalty on the activations of the units in a neural network,\nencouraging their activations to be sparse. This indirectly imposes a complicated\npenalty on the model parameters.\n\nWe have already discussed (in section 7.1.2) how L! penalization induces\na sparse parametrization\u2014meaning that many of the parameters become zero\n(or close to zero). Representational sparsity, on the other hand, describes a\nrepresentation where many of the elements of the representation are zero (or close\nto zero). A simplified view of this distinction can be illustrated in the context of\nlinear regression:\n\n18 40 0 -2 0 0 ;\n\n5 00-10 3 0 \u20185\n\ni} =|05 0 0 0 0\n\n9 100 -1 0 \u20144 Y (7.46)\n3 100 0 -5 0 i\nyeER\u2122 AeRmxn 2eER\"\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\n\u201414 3-1 2 -5 4 1 ;\n1 4 2 -3 -1 1 3 0\n19 =]/-l 5 4 2 -3 -2\n2 3 1 2 -3 0 -3 \u00b0 (7-47)\n23 5.4 2 2 5 -l 0\nye R\u2122 BeR\u2122n he R\u00ae\n\nIn the first expression, we have an example of a sparsely parametrized linear\nregression model. In the second, we have linear regression with a sparse representa-\ntion h of the data x. That is, h is a function of x that, in some sense, represents\nthe information present in x, but does so with a sparse vector.\n\nRepresentational regularization is accomplished by the same sorts of mechanisms\nthat we have used in parameter regularization.\n\nNorm penalty regularization of representations is performed by adding to the\nloss function J a norm penalty on the representation. This penalty is denoted\nQ(h). As before, we denote the regularized loss function by J:\n\nJ(0;X,y) = J(0;X,y) + aQ(h) (7.48)\n\nwhere a \u20ac [0, 00) weights the relative contribution of the norm penalty term, with\nlarger values of a corresponding to more regularization.\n\nJust as an L penalty on the parameters induces parameter sparsity, an L1\npenalty on the elements of the representation induces representational sparsity:\nQ(h) = |All, = 35, |hs|. Of course, the L1 penalty is only one choice of penalty\nthat can result in a sparse representation. Others include the penalty derived from\na Student-t prior on the representation (Olshausen and Field, 1996; Bergstra, 2011)\nand KL divergence penalties (Larochelle and Bengio, 2008) that are especially\nuseful for representations with elements constrained to lie on the unit interval.\nLee et al. (2008) and Goodfellow ez al. (2009) both provide examples of strategies\nbased on regularizing the average activation across several examples, a >; hn, to\nbe near some target value, such as a vector with .01 for each entry.\n\nOther approaches obtain representational sparsity with a hard constraint on\nthe activation values. For example, orthogonal matching pursuit (Pati e\u00a2 ai.,\n1993) encodes an input x with the representation h that solves the constrained\noptimization problem\n\narg min ||a \u2014 WA|l?, (7.49)\nh,||Rllo <k\nwhere ||A|o is the number of non-zero entries of h. This problem can be solved\nefficiently when W is constrained to be orthogonal. This method is often called\n\n255\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nOMP-& with the value of k specified to indicate the number of non-zero features\nallowed. Coates and Ng (2011) demonstrated that OMP-1 can be a very effective\nfeature extractor for deep architectures.\n\nEssentially any model that has hidden units can be made sparse. Throughout\nthis book, we will see many examples of sparsity regularization used in a variety of\ncontexts.\n\n7.11 Bagging and Other Ensemble Methods\n\nBagging (short for bootstrap aggregating) is a technique for reducing gen-\neralization error by combining several models (Breiman, 1994). The idea is to\ntrain several different models separately, then have all of the models vote on the\noutput for test examples. This is an example of a general strategy in machine\nlearning called model averaging. Techniques employing this strategy are known\nas ensemble methods.\n\nThe reason that model averaging works is that different models will usually\nnot make all the same errors on the test set.\n\nConsider for example a set of k regression models. Suppose that each model\nmakes an error \u20ac; on each example, with the errors drawn from a zero-mean\nmultivariate normal distribution with variances E[e?] = v and covariances Ele;e;] =\nc. Then the error made by the average prediction of all the ensemble models is\n40 e;. The expected squared error of the ensemble predictor is\n\n2\n1 1\nE (id\u00ab) =pE|S e+ dees (7.50)\n\na j#t\n\nCc. (7.51)\n\nIn the case where the errors are perfectly correlated and c= v, the mean squared\nerror reduces to v, so the model averaging does not help at all. In the case where\nthe errors are perfectly uncorrelated and c = 0, the expected squared error of the\nensemble is only qu. This means that the expected squared error of the ensemble\ndecreases linearly with the ensemble size. In other words, on average, the ensemble\nwill perform at least as well as any of its members, and if the members make\nindependent errors, the ensemble will perform significantly better than its members.\n\nDifferent ensemble methods construct the ensemble of models in different ways.\nFor example, each member of the ensemble could be formed by training a completely\n\n256\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nOriginal dataset\n\nFirst resampled dataset First ensemble member\n\nSecond resampled dataset Second ensemble member\n\nQ\u00aeA\u00ae>OFO)\n\nFigure 7.5: A cartoon depiction of how bagging works. Suppose we train an 8 detector on\nthe dataset depicted above, containing an 8, a 6 and a 9. Suppose we make two different\nresampled datasets. The bagging training procedure is to construct each of these datasets\nby sampling with replacement. The first dataset omits the 9 and repeats the 8. On this\ndataset, the detector learns that a loop on top of the digit corresponds to an 8. On\nthe second dataset, we repeat the 9 and omit the 6. In this case, the detector learns\nthat a loop on the bottom of the digit corresponds to an 8. Each of these individual\nclassification rules is brittle, but if we average their output then the detector is robust,\nachieving maximal confidence only when both loops of the 8 are present.\n\ndifferent kind of model using a different algorithm or objective function. Bagging\nis a method that allows the same kind of model, training algorithm and objective\nfunction to be reused several times.\n\nSpecifically, bagging involves constructing k different datasets. Each dataset\nhas the same number of examples as the original dataset, but each dataset is\nconstructed by sampling with replacement from the original dataset. This means\nthat, with high probability, each dataset is missing some of the examples from the\noriginal dataset and also contains several duplicate examples (on average around\n2/3 of the examples from the original dataset are found in the resulting training\nset, if it has the same size as the original). Model i is then trained on dataset\ni. The differences between which examples are included in each dataset result in\ndifferences between the trained models. See figure 7.5 for an example.\n\nNeural networks reach a wide enough variety of solution points that they can\noften benefit from model averaging even if all of the models are trained on the same\ndataset. Differences in random initialization, random selection of minibatches,\ndifferences in hyperparameters, or different outcomes of non-deterministic imple-\nmentations of neural networks are often enough to cause different members of the\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nensemble to make partially independent errors.\n\nModel averaging is an extremely powerful and reliable method for reducing\ngeneralization error. Its use is usually discouraged when benchmarking algorithms\nfor scientific papers, because any machine learning algorithm can benefit substan-\ntially from model averaging at the price of increased computation and memory.\nFor this reason, benchmark comparisons are usually made using a single model.\n\nMachine learning contests are usually won by methods using model averag-\ning over dozens of models. A recent prominent example is the Netflix Grand\nPrize (Koren, 2009).\n\nNot all techniques for constructing ensembles are designed to make the ensemble\nmore regularized than the individual models. For example, a technique called\nboosting (Freund and Schapire, 1996b,a) constructs an ensemble with higher\ncapacity than the individual models. Boosting has been applied to build ensembles\nof neural networks (Schwenk and Bengio, 1998) by incrementally adding neural\nnetworks to the ensemble. Boosting has also been applied interpreting an individual\nneural network as an ensemble (Bengio ef al., 2006a), incrementally adding hidden\nunits to the neural network.\n\n7.12 Dropout\n\nDropout (Srivastava et al., 2014) provides a computationally inexpensive but\npowerful method of regularizing a broad family of models. To a first approximation,\ndropout can be thought of as a method of making bagging practical for ensembles\nof very many large neural networks. Bagging involves training multiple models,\nand evaluating multiple models on each test example. This seems impractical\nwhen each model is a large neural network, since training and evaluating such\nnetworks is costly in terms of runtime and memory. It is common to use ensembles\nof five to ten neural networks\u2014Szegedy et al. (2014a) used six to win the ILSVRC\u2014\nbut more than this rapidly becomes unwieldy. Dropout provides an inexpensive\napproximation to training and evaluating a bagged ensemble of exponentially many\nneural networks.\n\nSpecifically, dropout trains the ensemble consisting of all sub-networks that\ncan be formed by removing non-output units from an underlying base network,\nas illustrated in figure 7.6. In most modern neural networks, based on a series of\naffine transformations and nonlinearities, we can effectively remove a unit from a\nnetwork by multiplying its output value by zero. This procedure requires some\nslight modification for models such as radial basis function networks, which take\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nthe difference between the unit\u2019s state and some reference value. Here, we present\nthe dropout algorithm in terms of multiplication by zero for simplicity, but it can\nbe trivially modified to work with other operations that remove a unit from the\nnetwork.\n\nRecall that to learn with bagging, we define k different models, construct k\ndifferent datasets by sampling from the training set with replacement, and then\ntrain model zon dataset 7. Dropout aims to approximate this process, but with an\nexponentially large number of neural networks. Specifically, to train with dropout,\nwe use a minibatch-based learning algorithm that makes small steps, such as\nstochastic gradient descent. Each time we load an example into a minibatch, we\nrandomly sample a different binary mask to apply to all of the input and hidden\nunits in the network. The mask for each unit is sampled independently from all of\nthe others. The probability of sampling a mask value of one (causing a unit to be\nincluded) is a hyperparameter fixed before training begins. It is not a function\nof the current value of the model parameters or the input example. Typically,\nan input unit is included with probability 0.8 and a hidden unit is included with\nprobability 0.5. We then run forward propagation, back-propagation, and the\nlearning update as usual. Figure 7.7 illustrates how to run forward propagation\nwith dropout.\n\nMore formally, suppose that a mask vector yz specifies which units to include,\nand J (0,4) defines the cost of the model defined by parameters @ and mask p.\nThen dropout training consists in minimizing E,,J(0, 4). The expectation contains\nexponentially many terms but we can obtain an unbiased estimate of its gradient\nby sampling values of p.\n\nDropout training is not quite the same as bagging training. In the case of\nbagging, the models are all independent. In the case of dropout, the models share\nparameters, with each model inheriting a different subset of parameters from the\nparent neural network. This parameter sharing makes it possible to represent an\nexponential number of models with a tractable amount of memory. In the case of\nbagging, each model is trained to convergence on its respective training set. In the\ncase of dropout, typically most models are not explicitly trained at all\u2014usually,\nthe model is large enough that it would be infeasible to sample all possible sub-\nnetworks within the lifetime of the universe. Instead, a tiny fraction of the possible\nsub-networks are each trained for a single step, and the parameter sharing causes\nthe remaining sub-networks to arrive at good settings of the parameters. These\nare the only differences. Beyond these, dropout follows the bagging algorithm. For\nexample, the training set encountered by each sub-network is indeed a subset of\nthe original training set sampled with replacement.\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nBase network\n\nEnsemble of subnetworks\n\nFigure 7.6: Dropout trains an ensemble consisting of all sub-networks that can be\nconstructed by removing non-output units from an underlying base network. Here, we\nbegin with a base network with two visible units and two hidden units. There are sixteen\npossible subsets of these four units. We show all sixteen subnetworks that may be formed\nby dropping out different subsets of units from the original network. In this small example,\na large proportion of the resulting networks have no input units or no path connecting\nthe input to the output. This problem becomes insignificant for networks with wider\nlayers, where the probability of dropping all possible paths from inputs to outputs becomes\nsmaller.\n\n260\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nFigure 7.7: An example of forward propagation through a feedforward network using\ndropout. (Top)In this example, we use a feedforward network with two input units, one\nhidden layer with two hidden units, and one output unit. (Bottom)To perform forward\npropagation with dropout, we randomly sample a vector yz with one entry for each input\nor hidden unit in the network. The entries of uz are binary and are sampled independently\nfrom each other. The probability of each entry being | is a hyperparameter, usually 0.5\nfor the hidden layers and 0.8 for the input. Each unit in the network is multiplied by\nthe corresponding mask, and then forward propagation continues through the rest of the\nnetwork as usual. This is equivalent to randomly selecting one of the sub-networks from\nfigure 7.6 and running forward propagation through it.\n\n261\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nTo make a prediction, a bagged ensemble must accumulate votes from all of\nits members. We refer to this process as inference in this context. So far, our\ndescription of bagging and dropout has not required that the model be explicitly\nprobabilistic. Now, we assume that the model\u2019s role is to output a probability\ndistribution. In the case of bagging, each model 7 produces a probability distribution\np (y | a). The prediction of the ensemble is given by the arithmetic mean of all\nof these distributions,\n\nk\n1 j\ni Spy | x). (7.52)\ni=l\n\nIn the case of dropout, each sub-model defined by mask vector yz defines a prob-\nability distribution p(y | x,w). The arithmetic mean over all masks is given\nby\n\nSorlu)ply | @, 2) (7.53)\nwe\n\nwhere p(y) is the probability distribution that was used to sample yz at training\ntime.\n\nBecause this sum includes an exponential number of terms, it is intractable\nto evaluate except in cases where the structure of the model permits some form\nof simplification. So far, deep neural nets are not known to permit any tractable\nsimplification. Instead, we can approximate the inference with sampling, by\naveraging together the output from many masks. Even 10-20 masks are often\nsufficient to obtain good performance.\n\nHowever, there is an even better approach, that allows us to obtain a good\napproximation to the predictions of the entire ensemble, at the cost of only one\nforward propagation. To do so, we change to using the geometric mean rather than\nthe arithmetic mean of the ensemble members\u2019 predicted distributions. Warde-\nFarley et al. (2014) present arguments and empirical evidence that the geometric\nmean performs comparably to the arithmetic mean in this context.\n\nThe geometric mean of multiple probability distributions is not guaranteed to be\na probability distribution. To guarantee that the result is a probability distribution,\nwe impose the requirement that none of the sub-models assigns probability 0 to any\nevent, and we renormalize the resulting distribution. The unnormalized probability\ndistribution defined directly by the geometric mean is given by\n\nPensemble (y | x) = 2 [ou x, [L) (7.54)\nyw\n\nwhere d is the number of units that may be dropped. Here we use a uniform\ndistribution over yz to simplify the presentation, but non-uniform distributions are\n\n262\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nalso possible. To make predictions we must re-normalize the ensemble:\n\n_ Pensemble (Y | x)\nPensemble(Y | ) yy! Densemble(Y\u2019 | x)\u2019\n\n(7.55)\n\nA key insight (Hinton ef al., 2012c) involved in dropout is that we can approxi-\nmate Pensemble by evaluating p(y | x) in one model: the model with all units, but\nwith the weights going out of unit 7 multiplied by the probability of including unit\ni. The motivation for this modification is to capture the right expected value of the\noutput from that unit. We call this approach the weight scaling inference rule.\nThere is not yet any theoretical argument for the accuracy of this approximate\ninference rule in deep nonlinear networks, but empirically it performs very well.\n\nBecause we usually use an inclusion probability of 3, the weight scaling rule\nusually amounts to dividing the weights by 2 at the end of training, and then using\nthe model as usual. Another way to achieve the same result is to multiply the\nstates of the units by 2 during training. Either way, the goal is to make sure that\nthe expected total input to a unit at test time is roughly the same as the expected\ntotal input to that unit at train time, even though half the units at train time are\nmissing on average.\n\nFor many classes of models that do not have nonlinear hidden units, the weight\nscaling inference rule is exact. For a simple example, consider a softmax regression\nclassifier with n input variables represented by the vector v:\n\nPy=y|v)= softmax (WT v + b) : (7.56)\ny\n\nWe can index into the family of sub-models by element-wise multiplication of the\ninput with a binary vector d:\n\nP(y = y|v;d) = softmax (W'(do v)+ b) . (7.57)\ny\n\nThe ensemble predictor is defined by re-normalizing the geometric mean over all\nensemble members\u2019 predictions:\n\nPensemble(Y =Y | v)\n\n: (7.58)\nY~y Pensemble(Y =y! | v)\n\nPensemble(\u00a5 =Y | v) =\n\nwhere\n\nPansemble(Y =Y | v) = nr Il Ply =yYy | Vv; d). (7.59)\nde{0,1}\"\n\n263\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nTo see that the weight scaling rule is exact, we can simplify Pensemble:\n\nPensemble (y =Y | v) = gn Il Ply =yYy | Vv; d) 7.60\nde{0,1}\u201d\n= gn Il softmax (W' (d@ v) + b), 7.61\nde{0,1}\u201d\nW,/.(doOv) +b\ngn Il exp ( ysl ) y) 7.62\n\nde{0,1}\" Duy\u2019 EXP (Wi) (d Ov)+ by)\n*V/Tactoay exp (WwW, (dOv)+ b,)\n\n\" THaefoayn oy exP (wy, (dOv)+ by)\n\n(7.63)\n\nBecause P will be normalized, we can safely ignore multiplication by factors that\nare constant with respect to y:\n\nPansemble(Y =y v) OX gn Il exp (W,\\(d io) v) + by) (7.64)\nde{0,1}\u201d\n1\n=exp [55 S> Wi(dov) +by (7.65)\nde{0,1}\"\n1\n= exp (5 Wi h.vt 2) ; (7.66)\n\nSubstituting this back into equation 7.58 we obtain a softmax classifier with weights\n3W.\n\nThe weight scaling rule is also exact in other settings, including regression\nnetworks with conditionally normal outputs, and deep networks that have hidden\nlayers without nonlinearities. However, the weight scaling rule is only an approxi-\nmation for deep models that have nonlinearities. Though the approximation has\nnot been theoretically characterized, it often works well, empirically. Goodfellow\net al. (2013a) found experimentally that the weight scaling approximation can work\nbetter (in terms of classification accuracy) than Monte Carlo approximations to the\nensemble predictor. This held true even when the Monte Carlo approximation was\nallowed to sample up to 1,000 sub-networks. Gal and Ghahramani (2015) found\nthat some models obtain better classification accuracy using twenty samples and\n\n264\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nthe Monte Carlo approximation. It appears that the optimal choice of inference\napproximation is problem-dependent.\n\nSrivastava et al. (2014) showed that dropout is more effective than other\nstandard computationally inexpensive regularizers, such as weight decay, filter\nnorm constraints and sparse activity regularization. Dropout may also be combined\nwith other forms of regularization to yield a further improvement.\n\nOne advantage of dropout is that it is very computationally cheap. Using\ndropout during training requires only O(n) computation per example per update,\nto generate n random binary numbers and multiply them by the state. Depending\non the implementation, it may also require O(n) memory to store these binary\nnumbers until the back-propagation stage. Running inference in the trained model\nhas the same cost per-example as if dropout were not used, though we must pay\nthe cost of dividing the weights by 2 once before beginning to run inference on\nexamples.\n\nAnother significant advantage of dropout is that it does not significantly limit\nthe type of model or training procedure that can be used. It works well with nearly\nany model that uses a distributed representation and can be trained with stochastic\ngradient descent. This includes feedforward neural networks, probabilistic models\nsuch as restricted Boltzmann machines (Srivastava et al., 2014), and recurrent\nneural networks (Bayer and Osendorfer, 2014; Pascanu ef al., 2014a). Many other\nregularization strategies of comparable power impose more severe restrictions on\nthe architecture of the model.\n\nThough the cost per-step of applying dropout to a specific model is negligible,\nthe cost of using dropout in a complete system can be significant. Because dropout\nis a regularization technique, it reduces the effective capacity of a model. To offset\nthis effect, we must increase the size of the model. Typically the optimal validation\nset error is much lower when using dropout, but this comes at the cost of a much\nlarger model and many more iterations of the training algorithm. For very large\ndatasets, regularization confers little reduction in generalization error. In these\ncases, the computational cost of using dropout and larger models may outweigh\nthe benefit of regularization.\n\nWhen extremely few labeled training examples are available, dropout is less\neffective. Bayesian neural networks (Neal, 1996) outperform dropout on the\nAlternative Splicing Dataset (Xiong et al., 2011) where fewer than 5,000 examples\nare available (Srivastava et al., 2014). When additional unlabeled data is available,\nunsupervised feature learning can gain an advantage over dropout.\n\nWager et al. (2013) showed that, when applied to linear regression, dropout\nis equivalent to L? weight decay, with a different weight decay coefficient for\n\n265\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\neach input feature. The magnitude of each feature\u2019s weight decay coefficient is\ndetermined by its variance. Similar results hold for other linear models. For deep\nmodels, dropout is not equivalent to weight decay.\n\nThe stochasticity used while training with dropout is not necessary for the\napproach\u2019s success. It is just a means of approximating the sum over all sub-\nmodels. Wang and Manning (2013) derived analytical approximations to this\nmarginalization. Their approximation, known as fast dropout resulted in faster\nconvergence time due to the reduced stochasticity in the computation of the\ngradient. This method can also be applied at test time, as a more principled\n(but also more computationally expensive) approximation to the average over all\nsub-networks than the weight scaling approximation. Fast dropout has been used\nto nearly match the performance of standard dropout on small neural network\nproblems, but has not yet yielded a significant improvement or been applied to a\nlarge problem.\n\nJust as stochasticity is not necessary to achieve the regularizing effect of\ndropout, it is also not sufficient. To demonstrate this, Warde-Farley et al. (2014)\ndesigned control experiments using a method called dropout boosting that they\ndesigned to use exactly the same mask noise as traditional dropout but lack\nits regularizing effect. Dropout boosting trains the entire ensemble to jointly\nmaximize the log-likelihood on the training set. In the same sense that traditional\ndropout is analogous to bagging, this approach is analogous to boosting. As\nintended, experiments with dropout boosting show almost no regularization effect\ncompared to training the entire network as a single model. This demonstrates that\nthe interpretation of dropout as bagging has value beyond the interpretation of\ndropout as robustness to noise. The regularization effect of the bagged ensemble is\nonly achieved when the stochastically sampled ensemble members are trained to\nperform well independently of each other.\n\nDropout has inspired other stochastic approaches to training exponentially\nlarge ensembles of models that share weights. DropConnect is a special case of\ndropout where each product between a single scalar weight and a single hidden\nunit state is considered a unit that can be dropped (Wan et al., 2013). Stochastic\npooling is a form of randomized pooling (see section 9.3) for building ensembles\nof convolutional networks with each convolutional network attending to different\nspatial locations of each feature map. So far, dropout remains the most widely\nused implicit ensemble method.\n\nOne of the key insights of dropout is that training a network with stochastic\nbehavior and making predictions by averaging over multiple stochastic decisions\nimplements a form of bagging with parameter sharing. Earlier, we described\n\n266\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\ndropout as bagging an ensemble of models formed by including or excluding\nunits. However, there is no need for this model averaging strategy to be based on\ninclusion and exclusion. In principle, any kind of random modification is admissible.\nIn practice, we must choose modification families that neural networks are able\nto learn to resist. Ideally, we should also use model families that allow a fast\napproximate inference rule. We can think of any form of modification parametrized\nby a vector ys as training an ensemble consisting of p(y | x, 2) for all possible\nvalues of ys. There is no requirement that ys have a finite number of values. For\nexample, ps can be real-valued. Srivastava et al. (2014) showed that multiplying the\nweights by w ~ N(1, J) can outperform dropout based on binary masks. Because\nE[u] =1 the standard network automatically implements approximate inference\nin the ensemble, without needing any weight scaling.\n\nSo far we have described dropout purely as a means of performing efficient,\napproximate bagging. However, there is another view of dropout that goes further\nthan this. Dropout trains not just a bagged ensemble of models, but an ensemble\nof models that share hidden units. This means each hidden unit must be able to\nperform well regardless of which other hidden units are in the model. Hidden units\nmust be prepared to be swapped and interchanged between models. Hinton ez? al.\n(2012c) were inspired by an idea from biology: sexual reproduction, which involves\nswapping genes between two different organisms, creates evolutionary pressure for\ngenes to become not just good, but to become readily swapped between different\norganisms. Such genes and such features are very robust to changes in their\nenvironment because they are not able to incorrectly adapt to unusual features\nof any one organism or model. Dropout thus regularizes each hidden unit to be\nnot merely a good feature but a feature that is good in many contexts. Warde-\nFarley et al. (2014) compared dropout training to training of large ensembles and\nconcluded that dropout offers additional improvements to generalization error\nbeyond those obtained by ensembles of independent models.\n\nIt is important to understand that a large portion of the power of dropout\narises from the fact that the masking noise is applied to the hidden units. This\ncan be seen as a form of highly intelligent, adaptive destruction of the information\ncontent of the input rather than destruction of the raw values of the input. For\nexample, if the model learns a hidden unit h; that detects a face by finding the nose,\nthen dropping h; corresponds to erasing the information that there is a nose in\nthe image. The model must learn another hj, either that redundantly encodes the\npresence of a nose, or that detects the face by another feature, such as the mouth.\nTraditional noise injection techniques that add unstructured noise at the input are\nnot able to randomly erase the information about a nose from an image of a face\nunless the magnitude of the noise is so great that nearly all of the information in\n\n267\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nthe image is removed. Destroying extracted features rather than original values\nallows the destruction process to make use of all of the knowledge about the input\ndistribution that the model has acquired so far.\n\nAnother important aspect of dropout is that the noise is multiplicative. If the\nnoise were additive with fixed scale, then a rectified linear hidden unit h; with\nadded noise \u20ac could simply learn to have h; become very large in order to make\nthe added noise \u20ac insignificant by comparison. Multiplicative noise does not allow\nsuch a pathological solution to the noise robustness problem.\n\nAnother deep learning algorithm, batch normalization, reparametrizes the model\nin a way that introduces both additive and multiplicative noise on the hidden\nunits at training time. The primary purpose of batch normalization is to improve\noptimization, but the noise can have a regularizing effect, and sometimes makes\ndropout unnecessary. Batch normalization is described further in section 8.7.1.\n\n7.13 Adversarial Training\n\nIn many cases, neural networks have begun to reach human performance when\nevaluated on an i.i.d. test set. It is natural therefore to wonder whether these\nmodels have obtained a true human-level understanding of these tasks. In order\nto probe the level of understanding a network has of the underlying task, we can\nsearch for examples that the model misclassifies. Szegedy et al. (2014b) found that\neven neural networks that perform at human level accuracy have a nearly 100%\nerror rate on examples that are intentionally constructed by using an optimization\nprocedure to search for an input 2\u2019 near a data point x such that the model\noutput is very different at 2\u2019. In many cases, 2\u2019 can be so similar to x that a\nhuman observer cannot tell the difference between the original example and the\nadversarial example, but the network can make highly different predictions. See\nfigure 7.8 for an example.\n\nAdversarial examples have many implications, for example, in computer security,\nthat are beyond the scope of this chapter. However, they are interesting in the\ncontext of regularization because one can reduce the error rate on the original i.i.d.\ntest set via adversarial training\u2014training on adversarially perturbed examples\nfrom the training set (Szegedy et al., 2014b; Goodfellow et al., 2014b).\n\nGoodfellow et al. (2014b) showed that one of the primary causes of these\nadversarial examples is excessive linearity. Neural networks are built out of\nprimarily linear building blocks. In some experiments the overall function they\nimplement proves to be highly linear as a result. These linear functions are easy\n\n268\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\n+ 007 x\n\n: e+\nv Sien(VeF(9.2.9)) \u00a2 sign(VuJ (0, 2,9)\ny =\u201cpanda\u201d \u201cnematode\u201d \u201csibbon\u201d\nw/ 57.7% w/ 8.2% w/ 99.3 %\nconfidence confidence confidence\n\nFigure 7.8: A demonstration of adversarial example generation applied to GoogLeNet\n(Szegedy et al., 2014a) on ImageNet. By adding an imperceptibly small vector whose\nelements are equal to the sign of the elements of the gradient of the cost function with\nrespect to the input, we can change GoogLeNet\u2019s classification of the image. Reproduced\nwith permission from Goodfellow et al. (2014b).\n\nto optimize. Unfortunately, the value of a linear function can change very rapidly\nif it has numerous inputs. If we change each input by e, then a linear function\nwith weights w can change by as much as \u20ac\u00a2||w||1, which can be a very large\namount if w is high-dimensional. Adversarial training discourages this highly\nsensitive locally linear behavior by encouraging the network to be locally constant\nin the neighborhood of the training data. This can be seen as a way of explicitly\nintroducing a local constancy prior into supervised neural nets.\n\nAdversarial training helps to illustrate the power of using a large function\nfamily in combination with aggressive regularization. Purely linear models, like\nlogistic regression, are not able to resist adversarial examples because they are\nforced to be linear. Neural networks are able to represent functions that can range\nfrom nearly linear to nearly locally constant and thus have the flexibility to capture\nlinear trends in the training data while still learning to resist local perturbation.\n\nAdversarial examples also provide a means of accomplishing semi-supervised\nlearning. At a point x that is not associated with a label in the dataset, the\nmodel itself assigns some label y. The model\u2019s label 47 may not be the true label,\nbut if the model is high quality, then \u00a2 has a high probability of providing the\ntrue label. We can seek an adversarial example 2\u2019 that causes the classifier to\noutput a label 7/ with y\u2019 4 g. Adversarial examples generated using not the true\nlabel but a label provided by a trained model are called virtual adversarial\nexamples (Miyato et al., 2015). The classifier may then be trained to assign the\nsame label to x and x\u2019. This encourages the classifier to learn a function that is\n\n269\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nrobust to small changes anywhere along the manifold where the unlabeled data\nlies. The assumption motivating this approach is that different classes usually lie\non disconnected manifolds, and a small perturbation should not be able to jump\nfrom one class manifold to another class manifold.\n\n7.14 Tangent Distance, Tangent Prop, and Manifold\nTangent Classifier\n\nMany machine learning algorithms aim to overcome the curse of dimensionality\nby assuming that the data lies near a low-dimensional manifold, as described in\nsection 5.11.3.\n\nOne of the early attempts to take advantage of the manifold hypothesis is the\ntangent distance algorithm (Simard ef a/., 1993, 1998). It is a non-parametric\nnearest-neighbor algorithm in which the metric used is not the generic Euclidean\ndistance but one that is derived from knowledge of the manifolds near which\nprobability concentrates. It is assumed that we are trying to classify examples and\nthat examples on the same manifold share the same category. Since the classifier\nshould be invariant to the local factors of variation that correspond to movement\non the manifold, it would make sense to use as nearest-neighbor distance between\npoints #; and % the distance between the manifolds M,; and Mp to which they\nrespectively belong. Although that may be computationally difficult (it would\nrequire solving an optimization problem, to find the nearest pair of points on Mj,\nand Mp), a cheap alternative that makes sense locally is to approximate M; by its\ntangent plane at a; and measure the distance between the two tangents, or between\na tangent plane and a point. That can be achieved by solving a low-dimensional\nlinear system (in the dimension of the manifolds). Of course, this algorithm requires\none to specify the tangent vectors.\n\nIn a related spirit, the tangent prop algorithm (Simard et al., 1992) (figure 7.9)\ntrains a neural net classifier with an extra penalty to make each output f(a) of\nthe neural net locally invariant to known factors of variation. These factors of\nvariation correspond to movement along the manifold near which examples of the\nsame class concentrate. Local invariance is achieved by requiring Vzf (a) to be\northogonal to the known manifold tangent vectors v\u00ae at zx, or equivalently that\nthe directional derivative of f at a in the directions v be small by adding a\nregularization penalty Q:\n\n2(F) = ((Wef(a))\") (7.67)\n\n270\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nThis regularizer can of course be scaled by an appropriate hyperparameter, and, for\nmost neural networks, we would need to sum over many outputs rather than the lone\noutput f(a) described here for simplicity. As with the tangent distance algorithm,\nthe tangent vectors are derived a priori, usually from the formal knowledge of\nthe effect of transformations such as translation, rotation, and scaling in images.\nTangent prop has been used not just for supervised learning (Simard e\u00a2 al., 1992)\nbut also in the context of reinforcement learning (Thrun, 1995).\n\nTangent propagation is closely related to dataset augmentation. In both\ncases, the user of the algorithm encodes his or her prior knowledge of the task\nby specifying a set of transformations that should not alter the output of the\nnetwork. The difference is that in the case of dataset augmentation, the network is\nexplicitly trained to correctly classify distinct inputs that were created by applying\nmore than an infinitesimal amount of these transformations. Tangent propagation\ndoes not require explicitly visiting a new input point. Instead, it analytically\nregularizes the model to resist perturbation in the directions corresponding to\nthe specified transformation. While this analytical approach is intellectually\nelegant, it has two major drawbacks. First, it only regularizes the model to resist\ninfinitesimal perturbation. Explicit dataset augmentation confers resistance to\nlarger perturbations. Second, the infinitesimal approach poses difficulties for models\nbased on rectified linear units. These models can only shrink their derivatives\nby turning units off or shrinking their weights. They are not able to shrink their\nderivatives by saturating at a high value with large weights, as sigmoid or tanh\nunits can. Dataset augmentation works well with rectified linear units because\ndifferent subsets of rectified units can activate for different transformed versions of\neach original input.\n\nTangent propagation is also related to double backprop (Drucker and LeCun,\n1992) and adversarial training (Szegedy et al., 2014b; Goodfellow et al., 2014b).\nDouble backprop regularizes the Jacobian to be small, while adversarial training\nfinds inputs near the original inputs and trains the model to produce the same\noutput on these as on the original inputs. Tangent propagation and dataset\naugmentation using manually specified transformations both require that the\nmodel should be invariant to certain specified directions of change in the input.\nDouble backprop and adversarial training both require that the model should be\ninvariant to all directions of change in the input so long as the change is small. Just\nas dataset augmentation is the non-infinitesimal version of tangent propagation,\nadversarial training is the non-infinitesimal version of double backprop.\n\nThe manifold tangent classifier (Rifai et al., 2011c), eliminates the need to\nknow the tangent vectors a priori. As we will see in chapter 14, autoencoders can\n\n271\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nNormal\n\nTangent\n\npan\n\nFigure 7.9: Illustration of the main idea of the tangent prop algorithm (Simard ef ai.,\n1992) and manifold tangent classifier (Rifai et al., 2011c), which both regularize the\nclassifier output function f(a). Each curve represents the manifold for a different class,\nillustrated here as a one-dimensional manifold embedded in a two-dimensional space.\nOn one curve, we have chosen a single point and drawn a vector that is tangent to the\nclass manifold (parallel to and touching the manifold) and a vector that is normal to the\nclass manifold (orthogonal to the manifold). In multiple dimensions there may be many\ntangent directions and many normal directions. We expect the classification function to\nchange rapidly as it moves in the direction normal to the manifold, and not to change as\nit moves along the class manifold. Both tangent propagation and the manifold tangent\nclassifier regularize f(a) to not change very much as # moves along the manifold. Tangent\npropagation requires the user to manually specify functions that compute the tangent\ndirections (such as specifying that small translations of images remain in the same class\nmanifold) while the manifold tangent classifier estimates the manifold tangent directions\nby training an autoencoder to fit the training data. The use of autoencoders to estimate\nmanifolds will be described in chapter 14.\n\nestimate the manifold tangent vectors. The manifold tangent classifier makes use\nof this technique to avoid needing user-specified tangent vectors. As illustrated\nin figure 14.10, these estimated tangent vectors go beyond the classical invariants\nthat arise out of the geometry of images (such as translation, rotation and scaling)\nand include factors that must be learned because they are object-specific (such as\nmoving body parts). The algorithm proposed with the manifold tangent classifier\nis therefore simple: (1) use an autoencoder to learn the manifold structure by\nunsupervised learning, and (2) use these tangents to regularize a neural net classifier\nas in tangent prop (equation 7.67).\n\nThis chapter has described most of the general strategies used to regularize\nneural networks. Regularization is a central theme of machine learning and as such\n\n272\n", "CHAPTER 7. REGULARIZATION FOR DEEP LEARNING\n\nwill be revisited periodically by most of the remaining chapters. Another central\ntheme of machine learning is optimization, described next.\n\n273\n", "Chapter 8\n\nOptimization for Training Deep\nModels\n\nDeep learning algorithms involve optimization in many contexts. For example,\nperforming inference in models such as PCA involves solving an optimization\nproblem. We often use analytical optimization to write proofs or design algorithms.\nOf all of the many optimization problems involved in deep learning, the most\ndifficult is neural network training. It is quite common to invest days to months of\ntime on hundreds of machines in order to solve even a single instance of the neural\nnetwork training problem. Because this problem is so important and so expensive,\na specialized set of optimization techniques have been developed for solving it.\nThis chapter presents these optimization techniques for neural network training.\n\nIf you are unfamiliar with the basic principles of gradient-based optimization,\nwe suggest reviewing chapter 4. That chapter includes a brief overview of numerical\noptimization in general.\n\nThis chapter focuses on one particular case of optimization: finding the param-\neters @ of a neural network that significantly reduce a cost function J(@), which\ntypically includes a performance measure evaluated on the entire training set as\nwell as additional regularization terms.\n\nWe begin with a description of how optimization used as a training algorithm\nfor a machine learning task differs from pure optimization. Next, we present several\nof the concrete challenges that make optimization of neural networks difficult. We\nthen define several practical algorithms, including both optimization algorithms\nthemselves and strategies for initializing the parameters. More advanced algorithms\nadapt their learning rates during training or leverage information contained in\n\n274\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nthe second derivatives of the cost function. Finally, we conclude with a review of\nseveral optimization strategies that are formed by combining simple optimization\nalgorithms into higher-level procedures.\n\n8.1 How Learning Differs from Pure Optimization\n\nOptimization algorithms used for training of deep models differ from traditional\noptimization algorithms in several ways. Machine learning usually acts indirectly.\nIn most machine learning scenarios, we care about some performance measure\nP, that is defined with respect to the test set and may also be intractable. We\ntherefore optimize P only indirectly. We reduce a different cost function J(@) in\nthe hope that doing so will improve P. This is in contrast to pure optimization,\nwhere minimizing J is a goal in and of itself. Optimization algorithms for training\ndeep models also typically include some specialization on the specific structure of\nmachine learning objective functions.\n\nTypically, the cost function can be written as an average over the training set,\nsuch as\n\nJ (9) = Eay)~paata(F(@s 9), 9); (8.1)\n\nwhere L is the per-example loss function, f(a; 60) is the predicted output when\nthe input is x, Paata is the empirical distribution. In the supervised learning case,\ny is the target output. Throughout this chapter, we develop the unregularized\nsupervised case, where the arguments to L are f(x;0) and y. However, it is trivial\nto extend this development, for example, to include @ or a as arguments, or to\nexclude y as arguments, in order to develop various forms of regularization or\nunsupervised learning.\n\nEquation 8.1 defines an objective function with respect to the training set. We\nwould usually prefer to minimize the corresponding objective function where the\nexpectation is taken across the data generating distribution Paata rather than just\nover the finite training set:\n\nJ*(8) = Evw,y)~paata\u2019(S (@; 9), y)- (8.2)\n\n8.1.1. Empirical Risk Minimization\n\nThe goal of a machine learning algorithm is to reduce the expected generalization\nerror given by equation 8.2. This quantity is known as the risk. We emphasize here\nthat the expectation is taken over the true underlying distribution pgata. If we knew\nthe true distribution pgata(a, y), risk minimization would be an optimization task\n\n275\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nsolvable by an optimization algorithm. However, when we do not know paata(#, y)\nbut only have a training set of samples, we have a machine learning problem.\n\nThe simplest way to convert a machine learning problem back into an op-\ntimization problem is to minimize the expected loss on the training set. This\nmeans replacing the true distribution p(x, y) with the empirical distribution p(a, y)\ndefined by the training set. We now minimize the empirical risk\n\nEe ynpasca(ey) LCS (#5 8), y)] = = \u00bb L( f(a; 0), y) (8.3)\n\nwhere m is the number of training examples.\n\nThe training process based on minimizing this average training error is known\nas empirical risk minimization. In this setting, machine learning is still very\nsimilar to straightforward optimization. Rather than optimizing the risk directly,\nwe optimize the empirical risk, and hope that the risk decreases significantly as\nwell. A variety of theoretical results establish conditions under which the true risk\ncan be expected to decrease by various amounts.\n\nHowever, empirical risk minimization is prone to overfitting. Models with\nhigh capacity can simply memorize the training set. In many cases, empirical\nrisk minimization is not really feasible. The most effective modern optimization\nalgorithms are based on gradient descent, but many useful loss functions, such\nas 0-1 loss, have no useful derivatives (the derivative is either zero or undefined\neverywhere). These two problems mean that, in the context of deep learning, we\nrarely use empirical risk minimization. Instead, we must use a slightly different\napproach, in which the quantity that we actually optimize is even more different\nfrom the quantity that we truly want to optimize.\n\n8.1.2 Surrogate Loss Functions and Early Stopping\n\nSometimes, the loss function we actually care about (say classification error) is not\none that can be optimized efficiently. For example, exactly minimizing expected 0-1\nloss is typically intractable (exponential in the input dimension), even for a linear\nclassifier (Marcotte and Savard, 1992). In such situations, one typically optimizes\na surrogate loss function instead, which acts as a proxy but has advantages.\nFor example, the negative log-likelihood of the correct class is typically used as a\nsurrogate for the 0-1 loss. The negative log-likelihood allows the model to estimate\nthe conditional probability of the classes, given the input, and if the model can\ndo that well, then it can pick the classes that yield the least classification error in\nexpectation.\n\n276\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nIn some cases, a surrogate loss function actually results in being able to learn\nmore. For example, the test set 0-1 loss often continues to decrease for a long\ntime after the training set 0-1 loss has reached zero, when training using the\nlog-likelihood surrogate. This is because even when the expected 0-1 loss is zero,\none can improve the robustness of the classifier by further pushing the classes apart\nfrom each other, obtaining a more confident and reliable classifier, thus extracting\nmore information from the training data than would have been possible by simply\nminimizing the average 0-1 loss on the training set.\n\nA very important difference between optimization in general and optimization\nas we use it for training algorithms is that training algorithms do not usually halt\nat a local minimum. Instead, a machine learning algorithm usually minimizes\na surrogate loss function but halts when a convergence criterion based on early\nstopping (section 7.8) is satisfied. Typically the early stopping criterion is based\non the true underlying loss function, such as 0-1 loss measured on a validation set,\nand is designed to cause the algorithm to halt whenever overfitting begins to occur.\nTraining often halts while the surrogate loss function still has large derivatives,\nwhich is very different from the pure optimization setting, where an optimization\nalgorithm is considered to have converged when the gradient becomes very small.\n\n8.1.3. Batch and Minibatch Algorithms\n\nOne aspect of machine learning algorithms that separates them from general\noptimization algorithms is that the objective function usually decomposes as a sum\nover the training examples. Optimization algorithms for machine learning typically\ncompute each update to the parameters based on an expected value of the cost\nfunction estimated using only a subset of the terms of the full cost function.\n\nFor example, maximum likelihood estimation problems, when viewed in log\nspace, decompose into a sum over each example:\n\nm\n\nOv, = argmax }~ log Pmodei(, yy; 8). (8.4)\n9 f=\n\nMaximizing this sum is equivalent to maximizing the expectation over the\nempirical distribution defined by the training set:\n\nJ(8) = Ex,ynpaata 108 Pmodel (%, y; 4). (8.5)\n\nMost of the properties of the objective function J used by most of our opti-\nmization algorithms are also expectations over the training set. For example, the\n\n277\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nmost commonly used property is the gradient:\nVoJ(8) = Ex ywpaata VO log Pmodel (x, Ys 0). (8.6)\n\nComputing this expectation exactly is very expensive because it requires\nevaluating the model on every example in the entire dataset. In practice, we can\ncompute these expectations by randomly sampling a small number of examples\nfrom the dataset, then taking the average over only those examples.\n\nRecall that the standard error of the mean (equation 5.46) estimated from n\nsamples is given by o/./n, where c is the true standard deviation of the value of\nthe samples. The denominator of ./n shows that there are less than linear returns\nto using more examples to estimate the gradient. Compare two hypothetical\nestimates of the gradient, one based on 100 examples and another based on 10,000\nexamples. The latter requires 100 times more computation than the former, but\nreduces the standard error of the mean only by a factor of 10. Most optimization\nalgorithms converge much faster (in terms of total computation, not in terms of\nnumber of updates) if they are allowed to rapidly compute approximate estimates\nof the gradient rather than slowly computing the exact gradient.\n\nAnother consideration motivating statistical estimation of the gradient from a\nsmall number of samples is redundancy in the training set. In the worst case, all\nm samples in the training set could be identical copies of each other. A sampling-\nbased estimate of the gradient could compute the correct gradient with a single\nsample, using m times less computation than the naive approach. In practice, we\nare unlikely to truly encounter this worst-case situation, but we may find large\nnumbers of examples that all make very similar contributions to the gradient.\n\nOptimization algorithms that use the entire training set are called batch or\ndeterministic gradient methods, because they process all of the training examples\nsimultaneously in a large batch. This terminology can be somewhat confusing\nbecause the word \u201cbatch\u201d is also often used to describe the minibatch used by\nminibatch stochastic gradient descent. Typically the term \u201cbatch gradient descent\u201d\nimplies the use of the full training set, while the use of the term \u201cbatch\u201d to describe\na group of examples does not. For example, it is very common to use the term\n\u201cbatch size\u201d to describe the size of a minibatch.\n\nOptimization algorithms that use only a single example at a time are sometimes\ncalled stochastic or sometimes online methods. The term online is usually\nreserved for the case where the examples are drawn from a stream of continually\ncreated examples rather than from a fixed-size training set over which several\npasses are made.\n\nMost algorithms used for deep learning fall somewhere in between, using more\n\n278\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nthan one but less than all of the training examples. These were traditionally called\nminibatch or minibatch stochastic methods and it is now common to simply\ncall them stochastic methods.\n\nThe canonical example of a stochastic method is stochastic gradient descent,\npresented in detail in section 8.3.1.\n\nMinibatch sizes are generally driven by the following factors:\n\ne Larger batches provide a more accurate estimate of the gradient, but with\nless than linear returns.\n\nMulticore architectures are usually underutilized by extremely small batches.\nThis motivates using some absolute minimum batch size, below which there\nis no reduction in the time to process a minibatch.\n\nIf all examples in the batch are to be processed in parallel (as is typically\nthe case), then the amount of memory scales with the batch size. For many\nhardware setups this is the limiting factor in batch size.\n\ne Some kinds of hardware achieve better runtime with specific sizes of arrays.\nEspecially when using GPUs, it is common for power of 2 batch sizes to offer\nbetter runtime. Typical power of 2 batch sizes range from 32 to 256, with 16\nsometimes being attempted for large models.\n\nSmall batches can offer a regularizing effect (Wilson and Martinez, 2003),\nperhaps due to the noise they add to the learning process. Generalization\nerror is often best for a batch size of 1. Training with such a small batch\n\nsize might require a small learning rate to maintain stability due to the high\nvariance in the estimate of the gradient. The total runtime can be very high\ndue to the need to make more steps, both because of the reduced learning\nrate and because it takes more steps to observe the entire training set.\n\nDifferent kinds of algorithms use different kinds of information from the mini-\nbatch in different ways. Some algorithms are more sensitive to sampling error than\nothers, either because they use information that is difficult to estimate accurately\nwith few samples, or because they use information in ways that amplify sampling\nerrors more. Methods that compute updates based only on the gradient g are\nusually relatively robust and can handle smaller batch sizes like 100. Second-order\nmethods, which use also the Hessian matrix H and compute updates such as\nH~'g, typically require much larger batch sizes like 10,000. These large batch\nsizes are required to minimize fluctuations in the estimates of H~!g. Suppose\nthat H is estimated perfectly but has a poor condition number. Multiplication by\n\n279\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nHH or its inverse amplifies pre-existing errors, in this case, estimation errors in g.\nVery small changes in the estimate of g can thus cause large changes in the update\nH~'g, even if H were estimated perfectly. Of course, H will be estimated only\napproximately, so the update H~'g will contain even more error than we would\npredict from applying a poorly conditioned operation to the estimate of g.\n\nIt is also crucial that the minibatches be selected randomly. Computing an\nunbiased estimate of the expected gradient from a set of samples requires that those\nsamples be independent. We also wish for two subsequent gradient estimates to be\nindependent from each other, so two subsequent minibatches of examples should\nalso be independent from each other. Many datasets are most naturally arranged\nin a way where successive examples are highly correlated. For example, we might\nhave a dataset of medical data with a long list of blood sample test results. This\nlist might be arranged so that first we have five blood samples taken at different\ntimes from the first patient, then we have three blood samples taken from the\nsecond patient, then the blood samples from the third patient, and so on. If we\nwere to draw examples in order from this list, then each of our minibatches would\nbe extremely biased, because it would represent primarily one patient out of the\nmany patients in the dataset. In cases such as these where the order of the dataset\nholds some significance, it is necessary to shuffle the examples before selecting\nminibatches. For very large datasets, for example datasets containing billions of\nexamples in a data center, it can be impractical to sample examples truly uniformly\nat random every time we want to construct a minibatch. Fortunately, in practice\nit is usually sufficient to shuffle the order of the dataset once and then store it in\nshuffled fashion. This will impose a fixed set of possible minibatches of consecutive\nexamples that all models trained thereafter will use, and each individual model\nwill be forced to reuse this ordering every time it passes through the training\ndata. However, this deviation from true random selection does not seem to have a\nsignificant detrimental effect. Failing to ever shuffle the examples in any way can\nseriously reduce the effectiveness of the algorithm.\n\nMany optimization problems in machine learning decompose over examples\nwell enough that we can compute entire separate updates over different examples\nin parallel. In other words, we can compute the update that minimizes J(X) for\none minibatch of examples X at the same time that we compute the update for\nseveral other minibatches. Such asynchronous parallel distributed approaches are\ndiscussed further in section 12.1.3.\n\nAn interesting motivation for minibatch stochastic gradient descent is that it\nfollows the gradient of the true generalization error (equation 8.2) so long as no\nexamples are repeated. Most implementations of minibatch stochastic gradient\n\n280\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\ndescent shuffle the dataset once and then pass through it multiple times. On the\nfirst pass, each minibatch is used to compute an unbiased estimate of the true\ngeneralization error. On the second pass, the estimate becomes biased because it is\nformed by re-sampling values that have already been used, rather than obtaining\nnew fair samples from the data generating distribution.\n\nThe fact that stochastic gradient descent minimizes generalization error is\neasiest to see in the online learning case, where examples or minibatches are drawn\nfrom a stream of data. In other words, instead of receiving a fixed-size training\nset, the learner is similar to a living being who sees a new example at each instant,\nwith every example (x, y) coming from the data generating distribution paata(x, y).\nIn this scenario, examples are never repeated; every experience is a fair sample\nfrom Pdata-\n\nThe equivalence is easiest to derive when both a and y are discrete. In this\ncase, the generalization error (equation 8.2) can be written as a sum\n\nJ*(8) = SYS paata (x, y)L(f (a; 8), 9), (8.7)\n\nwith the exact gradient\n\nI= VoJ*(@) = S> S> paata(\u00ae, y)VoL(f (x; 0), y)- (8.8)\n\nce ey\n\nWe have already seen the same fact demonstrated for the log-likelihood in equa-\ntion 8.5 and equation 8.6; we observe now that this holds for other functions LD\nbesides the likelihood. A similar result can be derived when \u00ab and y are continuous,\nunder mild assumptions regarding pgata and L.\n\nHence, we can obtain an unbiased estimator of the exact gradient of the\ngeneralization error by sampling a minibatch of examples {a, Lee al} with cor-\nresponding targets ;/\u201d) from the data generating distribution paata, and computing\nthe gradient of the loss with respect to the parameters for that minibatch:\n\n1 . ;\n9 =\u2014Vo dL fa:8),y). (8.9)\n\nUpdating 6 in the direction of g performs SGD on the generalization error.\n\nOf course, this interpretation only applies when examples are not reused.\nNonetheless, it is usually best to make several passes through the training set,\nunless the training set is extremely large. When multiple such epochs are used,\nonly the first epoch follows the unbiased gradient of the generalization error, but\n\n281\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nof course, the additional epochs usually provide enough benefit due to decreased\ntraining error to offset the harm they cause by increasing the gap between training\nerror and test error.\n\nWith some datasets growing rapidly in size, faster than computing power, it\nis becoming more common for machine learning applications to use each training\nexample only once or even to make an incomplete pass through the training\nset. When using an extremely large training set, overfitting is not an issue, so\nunderfitting and computational efficiency become the predominant concerns. See\nalso Bottou and Bousquet (2008) for a discussion of the effect of computational\nbottlenecks on generalization error, as the number of training examples grows.\n\n8.2 Challenges in Neural Network Optimization\n\nOptimization in general is an extremely difficult task. Traditionally, machine\nlearning has avoided the difficulty of general optimization by carefully designing\nthe objective function and constraints to ensure that the optimization problem is\nconvex. When training neural networks, we must confront the general non-convex\ncase. Even convex optimization is not without its complications. In this section,\nwe summarize several of the most prominent challenges involved in optimization\nfor training deep models.\n\n8.2.1 Tll-Conditioning\n\nSome challenges arise even when optimizing convex functions. Of these, the most\nprominent is ill-conditioning of the Hessian matrix H. This is a very general\nproblem in most numerical optimization, convex or otherwise, and is described in\nmore detail in section 4.3.1.\n\nThe ill-conditioning problem is generally believed to be present in neural\nnetwork training problems. [ll-conditioning can manifest by causing SGD to get\n\u201cstuck\u201d in the sense that even very small steps increase the cost function.\n\nRecall from equation 4.9 that a second-order Taylor series expansion of the\ncost function predicts that a gradient descent step of \u2014eg will add\n\n1\n569 Hg-g'g (8.10)\n\nto the cost. Ill-conditioning of the gradient becomes a problem when 3\u00a29'H. g\nexceeds eg! g. To determine whether ill-conditioning is detrimental to a neural\nnetwork training task, one can monitor the squared gradient norm g'g and\n\n282\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n1.0\n0.9\n\n0.8 f\n0.7\n0.6\n0.5\n0.4\n0.3\n0.2\n\n2 0.1 atin std When\n\u201450 0 50 100 150 200 250 0 50 100 150 200 250\n\nTraining time (epochs) Training time (epochs)\n\nGradient norm\nClassification error rate\na\n\nFigure 8.1: Gradient descent often does not arrive at a critical point of any kind. In this\nexample, the gradient norm increases throughout training of a convolutional network used\nfor object detection. (Left)A scatterplot showing how the norms of individual gradient\nevaluations are distributed over time. To improve legibility, only one gradient norm\nis plotted per epoch. The running average of all gradient norms is plotted as a solid\ncurve. The gradient norm clearly increases over time, rather than decreasing as we would\nexpect if the training process converged to a critical point. (Right)Despite the increasing\ngradient, the training process is reasonably successful. The validation set classification\nerror decreases to a low level.\n\nthe g' Hg term. In many cases, the gradient norm does not shrink significantly\nthroughout learning, but the g' Hg term grows by more than an order of magnitude.\nThe result is that learning becomes very slow despite the presence of a strong\ngradient because the learning rate must be shrunk to compensate for even stronger\ncurvature. Figure 8.1 shows an example of the gradient increasing significantly\nduring the successful training of a neural network.\n\nThough ill-conditioning is present in other settings besides neural network\ntraining, some of the techniques used to combat it in other contexts are less\napplicable to neural networks. For example, Newton\u2019s method is an excellent tool\nfor minimizing convex functions with poorly conditioned Hessian matrices, but in\nthe subsequent sections we will argue that Newton\u2019s method requires significant\nmodification before it can be applied to neural networks.\n\n8.2.2 Local Minima\n\nOne of the most prominent features of a convex optimization problem is that it\ncan be reduced to the problem of finding a local minimum. Any local minimum is\n\n283\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nguaranteed to be a global minimum. Some convex functions have a flat region at\nthe bottom rather than a single global minimum point, but any point within such\na flat region is an acceptable solution. When optimizing a convex function, we\nknow that we have reached a good solution if we find a critical point of any kind.\n\nWith non-convex functions, such as neural nets, it is possible to have many\nlocal minima. Indeed, nearly any deep model is essentially guaranteed to have\nan extremely large number of local minima. However, as we will see, this is not\nnecessarily a major problem.\n\nNeural networks and any models with multiple equivalently parametrized latent\nvariables all have multiple local minima because of the model identifiability\nproblem. A model is said to be identifiable if a sufficiently large training set can\nrule out all but one setting of the model\u2019s parameters. Models with latent variables\nare often not identifiable because we can obtain equivalent models by exchanging\nlatent variables with each other. For example, we could take a neural network and\nmodify layer 1 by swapping the incoming weight vector for unit 7 with the incoming\nweight vector for unit 7, then doing the same for the outgoing weight vectors. If we\nhave m layers with n units each, then there are n!\" ways of arranging the hidden\nunits. This kind of non-identifiability is known as weight space symmetry.\n\nIn addition to weight space symmetry, many kinds of neural networks have\nadditional causes of non-identifiability. For example, in any rectified linear or\nmaxout network, we can scale all of the incoming weights and biases of a unit by\na if we also scale all of its outgoing weights by 4. This means that\u2014if the cost\nfunction does not include terms such as weight decay that depend directly on the\nweights rather than the models\u2019 outputs\u2014every local minimum of a rectified linear\nor maxout network lies on an (m x n)-dimensional hyperbola of equivalent local\nminima.\n\nThese model identifiability issues mean that there can be an extremely large\nor even uncountably infinite amount of local minima in a neural network cost\nfunction. However, all of these local minima arising from non-identifiability are\nequivalent to each other in cost function value. As a result, these local minima are\nnot a problematic form of non-convexity.\n\nLocal minima can be problematic if they have high cost in comparison to the\nglobal minimum. One can construct small neural networks, even without hidden\nunits, that have local minima with higher cost than the global minimum (Sontag\nand Sussman, 1989; Brady et al., 1989; Gori and Tesi, 1992). If local minima\nwith high cost are common, this could pose a serious problem for gradient-based\noptimization algorithms.\n\nIt remains an open question whether there are many local minima of high cost\n\n284\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nfor networks of practical interest and whether optimization algorithms encounter\nthem. For many years, most practitioners believed that local minima were a\ncommon problem plaguing neural network optimization. Today, that does not\nappear to be the case. The problem remains an active area of research, but experts\nnow suspect that, for sufficiently large neural networks, most local minima have a\nlow cost function value, and that it is not important to find a true global minimum\nrather than to find a point in parameter space that has low but not minimal cost\n(Saxe et al., 2013; Dauphin et al., 2014; Goodfellow et al., 2015; Choromanska\net al., 2014).\n\nMany practitioners attribute nearly all difficulty with neural network optimiza-\ntion to local minima. We encourage practitioners to carefully test for specific\nproblems. A test that can rule out local minima as the problem is to plot the\nnorm of the gradient over time. If the norm of the gradient does not shrink to\ninsignificant size, the problem is neither local minima nor any other kind of critical\npoint. This kind of negative test can rule out local minima. In high dimensional\nspaces, it can be very difficult to positively establish that local minima are the\nproblem. Many structures other than local minima also have small gradients.\n\n8.2.3. Plateaus, Saddle Points and Other Flat Regions\n\nFor many high-dimensional non-convex functions, local minima (and maxima)\nare in fact rare compared to another kind of point with zero gradient: a saddle\npoint. Some points around a saddle point have greater cost than the saddle point,\nwhile others have a lower cost. At a saddle point, the Hessian matrix has both\npositive and negative eigenvalues. Points lying along eigenvectors associated with\npositive eigenvalues have greater cost than the saddle point, while points lying\nalong negative eigenvalues have lower value. We can think of a saddle point as\nbeing a local minimum along one cross-section of the cost function and a local\nmaximum along another cross-section. See figure 4.5 for an illustration.\n\nMany classes of random functions exhibit the following behavior: in low-\ndimensional spaces, local minima are common. In higher dimensional spaces, local\nminima are rare and saddle points are more common. For a function f : R\u201d > R of\nthis type, the expected ratio of the number of saddle points to local minima grows\nexponentially with n. To understand the intuition behind this behavior, observe\nthat the Hessian matrix at a local minimum has only positive eigenvalues. The\nHessian matrix at a saddle point has a mixture of positive and negative eigenvalues.\nImagine that the sign of each eigenvalue is generated by flipping a coin. In a single\ndimension, it is easy to obtain a local minimum by tossing a coin and getting heads\nonce. In n-dimensional space, it is exponentially unlikely that all n coin tosses will\n\n285\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nbe heads. See Dauphin ef al. (2014) for a review of the relevant theoretical work.\n\nAn amazing property of many random functions is that the eigenvalues of the\nHessian become more likely to be positive as we reach regions of lower cost. In\nour coin tossing analogy, this means we are more likely to have our coin come up\nheads n times if we are at a critical point with low cost. This means that local\nminima are much more likely to have low cost than high cost. Critical points with\nhigh cost are far more likely to be saddle points. Critical points with extremely\nhigh cost are more likely to be local maxima.\n\nThis happens for many classes of random functions. Does it happen for neural\nnetworks? Baldi and Hornik (1989) showed theoretically that shallow autoencoders\n(feedforward networks trained to copy their input to their output, described in\nchapter 14) with no nonlinearities have global minima and saddle points but no\nlocal minima with higher cost than the global minimum. They observed without\nproof that these results extend to deeper networks without nonlinearities. The\noutput of such networks is a linear function of their input, but they are useful\nto study as a model of nonlinear neural networks because their loss function is\na non-convex function of their parameters. Such networks are essentially just\nmultiple matrices composed together. Saxe et al. (2013) provided exact solutions\nto the complete learning dynamics in such networks and showed that learning in\nthese models captures many of the qualitative features observed in the training of\ndeep models with nonlinear activation functions. Dauphin et al. (2014) showed\nexperimentally that real neural networks also have loss functions that contain very\nmany high-cost saddle points. Choromanska et al. (2014) provided additional\ntheoretical arguments, showing that another class of high-dimensional random\nfunctions related to neural networks does so as well.\n\nWhat are the implications of the proliferation of saddle points for training algo-\nrithms? For first-order optimization algorithms that use only gradient information,\nthe situation is unclear. The gradient can often become very small near a saddle\npoint. On the other hand, gradient descent empirically seems to be able to escape\nsaddle points in many cases. Goodfellow et al. (2015) provided visualizations of\nseveral learning trajectories of state-of-the-art neural networks, with an example\ngiven in figure 8.2. These visualizations show a flattening of the cost function near\na prominent saddle point where the weights are all zero, but they also show the\ngradient descent trajectory rapidly escaping this region. Goodfellow et al. (2015)\nalso argue that continuous-time gradient descent may be shown analytically to be\nrepelled from, rather than attracted to, a nearby saddle point, but the situation\nmay be different for more realistic uses of gradient descent.\n\nFor Newton\u2019s method, it is clear that saddle points constitute a problem.\n\n286\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n(aye\n\nFigure 8.2: A visualization of the cost function of a neural network. Image adapted\nwith permission from Goodfellow ef al. (2015). These visualizations appear similar for\nfeedforward neural networks, convolutional networks, and recurrent networks applied\nto real object recognition and natural language processing tasks. Surprisingly, these\nvisualizations usually do not show many conspicuous obstacles. Prior to the success of\nstochastic gradient descent for training very large models beginning in roughly 2012,\nneural net cost function surfaces were generally believed to have much more non-convex\nstructure than is revealed by these projections. The primary obstacle revealed by this\nprojection is a saddle point of high cost near where the parameters are initialized, but, as\nindicated by the blue path, the SGD training trajectory escapes this saddle point readily.\nMost of training time is spent traversing the relatively flat valley of the cost function,\nwhich may be due to high noise in the gradient, poor conditioning of the Hessian matrix\nin this region, or simply the need to circumnavigate the tall \u201cmountain\u201d visible in the\nfigure via an indirect arcing path.\n\n287\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nGradient descent is designed to move \u201cdownhill\u201d and is not explicitly designed\nto seek a critical point. Newton\u2019s method, however, is designed to solve for a\npoint where the gradient is zero. Without appropriate modification, it can jump\nto a saddle point. The proliferation of saddle points in high dimensional spaces\npresumably explains why second-order methods have not succeeded in replacing\ngradient descent for neural network training. Dauphin et al. (2014) introduced a\nsaddle-free Newton method for second-order optimization and showed that it\nimproves significantly over the traditional version. Second-order methods remain\ndifficult to scale to large neural networks, but this saddle-free approach holds\npromise if it could be scaled.\n\nThere are other kinds of points with zero gradient besides minima and saddle\npoints. There are also maxima, which are much like saddle points from the\nperspective of optimization\u2014many algorithms are not attracted to them, but\nunmodified Newton\u2019s method is. Maxima of many classes of random functions\nbecome exponentially rare in high dimensional space, just like minima do.\n\nThere may also be wide, flat regions of constant value. In these locations, the\ngradient and also the Hessian are all zero. Such degenerate locations pose major\nproblems for all numerical optimization algorithms. In a convex problem, a wide,\nflat region must consist entirely of global minima, but in a general optimization\nproblem, such a region could correspond to a high value of the objective function.\n\n8.2.4 Cliffs and Exploding Gradients\n\nNeural networks with many layers often have extremely steep regions resembling\ncliffs, as illustrated in figure 8.3. These result from the multiplication of several\nlarge weights together. On the face of an extremely steep cliff structure, the\ngradient update step can move the parameters extremely far, usually jumping off\nof the cliff structure altogether.\n\n288\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nI(w,b)\n\nFigure 8.3: The objective function for highly nonlinear deep neural networks or for\nrecurrent neural networks often contains sharp nonlinearities in parameter space resulting\nfrom the multiplication of several parameters. These nonlinearities give rise to very\nhigh derivatives in some places. When the parameters get close to such a cliff region, a\ngradient descent update can catapult the parameters very far, possibly losing most of the\noptimization work that had been done. Figure adapted with permission from Pascanu\net al. (2013).\n\nThe cliff can be dangerous whether we approach it from above or from below,\nbut fortunately its most serious consequences can be avoided using the gradient\nclipping heuristic described in section 10.11.1. The basic idea is to recall that\nthe gradient does not specify the optimal step size, but only the optimal direction\nwithin an infinitesimal region. When the traditional gradient descent algorithm\nproposes to make a very large step, the gradient clipping heuristic intervenes to\nreduce the step size to be small enough that it is less likely to go outside the region\nwhere the gradient indicates the direction of approximately steepest descent. Cliff\nstructures are most common in the cost functions for recurrent neural networks,\nbecause such models involve a multiplication of many factors, with one factor\nfor each time step. Long temporal sequences thus incur an extreme amount of\nmultiplication.\n\n8.2.5 Long-Term Dependencies\n\nAnother difficulty that neural network optimization algorithms must overcome\narises when the computational graph becomes extremely deep. Feedforward\nnetworks with many layers have such deep computational graphs. So do recurrent\nnetworks, described in chapter 10, which construct very deep computational graphs\n\n289\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nby repeatedly applying the same operation at each time step of a long temporal\nsequence. Repeated application of the same parameters gives rise to especially\npronounced difficulties.\n\nFor example, suppose that a computational graph contains a path that consists\nof repeatedly multiplying by a matrix W. After t steps, this is equivalent to mul-\ntiplying by W*. Suppose that W has an eigendecomposition W = Vdiag(A)V\u2014.\nIn this simple case, it is straightforward to see that\n\nW! = (Vdiag(A)V~!)\u2018 = Vdiag(A)'V\u2014!. (8.11)\n\nAny eigenvalues \\; that are not near an absolute value of 1 will either explode if they\nare greater than 1 in magnitude or vanish if they are less than 1 in magnitude. The\nvanishing and exploding gradient problem refers to the fact that gradients\nthrough such a graph are also scaled according to diag(A)*. Vanishing gradients\nmake it difficult to know which direction the parameters should move to improve\nthe cost function, while exploding gradients can make learning unstable. The cliff\nstructures described earlier that motivate gradient clipping are an example of the\nexploding gradient phenomenon.\n\nThe repeated multiplication by W at each time step described here is very\nsimilar to the power method algorithm used to find the largest eigenvalue of\na matrix W and the corresponding eigenvector. From this point of view it is\nnot surprising that 2\u2019 W* will eventually discard all components of x that are\northogonal to the principal eigenvector of W.\n\nRecurrent networks use the same matrix W at each time step, but feedforward\nnetworks do not, so even very deep feedforward networks can largely avoid the\nvanishing and exploding gradient problem (Sussillo, 2014).\n\nWe defer a further discussion of the challenges of training recurrent networks\nuntil section 10.7, after recurrent networks have been described in more detail.\n\n8.2.6 Inexact Gradients\n\nMost optimization algorithms are designed with the assumption that we have\naccess to the exact gradient or Hessian matrix. In practice, we usually only have\na noisy or even biased estimate of these quantities. Nearly every deep learning\nalgorithm relies on sampling-based estimates at least insofar as using a minibatch\nof training examples to compute the gradient.\n\nIn other cases, the objective function we want to minimize is actually intractable.\nWhen the objective function is intractable, typically its gradient is intractable as\nwell. In such cases we can only approximate the gradient. These issues mostly arise\n\n290\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nwith the more advanced models in part II]. For example, contrastive divergence\ngives a technique for approximating the gradient of the intractable log-likelihood\nof a Boltzmann machine.\n\nVarious neural network optimization algorithms are designed to account for\nimperfections in the gradient estimate. One can also avoid the problem by choosing\na surrogate loss function that is easier to approximate than the true loss.\n\n8.2.7 Poor Correspondence between Local and Global Structure\n\nMany of the problems we have discussed so far correspond to properties of the\nloss function at a single point\u2014it can be difficult to make a single step if J(@) is\npoorly conditioned at the current point 9, or if @ lies on a cliff, or if 0 is a saddle\npoint hiding the opportunity to make progress downhill from the gradient.\n\nIt is possible to overcome all of these problems at a single point and still\nperform poorly if the direction that results in the most improvement locally does\nnot point toward distant regions of much lower cost.\n\nGoodfellow et al. (2015) argue that much of the runtime of training is due to\nthe length of the trajectory needed to arrive at the solution. Figure 8.2 shows that\nthe learning trajectory spends most of its time tracing out a wide arc around a\nmountain-shaped structure.\n\nMuch of research into the difficulties of optimization has focused on whether\ntraining arrives at a global minimum, a local minimum, or a saddle point, but in\npractice neural networks do not arrive at a critical point of any kind. Figure 8.1\nshows that neural networks often do not arrive at a region of small gradient. Indeed,\nsuch critical points do not even necessarily exist. For example, the loss function\n\u2014log p(y | 2; @) can lack a global minimum point and instead asymptotically\napproach some value as the model becomes more confident. For a classifier with\ndiscrete y and p(y | #) provided by a softmax, the negative log-likelihood can\nbecome arbitrarily close to zero if the model is able to correctly classify every\nexample in the training set, but it is impossible to actually reach the value of\nzero. Likewise, a model of real values p(y | 2) = (y; f(@), 87+) can have negative\nlog-likelihood that asymptotes to negative infinity\u2014if f(0) is able to correctly\npredict the value of all training set y targets, the learning algorithm will increase\n8 without bound. See figure 8.4 for an example of a failure of local optimization to\nfind a good cost function value even in the absence of any local minima or saddle\npoints.\n\nFuture research will need to develop further understanding of the factors that\ninfluence the length of the learning trajectory and better characterize the outcome\n\n291\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n(2\n\nFigure 8.4: Optimization based on local downhill moves can fail if the local surface does\nnot point toward the global solution. Here we provide an example of how this can occur,\neven if there are no saddle points and no local minima. This example cost function\ncontains only asymptotes toward low values, not minima. The main cause of difficulty in\nthis case is being initialized on the wrong side of the \u201cmountain\u201d and not being able to\ntraverse it. In higher dimensional space, learning algorithms can often circumnavigate\nsuch mountains but the trajectory associated with doing so may be long and result in\nexcessive training time, as illustrated in figure 8.2.\n\nof the process.\n\nMany existing research directions are aimed at finding good initial points for\nproblems that have difficult global structure, rather than developing algorithms\nthat use non-local moves.\n\nGradient descent and essentially all learning algorithms that are effective for\ntraining neural networks are based on making small, local moves. The previous\nsections have primarily focused on how the correct direction of these local moves\ncan be difficult to compute. We may be able to compute some properties of the\nobjective function, such as its gradient, only approximately, with bias or variance\nin our estimate of the correct direction. In these cases, local descent may or may\nnot define a reasonably short path to a valid solution, but we are not actually\nable to follow the local descent path. The objective function may have issues\nsuch as poor conditioning or discontinuous gradients, causing the region where\nthe gradient provides a good model of the objective function to be very small. In\nthese cases, local descent with steps of size \u00ab may define a reasonably short path\nto the solution, but we are only able to compute the local descent direction with\nsteps of size 6 < \u20ac. In these cases, local descent may or may not define a path\nto the solution, but the path contains many steps, so following the path incurs a\n\n292\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nhigh computational cost. Sometimes local information provides us no guide, when\nthe function has a wide flat region, or if we manage to land exactly on a critical\npoint (usually this latter scenario only happens to methods that solve explicitly\nfor critical points, such as Newton\u2019s method). In these cases, local descent does\nnot define a path to a solution at all. In other cases, local moves can be too greedy\nand lead us along a path that moves downhill but away from any solution, as in\nfigure 8.4, or along an unnecessarily long trajectory to the solution, as in figure 8.2.\nCurrently, we do not understand which of these problems are most relevant to\nmaking neural network optimization difficult, and this is an active area of research.\n\nRegardless of which of these problems are most significant, all of them might be\navoided if there exists a region of space connected reasonably directly to a solution\nby a path that local descent can follow, and if we are able to initialize learning\nwithin that well-behaved region. This last view suggests research into choosing\ngood initial points for traditional optimization algorithms to use.\n\n8.2.8 Theoretical Limits of Optimization\n\nSeveral theoretical results show that there are limits on the performance of any\noptimization algorithm we might design for neural networks (Blum and Rivest,\n1992; Judd, 1989; Wolpert and MacReady, 1997). Typically these results have\nlittle bearing on the use of neural networks in practice.\n\nSome theoretical results apply only to the case where the units of a neural\nnetwork output discrete values. However, most neural network units output\nsmoothly increasing values that make optimization via local search feasible. Some\ntheoretical results show that there exist problem classes that are intractable, but\nit can be difficult to tell whether a particular problem falls into that class. Other\nresults show that finding a solution for a network of a given size is intractable, but\nin practice we can find a solution easily by using a larger network for which many\nmore parameter settings correspond to an acceptable solution. Moreover, in the\ncontext of neural network training, we usually do not care about finding the exact\nminimum of a function, but seek only to reduce its value sufficiently to obtain good\ngeneralization error. Theoretical analysis of whether an optimization algorithm\ncan accomplish this goal is extremely difficult. Developing more realistic bounds\non the performance of optimization algorithms therefore remains an important\ngoal for machine learning research.\n\n293\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n8.3 Basic Algorithms\n\nWe have previously introduced the gradient descent (section 4.3) algorithm that\nfollows the gradient of an entire training set downhill. This may be accelerated\nconsiderably by using stochastic gradient descent to follow the gradient of randomly\nselected minibatches downhill, as discussed in section 5.9 and section 8.1.3.\n\n8.3.1 Stochastic Gradient Descent\n\nStochastic gradient descent (SGD) and its variants are probably the most used\noptimization algorithms for machine learning in general and for deep learning\nin particular. As discussed in section 8.1.3, it is possible to obtain an unbiased\nestimate of the gradient by taking the average gradient on a minibatch of m\nexamples drawn i.i.d from the data generating distribution.\n\nAlgorithm 8.1 shows how to follow this estimate of the gradient downhill.\n\nAlgorithm 8.1 Stochastic gradient descent (SGD) update at training iteration k\n\nRequire: Learning rate \u20ac,.\nRequire: Initial parameter 0\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set fal, re (m)y with\ncorresponding targets yO,\nCompute gradient estimate: g \u2014 ++ Ved; L(f(a;6), y)\nApply update: 6+ 0-\u2014 eg\nend while\n\nA crucial parameter for the SGD algorithm is the learning rate. Previously, we\nhave described SGD as using a fixed learning rate \u20ac. In practice, it is necessary to\ngradually decrease the learning rate over time, so we now denote the learning rate\nat iteration k as \u20ac,.\n\nThis is because the SGD gradient estimator introduces a source of noise (the\nrandom sampling of m training examples) that does not vanish even when we arrive\nat a minimum. By comparison, the true gradient of the total cost function becomes\nsmall and then 0 when we approach and reach a minimum using batch gradient\ndescent, so batch gradient descent can use a fixed learning rate. A sufficient\ncondition to guarantee convergence of SGD is that\n\n\u20ack=co, and (8.12)\n\n294\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nSo <x. (8.13)\n\nIn practice, it is common to decay the learning rate linearly until iteration rT:\n\u20ack = (1 _ ayeo + QE, (8.14)\n\nwith a = \u00a3. After iteration 7, it is common to leave \u20ac constant.\n\nThe learning rate may be chosen by trial and error, but it is usually best\nto choose it by monitoring learning curves that plot the objective function as a\nfunction of time. This is more of an art than a science, and most guidance on this\nsubject should be regarded with some skepticism. When using the linear schedule,\nthe parameters to choose are @, \u20ac,, and 7. Usually 7 may be set to the number of\niterations required to make a few hundred passes through the training set. Usually\n\u20ac, should be set to roughly 1% the value of \u00ab9. The main question is how to set eo.\nIf it is too large, the learning curve will show violent oscillations, with the cost\nfunction often increasing significantly. Gentle oscillations are fine, especially if\ntraining with a stochastic cost function such as the cost function arising from the\nuse of dropout. If the learning rate is too low, learning proceeds slowly, and if the\ninitial learning rate is too low, learning may become stuck with a high cost value.\nTypically, the optimal initial learning rate, in terms of total training time and the\nfinal cost value, is higher than the learning rate that yields the best performance\nafter the first 100 iterations or so. Therefore, it is usually best to monitor the first\nseveral iterations and use a learning rate that is higher than the best-performing\nlearning rate at this time, but not so high that it causes severe instability.\n\nThe most important property of SGD and related minibatch or online gradient-\nbased optimization is that computation time per update does not grow with the\nnumber of training examples. This allows convergence even when the number\nof training examples becomes very large. For a large enough dataset, SGD may\nconverge to within some fixed tolerance of its final test set error before it has\nprocessed the entire training set.\n\nTo study the convergence rate of an optimization algorithm it is common to\nmeasure the excess error J(@)\u2014 ming J(@), which is the amount that the current\ncost function exceeds the minimum possible cost. When SGD is applied to a convex\nproblem, the excess error is O oa) after k iterations, while in the strongly convex\ncase it is O(). These bounds cannot be improved unless extra conditions are\nassumed. Batch gradient descent enjoys better convergence rates than stochastic\ngradient descent in theory. However, the Cram\u00e9r-Rao bound (Cram\u00e9r, 1946; Rao,\n1945) states that generalization error cannot decrease faster than O(7). Bottou\n\n295\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nand Bousquet (2008) argue that it therefore may not be worthwhile to pursue\nan optimization algorithm that converges faster than O(Z) for machine learning\ntasks\u2014faster convergence presumably corresponds to overfitting. Moreover, the\nasymptotic analysis obscures many advantages that stochastic gradient descent\nhas after a small number of steps. With large datasets, the ability of SGD to make\nrapid initial progress while evaluating the gradient for only very few examples\noutweighs its slow asymptotic convergence. Most of the algorithms described in\nthe remainder of this chapter achieve benefits that matter in practice but are lost\nin the constant factors obscured by the O(\u00a2) asymptotic analysis. One can also\ntrade off the benefits of both batch and stochastic gradient descent by gradually\nincreasing the minibatch size during the course of learning.\n\nFor more information on SGD, see Bottou (1998).\n\n8.3.2 Momentum\n\nWhile stochastic gradient descent remains a very popular optimization strategy,\nlearning with it can sometimes be slow. The method of momentum (Polyak, 1964)\nis designed to accelerate learning, especially in the face of high curvature, small but\nconsistent gradients, or noisy gradients. The momentum algorithm accumulates\nan exponentially decaying moving average of past gradients and continues to move\nin their direction. The effect of momentum is illustrated in figure 8.5.\n\nFormally, the momentum algorithm introduces a variable v that plays the role\nof velocity\u2014it is the direction and speed at which the parameters move through\nparameter space. The velocity is set to an exponentially decaying average of the\nnegative gradient. The name momentum derives from a physical analogy, in\nwhich the negative gradient is a force moving a particle through parameter space,\naccording to Newton\u2019s laws of motion. Momentum in physics is mass times velocity.\nIn the momentum learning algorithm, we assume unit mass, so the velocity vector v\nmay also be regarded as the momentum of the particle. A hyperparameter a \u20ac [0, 1)\ndetermines how quickly the contributions of previous gradients exponentially decay.\nThe update rule is given by:\n\n_ = (2). (4)\nviav\u2014EeVeg (4 > L(f(@\u2019;0),y 7 ; (8.15)\n0-044. (8.16)\n\nThe velocity v accumulates the gradient elements Vo (4 Seat L(f (a; 6), y )).\nThe larger a is relative to \u20ac, the more previous gradients affect the current direction.\n\nThe SGD algorithm with momentum is given in algorithm 8.2.\n\n296\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n30\n\u201430 \u201420 \u2014-10 0 10 20\n\nFigure 8.5: Momentum aims primarily to solve two problems: poor conditioning of the\nHessian matrix and variance in the stochastic gradient. Here, we illustrate how momentum\novercomes the first of these two problems. The contour lines depict a quadratic loss\nfunction with a poorly conditioned Hessian matrix. The red path cutting across the\ncontours indicates the path followed by the momentum learning rule as it minimizes this\nfunction. At each step along the way, we draw an arrow indicating the step that gradient\ndescent would take at that point. We can see that a poorly conditioned quadratic objective\nlooks like a long, narrow valley or canyon with steep sides. Momentum correctly traverses\nthe canyon lengthwise, while gradient steps waste time moving back and forth across the\nnarrow axis of the canyon. Compare also figure 4.6, which shows the behavior of gradient\ndescent without momentum.\n\n297\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nPreviously, the size of the step was simply the norm of the gradient multiplied\nby the learning rate. Now, the size of the step depends on how large and how\naligned a sequence of gradients are. The step size is largest when many successive\ngradients point in exactly the same direction. If the momentum algorithm always\nobserves gradient g, then it will accelerate in the direction of \u2014g, until reaching a\nterminal velocity where the size of each step is\n\nellgl|\nl-a\n\n(8.17)\n\nIt is thus helpful to think of the momentum hyperparameter in terms of si. For\nexample, a = .9 corresponds to multiplying the maximum speed by 10 relative to\n\nthe gradient descent algorithm.\n\nCommon values of a used in practice include .5, 9, and .99. Like the learning\nrate, a may also be adapted over time. Typically it begins with a small value and\nis later raised. It is less important to adapt @ over time than to shrink \u20ac over time.\n\nAlgorithm 8.2 Stochastic gradient descent (SGD) with momentum\n\nRequire: Learning rate \u20ac, momentum parameter a.\nRequire: Initial parameter 0, initial velocity v.\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set fa), ee alm) \u00a5 with\ncorresponding targets yO,\nCompute gradient estimate: g + 4Ve6 >; L(f(w@;0), y)\nCompute velocity update: v + av \u2014 eg\nApply update: 0+ 0+\nend while\n\nWe can view the momentum algorithm as simulating a particle subject to\ncontinuous-time Newtonian dynamics. The physical analogy can help to build\nintuition for how the momentum and gradient descent algorithms behave.\n\nThe position of the particle at any point in time is given by O(t). The particle\nexperiences net force f(t). This force causes the particle to accelerate:\n\nf(t)= (0). (8.18)\n\nRather than viewing this as a second-order differential equation of the position,\nwe can introduce the variable v(t) representing the velocity of the particle at time\nt and rewrite the Newtonian dynamics as a first-order differential equation:\n\nv(t) == (0), (8.19)\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nf) = 2 w) (8.20)\n\nThe momentum algorithm then consists of solving the differential equations via\nnumerical simulation. A simple numerical method for solving differential equations\nis Euler\u2019s method, which simply consists of simulating the dynamics defined by\nthe equation by taking small, finite steps in the direction of each gradient.\n\nThis explains the basic form of the momentum update, but what specifically are\nthe forces? One force is proportional to the negative gradient of the cost function:\n\u2014VoJ(0). This force pushes the particle downhill along the cost function surface.\nThe gradient descent algorithm would simply take a single step based on each\ngradient, but the Newtonian scenario used by the momentum algorithm instead\nuses this force to alter the velocity of the particle. We can think of the particle\nas being like a hockey puck sliding down an icy surface. Whenever it descends a\nsteep part of the surface, it gathers speed and continues sliding in that direction\nuntil it begins to go uphill again.\n\nOne other force is necessary. If the only force is the gradient of the cost function,\nthen the particle might never come to rest. Imagine a hockey puck sliding down\none side of a valley and straight up the other side, oscillating back and forth forever,\nassuming the ice is perfectly frictionless. To resolve this problem, we add one\nother force, proportional to \u2014v(t). In physics terminology, this force corresponds\nto viscous drag, as if the particle must push through a resistant medium such as\nsyrup. This causes the particle to gradually lose energy over time and eventually\nconverge to a local minimum.\n\nWhy do we use \u2014v(t) and viscous drag in particular? Part of the reason to\nuse \u2014v(t) is mathematical convenience\u2014an integer power of the velocity is easy\nto work with. However, other physical systems have other kinds of drag based\non other integer powers of the velocity. For example, a particle traveling through\nthe air experiences turbulent drag, with force proportional to the square of the\nvelocity, while a particle moving along the ground experiences dry friction, with a\nforce of constant magnitude. We can reject each of these options. Turbulent drag,\nproportional to the square of the velocity, becomes very weak when the velocity is\nsmall. It is not powerful enough to force the particle to come to rest. A particle\nwith a non-zero initial velocity that experiences only the force of turbulent drag\nwill move away from its initial position forever, with the distance from the starting\npoint growing like O(logt). We must therefore use a lower power of the velocity.\nIf we use a power of zero, representing dry friction, then the force is too strong.\nWhen the force due to the gradient of the cost function is small but non-zero, the\nconstant force due to friction can cause the particle to come to rest before reaching\na local minimum. Viscous drag avoids both of these problems\u2014it is weak enough\n\n299\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nthat the gradient can continue to cause motion until a minimum is reached, but\nstrong enough to prevent motion if the gradient does not justify moving.\n\n8.3.3. Nesterov Momentum\n\nSutskever et al. (2013) introduced a variant of the momentum algorithm that was\ninspired by Nesterov\u2019s accelerated gradient method (Nesterov, 1983, 2004). The\nupdate rules in this case are given by:\n\nve av\u2014eVe\nm 4\n\n1 m ; ;\n\na S1(F200 s00.\u00a5%)]. (8.21)\ni=l\n\n0- 0+, (8.22)\n\nwhere the parameters a and \u00ab play a similar role as in the standard momentum\nmethod. The difference between Nesterov momentum and standard momentum is\nwhere the gradient is evaluated. With Nesterov momentum the gradient is evaluated\nafter the current velocity is applied. Thus one can interpret Nesterov momentum\nas attempting to add a correction factor to the standard method of momentum.\nThe complete Nesterov momentum algorithm is presented in algorithm 8.3.\n\nIn the convex batch gradient case, Nesterov momentum brings the rate of\nconvergence of the excess error from O(1/k) (after k steps) to O(1/k?) as shown\nby Nesterov (1983). Unfortunately, in the stochastic gradient case, Nesterov\nmomentum does not improve the rate of convergence.\n\nAlgorithm 8.3 Stochastic gradient descent (SGD) with Nesterov momentum\n\nRequire: Learning rate \u20ac, momentum parameter a.\nRequire: Initial parameter 0, initial velocity v.\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set fa), Lee val) \u00a5 with\ncorresponding labels y.\nApply interim update: 6 \u2014 0+ av 7\nCompute gradient (at interim point): g ~ +V\u00a2 Lf (@\u00ae ; 6), y)\nCompute velocity update: v + av \u2014 eg\nApply update: 0+ 0+\nend while\n\n300\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n8.4 Parameter Initialization Strategies\n\nSome optimization algorithms are not iterative by nature and simply solve for a\nsolution point. Other optimization algorithms are iterative by nature but, when\napplied to the right class of optimization problems, converge to acceptable solutions\nin an acceptable amount of time regardless of initialization. Deep learning training\nalgorithms usually do not have either of these luxuries. Training algorithms for deep\nlearning models are usually iterative in nature and thus require the user to specify\nsome initial point from which to begin the iterations. Moreover, training deep\nmodels is a sufficiently difficult task that most algorithms are strongly affected by\nthe choice of initialization. The initial point can determine whether the algorithm\nconverges at all, with some initial points being so unstable that the algorithm\nencounters numerical difficulties and fails altogether. When learning does converge,\nthe initial point can determine how quickly learning converges and whether it\nconverges to a point with high or low cost. Also, points of comparable cost\ncan have wildly varying generalization error, and the initial point can affect the\ngeneralization as well.\n\nModern initialization strategies are simple and heuristic. Designing improved\ninitialization strategies is a difficult task because neural network optimization is\nnot yet well understood. Most initialization strategies are based on achieving some\nnice properties when the network is initialized. However, we do not have a good\nunderstanding of which of these properties are preserved under which circumstances\nafter learning begins to proceed. A further difficulty is that some initial points\nmay be beneficial from the viewpoint of optimization but detrimental from the\nviewpoint of generalization. Our understanding of how the initial point affects\ngeneralization is especially primitive, offering little to no guidance for how to select\nthe initial point.\n\nPerhaps the only property known with complete certainty is that the initial\nparameters need to \u201cbreak symmetry\u201d between different units. If two hidden\nunits with the same activation function are connected to the same inputs, then\nthese units must have different initial parameters. If they have the same initial\nparameters, then a deterministic learning algorithm applied to a deterministic cost\nand model will constantly update both of these units in the same way. Even if the\nmodel or training algorithm is capable of using stochasticity to compute different\nupdates for different units (for example, if one trains with dropout), it is usually\nbest to initialize each unit to compute a different function from all of the other\nunits. This may help to make sure that no input patterns are lost in the null\nspace of forward propagation and no gradient patterns are lost in the null space\nof back-propagation. The goal of having each unit compute a different function\n\n301\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nmotivates random initialization of the parameters. We could explicitly search\nfor a large set of basis functions that are all mutually different from each other,\nbut this often incurs a noticeable computational cost. For example, if we have at\nmost as many outputs as inputs, we could use Gram-Schmidt orthogonalization\non an initial weight matrix, and be guaranteed that each unit computes a very\ndifferent function from each other unit. Random initialization from a high-entropy\ndistribution over a high-dimensional space is computationally cheaper and unlikely\nto assign any units to compute the same function as each other.\n\nTypically, we set the biases for each unit to heuristically chosen constants, and\ninitialize only the weights randomly. Extra parameters, for example, parameters\nencoding the conditional variance of a prediction, are usually set to heuristically\nchosen constants much like the biases are.\n\nWe almost always initialize all the weights in the model to values drawn\nrandomly from a Gaussian or uniform distribution. The choice of Gaussian\nor uniform distribution does not seem to matter very much, but has not been\nexhaustively studied. The scale of the initial distribution, however, does have a\nlarge effect on both the outcome of the optimization procedure and on the ability\nof the network to generalize.\n\nLarger initial weights will yield a stronger symmetry breaking effect, helping\nto avoid redundant units. They also help to avoid losing signal during forward or\nback-propagation through the linear component of each layer\u2014larger values in the\nmatrix result in larger outputs of matrix multiplication. Initial weights that are\ntoo large may, however, result in exploding values during forward propagation or\nback-propagation. In recurrent networks, large weights can also result in chaos\n(such extreme sensitivity to small perturbations of the input that the behavior\nof the deterministic forward propagation procedure appears random). To some\nextent, the exploding gradient problem can be mitigated by gradient clipping\n(thresholding the values of the gradients before performing a gradient descent step).\nLarge weights may also result in extreme values that cause the activation function\nto saturate, causing complete loss of gradient through saturated units. These\ncompeting factors determine the ideal initial scale of the weights.\n\nThe perspectives of regularization and optimization can give very different\ninsights into how we should initialize a network. The optimization perspective\nsuggests that the weights should be large enough to propagate information success-\nfully, but some regularization concerns encourage making them smaller. The use\nof an optimization algorithm such as stochastic gradient descent that makes small\nincremental changes to the weights and tends to halt in areas that are nearer to\nthe initial parameters (whether due to getting stuck in a region of low gradient, or\n\n302\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\ndue to triggering some early stopping criterion based on overfitting) expresses a\nprior that the final parameters should be close to the initial parameters. Recall\nfrom section 7.8 that gradient descent with early stopping is equivalent to weight\ndecay for some models. In the general case, gradient descent with early stopping is\nnot the same as weight decay, but does provide a loose analogy for thinking about\nthe effect of initialization. We can think of initializing the parameters 0 to @9 as\nbeing similar to imposing a Gaussian prior p(@) with mean 4). From this point\nof view, it makes sense to choose 9 to be near 0. This prior says that it is more\nlikely that units do not interact with each other than that they do interact. Units\ninteract only if the likelihood term of the objective function expresses a strong\npreference for them to interact. On the other hand, if we initialize 09 to large\nvalues, then our prior specifies which units should interact with each other, and\nhow they should interact.\n\nSome heuristics are available for choosing the initial scale of the weights. One\nheuristic is to initialize the weights of a fully connected layer with m inputs and\nn outputs by sampling each weight from U(-Fe ; Tn ), while Glorot and Bengio\n\n(2010) suggest using the normalized initialization\n\nwy 0 4/ 6 +4/ 6 ). (8.23)\nm+n m+n\n\nThis latter heuristic is designed to compromise between the goal of initializing\nall layers to have the same activation variance and the goal of initializing all\nlayers to have the same gradient variance. The formula is derived using the\nassumption that the network consists only of a chain of matrix multiplications,\nwith no nonlinearities. Real neural networks obviously violate this assumption,\nbut many strategies designed for the linear model perform reasonably well on its\nnonlinear counterparts.\n\nSaxe et al. (2013) recommend initializing to random orthogonal matrices, with\na carefully chosen scaling or gain factor g that accounts for the nonlinearity applied\nat each layer. They derive specific values of the scaling factor for different types of\nnonlinear activation functions. This initialization scheme is also motivated by a\nmodel of a deep network as a sequence of matrix multiplies without nonlinearities.\nUnder such a model, this initialization scheme guarantees that the total number of\ntraining iterations required to reach convergence is independent of depth.\n\nIncreasing the scaling factor g pushes the network toward the regime where\nactivations increase in norm as they propagate forward through the network and\ngradients increase in norm as they propagate backward. Sussillo (2014) showed\nthat setting the gain factor correctly is sufficient to train networks as deep as\n\n303\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n1,000 layers, without needing to use orthogonal initializations. A key insight of\nthis approach is that in feedforward networks, activations and gradients can grow\nor shrink on each step of forward or back-propagation, following a random walk\nbehavior. This is because feedforward networks use a different weight matrix at\neach layer. If this random walk is tuned to preserve norms, then feedforward\nnetworks can mostly avoid the vanishing and exploding gradients problem that\narises when the same weight matrix is used at each step, described in section 8.2.5.\n\nUnfortunately, these optimal criteria for initial weights often do not lead to\noptimal performance. This may be for three different reasons. First, we may\nbe using the wrong criteria\u2014it may not actually be beneficial to preserve the\nnorm of a signal throughout the entire network. Second, the properties imposed\nat initialization may not persist after learning has begun to proceed. Third, the\ncriteria might succeed at improving the speed of optimization but inadvertently\nincrease generalization error. In practice, we usually need to treat the scale of the\nweights as a hyperparameter whose optimal value lies somewhere roughly near but\nnot exactly equal to the theoretical predictions.\n\nOne drawback to scaling rules that set all of the initial weights to have the\n\nsame standard deviation, such as \u2014L, is that every individual weight becomes\n\nm?\n\nextremely small when the layers become large. Martens (2010) introduced an\nalternative initialization scheme called sparse initialization in which each unit is\ninitialized to have exactly & non-zero weights. The idea is to keep the total amount\nof input to the unit independent from the number of inputs m without making the\nmagnitude of individual weight elements shrink with m. Sparse initialization helps\nto achieve more diversity among the units at initialization time. However, it also\nimposes a very strong prior on the weights that are chosen to have large Gaussian\nvalues. Because it takes a long time for gradient descent to shrink \u201cincorrect\u201d large\nvalues, this initialization scheme can cause problems for units such as maxout units\nthat have several filters that must be carefully coordinated with each other.\n\nWhen computational resources allow it, it is usually a good idea to treat the\ninitial scale of the weights for each layer as a hyperparameter, and to choose these\nscales using a hyperparameter search algorithm described in section 11.4.2, such\nas random search. The choice of whether to use dense or sparse initialization\ncan also be made a hyperparameter. Alternately, one can manually search for\nthe best initial scales. A good rule of thumb for choosing the initial scales is to\nlook at the range or standard deviation of activations or gradients on a single\nminibatch of data. If the weights are too small, the range of activations across the\nminibatch will shrink as the activations propagate forward through the network.\nBy repeatedly identifying the first layer with unacceptably small activations and\n\n304\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nincreasing its weights, it is possible to eventually obtain a network with reasonable\ninitial activations throughout. If learning is still too slow at this point, it can be\nuseful to look at the range or standard deviation of the gradients as well as the\nactivations. This procedure can in principle be automated and is generally less\ncomputationally costly than hyperparameter optimization based on validation set\nerror because it is based on feedback from the behavior of the initial model on a\nsingle batch of data, rather than on feedback from a trained model on the validation\nset. While long used heuristically, this protocol has recently been specified more\nformally and studied by Mishkin and Matas (2015).\n\nSo far we have focused on the initialization of the weights. Fortunately,\ninitialization of other parameters is typically easier.\n\nThe approach for setting the biases must be coordinated with the approach\nfor settings the weights. Setting the biases to zero is compatible with most weight\ninitialization schemes. There are a few situations where we may set some biases to\nnon-zero values:\n\ne Ifa bias is for an output unit, then it is often beneficial to initialize the bias to\nobtain the right marginal statistics of the output. To do this, we assume that\nthe initial weights are small enough that the output of the unit is determined\nonly by the bias. This justifies setting the bias to the inverse of the activation\nfunction applied to the marginal statistics of the output in the training set.\nFor example, if the output is a distribution over classes and this distribution\nis a highly skewed distribution with the marginal probability of class i given\nby element c; of some vector c, then we can set the bias vector b by solving\nthe equation softmax(b) = c. This applies not only to classifiers but also to\nmodels we will encounter in Part II], such as autoencoders and Boltzmann\nmachines. These models have layers whose output should resemble the input\ndata a, and it can be very helpful to initialize the biases of such layers to\nmatch the marginal distribution over x.\n\ne Sometimes we may want to choose the bias to avoid causing too much\nsaturation at initialization. For example, we may set the bias of a ReLU\nhidden unit to 0.1 rather than 0 to avoid saturating the ReLU at initialization.\nThis approach is not compatible with weight initialization schemes that do\nnot expect strong input from the biases though. For example, it is not\nrecommended for use with random walk initialization (Sussillo, 2014).\n\ne Sometimes a unit controls whether other units are able to participate in a\nfunction. In such situations, we have a unit with output uw and another unit\nh \u20ac [0,1], and they are multiplied together to produce an output uh. We\n\n305\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\ncan view h as a gate that determines whether uh & u or uh \u00a9 0. In these\nsituations, we want to set the bias for h so that h \u00a9 1 most of the time at\ninitialization. Otherwise u does not have a chance to learn. For example,\nJozefowicz et al. (2015) advocate setting the bias to 1 for the forget gate of\nthe LSTM model, described in section 10.10.\n\nAnother common type of parameter is a variance or precision parameter. For\nexample, we can perform linear regression with a conditional variance estimate\nusing the model\n\np(y | x) =N(y | wrx + b,1/8) (8.24)\n\nwhere \u00a3 is a precision parameter. We can usually initialize variance or precision\nparameters to 1 safely. Another approach is to assume the initial weights are close\nenough to zero that the biases may be set while ignoring the effect of the weights,\nthen set the biases to produce the correct marginal mean of the output, and set\nthe variance parameters to the marginal variance of the output in the training set.\n\nBesides these simple constant or random methods of initializing model parame-\nters, it is possible to initialize model parameters using machine learning. A common\nstrategy discussed in part III of this book is to initialize a supervised model with\nthe parameters learned by an unsupervised model trained on the same inputs.\nOne can also perform supervised training on a related task. Even performing\nsupervised training on an unrelated task can sometimes yield an initialization that\noffers faster convergence than a random initialization. Some of these initialization\nstrategies may yield faster convergence and better generalization because they\nencode information about the distribution in the initial parameters of the model.\nOthers apparently perform well primarily because they set the parameters to have\nthe right scale or set different units to compute different functions from each other.\n\n8.5 Algorithms with Adaptive Learning Rates\n\nNeural network researchers have long realized that the learning rate was reliably one\nof the hyperparameters that is the most difficult to set because it has a significant\nimpact on model performance. As we have discussed in sections 4.3 and 8.2, the\ncost is often highly sensitive to some directions in parameter space and insensitive\nto others. The momentum algorithm can mitigate these issues somewhat, but\ndoes so at the expense of introducing another hyperparameter. In the face of this,\nit is natural to ask if there is another way. If we believe that the directions of\nsensitivity are somewhat axis-aligned, it can make sense to use a separate learning\n\n306\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nrate for each parameter, and automatically adapt these learning rates throughout\nthe course of learning.\n\nThe delta-bar-delta algorithm (Jacobs, 1988) is an early heuristic approach\nto adapting individual learning rates for model parameters during training. The\napproach is based on a simple idea: if the partial derivative of the loss, with respect\nto a given model parameter, remains the same sign, then the learning rate should\nincrease. If the partial derivative with respect to that parameter changes sign,\nthen the learning rate should decrease. Of course, this kind of rule can only be\napplied to full batch optimization.\n\nMore recently, a number of incremental (or mini-batch-based) methods have\nbeen introduced that adapt the learning rates of model parameters. This section\nwill briefly review a few of these algorithms.\n\n8.5.1 AdaGrad\n\nThe AdaGrad algorithm, shown in algorithm 8.4, individually adapts the learning\nrates of all model parameters by scaling them inversely proportional to the square\nroot of the sum of all of their historical squared values (Duchi ec? al., 2011). The\nparameters with the largest partial derivative of the loss have a correspondingly\nrapid decrease in their learning rate, while parameters with small partial derivatives\nhave a relatively small decrease in their learning rate. The net effect is greater\nprogress in the more gently sloped directions of parameter space.\n\nIn the context of convex optimization, the AdaGrad algorithm enjoys some\ndesirable theoretical properties. However, empirically it has been found that\u2014for\ntraining deep neural network models\u2014the accumulation of squared gradients from\nthe beginning of training can result in a premature and excessive decrease in the\neffective learning rate. AdaGrad performs well for some but not all deep learning\nmodels.\n\n8.5.2 RMSProp\n\nThe RMSProp algorithm (Hinton, 2012) modifies AdaGrad to perform better in\nthe non-convex setting by changing the gradient accumulation into an exponentially\nweighted moving average. AdaGrad is designed to converge rapidly when applied\nto a convex function. When applied to a non-convex function to train a neural\nnetwork, the learning trajectory may pass through many different structures and\neventually arrive at a region that is a locally convex bowl. AdaGrad shrinks the\nlearning rate according to the entire history of the squared gradient and may\n\n307\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nAlgorithm 8.4 The AdaGrad algorithm\n\nRequire: Global learning rate \u20ac\nRequire: Initial parameter 0\nRequire: Small constant 5, perhaps 10~\u2019, for numerical stability\nInitialize gradient accumulation variable r = 0\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set fa), Lee val) \u00a5 with\ncorresponding targets y\u00ae,\nCompute gradient: g \u2014+Ve >; L(f (a; 0), y)\nAccumulate squared gradient: r+r+gOg\nCompute update: A@ \u2014 \u2014tayF \u00a9g. (Division and square root applied\n\nelement-wise)\nApply update: 6+ 0+ A@\nend while\n\nhave made the learning rate too small before arriving at such a convex structure.\nRMSProp uses an exponentially decaying average to discard history from the\nextreme past so that it can converge rapidly after finding a convex bowl, as if it\nwere an instance of the AdaGrad algorithm initialized within that bowl.\n\nRMSProp is shown in its standard form in algorithm 8.5 and combined with\nNesterov momentum in algorithm 8.6. Compared to AdaGrad, the use of the\nmoving average introduces a new hyperparameter, p, that controls the length scale\nof the moving average.\n\nEmpirically, RMSProp has been shown to be an effective and practical op-\ntimization algorithm for deep neural networks. It is currently one of the go-to\noptimization methods being employed routinely by deep learning practitioners.\n\n8.5.3 Adam\n\nAdam (Kingma and Ba, 2014) is yet another adaptive learning rate optimization\nalgorithm and is presented in algorithm 8.7. The name \u201cAdam\u201d derives from\nthe phrase \u201cadaptive moments.\u201d In the context of the earlier algorithms, it is\nperhaps best seen as a variant on the combination of RMSProp and momentum\nwith a few important distinctions. First, in Adam, momentum is incorporated\ndirectly as an estimate of the first order moment (with exponential weighting) of\nthe gradient. The most straightforward way to add momentum to RMSProp is to\napply momentum to the rescaled gradients. The use of momentum in combination\nwith rescaling does not have a clear theoretical motivation. Second, Adam includes\n\n308\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nAlgorithm 8.5 The RMSProp algorithm\n\nRequire: Global learning rate \u20ac, decay rate p.\n\nRequire: Initial parameter 0\n\nRequire: Small constant 6, usually 107\u00b0, used to stabilize division by small\nnumbers.\n\nInitialize accumulation variables r = 0\n\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set fa), Lee val) \u00a5 with\ncorresponding targets y\u00ae,\nCompute gradient: g <\u2014 +Vo dv; L(f(a@\u00ae; 0), y)\nAccumulate squared gradient: r+ pr+(l\u2014p)gOQg\nCompute parameter update: A@ = Te Og. = applied element-wise)\nApply update: 6+ 0+ A@\n\nend while\n\nbias corrections to the estimates of both the first-order moments (the momentum\nterm) and the (uncentered) second-order moments to account for their initialization\nat the origin (see algorithm 8.7). RMSProp also incorporates an estimate of the\n(uncentered) second-order moment, however it lacks the correction factor. Thus,\nunlike in Adam, the RMSProp second-order moment estimate may have high bias\nearly in training. Adam is generally regarded as being fairly robust to the choice\nof hyperparameters, though the learning rate sometimes needs to be changed from\nthe suggested default.\n\n8.5.4 Choosing the Right Optimization Algorithm\n\nIn this section, we discussed a series of related algorithms that each seek to address\nthe challenge of optimizing deep models by adapting the learning rate for each\nmodel parameter. At this point, a natural question is: which algorithm should one\nchoose?\n\nUnfortunately, there is currently no consensus on this point. Schaul et al. (2014)\npresented a valuable comparison of a large number of optimization algorithms\nacross a wide range of learning tasks. While the results suggest that the family of\nalgorithms with adaptive learning rates (represented by RMSProp and AdaDelta)\nperformed fairly robustly, no single best algorithm has emerged.\n\nCurrently, the most popular optimization algorithms actively in use include\nSGD, SGD with momentum, RMSProp, RMSProp with momentum, AdaDelta\nand Adam. The choice of which algorithm to use, at this point, seems to depend\n\n309\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nAlgorithm 8.6 RMSProp algorithm with Nesterov momentum\n\nRequire: Global learning rate \u20ac, decay rate p, momentum coefficient a.\nRequire: Initial parameter 0, initial velocity v.\nInitialize accumulation variable r = 0\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set {x, 2, 8) with\ncorresponding targets y\u00ae,\nCompute interim update: @ <\u2014 0 + av 7\nCompute gradient: g \u2014 4V >; L(f(a;6),y)\nAccumulate gradient: r + pr+(1\u2014p)g@Qg\nCompute velocity update: v + av \u2014 Vr Og. (F applied element-wise)\nApply update: 0+ 0+\nend while\n\nlargely on the user\u2019s familiarity with the algorithm (for ease of hyperparameter\ntuning).\n\n8.6 Approximate Second-Order Methods\n\nIn this section we discuss the application of second-order methods to the training\nof deep networks. See LeCun e# al. (1998a) for an earlier treatment of this subject.\nFor simplicity of exposition, the only objective function we examine is the empirical\nrisk:\n1 2 . .\nJ(8) = Exy~Paaca ew) EF (#39), 9)] =\u2014 Y7L(F(@;8),y). (8.25)\n\ni=1\n\nHowever the methods we discuss here extend readily to more general objective\nfunctions that, for instance, include parameter regularization terms such as those\ndiscussed in chapter 7.\n\n8.6.1 Newton\u2019s Method\n\nIn section 4.3, we introduced second-order gradient methods. In contrast to first-\norder methods, second-order methods make use of second derivatives to improve\noptimization. The most widely used second-order method is Newton\u2019s method. We\nnow describe Newton\u2019s method in more detail, with emphasis on its application to\nneural network training.\n\n310\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nAlgorithm 8.7 The Adam algorithm\n\nRequire: Step size e (Suggested default: 0.001)\nRequire: Exponential decay rates for moment estimates, p1 and p2 in [0,1).\n(Suggested defaults: 0.9 and 0.999 respectively)\nRequire: Small constant 6 used for numerical stabilization. (Suggested default:\n10-8)\nRequire: Initial parameters 0\nInitialize 1st and 2nd moment variables s = 0, r = 0\nInitialize time step t = 0\nwhile stopping criterion not met do\nSample a minibatch of m examples from the training set {a ,...,x(\u2122} with\ncorresponding targets y\u00ae,\nCompute gradient: g < 1Ve F L(f(a@; 0), y)\ntHt+l1\nUpdate biased first moment estimate: s + pis + (1\u2014p1)g\nUpdate biased second moment estimate: r + por + (1\u2014 p2)g Og\nCorrect bias in first moment: 8 < 7 =a\nCorrect bias in second moment: * <\u2014 To\nCompute update: A@ = 85 (operations applied element-wise)\nApply update: 6+ 0+ A@\nend while\n\nNewton\u2019s method is an optimization scheme based on using a second-order Tay-\nlor series expansion to approximate J(@) near some point 00, ignoring derivatives\nof higher order:\n\nJ(0) = J(80) + (8 \u2014 00)\" VoJ(O) + 5 (0 \u2014 09) ' H(@ \u2014 0), (8.26)\n\nwhere HA is the Hessian of J with respect to @ evaluated at 00. If we then solve for\nthe critical point of this function, we obtain the Newton parameter update rule:\n\n0* = 0) \u2014H'VoJ(60) (8.27)\n\nThus for a locally quadratic function (with positive definite H), by rescaling\nthe gradient by H~!, Newton\u2019s method jumps directly to the minimum. If the\nobjective function is convex but not quadratic (there are higher-order terms), this\nupdate can be iterated, yielding the training algorithm associated with Newton\u2019s\nmethod, given in algorithm 8.8.\n\n311\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nAlgorithm 8.8 Newton\u2019s method with objective J(@) =\nwi int L(f(e; 0), y).\nRequire: Initial parameter 00\nRequire: Training set of m examples\nwhile stopping criterion not met do\nCompute gradient: g + V6); L(f(a@; 0), y)\nCompute Hessian: H + 1 V3, L(f(@;6), y)\nCompute Hessian inverse: H7!\nCompute update: A@ = \u2014H~'g\nApply update: 6 = 0+ A@\nend while\n\nFor surfaces that are not quadratic, as long as the Hessian remains positive\ndefinite, Newton\u2019s method can be applied iteratively. This implies a two-step\niterative procedure. First, update or compute the inverse Hessian (i.e. by updat-\ning the quadratic approximation). Second, update the parameters according to\nequation 8.27.\n\nIn section 8.2.3, we discussed how Newton\u2019s method is appropriate only when\nthe Hessian is positive definite. In deep learning, the surface of the objective\nfunction is typically non-convex with many features, such as saddle points, that\nare problematic for Newton\u2019s method. If the eigenvalues of the Hessian are not\nall positive, for example, near a saddle point, then Newton\u2019s method can actually\ncause updates to move in the wrong direction. This situation can be avoided\nby regularizing the Hessian. Common regularization strategies include adding a\nconstant, a, along the diagonal of the Hessian. The regularized update becomes\n\n6\u00b0 = 6) \u2014[H (f(A0)) + al] | Vo f (0). (8.28)\n\nThis regularization strategy is used in approximations to Newton\u2019s method, such\nas the Levenberg\u2014Marquardt algorithm (Levenberg, 1944; Marquardt, 1963), and\nworks fairly well as long as the negative eigenvalues of the Hessian are still relatively\nclose to zero. In cases where there are more extreme directions of curvature, the\nvalue of a would have to be sufficiently large to offset the negative eigenvalues.\nHowever, as a increases in size, the Hessian becomes dominated by the af diagonal\nand the direction chosen by Newton\u2019s method converges to the standard gradient\ndivided by a. When strong negative curvature is present, a may need to be so\nlarge that Newton\u2019s method would make smaller steps than gradient descent with\na properly chosen learning rate.\n\nBeyond the challenges created by certain features of the objective function,\n\n312\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nsuch as saddle points, the application of Newton\u2019s method for training large neural\nnetworks is limited by the significant computational burden it imposes. The\nnumber of elements in the Hessian is squared in the number of parameters, so with\nk, parameters (and for even very small neural networks the number of parameters\nk can be in the millions), Newton\u2019s method would require the inversion of a k x k\nmatrix\u2014with computational complexity of O(k\u00b0). Also, since the parameters will\nchange with every update, the inverse Hessian has to be computed at every training\niteration. As a consequence, only networks with a very small number of parameters\ncan be practically trained via Newton\u2019s method. In the remainder of this section,\nwe will discuss alternatives that attempt to gain some of the advantages of Newton\u2019s\nmethod while side-stepping the computational hurdles.\n\n8.6.2 Conjugate Gradients\n\nConjugate gradients is a method to efficiently avoid the calculation of the inverse\nHessian by iteratively descending conjugate directions. The inspiration for this\napproach follows from a careful study of the weakness of the method of steepest\ndescent (see section 4.3 for details), where line searches are applied iteratively in\nthe direction associated with the gradient. Figure 8.6 illustrates how the method of\nsteepest descent, when applied in a quadratic bowl, progresses in a rather ineffective\nback-and-forth, zig-zag pattern. This happens because each line search direction,\nwhen given by the gradient, is guaranteed to be orthogonal to the previous line\nsearch direction.\n\nLet the previous search direction be d;_;. At the minimum, where the line\nsearch terminates, the directional derivative is zero in direction dy_1: VoJ(@) -\nd;_; = 0. Since the gradient at this point defines the current search direction,\nd, = VeJ (8) will have no contribution in the direction d;_1. Thus d; is orthogonal\nto d:_1. This relationship between d;_; and d; is illustrated in figure 8.6 for\nmultiple iterations of steepest descent. As demonstrated in the figure, the choice of\northogonal directions of descent do not preserve the minimum along the previous\nsearch directions. This gives rise to the zig-zag pattern of progress, where by\ndescending to the minimum in the current gradient direction, we must re-minimize\nthe objective in the previous gradient direction. Thus, by following the gradient at\nthe end of each line search we are, in a sense, undoing progress we have already\nmade in the direction of the previous line search. The method of conjugate gradients\nseeks to address this problem.\n\nIn the method of conjugate gradients, we seek to find a search direction that\nis conjugate to the previous line search direction, i.e. it will not undo progress\nmade in that direction. At training iteration t, the next search direction d; takes\n\n313\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n\\\n\n\u201410\n\n\u201420\n\n\u201430 N\n\n\u201430 \u201420 \u201410 0 10 20\n\nFigure 8.6: The method of steepest descent applied to a quadratic cost surface. The\nmethod of steepest descent involves jumping to the point of lowest cost along the line\ndefined by the gradient at the initial point on each step. This resolves some of the problems\nseen with using a fixed learning rate in figure 4.6, but even with the optimal step size\nthe algorithm still makes back-and-forth progress toward the optimum. By definition, at\nthe minimum of the objective along a given direction, the gradient at the final point is\northogonal to that direction.\n\nthe form:\n\nad = VoJ(8@) + Prdi-1 (8.29)\n\nwhere (3; is a coefficient whose magnitude controls how much of the direction, d;_1,\nwe should add back to the current search direction.\n\nTwo directions, d; and d,_1, are defined as conjugate if d| Hd;_; = 0, where\nHZ is the Hessian matrix.\n\nThe straightforward way to impose conjugacy would involve calculation of the\neigenvectors of H to choose (1, which would not satisfy our goal of developing\na method that is more computationally viable than Newton\u2019s method for large\nproblems. Can we calculate the conjugate directions without resorting to these\ncalculations? Fortunately the answer to that is yes.\n\nTwo popular methods for computing the (; are:\n\n1. Fletcher-Reeves:\n\nVad (A)' Vo F(A)\nVoJ(@-1)' VoJ(O,-1)\n\nBr (8.30)\n\n314\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n2. Polak-Ribi\u00e9re:\n\n(VoJ(0:) \u2014 VoJ(0:-1)) ' VoJ(4)\nVoF({-1)' Vot (8-1)\n\nBr = (8.31)\n\nFor a quadratic surface, the conjugate directions ensure that the gradient along\nthe previous direction does not increase in magnitude. We therefore stay at the\nminimum along the previous directions. As a consequence, in a k-dimensional\nparameter space, the conjugate gradient method requires at most k line searches to\nachieve the minimum. The conjugate gradient algorithm is given in algorithm 8.9.\n\nAlgorithm 8.9 The conjugate gradient method\n\nRequire: Initial parameters 00\nRequire: Training set of m examples\nInitialize p9 = 0\nInitialize go = 0\nInitialize t = 1\nwhile stopping criterion not met do\nInitialize the gradient g, = 0\nCompute gradient: g: <\u2014 3Vo > L(f(a@; 6), y)\n\nCompute (; = oo (Polak-Ribi\u00e9re)\nt\u2014-19t\u2014\n\n(Nonlinear conjugate gradient: optionally reset 6; to zero, for example if t is\na multiple of some constant k, such as k = 5)\nCompute search direction: p; = \u2014g: + Pxpr-1\nPerform line search to find: & = argmin,g 5 7, L(f(a@\u2122; 04 + em), y)\n(On a truly quadratic cost function, analytically solve for e* rather than\nexplicitly searching for it)\nApply update: 0:41 = 0 + \u20ac* pr\ntHt+l1\n\nend while\n\nNonlinear Conjugate Gradients: So far we have discussed the method of\nconjugate gradients as it is applied to quadratic objective functions. Of course,\nour primary interest in this chapter is to explore optimization methods for training\nneural networks and other related deep learning models where the corresponding\nobjective function is far from quadratic. Perhaps surprisingly, the method of\nconjugate gradients is still applicable in this setting, though with some modification.\nWithout any assurance that the objective is quadratic, the conjugate directions\n\n315\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nare no longer assured to remain at the minimum of the objective for previous\ndirections. As a result, the nonlinear conjugate gradients algorithm includes\noccasional resets where the method of conjugate gradients is restarted with line\nsearch along the unaltered gradient.\n\nPractitioners report reasonable results in applications of the nonlinear conjugate\ngradients algorithm to training neural networks, though it is often beneficial to\ninitialize the optimization with a few iterations of stochastic gradient descent before\ncommencing nonlinear conjugate gradients. Also, while the (nonlinear) conjugate\ngradients algorithm has traditionally been cast as a batch method, minibatch\nversions have been used successfully for the training of neural networks (Le et al.,\n2011). Adaptations of conjugate gradients specifically for neural networks have\n\nbeen proposed earlier, such as the scaled conjugate gradients algorithm (Moller,\n1993).\n\n8.6.3 BFGS\n\nThe Broyden\u2014Fletcher\u2014Goldfarb\u2014Shanno (BFGS) algorithm attempts to\nbring some of the advantages of Newton\u2019s method without the computational\nburden. In that respect, BFGS is similar to the conjugate gradient method.\nHowever, BFGS takes a more direct approach to the approximation of Newton\u2019s\nupdate. Recall that Newton\u2019s update is given by\n\n0* = 0 \u2014 H'VoJ(@), (8.32)\n\nwhere H is the Hessian of J with respect to @ evaluated at 00. The primary\ncomputational difficulty in applying Newton\u2019s update is the calculation of the\ninverse Hessian H~!. The approach adopted by quasi-Newton methods (of which\nthe BFGS algorithm is the most prominent) is to approximate the inverse with\na matrix M; that is iteratively refined by low rank updates to become a better\napproximation of H\u2014!.\n\nThe specification and derivation of the BFGS approximation is given in many\ntextbooks on optimization, including Luenberger (1984).\n\nOnce the inverse Hessian approximation M; is updated, the direction of descent\npr is determined by p: = Mig:. A line search is performed in this direction to\ndetermine the size of the step, e*, taken in this direction. The final update to the\n\nparameters is given by:\nOrsi = 0: + \u20ac* pr. (8.33)\n\nLike the method of conjugate gradients, the BFGS algorithm iterates a series of\nline searches with the direction incorporating second-order information. However\n\n316\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nunlike conjugate gradients, the success of the approach is not heavily dependent\non the line search finding a point very close to the true minimum along the line.\nThus, relative to conjugate gradients, BFGS has the advantage that it can spend\nless time refining each line search. On the other hand, the BFGS algorithm must\nstore the inverse Hessian matrix, M, that requires O(n?) memory, making BFGS\nimpractical for most modern deep learning models that typically have millions of\nparameters.\n\nLimited Memory BFGS (or L-BFGS) The memory costs of the BFGS\nalgorithm can be significantly decreased by avoiding storing the complete inverse\nHessian approximation M. The L-BFGS algorithm computes the approximation M\nusing the same method as the BFGS algorithm, but beginning with the assumption\nthat M(\u00a2-) is the identity matrix, rather than storing the approximation from one\nstep to the next. If used with exact line searches, the directions defined by L-BFGS\nare mutually conjugate. However, unlike the method of conjugate gradients, this\nprocedure remains well behaved when the minimum of the line search is reached\nonly approximately. The L-BFGS strategy with no storage described here can be\ngeneralized to include more information about the Hessian by storing some of the\nvectors used to update M at each time step, which costs only O(n) per step.\n\n8.7 Optimization Strategies and Meta-Algorithms\n\nMany optimization techniques are not exactly algorithms, but rather general\ntemplates that can be specialized to yield algorithms, or subroutines that can be\nincorporated into many different algorithms.\n\n8.7.1 Batch Normalization\n\nBatch normalization (Ioffe and Szegedy, 2015) is one of the most exciting recent\ninnovations in optimizing deep neural networks and it is actually not an optimization\nalgorithm at all. Instead, it is a method of adaptive reparametrization, motivated\nby the difficulty of training very deep models.\n\nVery deep models involve the composition of several functions or layers. The\ngradient tells how to update each parameter, under the assumption that the other\nlayers do not change. In practice, we update all of the layers simultaneously.\nWhen we make the update, unexpected results can happen because many functions\ncomposed together are changed simultaneously, using updates that were computed\nunder the assumption that the other functions remain constant. As a simple\n\n317\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nexample, suppose we have a deep neural network that has only one unit per layer\nand does not use an activation function at each hidden layer: 7 = rw, uyuy... wi.\nHere, w; provides the weight used by layer 7. The output of layer 7 is hy = hj_ uj.\nThe output \u00a5 is a linear function of the input x, but a nonlinear function of the\nweights w;. Suppose our cost function has put a gradient of 1 on %, so we wish to\ndecrease \u00a5 slightly. The back-propagation algorithm can then compute a gradient\ng = V wij. Consider what happens when we make an update w <+ w\u2014 eg. The\nfirst-order Taylor series approximation of 7 predicts that the value of g will decrease\nby eg'g. If we wanted to decrease by .1, this first-order information available in\nthe gradient suggests we could set the learning rate \u00ab to \u2014--. However, the actual\nupdate will include second-order and third-order effects, on up to effects of order J.\nThe new value of \u00a5 is given by\n\nx(wy _ \u20acg1 )(w2 _ \u20ac92) eee (wy _ \u20acgi). (8.34)\n\nAn example of one second-order term arising from this update is 291 @ Ties Uj.\nThis term might be negligible if Tlie3ws is small, or might be exponentially large\nif the weights on layers 3 through / are greater than 1. This makes it very hard\nto choose an appropriate learning rate, because the effects of an update to the\nparameters for one layer depends so strongly on all of the other layers. Second-order\noptimization algorithms address this issue by computing an update that takes these\nsecond-order interactions into account, but we can see that in very deep networks,\neven higher-order interactions can be significant. Even second-order optimization\nalgorithms are expensive and usually require numerous approximations that prevent\nthem from truly accounting for all significant second-order interactions. Building\nan n-th order optimization algorithm for n > 2 thus seems hopeless. What can we\ndo instead?\n\nBatch normalization provides an elegant way of reparametrizing almost any deep\nnetwork. The reparametrization significantly reduces the problem of coordinating\nupdates across many layers. Batch normalization can be applied to any input\nor hidden layer in a network. Let H be a minibatch of activations of the layer\nto normalize, arranged as a design matrix, with the activations for each example\nappearing in a row of the matrix. To normalize H, we replace it with\n\n_ A=\n~ Oo\n\nH\u2019 ; (8.35)\nwhere p is a vector containing the mean of each unit and o is a vector containing\nthe standard deviation of each unit. The arithmetic here is based on broadcasting\nthe vector yw and the vector o to be applied to every row of the matrix H. Within\neach row, the arithmetic is element-wise, so H;,; is normalized by subtracting pu,\n\n318\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nand dividing by o;. The rest of the network then operates on H\u2019 in exactly the\nsame way that the original network operated on H.\n\nAt training time,\n1\np= mh, (8.36)\n\nand\n\nv= 8 SH L);, (8.37)\n\nwhere 6 is a small positive value such as 10~\u00b0 imposed to avoid encountering\nthe undefined gradient of /z at z = 0. Crucially, we back-propagate through\nthese operations for computing the mean and the standard deviation, and for\napplying them to normalize H. This means that the gradient will never propose\nan operation that acts simply to increase the standard deviation or mean of\nh;; the normalization operations remove the effect of such an action and zero\nout its component in the gradient. This was a major innovation of the batch\nnormalization approach. Previous approaches had involved adding penalties to\nthe cost function to encourage units to have normalized activation statistics or\ninvolved intervening to renormalize unit statistics after each gradient descent step.\nThe former approach usually resulted in imperfect normalization and the latter\nusually resulted in significant wasted time as the learning algorithm repeatedly\nproposed changing the mean and variance and the normalization step repeatedly\nundid this change. Batch normalization reparametrizes the model to make some\nunits always be standardized by definition, deftly sidestepping both problems.\n\nAt test time, and o may be replaced by running averages that were collected\nduring training time. This allows the model to be evaluated on a single example,\nwithout needing to use definitions of and o that depend on an entire minibatch.\n\nRevisiting the 7 = rwywe2...w; example, we see that we can mostly resolve the\ndifficulties in learning this model by normalizing hj_1. Suppose that \u00ab is drawn\nfrom a unit Gaussian. Then /j_; will also come from a Gaussian, because the\ntransformation from x to hy is linear. However, h;_1 will no longer have zero mean\nand unit variance. After applying batch normalization, we obtain the normalized\nhy1 that restores the zero mean and unit variance properties. For almost any\nupdate to the lower layers, hy will remain a unit Gaussian. The output y may\nthen be learned as a simple linear function 7 = wiht. Learning in this model is\nnow very simple because the parameters at the lower layers simply do not have an\neffect in most cases; their output is always renormalized to a unit Gaussian. In\nsome corner cases, the lower layers can have an effect. Changing one of the lower\nlayer weights to 0 can make the output become degenerate, and changing the sign\n\n319\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nof one of the lower weights can flip the relationship between hy and y. These\nsituations are very rare. Without normalization, nearly every update would have\nan extreme effect on the statistics of hj_;. Batch normalization has thus made\nthis model significantly easier to learn. In this example, the ease of learning of\ncourse came at the cost of making the lower layers useless. In our linear example,\nthe lower layers no longer have any harmful effect, but they also no longer have\nany beneficial effect. This is because we have normalized out the first and second\norder statistics, which is all that a linear network can influence. In a deep neural\nnetwork with nonlinear activation functions, the lower layers can perform nonlinear\ntransformations of the data, so they remain useful. Batch normalization acts to\nstandardize only the mean and variance of each unit in order to stabilize learning,\nbut allows the relationships between units and the nonlinear statistics of a single\nunit to change.\n\nBecause the final layer of the network is able to learn a linear transformation,\nwe may actually wish to remove all linear relationships between units within a\nlayer. Indeed, this is the approach taken by Desjardins et al. (2015), who provided\nthe inspiration for batch normalization. Unfortunately, eliminating all linear\ninteractions is much more expensive than standardizing the mean and standard\ndeviation of each individual unit, and so far batch normalization remains the most\npractical approach.\n\nNormalizing the mean and standard deviation of a unit can reduce the expressive\npower of the neural network containing that unit. In order to maintain the\nexpressive power of the network, it is common to replace the batch of hidden unit\nactivations H with yH'+ 3 rather than simply the normalized H\u2019. The variables\ny and @ are learned parameters that allow the new variable to have any mean\nand standard deviation. At first glance, this may seem useless\u2014why did we set\nthe mean to 0, and then introduce a parameter that allows it to be set back to\nany arbitrary value 3? The answer is that the new parametrization can represent\nthe same family of functions of the input as the old parametrization, but the new\nparametrization has different learning dynamics. In the old parametrization, the\nmean of H was determined by a complicated interaction between the parameters\nin the layers below H. In the new parametrization, the mean of yH\u2019 + @ is\ndetermined solely by 8 The new parametrization is much easier to learn with\ngradient descent.\n\nMost neural network layers take the form of \u00a26(X W + b) where \u00a2 is some\nfixed nonlinear activation function such as the rectified linear transformation. It\nis natural to wonder whether we should apply batch normalization to the input\nX, or to the transformed value XW + b. loffe and Szegedy (2015) recommend\n\n320\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nthe latter. More specifically, XW + 6 should be replaced by a normalized version\nof XW. The bias term should be omitted because it becomes redundant with\nthe 8 parameter applied by the batch normalization reparametrization. The input\nto a layer is usually the output of a nonlinear activation function such as the\nrectified linear function in a previous layer. The statistics of the input are thus\nmore non-Gaussian and less amenable to standardization by linear operations.\n\nIn convolutional networks, described in chapter 9, it is important to apply the\nsame normalizing , and o at every spatial location within a feature map, so that\nthe statistics of the feature map remain the same regardless of spatial location.\n\n8.7.2 Coordinate Descent\n\nIn some cases, it may be possible to solve an optimization problem quickly by\nbreaking it into separate pieces. If we minimize f(a) with respect to a single\nvariable x;, then minimize it with respect to another variable x; and so on,\nrepeatedly cycling through all variables, we are guaranteed to arrive at a (local)\nminimum. This practice is known as coordinate descent, because we optimize\none coordinate at a time. More generally, block coordinate descent refers to\nminimizing with respect to a subset of the variables simultaneously. The term\n\u201ccoordinate descent\u201d is often used to refer to block coordinate descent as well as\nthe strictly individual coordinate descent.\n\nCoordinate descent makes the most sense when the different variables in the\noptimization problem can be clearly separated into groups that play relatively\nisolated roles, or when optimization with respect to one group of variables is\nsignificantly more efficient than optimization with respect to all of the variables.\nFor example, consider the cost function\n\nJ(H,W) = 37 |His| +0 (X - W'H).\n\niJ iJ\n\n(8.38)\n\nuJ\n\nThis function describes a learning problem called sparse coding, where the goal is\nto find a weight matrix W that can linearly decode a matrix of activation values\nHT to reconstruct the training set X. Most applications of sparse coding also\ninvolve weight decay or a constraint on the norms of the columns of W, in order\nto prevent the pathological solution with extremely small H and large W.\n\nThe function J is not convex. However, we can divide the inputs to the\ntraining algorithm into two sets: the dictionary parameters W and the code\nrepresentations H. Minimizing the objective function with respect to either one of\nthese sets of variables is a convex problem. Block coordinate descent thus gives\n\n321\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nus an optimization strategy that allows us to use efficient convex optimization\nalgorithms, by alternating between optimizing W with H fixed, then optimizing\nAT with W fixed.\n\nCoordinate descent is not a very good strategy when the value of one variable\nstrongly influences the optimal value of another variable, as in the function f(@) =\n(a \u2014 22)? +a (x} + x5) where a is a positive constant. The first term encourages\nthe two variables to have similar value, while the second term encourages them\nto be near zero. The solution is to set both to zero. Newton\u2019s method can solve\nthe problem in a single step because it is a positive definite quadratic problem.\nHowever, for small a, coordinate descent will make very slow progress because the\nfirst term does not allow a single variable to be changed to a value that differs\nsignificantly from the current value of the other variable.\n\n8.7.3 Polyak Averaging\n\nPolyak averaging (Polyak and Juditsky, 1992) consists of averaging together several\npoints in the trajectory through parameter space visited by an optimization\nalgorithm. If \u00a2 iterations of gradient descent visit points a... ,0(), then the\noutput of the Polyak averaging algorithm is 0 = iv; 6. On some problem\nclasses, such as gradient descent applied to convex problems, this approach has\nstrong convergence guarantees. When applied to neural networks, its justification\nis more heuristic, but it performs well in practice. The basic idea is that the\noptimization algorithm may leap back and forth across a valley several times\nwithout ever visiting a point near the bottom of the valley. The average of all of\nthe locations on either side should be close to the bottom of the valley though.\n\nIn non-convex problems, the path taken by the optimization trajectory can be\nvery complicated and visit many different regions. Including points in parameter\nspace from the distant past that may be separated from the current point by large\nbarriers in the cost function does not seem like a useful behavior. As a result,\nwhen applying Polyak averaging to non-convex problems, it is typical to use an\nexponentially decaying running average:\n\n60 = at) 4 (1\u2014 aja, (8.39)\n\nThe running average approach is used in numerous applications. See Szegedy\net al. (2015) for a recent example.\n\n322\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n8.7.4 Supervised Pretraining\n\nSometimes, directly training a model to solve a specific task can be too ambitious\nif the model is complex and hard to optimize or if the task is very difficult. It is\nsometimes more effective to train a simpler model to solve the task, then make\nthe model more complex. It can also be more effective to train the model to solve\na simpler task, then move on to confront the final task. These strategies that\ninvolve training simple models on simple tasks before confronting the challenge of\ntraining the desired model to perform the desired task are collectively known as\npretraining.\n\nGreedy algorithms break a problem into many components, then solve for\nthe optimal version of each component in isolation. Unfortunately, combining the\nindividually optimal components is not guaranteed to yield an optimal complete\nsolution. However, greedy algorithms can be computationally much cheaper than\nalgorithms that solve for the best joint solution, and the quality of a greedy solution\nis often acceptable if not optimal. Greedy algorithms may also be followed by a\nfine-tuning stage in which a joint optimization algorithm searches for an optimal\nsolution to the full problem. Initializing the joint optimization algorithm with a\ngreedy solution can greatly speed it up and improve the quality of the solution it\nfinds.\n\nPretraining, and especially greedy pretraining, algorithms are ubiquitous in\ndeep learning. In this section, we describe specifically those pretraining algorithms\nthat break supervised learning problems into other simpler supervised learning\nproblems. This approach is known as greedy supervised pretraining.\n\nIn the original (Bengio et al., 2007) version of greedy supervised pretraining,\neach stage consists of a supervised learning training task involving only a subset of\nthe layers in the final neural network. An example of greedy supervised pretraining\nis illustrated in figure 8.7, in which each added hidden layer is pretrained as part\nof a shallow supervised MLP, taking as input the output of the previously trained\nhidden layer. Instead of pretraining one layer at a time, Simonyan and Zisserman\n(2015) pretrain a deep convolutional network (eleven weight layers) and then use\nthe first four and last three layers from this network to initialize even deeper\nnetworks (with up to nineteen layers of weights). The middle layers of the new,\nvery deep network are initialized randomly. The new network is then jointly trained.\nAnother option, explored by Yu et al. (2010) is to use the outputs of the previously\ntrained MLPs, as well as the raw input, as inputs for each added stage.\n\nWhy would greedy supervised pretraining help? The hypothesis initially\ndiscussed by Bengio et al. (2007) is that it helps to provide better guidance to the\n\n323\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n(>\n7s\n&\n\n=\n~\nRas)\n>\niy\nVS\n\nUl?)\n\nOrO\u00ae\n\nay ein\n\n5\n%\n<\n\n-\n/\n'\n\\\n\n(c) (4)\n\nFigure 8.7: Illustration of one form of greedy supervised pretraining (Bengio et al., 2007).\n(a)We start by training a sufficiently shallow architecture. (b)Another drawing of the\nsame architecture. (c)We keep only the input-to-hidden layer of the original network and\ndiscard the hidden-to-output layer. We send the output of the first hidden layer as input\nto another supervised single hidden layer MLP that is trained with the same objective\nas the first network was, thus adding a second hidden layer. This can be repeated for as\nmany layers as desired. (d)Another drawing of the result, viewed as a feedforward network.\nTo further improve the optimization, we can jointly fine-tune all the layers, either only at\nthe end or at each stage of this process.\n\n324\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nintermediate levels of a deep hierarchy. In general, pretraining may help both in\nterms of optimization and in terms of generalization.\n\nAn approach related to supervised pretraining extends the idea to the context\nof transfer learning: Yosinski et al. (2014) pretrain a deep convolutional net with 8\nlayers of weights on a set of tasks (a subset of the 1000 ImageNet object categories)\nand then initialize a same-size network with the first & layers of the first net. All\nthe layers of the second network (with the upper layers initialized randomly) are\nthen jointly trained to perform a different set of tasks (another subset of the 1000\nImageNet object categories), with fewer training examples than for the first set of\ntasks. Other approaches to transfer learning with neural networks are discussed in\nsection 15.2.\n\nAnother related line of work is the FitNets (Romero e\u00a2 al., 2015) approach.\nThis approach begins by training a network that has low enough depth and great\nenough width (number of units per layer) to be easy to train. This network then\nbecomes a teacher for a second network, designated the student. The student\nnetwork is much deeper and thinner (eleven to nineteen layers) and would be\ndifficult to train with SGD under normal circumstances. The training of the\nstudent network is made easier by training the student network not only to predict\nthe output for the original task, but also to predict the value of the middle layer\nof the teacher network. This extra task provides a set of hints about how the\nhidden layers should be used and can simplify the optimization problem. Additional\nparameters are introduced to regress the middle layer of the 5-layer teacher network\nfrom the middle layer of the deeper student network. However, instead of predicting\nthe final classification target, the objective is to predict the middle hidden layer\nof the teacher network. The lower layers of the student networks thus have two\nobjectives: to help the outputs of the student network accomplish their task, as\nwell as to predict the intermediate layer of the teacher network. Although a thin\nand deep network appears to be more difficult to train than a wide and shallow\nnetwork, the thin and deep network may generalize better and certainly has lower\ncomputational cost if it is thin enough to have far fewer parameters. Without\nthe hints on the hidden layer, the student network performs very poorly in the\nexperiments, both on the training and test set. Hints on middle layers may thus\nbe one of the tools to help train neural networks that otherwise seem difficult to\ntrain, but other optimization techniques or changes in the architecture may also\nsolve the problem.\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\n8.7.5 Designing Models to Aid Optimization\n\nTo improve optimization, the best strategy is not always to improve the optimization\nalgorithm. Instead, many improvements in the optimization of deep models have\ncome from designing the models to be easier to optimize.\n\nIn principle, we could use activation functions that increase and decrease in\njagged non-monotonic patterns. However, this would make optimization extremely\ndifficult. In practice, zt is more important to choose a model family that is easy to\noptimize than to use a powerful optimization algorithm. Most of the advances in\nneural network learning over the past 30 years have been obtained by changing\nthe model family rather than changing the optimization procedure. Stochastic\ngradient descent with momentum, which was used to train neural networks in the\n1980s, remains in use in modern state of the art neural network applications.\n\nSpecifically, modern neural networks reflect a design choice to use linear trans-\nformations between layers and activation functions that are differentiable almost\neverywhere and have significant slope in large portions of their domain. In par-\nticular, model innovations like the LSTM, rectified linear units and maxout units\nhave all moved toward using more linear functions than previous models like deep\nnetworks based on sigmoidal units. These models have nice properties that make\noptimization easier. The gradient flows through many layers provided that the\nJacobian of the linear transformation has reasonable singular values. Moreover,\nlinear functions consistently increase in a single direction, so even if the model\u2019s\noutput is very far from correct, it is clear simply from computing the gradient\nwhich direction its output should move to reduce the loss function. In other words,\nmodern neural nets have been designed so that their local gradient information\ncorresponds reasonably well to moving toward a distant solution.\n\nOther model design strategies can help to make optimization easier. For\nexample, linear paths or skip connections between layers reduce the length of\nthe shortest path from the lower layer\u2019s parameters to the output, and thus\nmitigate the vanishing gradient problem (Srivastava et al., 2015). A related idea\nto skip connections is adding extra copies of the output that are attached to the\nintermediate hidden layers of the network, as in GoogLeNet (Szegedy et al., 2014a)\nand deeply-supervised nets (Lee et al., 2014). These \u201cauxiliary heads\u201d are trained\nto perform the same task as the primary output at the top of the network in order\nto ensure that the lower layers receive a large gradient. When training is complete\nthe auxiliary heads may be discarded. This is an alternative to the pretraining\nstrategies, which were introduced in the previous section. In this way, one can\ntrain jointly all the layers in a single phase but change the architecture, so that\nintermediate layers (especially the lower ones) can get some hints about what they\n\n326\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nshould do, via a shorter path. These hints provide an error signal to lower layers.\n\n8.7.6 Continuation Methods and Curriculum Learning\n\nAs argued in section 8.2.7, many of the challenges in optimization arise from the\nglobal structure of the cost function and cannot be resolved merely by making better\nestimates of local update directions. The predominant strategy for overcoming this\nproblem is to attempt to initialize the parameters in a region that is connected\nto the solution by a short path through parameter space that local descent can\ndiscover.\n\nContinuation methods are a family of strategies that can make optimization\neasier by choosing initial points to ensure that local optimization spends most of\nits time in well-behaved regions of space. The idea behind continuation methods is\nto construct a series of objective functions over the same parameters. In order to\nminimize a cost function J (8), we will construct new cost functions {J OJ (r))\nThese cost functions are designed to be increasingly difficult, with J being fairly\neasy to minimize, and To), the most difficult, being J(0), the true cost function\nmotivating the entire process. When we say that J is easier than J\u201c), we\nmean that it is well behaved over more of 8 space. A random initialization is more\nlikely to land in the region where local descent can minimize the cost function\nsuccessfully because this region is larger. The series of cost functions are designed\nso that a solution to one is a good initial point of the next. We thus begin by\nsolving an easy problem then refine the solution to solve incrementally harder\nproblems until we arrive at a solution to the true underlying problem.\n\nTraditional continuation methods (predating the use of continuation methods\nfor neural network training) are usually based on smoothing the objective function.\nSee Wu (1997) for an example of such a method and a review of some related\nmethods. Continuation methods are also closely related to simulated annealing,\nwhich adds noise to the parameters (Kirkpatrick et al., 1983). Continuation\nmethods have been extremely successful in recent years. See Mobahi and Fisher\n(2015) for an overview of recent literature, especially for AI applications.\n\nContinuation methods traditionally were mostly designed with the goal of\novercoming the challenge of local minima. Specifically, they were designed to\nreach a global minimum despite the presence of many local minima. To do so,\nthese continuation methods would construct easier cost functions by \u201cblurring\u201d the\noriginal cost function. This blurring operation can be done by approximating\n\nJO (8) = Ey wooo) I (8') (8.40)\nvia sampling. The intuition for this approach is that some non-convex functions\n\n327\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nbecome approximately convex when blurred. In many cases, this blurring preserves\nenough information about the location of a global minimum that we can find the\nglobal minimum by solving progressively less blurred versions of the problem. This\napproach can break down in three different ways. First, it might successfully define\na series of cost functions where the first is convex and the optimum tracks from\none function to the next arriving at the global minimum, but it might require so\nmany incremental cost functions that the cost of the entire procedure remains high.\nNP-hard optimization problems remain NP-hard, even when continuation methods\nare applicable. The other two ways that continuation methods fail both correspond\nto the method not being applicable. First, the function might not become convex,\nno matter how much it is blurred. Consider for example the function J(@) = \u20140'@.\nSecond, the function may become convex as a result of blurring, but the minimum\nof this blurred function may track to a local rather than a global minimum of the\noriginal cost function.\n\nThough continuation methods were mostly originally designed to deal with the\nproblem of local minima, local minima are no longer believed to be the primary\nproblem for neural network optimization. Fortunately, continuation methods can\nstill help. The easier objective functions introduced by the continuation method can\neliminate flat regions, decrease variance in gradient estimates, improve conditioning\nof the Hessian matrix, or do anything else that will either make local updates\neasier to compute or improve the correspondence between local update directions\nand progress toward a global solution.\n\nBengio et al. (2009) observed that an approach called curriculum learning\nor shaping can be interpreted as a continuation method. Curriculum learning is\nbased on the idea of planning a learning process to begin by learning simple concepts\nand progress to learning more complex concepts that depend on these simpler\nconcepts. This basic strategy was previously known to accelerate progress in animal\ntraining (Skinner, 1958; Peterson, 2004; Krueger and Dayan, 2009) and machine\nlearning (Solomonoff, 1989; Elman, 1993; Sanger, 1994). Bengio et al. (2009)\njustified this strategy as a continuation method, where earlier J@ are made easier by\nincreasing the influence of simpler examples (either by assigning their contributions\nto the cost function larger coefficients, or by sampling them more frequently), and\nexperimentally demonstrated that better results could be obtained by following a\ncurriculum on a large-scale neural language modeling task. Curriculum learning\nhas been successful on a wide range of natural language (Spitkovsky et al., 2010;\nCollobert e\u00a2 al., 2011a; Mikolov et al., 2011b; Tu and Honavar, 2011) and computer\nvision (Kumar et al., 2010; Lee and Grauman, 2011; Supancic and Ramanan, 2013)\ntasks. Curriculum learning was also verified as being consistent with the way in\nwhich humans teach (Khan ef al., 2011): teachers start by showing easier and\n\n328\n", "CHAPTER 8. OPTIMIZATION FOR TRAINING DEEP MODELS\n\nmore prototypical examples and then help the learner refine the decision surface\nwith the less obvious cases. Curriculum-based strategies are more effective for\nteaching humans than strategies based on uniform sampling of examples, and can\nalso increase the effectiveness of other teaching strategies (Basu and Christensen,\n2013).\n\nAnother important contribution to research on curriculum learning arose in the\ncontext of training recurrent neural networks to capture long-term dependencies:\nZaremba and Sutskever (2014) found that much better results were obtained with a\nstochastic curriculum, in which a random mix of easy and difficult examples is always\npresented to the learner, but where the average proportion of the more difficult\nexamples (here, those with longer-term dependencies) is gradually increased. With\na deterministic curriculum, no improvement over the baseline (ordinary training\nfrom the full training set) was observed.\n\nWe have now described the basic family of neural network models and how to\nregularize and optimize them. In the chapters ahead, we turn to specializations of\nthe neural network family, that allow neural networks to scale to very large sizes and\nprocess input data that has special structure. The optimization methods discussed\nin this chapter are often directly applicable to these specialized architectures with\nlittle or no modification.\n\n329\n", "Chapter 9\n\nConvolutional Networks\n\nConvolutional networks (LeCun, 1989), also known as convolutional neural\nnetworks or CNNs, are a specialized kind of neural network for processing data\nthat has a known, grid-like topology. Examples include time-series data, which can\nbe thought of as a 1D grid taking samples at regular time intervals, and image data,\nwhich can be thought of as a 2D grid of pixels. Convolutional networks have been\ntremendously successful in practical applications. The name \u201cconvolutional neural\nnetwork\u201d indicates that the network employs a mathematical operation called\nconvolution. Convolution is a specialized kind of linear operation. Convolutional\nnetworks are simply neural networks that use convolution in place of general matrix\nmultiplication in at least one of their layers.\n\nIn this chapter, we will first describe what convolution is. Next, we will\nexplain the motivation behind using convolution in a neural network. We will then\ndescribe an operation called pooling, which almost all convolutional networks\nemploy. Usually, the operation used in a convolutional neural network does not\ncorrespond precisely to the definition of convolution as used in other fields such\nas engineering or pure mathematics. We will describe several variants on the\nconvolution function that are widely used in practice for neural networks. We\nwill also show how convolution may be applied to many kinds of data, with\ndifferent numbers of dimensions. We then discuss means of making convolution\nmore efficient. Convolutional networks stand out as an example of neuroscientific\nprinciples influencing deep learning. We will discuss these neuroscientific principles,\nthen conclude with comments about the role convolutional networks have played\nin the history of deep learning. One topic this chapter does not address is how to\nchoose the architecture of your convolutional network. The goal of this chapter is\nto describe the kinds of tools that convolutional networks provide, while chapter 11\n\n330\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\ndescribes general guidelines for choosing which tools to use in which circumstances.\nResearch into convolutional network architectures proceeds so rapidly that a new\nbest architecture for a given benchmark is announced every few weeks to months,\nrendering it impractical to describe the best architecture in print. However, the\nbest architectures have consistently been composed of the building blocks described\nhere.\n\n9.1 The Convolution Operation\n\nIn its most general form, convolution is an operation on two functions of a real-\nvalued argument. To motivate the definition of convolution, we start with examples\nof two functions we might use.\n\nSuppose we are tracking the location of a spaceship with a laser sensor. Our\nlaser sensor provides a single output x(t), the position of the spaceship at time\nt. Both x and \u00a2 are real-valued, i.e., we can get a different reading from the laser\nsensor at any instant in time.\n\nNow suppose that our laser sensor is somewhat noisy. To obtain a less noisy\nestimate of the spaceship\u2019s position, we would like to average together several\nmeasurements. Of course, more recent measurements are more relevant, so we will\nwant this to be a weighted average that gives more weight to recent measurements.\nWe can do this with a weighting function w(a), where a is the age of a measurement.\nIf we apply such a weighted average operation at every moment, we obtain a new\nfunction s providing a smoothed estimate of the position of the spaceship:\n\ns(t) = [owt \u2014a)da (9.1)\n\nThis operation is called convolution. The convolution operation is typically\ndenoted with an asterisk:\n\ns(t) = (w@* w)(t) (9.2)\n\nIn our example, w needs to be a valid probability density function, or the\noutput is not a weighted average. Also, w needs to be 0 for all negative arguments,\nor it will look into the future, which is presumably beyond our capabilities. These\nlimitations are particular to our example though. In general, convolution is defined\nfor any functions for which the above integral is defined, and may be used for other\npurposes besides taking weighted averages.\n\nIn convolutional network terminology, the first argument (in this example, the\nfunction x) to the convolution is often referred to as the input and the second\n\n331\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nargument (in this example, the function w) as the kernel. The output is sometimes\nreferred to as the feature map.\n\nIn our example, the idea of a laser sensor that can provide measurements\nat every instant in time is not realistic. Usually, when we work with data on a\ncomputer, time will be discretized, and our sensor will provide data at regular\nintervals. In our example, it might be more realistic to assume that our laser\nprovides a measurement once per second. The time index \u00a2 can then take on only\ninteger values. If we now assume that x and w are defined only on integer \u00a2, we\ncan define the discrete convolution:\n\ns(t) = (a@* w)(t) = S> x(a)w(t\u2014 a) (9.3)\n\na=\u2014oo\n\nIn machine learning applications, the input is usually a multidimensional array\nof data and the kernel is usually a multidimensional array of parameters that are\nadapted by the learning algorithm. We will refer to these multidimensional arrays\nas tensors. Because each element of the input and kernel must be explicitly stored\nseparately, we usually assume that these functions are zero everywhere but the\nfinite set of points for which we store the values. This means that in practice we\ncan implement the infinite summation as a summation over a finite number of\narray elements.\n\nFinally, we often use convolutions over more than one axis at a time. For\nexample, if we use a two-dimensional image J as our input, we probably also want\nto use a two-dimensional kernel K:\n\nS(i,j) = (1* K)(i = Ld Mm nk (i-\u2014m,j\u2014n). (9.4)\n\nm\n\nConvolution is commutative, meaning we can equivalently write:\n\nS(i,j) = (K \u00abI(t \u2014 Dd i\u2014m,j \u2014n)K(m,n). (9.5)\n\nm\n\nUsually the latter formula is more straightforward to implement in a machine\nlearning library, because there is less variation in the range of valid values of m\nand n.\n\nThe commutative property of convolution arises because we have flipped the\nkernel relative to the input, in the sense that as m increases, the index into the\ninput increases, but the index into the kernel decreases. The only reason to flip\nthe kernel is to obtain the commutative property. While the commutative property\n\n332\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nis useful for writing proofs, it is not usually an important property of a neural\nnetwork implementation. Instead, many neural network libraries implement a\nrelated function called the cross-correlation, which is the same as convolution\nbut without flipping the kernel:\n\nS(i,j) = (L* K)(i, 7) = SSO (i +m, j +n) K (m,n). (9.6)\n\nm n\n\nMany machine learning libraries implement cross-correlation but call it convolution.\nIn this text we will follow this convention of calling both operations convolution,\nand specify whether we mean to flip the kernel or not in contexts where kernel\nflipping is relevant. In the context of machine learning, the learning algorithm will\nlearn the appropriate values of the kernel in the appropriate place, so an algorithm\nbased on convolution with kernel flipping will learn a kernel that is flipped relative\nto the kernel learned by an algorithm without the flipping. It is also rare for\nconvolution to be used alone in machine learning; instead convolution is used\nsimultaneously with other functions, and the combination of these functions does\nnot commute regardless of whether the convolution operation flips its kernel or\nnot.\n\nSee figure 9.1 for an example of convolution (without kernel flipping) applied\nto a 2-D tensor.\n\nDiscrete convolution can be viewed as multiplication by a matrix. However, the\nmatrix has several entries constrained to be equal to other entries. For example,\nfor univariate discrete convolution, each row of the matrix is constrained to be\nequal to the row above shifted by one element. This is known as a Toeplitz\nmatrix. In two dimensions, a doubly block circulant matrix corresponds to\nconvolution. In addition to these constraints that several elements be equal to\neach other, convolution usually corresponds to a very sparse matrix (a matrix\nwhose entries are mostly equal to zero). This is because the kernel is usually much\nsmaller than the input image. Any neural network algorithm that works with\nmatrix multiplication and does not depend on specific properties of the matrix\nstructure should work with convolution, without requiring any further changes\nto the neural network. Typical convolutional neural networks do make use of\nfurther specializations in order to deal with large inputs efficiently, but these are\nnot strictly necessary from a theoretical perspective.\n\n333\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nInput\n\nOutput\n\nFigure 9.1: An example of 2-D convolution wit\nthe output to only positions where the kernel\nconvolution in some contexts. We draw boxes\n\nKernel\n\n10ut kernel-flipping. In this case we restrict\n\nies entirely within the image, called \u201cvalid\u201d\nwith arrows to indicate how the upper-left\n\nelement of the output tensor is formed by applying the kernel to the corresponding\n\nupper-left region of the input tensor.\n\n334\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\n9.2 Motivation\n\nConvolution leverages three important ideas that can help improve a machine\nlearning system: sparse interactions, parameter sharing and equivariant\nrepresentations. Moreover, convolution provides a means for working with\ninputs of variable size. We now describe each of these ideas in turn.\n\nTraditional neural network layers use matrix multiplication by a matrix of\nparameters with a separate parameter describing the interaction between each input\nunit and each output unit. This means every output unit interacts with every input\nunit. Convolutional networks, however, typically have sparse interactions (also\nreferred to as sparse connectivity or sparse weights). This is accomplished by\nmaking the kernel smaller than the input. For example, when processing an image,\nthe input image might have thousands or millions of pixels, but we can detect small,\nmeaningful features such as edges with kernels that occupy only tens or hundreds of\npixels. This means that we need to store fewer parameters, which both reduces the\nmemory requirements of the model and improves its statistical efficiency. It also\nmeans that computing the output requires fewer operations. These improvements\nin efficiency are usually quite large. If there are m inputs and n outputs, then\nmatrix multiplication requires mx n parameters and the algorithms used in practice\nhave O(m x n) runtime (per example). If we limit the number of connections\neach output may have to k, then the sparsely connected approach requires only\nk x n parameters and O(k x n) runtime. For many practical applications, it is\npossible to obtain good performance on the machine learning task while keeping\nk several orders of magnitude smaller than m. For graphical demonstrations of\nsparse connectivity, see figure 9.2 and figure 9.3. In a deep convolutional network,\nunits in the deeper layers may indirectly interact with a larger portion of the input,\nas shown in figure 9.4. This allows the network to efficiently describe complicated\ninteractions between many variables by constructing such interactions from simple\nbuilding blocks that each describe only sparse interactions.\n\nParameter sharing refers to using the same parameter for more than one\nfunction in a model. In a traditional neural net, each element of the weight matrix\nis used exactly once when computing the output of a layer. It is multiplied by\none element of the input and then never revisited. As a synonym for parameter\nsharing, one can say that a network has tied weights, because the value of the\nweight applied to one input is tied to the value of a weight applied elsewhere. In\na convolutional neural net, each member of the kernel is used at every position\nof the input (except perhaps some of the boundary pixels, depending on the\ndesign decisions regarding the boundary). The parameter sharing used by the\nconvolution operation means that rather than learning a separate set of parameters\n\n335\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nQO QAD\n\nFigure 9.2: Sparse connectivity, viewed from below: We highlight one input unit, x3,\nand also highlight the output units in s that are affected by this unit. (Top)When s is\nformed by convolution with a kernel of width 3, only three outputs are affected by a.\n(Bottom)When s is formed by matrix multiplication, connectivity is no longer sparse, so\nall of the outputs are affected by x3.\n\n336\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nQM QMO\n\nFigure 9.3: Sparse connectivity, viewed from above: We highlight one output unit, s3,\nand also highlight the input units in x that affect this unit. These units are known\nas the receptive field of s3. (Top)When s is formed by convolution with a kernel of\nwidth 3, only three inputs affect s3. (Bottom)When s is formed by matrix multiplication,\nconnectivity is no longer sparse, so all of the inputs affect s3.\n\nCQ OY @ CQ C)\n\nSeok\n\nFigure 9.4: The receptive field of the units in the deeper layers of a convolutional network\nis larger than the receptive field of the units in the shallow layers. This effect increases if\nthe network includes architectural features like strided convolution (figure 9.12) or pooling\n(section 9.3). This means that even though direct connections in a convolutional net are\nvery sparse, units in the deeper layers can be indirectly connected to all or most of the\ninput image.\n\n337\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nOO O-O\nOO O-O\n\nOO O-\u00a9\n\nQO O-O\nOO OO\n\nFigure 9.5: Parameter sharing: Black arrows indicate the connections that use a particular\nparameter in two different models. (Top)The black arrows indicate uses of the central\nelement of a 3-element kernel in a convolutional model. Due to parameter sharing, this\nsingle parameter is used at all input locations. (Bottom)The single black arrow indicates\nthe use of the central element of the weight matrix in a fully connected model. This model\nhas no parameter sharing so the parameter is used only once.\n\nfor every location, we learn only one set. This does not affect the runtime of\nforward propagation\u2014it is still O(k x n)\u2014but it does further reduce the storage\nrequirements of the model to k parameters. Recall that k is usually several orders\nof magnitude less than m. Since m and n are usually roughly the same size, k is\npractically insignificant compared to m x n. Convolution is thus dramatically more\nefficient than dense matrix multiplication in terms of the memory requirements\nand statistical efficiency. For a graphical depiction of how parameter sharing works,\nsee figure 9.5.\n\nAs an example of both of these first two principles in action, figure 9.6 shows\nhow sparse connectivity and parameter sharing can dramatically improve the\nefficiency of a linear function for detecting edges in an image.\n\nIn the case of convolution, the particular form of parameter sharing causes the\nlayer to have a property called equivariance to translation. To say a function is\nequivariant means that if the input changes, the output changes in the same way.\nSpecifically, a function f(x) is equivariant to a function g if f(g(x)) = g(f(2)).\nIn the case of convolution, if we let g be any function that translates the input,\nie., shifts it, then the convolution function is equivariant to g. For example, let I\nbe a function giving image brightness at integer coordinates. Let g be a function\n\n338\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nmapping one image function to another image function, such that I\u2019 = g(I) is\nthe image function with I'(x,y) = I(x \u2014 1,y). This shifts every pixel of I one\nunit to the right. If we apply this transformation to J, then apply convolution,\nthe result will be the same as if we applied convolution to J\u2019, then applied the\ntransformation g to the output. When processing time series data, this means\nthat convolution produces a sort of timeline that shows when different features\nappear in the input. If we move an event later in time in the input, the exact\nsame representation of it will appear in the output, just later in time. Similarly\nwith images, convolution creates a 2-D map of where certain features appear in\nthe input. If we move the object in the input, its representation will move the\nsame amount in the output. This is useful for when we know that some function\nof a small number of neighboring pixels is useful when applied to multiple input\nlocations. For example, when processing images, it is useful to detect edges in\nthe first layer of a convolutional network. The same edges appear more or less\neverywhere in the image, so it is practical to share parameters across the entire\nimage. In some cases, we may not wish to share parameters across the entire\nimage. For example, if we are processing images that are cropped to be centered\non an individual\u2019s face, we probably want to extract different features at different\nlocations\u2014the part of the network processing the top of the face needs to look for\neyebrows, while the part of the network processing the bottom of the face needs to\nlook for a chin.\n\nConvolution is not naturally equivariant to some other transformations, such\nas changes in the scale or rotation of an image. Other mechanisms are necessary\nfor handling these kinds of transformations.\n\nFinally, some kinds of data cannot be processed by neural networks defined by\nmatrix multiplication with a fixed-shape matrix. Convolution enables processing\nof some of these kinds of data. We discuss this further in section 9.7.\n\n9.3 Pooling\n\nA typical layer of a convolutional network consists of three stages (see figure 9.7).\nIn the first stage, the layer performs several convolutions in parallel to produce a\nset of linear activations. In the second stage, each linear activation is run through\na nonlinear activation function, such as the rectified linear activation function.\nThis stage is sometimes called the detector stage. In the third stage, we use a\npooling function to modify the output of the layer further.\n\nA pooling function replaces the output of the net at a certain location with a\nsummary statistic of the nearby outputs. For example, the max pooling (Zhou\n\n339\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\n4\n\nFigure 9.6: Efficiency of edge detection. The image on the right was formed by taking\neach pixel in the original image and subtracting the value of its neighboring pixel on the\nleft. This shows the strength of all of the vertically oriented edges in the input image,\nwhich can be a useful operation for object detection. Both images are 280 pixels tall.\nThe input image is 320 pixels wide while the output image is 319 pixels wide. This\ntransformation can be described by a convolution kernel containing two elements, and\nrequires 319 x 280 x 3 = 267,960 floating point operations (two multiplications and\none addition per output pixel) to compute using convolution. To describe the same\ntransformation with a matrix multiplication would take 320 x 280 x 319 x 280, or over\neight billion, entries in the matrix, making convolution four billion times more efficient for\nrepresenting this transformation. The straightforward matrix multiplication algorithm\nperforms over sixteen billion floating point operations, making convolution roughly 60,000\ntimes more efficient computationally. Of course, most of the entries of the matrix would be\nzero. If we stored only the nonzero entries of the matrix, then both matrix multiplication\nand convolution would require the same number of floating point operations to compute.\nThe matrix would still need to contain 2 x 319 x 280 = 178,640 entries. Convolution\nis an extremely efficient way of describing transformations that apply the same linear\ntransformation of a small, local region across the entire input. (Photo credit: Paula\nGoodfellow)\n\n340\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nComplex layer terminology Simple layer terminology\n\nConvolutional Layer\n\nPooling stage Pooling layer\n\nDetector stage:\n. _. Detector layer: Nonlinearity\nNonlinearity . .\n_ : e.g., rectified linear\ne.g., rectified linear\n\nConvolution stage: Convolution layer:\nAffine transform Affine transform\n\nInput to layer Input to layers\n\nFigure 9.7: The components of a typical convolutional neural network layer. There are two\ncommonly used sets of terminology for describing these layers. (Left)In this terminology,\nthe convolutional net is viewed as a small number of relatively complex layers, with\neach layer having many \u201cstages.\u201d In this terminology, there is a one-to-one mapping\nbetween kernel tensors and network layers. In this book we generally use this terminology.\n(Right)In this terminology, the convolutional net is viewed as a larger number of simple\nlayers; every step of processing is regarded as a layer in its own right. This means that\nnot every \u201clayer\u201d has parameters.\n\n341\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nand Chellappa, 1988) operation reports the maximum output within a rectangular\nneighborhood. Other popular pooling functions include the average of a rectangular\nneighborhood, the L? norm of a rectangular neighborhood, or a weighted average\nbased on the distance from the central pixel.\n\nIn all cases, pooling helps to make the representation become approximately\ninvariant to small translations of the input. Invariance to translation means that\nif we translate the input by a small amount, the values of most of the pooled\noutputs do not change. See figure 9.8 for an example of how this works. Invariance\nto local translation can be a very useful property if we care more about whether\nsome feature is present than exactly where it is. For example, when determining\nwhether an image contains a face, we need not know the location of the eyes with\npixel-perfect accuracy, we just need to know that there is an eye on the left side\nof the face and an eye on the right side of the face. In other contexts, it is more\nimportant to preserve the location of a feature. For example, if we want to find a\ncorner defined by two edges meeting at a specific orientation, we need to preserve\nthe location of the edges well enough to test whether they meet.\n\nThe use of pooling can be viewed as adding an infinitely strong prior that\nthe function the layer learns must be invariant to small translations. When this\nassumption is correct, it can greatly improve the statistical efficiency of the network.\n\nPooling over spatial regions produces invariance to translation, but if we pool\nover the outputs of separately parametrized convolutions, the features can learn\nwhich transformations to become invariant to (see figure 9.9).\n\nBecause pooling summarizes the responses over a whole neighborhood, it is\npossible to use fewer pooling units than detector units, by reporting summary\nstatistics for pooling regions spaced k pixels apart rather than 1 pixel apart. See\nfigure 9.10 for an example. This improves the computational efficiency of the\nnetwork because the next layer has roughly & times fewer inputs to process. When\nthe number of parameters in the next layer is a function of its input size (such as\nwhen the next layer is fully connected and based on matrix multiplication) this\nreduction in the input size can also result in improved statistical efficiency and\nreduced memory requirements for storing the parameters.\n\nFor many tasks, pooling is essential for handling inputs of varying size. For\nexample, if we want to classify images of variable size, the input to the classification\nlayer must have a fixed size. This is usually accomplished by varying the size of an\noffset between pooling regions so that the classification layer always receives the\nsame number of summary statistics regardless of the input size. For example, the\nfinal pooling layer of the network may be defined to output four sets of summary\nstatistics, one for each quadrant of an image, regardless of the image size.\n\n342\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nPOOLING STAGE\n\nDETECTOR STAGE\n\nFigure 9.8: Max pooling introduces invariance. (Top)A view of the middle of the output\nof a convolutional layer. The bottom row shows outputs of the nonlinearity. The top\nrow shows the outputs of max pooling, with a stride of one pixel between pooling regions\nand a pooling region width of three pixels. (Bottom)A view of the same network, after\nthe input has been shifted to the right by one pixel. Every value in the bottom row has\nchanged, but only half of the values in the top row have changed, because the max pooling\nunits are only sensitive to the maximum value in the neighborhood, not its exact location.\n\n343\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nCom) response Large response\n\nin Com) unit in pooling unit,\n\nLarge Large\n\nresponse response\nin detector, in detector\nunit 1 unit 3\n\nFigure 9.9: Example of learned invariances: A pooling unit that pools over multiple features\nhat are learned with separate parameters can learn to be invariant to transformations of\nhe input. Here we show how a set of three learned filters and a max pooling unit can learn\no become invariant to rotation. All three filters are intended to detect a hand-written 5.\nEach filter attempts to match a slightly different orientation of the 5. When a 5 appears in\nhe input, the corresponding filter will match it and cause a large activation in a detector\nunit. The max pooling unit then has a large activation regardless of which detector unit\nwas activated. We show here how the network processes two different inputs, resulting\nin two different detector units being activated. The effect on the pooling unit is roughly\nhe same either way. This principle is leveraged by maxout networks (Goodfellow et al.,\n2013a) and other convolutional networks. Max pooling over spatial positions is naturally\ninvariant to translation; this multi-channel approach is only necessary for learning other\nransformations.\n\nFigure 9.10: Pooling with downsampling. Here we use max-pooling with a pool width of\nthree and a stride between pools of two. This reduces the representation size by a factor\nof two, which reduces the computational and statistical burden on the next layer. Note\n\nthat the rightmost pooling region has a smaller size, but must be included if we do not\nwant to ignore some of the detector units.\n\n344\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nSome theoretical work gives guidance as to which kinds of pooling one should\nuse in various situations (Boureau ef al., 2010). It is also possible to dynamically\npool features together, for example, by running a clustering algorithm on the\nlocations of interesting features (Boureau et al., 2011). This approach yields a\ndifferent set of pooling regions for each image. Another approach is to learn a\nsingle pooling structure that is then applied to all images (Jia et al., 2012).\n\nPooling can complicate some kinds of neural network architectures that use\ntop-down information, such as Boltzmann machines and autoencoders. These\nissues will be discussed further when we present these types of networks in part III.\nPooling in convolutional Boltzmann machines is presented in section 20.6. The\ninverse-like operations on pooling units needed in some differentiable networks will\nbe covered in section 20.10.6.\n\nSome examples of complete convolutional network architectures for classification\nusing convolution and pooling are shown in figure 9.11.\n\n9.4 Convolution and Pooling as an Infinitely Strong\nPrior\n\nRecall the concept of a prior probability distribution from section 5.2. This is\na probability distribution over the parameters of a model that encodes our beliefs\nabout what models are reasonable, before we have seen any data.\n\nPriors can be considered weak or strong depending on how concentrated the\nprobability density in the prior is. A weak prior is a prior distribution with high\nentropy, such as a Gaussian distribution with high variance. Such a prior allows\nthe data to move the parameters more or less freely. A strong prior has very low\nentropy, such as a Gaussian distribution with low variance. Such a prior plays a\nmore active role in determining where the parameters end up.\n\nAn infinitely strong prior places zero probability on some parameters and says\nthat these parameter values are completely forbidden, regardless of how much\nsupport the data gives to those values.\n\nWe can imagine a convolutional net as being similar to a fully connected net,\nbut with an infinitely strong prior over its weights. This infinitely strong prior\nsays that the weights for one hidden unit must be identical to the weights of its\nneighbor, but shifted in space. The prior also says that the weights must be zero,\nexcept for in the small, spatially contiguous receptive field assigned to that hidden\nunit. Overall, we can think of the use of convolution as introducing an infinitely\nstrong prior probability distribution over the parameters of a layer. This prior\n\n345\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nOutput of softmax:\n1,000 class\nprobabilities\n\nOutput of matrix\nmultiply: 1,000 units\n\nOutput of reshape to\nvector:\n16,384 units\n\nOutput of poolng\nwith stride 4:\n16x16x64\n\nOutput o\nconvolution +\nReLU: 64x64x64\n\nOutput of poohng\nwith stride 4:\n64x64x64\n\nOutput o:\nconvolution +\nReLU: 256x256x64\n\nInput image:\n256x256x3\n\nOutput of softmax:\n1,000 class\nprobabilities\n\nOutput of matrix\nmultiply: 1,000 units\n\nOutput of reshape to\nvector:\n576 units\n\nOutput of pooling to\n3x3 grid: 3x3x64\n\nOutput o\nconvolution +\nReLU: 64x64x64\n\nOutput of poohng\nwith stride 4:\n64x64x64\n\nOutput o:\nconvolution +\nReLU: 256x256x64\n\nOutput of softmax:\n1,000 class\nprobabilities\n\nOutput of average\npooling: 1x1x1,000\n\nOutput 0\nconvolution:\n16x16x1,000\n\nOutput of pooling\nwith stride 4:\n16x16x64\n\nOutput o\nconvolution +\nReLU: 64x64x64\n\nOutput of poohng\nwith stride 4:\n64x64x64\n\nOutput 0}\nconvolution +\nReLU: 256x256x64\n\nut imag\n56x256x3\n\nInput im:\n256x256x3\n\nFigure 9.11: Examples of architectures for classification with convolutional networks. The\nspecific strides and depths used in this figure are not advisable for real use; they are\ndesigned to be very shallow in order to fit onto the page. Real convolutional networks\nalso often involve significant amounts of branching, unlike the chain structures used\nhere for simplicity. (Left)A convolutional network that processes a fixed image size.\nAfter alternating between convolution and pooling for a few layers, the tensor for the\nconvolutional feature map is reshaped to flatten out the spatial dimensions. The rest\nof the network is an ordinary feedforward network classifier, as described in chapter 6.\n(Center)A convolutional network that processes a variable-sized image, but still maintains\na fully connected section. This network uses a pooling operation with variably-sized pools\nbut a fixed number of pools, in order to provide a fixed-size vector of 576 units to the\nfully connected portion of the network. (Right)A convolutional network that does not\nhave any fully connected weight layer. Instead, the last convolutional layer outputs one\nfeature map per class. The model presumably learns a map of how likely each class is to\noccur at each spatial location. Averaging a feature map down to a single value provides\nthe argument to the softmax classifier at the top.\n\n346\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nsays that the function the layer should learn contains only local interactions and is\nequivariant to translation. Likewise, the use of pooling is an infinitely strong prior\nthat each unit should be invariant to small translations.\n\nOf course, implementing a convolutional net as a fully connected net with an\ninfinitely strong prior would be extremely computationally wasteful. But thinking\nof a convolutional net as a fully connected net with an infinitely strong prior can\ngive us some insights into how convolutional nets work.\n\nOne key insight is that convolution and pooling can cause underfitting. Like\nany prior, convolution and pooling are only useful when the assumptions made\nby the prior are reasonably accurate. If a task relies on preserving precise spatial\ninformation, then using pooling on all features can increase the training error.\nSome convolutional network architectures (Szegedy et al., 2014a) are designed to\nuse pooling on some channels but not on other channels, in order to get both\nhighly invariant features and features that will not underfit when the translation\ninvariance prior is incorrect. When a task involves incorporating information from\nvery distant locations in the input, then the prior imposed by convolution may be\ninappropriate.\n\nAnother key insight from this view is that we should only compare convolu-\ntional models to other convolutional models in benchmarks of statistical learning\nperformance. Models that do not use convolution would be able to learn even\nif we permuted all of the pixels in the image. For many image datasets, there\nare separate benchmarks for models that are permutation invariant and must\ndiscover the concept of topology via learning, and models that have the knowledge\nof spatial relationships hard-coded into them by their designer.\n\n9.5 Variants of the Basic Convolution Function\n\nWhen discussing convolution in the context of neural networks, we usually do\nnot refer exactly to the standard discrete convolution operation as it is usually\nunderstood in the mathematical literature. The functions used in practice differ\nslightly. Here we describe these differences in detail, and highlight some useful\nproperties of the functions used in neural networks.\n\nFirst, when we refer to convolution in the context of neural networks, we usually\nactually mean an operation that consists of many applications of convolution in\nparallel. This is because convolution with a single kernel can only extract one kind\nof feature, albeit at many spatial locations. Usually we want each layer of our\nnetwork to extract many kinds of features, at many locations.\n\n347\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nAdditionally, the input is usually not just a grid of real values. Rather, it is a\ngrid of vector-valued observations. For example, a color image has a red, green\nand blue intensity at each pixel. In a multilayer convolutional network, the input\nto the second layer is the output of the first layer, which usually has the output\nof many different convolutions at each position. When working with images, we\nusually think of the input and output of the convolution as being 3-D tensors, with\none index into the different channels and two indices into the spatial coordinates\nof each channel. Software implementations usually work in batch mode, so they\nwill actually use 4-D tensors, with the fourth axis indexing different examples in\nthe batch, but we will omit the batch axis in our description here for simplicity.\n\nBecause convolutional networks usually use multi-channel convolution, the\nlinear operations they are based on are not guaranteed to be commutative, even if\nkernel-flipping is used. These multi-channel operations are only commutative if\neach operation has the same number of output channels as input channels.\n\nAssume we have a 4-D kernel tensor K with element K;i,;,4,. giving the connection\nstrength between a unit in channel 7 of the output and a unit in channel j of the\ninput, with an offset of k rows and / columns between the output unit and the\ninput unit. Assume our input consists of observed data V with element V; ;;, giving\nthe value of the input unit within channel i at row j and column k. Assume our\noutput consists of Z with the same format as V. If Z is produced by convolving K\nacross V without flipping K, then\n\nZigk = \u00bb Vij+m\u20141,k-+n-1Kilmn (9.7)\n\nlym,n\n\nwhere the summation over /, m and n is over all values for which the tensor indexing\noperations inside the summation is valid. In linear algebra notation, we index into\narrays using a 1 for the first entry. This necessitates the \u20141 in the above formula.\nProgramming languages such as C and Python index starting from 0, rendering\nthe above expression even simpler.\n\nWe may want to skip over some positions of the kernel in order to reduce the\ncomputational cost (at the expense of not extracting our features as finely). We\ncan think of this as downsampling the output of the full convolution function. If\nwe want to sample only every s pixels in each direction in the output, then we can\ndefine a downsampled convolution function c such that\n\nZi jk = c(K,V, S)ijk = S> [Vi.(j\u20141)xs+m,(k\u20141) xs\u00a2nKi,lm.n | : (9.8)\nLm,n\nWe refer to s as the stride of this downsampled convolution. It is also possible\n\n348\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nto define a separate stride for each direction of motion. See figure 9.12 for an\nillustration.\n\nOne essential feature of any convolutional network implementation is the ability\nto implicitly zero-pad the input V in order to make it wider. Without this feature,\nthe width of the representation shrinks by one pixel less than the kernel width\nat each layer. Zero padding the input allows us to control the kernel width and\nthe size of the output independently. Without zero padding, we are forced to\nchoose between shrinking the spatial extent of the network rapidly and using small\nkernels\u2014both scenarios that significantly limit the expressive power of the network.\nSee figure 9.13 for an example.\n\nThree special cases of the zero-padding setting are worth mentioning. One is\nthe extreme case in which no zero-padding is used whatsoever, and the convolution\nkernel is only allowed to visit positions where the entire kernel is contained entirely\nwithin the image. In MATLAB terminology, this is called valid convolution. In\nthis case, all pixels in the output are a function of the same number of pixels in\nthe input, so the behavior of an output pixel is somewhat more regular. However,\nthe size of the output shrinks at each layer. If the input image has width m and\nthe kernel has width k, the output will be of width m\u2014k+1. The rate of this\nshrinkage can be dramatic if the kernels used are large. Since the shrinkage is\n\ngreater than 0, it limits the number of convolutional layers that can be included\nin the network. As layers are added, the spatial dimension of the network will\neventually drop to 1 x 1, at which point additional layers cannot meaningfully\nbe considered convolutional. Another special case of the zero-padding setting is\nwhen just enough zero-padding is added to keep the size of the output equal to\nthe size of the input. MATLAB calls this same convolution. In this case, the\nnetwork can contain as many convolutional layers as the available hardware can\nsupport, since the operation of convolution does not modify the architectural\npossibilities available to the next layer. However, the input pixels near the border\ninfluence fewer output pixels than the input pixels near the center. This can make\nthe border pixels somewhat underrepresented in the model. This motivates the\nother extreme case, which MATLAB refers to as full convolution, in which enough\nzeroes are added for every pixel to be visited k times in each direction, resulting\nin an output image of width m+ k\u20141. In this case, the output pixels near the\nborder are a function of fewer pixels than the output pixels near the center. This\ncan make it difficult to learn a single kernel that performs well at all positions in\nthe convolutional feature map. Usually the optimal amount of zero padding (in\nterms of test set classification accuracy) lies somewhere between \u201cvalid\u201d and \u201csame\u201d\nconvolution.\n\n349\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nQ\n\nStrided\nconvolution\nDownsampling\n\nConvolution\n\nFigure 9.12: Convolution with a stride. In this example, we use a stride of two.\n(Top)Convolution with a stride length of two implemented in a single operation. (Bot-\ntom)Convolution with a stride greater than one pixel is mathematically equivalent to\nconvolution with unit stride followed by downsampling. Obviously, the two-step approach\ninvolving downsampling is computationally wasteful, because it computes many values\nthat are then discarded.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\ni\nLorswidg\nLb SscoochbSe\n\nSOO OOOCOOOOOOOOOOCOOOS\u00aeS\n\nIN\n7\n\nFigure 9.13: The effect of zero padding on network size: Consider a convolutional network\nwith a kernel of width six at every layer. In this example, we do not use any pooling, so\nonly the convolution operation itself shrinks the network size. (Top)In this convolutional\nnetwork, we do not use any implicit zero padding. This causes the representation to\nshrink by five pixels at each layer. Starting from an input of sixteen pixels, we are only\nable to have three convolutional layers, and the last layer does not ever move the kernel,\nso arguably only two of the layers are truly convolutional. The rate of shrinking can\nbe mitigated by using smaller kernels, but smaller kernels are less expressive and some\nshrinking is inevitable in this kind of architecture. (Bottom)By adding five implicit zeroes\nto each layer, we prevent the representation from shrinking with depth. This allows us to\nmake an arbitrarily deep convolutional network.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nIn some cases, we do not actually want to use convolution, but rather locally\nconnected layers (LeCun, 1986, 1989). In this case, the adjacency matrix in the\ngraph of our MLP is the same, but every connection has its own weight, specified\nby a 6-D tensor W. The indices into W are respectively: i, the output channel,\nj, the output row, k, the output column, J, the input channel, m, the row offset\nwithin the input, and n, the column offset within the input. The linear part of a\nlocally connected layer is then given by\n\nZijk = D2 (Vigjtm\u20141b4n\u20141Wi jbl] (9.9)\n\nlymjn\n\nThis is sometimes also called unshared convolution, because it is a similar oper-\nation to discrete convolution with a small kernel, but without sharing parameters\nacross locations. Figure 9.14 compares local connections, convolution, and full\nconnections.\n\nLocally connected layers are useful when we know that each feature should be\na function of a small part of space, but there is no reason to think that the same\nfeature should occur across all of space. For example, if we want to tell if an image\nis a picture of a face, we only need to look for the mouth in the bottom half of the\nimage.\n\nIt can also be useful to make versions of convolution or locally connected layers\nin which the connectivity is further restricted, for example to constrain each output\nchannel i to be a function of only a subset of the input channels /. A common\nway to do this is to make the first m output channels connect to only the first\nn input channels, the second m output channels connect to only the second n\ninput channels, and so on. See figure 9.15 for an example. Modeling interactions\nbetween few channels allows the network to have fewer parameters in order to\nreduce memory consumption and increase statistical efficiency, and also reduces\nthe amount of computation needed to perform forward and back-propagation. It\naccomplishes these goals without reducing the number of hidden units.\n\nTiled convolution (Gregor and LeCun, 2010a; Le et al., 2010) offers a com-\npromise between a convolutional layer and a locally connected layer. Rather than\nlearning a separate set of weights at every spatial location, we learn a set of kernels\nthat we rotate through as we move through space. This means that immediately\nneighboring locations will have different filters, like in a locally connected layer,\nbut the memory requirements for storing the parameters will increase only by a\nfactor of the size of this set of kernels, rather than the size of the entire output\nfeature map. See figure 9.16 for a comparison of locally connected layers, tiled\nconvolution, and standard convolution.\n\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nFigure 9.14: Comparison of local connections, convolution, and full connections.\n\n(Top)A locally connected layer with a patch size of two pixels. Each edge is labeled with\na unique letter to show that each edge is associated with its own weight parameter.\n(Center)A convolutional layer with a kernel width of two pixels. This model has exactly\nthe same connectivity as the locally connected layer. The difference lies not in which units\ninteract with each other, but in how the parameters are shared. The locally connected layer\nhas no parameter sharing. The convolutional layer uses the same two weights repeatedly\nacross the entire input, as indicated by the repetition of the letters labeling each edge.\n(Bottom)A fully connected layer resembles a locally connected layer in the sense that each\nedge has its own parameter (there are too many to label explicitly with letters in this\ndiagram). However, it does not have the restricted connectivity of the locally connected\nlayer.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nChannel coordinates\n\nSpatial coordinates\n\nFigure 9.15: A convolutional network with the first two output channels connected to\nonly the first two input channels, and the second two output channels connected to only\nthe second two input channels.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nOOOO\nON\n\nFigure 9.16: A comparison of locally connected layers, tiled convolution, and standard\nconvolution. All three have the same sets of connections between units, when the same\nsize of kernel is used. This diagram illustrates the use of a kernel that is two pixels wide.\nThe differences between the methods lies in how they share parameters. (Top)A locally\nconnected layer has no sharing at all. We indicate that each connection has its own weight\nby labeling each connection with a unique letter. (Center)Tiled convolution has a set of\nt different kernels. Here we illustrate the case of t = 2. One of these kernels has edges\nlabeled \u201ca\u201d and \u201cb,\u201d while the other has edges labeled \u201cc\u201d and \u201cd.\u201d Each time we move one\npixel to the right in the output, we move on to using a different kernel. This means that,\nlike the locally connected layer, neighboring units in the output have different parameters.\nUnlike the locally connected layer, after we have gone through all \u00a2 available kernels,\nwe cycle back to the first kernel. If two output units are separated by a multiple of t\nsteps, then they share parameters. (Bottom)Traditional convolution is equivalent to tiled\nconvolution with t = 1. There is only one kernel and it is applied everywhere, as indicated\nin the diagram by using the kernel with weights labeled \u201ca\u201d and \u201cb\u201d everywhere.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nTo define tiled convolution algebraically, let k be a 6-D tensor, where two of\nthe dimensions correspond to different locations in the output map. Rather than\nhaving a separate index for each location in the output map, output locations cycle\nthrough a set of \u00a2 different choices of kernel stack in each direction. If t is equal to\nthe output width, this is the same as a locally connected layer.\n\nZij,k = S> Vijtm\u20141ktn\u20141Ki Liming %t+1,k%t+l \u00bb (9.10)\n\nlymjn\n\nwhere % is the modulo operation, with t%t = 0, (t + 1)%t = 1, etc. It is\nstraightforward to generalize this equation to use a different tiling range for each\ndimension.\n\nBoth locally connected layers and tiled convolutional layers have an interesting\ninteraction with max-pooling: the detector units of these layers are driven by\ndifferent filters. If these filters learn to detect different transformed versions of\nthe same underlying features, then the max-pooled units become invariant to the\nlearned transformation (see figure 9.9). Convolutional layers are hard-coded to be\ninvariant specifically to translation.\n\nOther operations besides convolution are usually necessary to implement a\nconvolutional network. To perform learning, one must be able to compute the\ngradient with respect to the kernel, given the gradient with respect to the outputs.\nIn some simple cases, this operation can be performed using the convolution\noperation, but many cases of interest, including the case of stride greater than 1,\ndo not have this property.\n\nRecall that convolution is a linear operation and can thus be described as a\nmatrix multiplication (if we first reshape the input tensor into a flat vector). The\nmatrix involved is a function of the convolution kernel. The matrix is sparse and\neach element of the kernel is copied to several elements of the matrix. This view\nhelps us to derive some of the other operations needed to implement a convolutional\nnetwork.\n\nMultiplication by the transpose of the matrix defined by convolution is one\nsuch operation. This is the operation needed to back-propagate error derivatives\nthrough a convolutional layer, so it is needed to train convolutional networks\nthat have more than one hidden layer. This same operation is also needed if we\nwish to reconstruct the visible units from the hidden units (Simard ei al., 1992).\nReconstructing the visible units is an operation commonly used in the models\ndescribed in part III of this book, such as autoencoders, RBMs, and sparse coding.\n\nTranspose convolution is necessary to construct convolutional versions of those\nmodels. Like the kernel gradient operation, this input gradient operation can be\n\n356\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nimplemented using a convolution in some cases, but in the general case requires\na third operation to be implemented. Care must be taken to coordinate this\ntranspose operation with the forward propagation. The size of the output that the\ntranspose operation should return depends on the zero padding policy and stride of\nthe forward propagation operation, as well as the size of the forward propagation\u2019s\noutput map. In some cases, multiple sizes of input to forward propagation can\nresult in the same size of output map, so the transpose operation must be explicitly\ntold what the size of the original input was.\n\nThese three operations\u2014convolution, backprop from output to weights, and\nbackprop from output to inputs\u2014are sufficient to compute all of the gradients\nneeded to train any depth of feedforward convolutional network, as well as to train\nconvolutional networks with reconstruction functions based on the transpose of\nconvolution. See Goodfellow (2010) for a full derivation of the equations in the\nfully general multi-dimensional, multi-example case. To give a sense of how these\nequations work, we present the two dimensional, single example version here.\n\nSuppose we want to train a convolutional network that incorporates strided\nconvolution of kernel stack K applied to multi-channel image V with stride s as\ndefined by c(K, V,s) as in equation 9.8. Suppose we want to minimize some loss\nfunction J(V,K). During forward propagation, we will need to use c itself to\noutput Z, which is then propagated through the rest of the network and used to\ncompute the cost function J. During back-propagation, we will receive a tensor G\nsuch that Gi jn = Boon ~_ J(V,K).\n\nTo train the network. we need to compute the derivatives with respect to the\nweights in the kernel. To do so, we can use a function\n\ni)\n\nGV. siya =\ng( \u2019 8)ij kel OKuani\n\n=> GimnVj (m\u20141)xs+k,(n\u20141)xs+4l: (9.11)\n\nmn\n\nIf this layer is not the bottom layer of the network, we will need to compute\nthe gradient with respect to V in order to back-propagate the error farther down.\nTo do so, we can use a function\n\n(a)\nh(K 7 = (VK 49\n( G,s8)i jn Vga | ; ) (9 )\n= \u00bb d y Ky ,i,m.p Gq,ln- (9.13)\nIm\n\ns.t. ab\n(I-1)xstm=j (n-1)xs+p=k\n\nAutoencoder networks, described in chapter 14, are feedforward networks\ntrained to copy their input to their output. A simple example is the PCA algorithm,\n\n357\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nthat copies its input x to an approximate reconstruction r using the function\nW'We-. It is common for more general autoencoders to use multiplication\nby the transpose of the weight matrix just as PCA does. To make such models\nconvolutional, we can use the function h to perform the transpose of the convolution\noperation. Suppose we have hidden units H in the same format as Z and we define\na reconstruction\n\nR = h(K,H,s). (9.14)\n\nIn order to train the autoencoder, we will receive the gradient with respect\nto R as a tensor E. To train the decoder, we need to obtain the gradient with\nrespect to K. This is given by g(H,E, s). To train the encoder, we need to obtain\nthe gradient with respect to H. This is given by c(K,E, s). It is also possible to\ndifferentiate through g using cand h, but these operations are not needed for the\nback-propagation algorithm on any standard network architectures.\n\nGenerally, we do not use only a linear operation in order to transform from\nthe inputs to the outputs in a convolutional layer. We generally also add some\nbias term to each output before applying the nonlinearity. This raises the question\nof how to share parameters among the biases. For locally connected layers it is\nnatural to give each unit its own bias, and for tiled convolution, it is natural to\nshare the biases with the same tiling pattern as the kernels. For convolutional\nlayers, it is typical to have one bias per channel of the output and share it across\nall locations within each convolution map. However, if the input is of known, fixed\nsize, it is also possible to learn a separate bias at each location of the output map.\nSeparating the biases may slightly reduce the statistical efficiency of the model, but\nalso allows the model to correct for differences in the image statistics at different\nlocations. For example, when using implicit zero padding, detector units at the\nedge of the image receive less total input and may need larger biases.\n\n9.6 Structured Outputs\n\nConvolutional networks can be used to output a high-dimensional, structured\nobject, rather than just predicting a class label for a classification task or a real\nvalue for a regression task. Typically this object is just a tensor, emitted by a\nstandard convolutional layer. For example, the model might emit a tensor S, where\nS.,j,k is the probability that pixel (j,k) of the input to the network belongs to class\ni. This allows the model to label every pixel in an image and draw precise masks\nthat follow the outlines of individual objects.\n\nOne issue that often comes up is that the output plane can be smaller than the\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nFigure 9.17: An example of a recurrent convolutional network for pixel labeling. The\ninput is an image tensor X, with axes corresponding to image rows, image columns, and\nchannels (red, green, blue). The goal is to output a tensor of labels Y, with a probability\ndistribution over labels for each pixel. This tensor has axes corresponding to image rows,\nimage columns, and the different classes. Rather than outputting Y in a single shot, the\nrecurrent network iteratively refines its estimate Y by using a previous estimate of Y\nas input for creating a new estimate. The same parameters are used for each updated\nestimate, and the estimate can be refined as many times as we wish. The tensor of\nconvolution kernels U is used on each step to compute the hidden representation given the\ninput image. The kernel tensor V is used to produce an estimate of the labels given the\nhidden values. On all but the first step, the kernels W are convolved over Y to provide\ninput to the hidden layer. On the first time step, this term is replaced by zero. Because\nthe same parameters are used on each step, this is an example of a recurrent network, as\ndescribed in chapter 10.\n\ninput plane, as shown in figure 9.13. In the kinds of architectures typically used for\nclassification of a single object in an image, the greatest reduction in the spatial\ndimensions of the network comes from using pooling layers with large stride. In\norder to produce an output map of similar size as the input, one can avoid pooling\naltogether (Jain et al., 2007). Another strategy is to simply emit a lower-resolution\ngrid of labels (Pinheiro and Collobert, 2014, 2015). Finally, in principle, one could\nuse a pooling operator with unit stride.\n\nOne strategy for pixel-wise labeling of images is to produce an initial guess\nof the image labels, then refine this initial guess using the interactions between\nneighboring pixels. Repeating this refinement step several times corresponds to\nusing the same convolutions at each stage, sharing weights between the last layers of\nthe deep net (Jain et al., 2007). This makes the sequence of computations performed\nby the successive convolutional layers with weights shared across layers a particular\nkind of recurrent network (Pinheiro and Collobert, 2014, 2015). Figure 9.17 shows\nthe architecture of such a recurrent convolutional network.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nOnce a prediction for each pixel is made, various methods can be used to\nfurther process these predictions in order to obtain a segmentation of the image\ninto regions (Briggman et al., 2009; Turaga et al., 2010; Farabet et al., 2013).\nThe general idea is to assume that large groups of contiguous pixels tend to be\nassociated with the same label. Graphical models can describe the probabilistic\nrelationships between neighboring pixels. Alternatively, the convolutional network\ncan be trained to maximize an approximation of the graphical model training\nobjective (Ning et al., 2005; Thompson et al., 2014).\n\n9.7 Data Types\n\nThe data used with a convolutional network usually consists of several channels,\neach channel being the observation of a different quantity at some point in space\nor time. See table 9.1 for examples of data types with different dimensionalities\nand number of channels.\n\nFor an example of convolutional networks applied to video, see Chen et al.\n(2010).\n\nSo far we have discussed only the case where every example in the train and test\ndata has the same spatial dimensions. One advantage to convolutional networks\nis that they can also process inputs with varying spatial extents. These kinds of\ninput simply cannot be represented by traditional, matrix multiplication-based\nneural networks. This provides a compelling reason to use convolutional networks\neven when computational cost and overfitting are not significant issues.\n\nFor example, consider a collection of images, where each image has a different\nwidth and height. It is unclear how to model such inputs with a weight matrix of\nfixed size. Convolution is straightforward to apply; the kernel is simply applied a\ndifferent number of times depending on the size of the input, and the output of the\nconvolution operation scales accordingly. Convolution may be viewed as matrix\nmultiplication; the same convolution kernel induces a different size of doubly block\ncirculant matrix for each size of input. Sometimes the output of the network is\nallowed to have variable size as well as the input, for example if we want to assign\na class label to each pixel of the input. In this case, no further design work is\nnecessary. In other cases, the network must produce some fixed-size output, for\nexample if we want to assign a single class label to the entire image. In this case\nwe must make some additional design steps, like inserting a pooling layer whose\npooling regions scale in size proportional to the size of the input, in order to\nmaintain a fixed number of pooled outputs. Some examples of this kind of strategy\nare shown in figure 9.11.\n\n360\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nSingle channel\n\nMulti-channel\n\n1-D\n\nAudio waveform: The axis we\nconvolve over corresponds to\ntime. We discretize time and\nmeasure the amplitude of the\nwaveform once per time step.\n\nSkeleton animation data: Anima-\ntions of 3-D computer-rendered\ncharacters are generated by alter-\ning the pose of a \u201cskeleton\u201d over\ntime. At each point in time, the\npose of the character is described\nby a specification of the angles of\neach of the joints in the charac-\nter\u2019s skeleton. Each channel in\nthe data we feed to the convolu-\ntional model represents the angle\nabout one axis of one joint.\n\n2-D\n\nAudio data that has been prepro-\ncessed with a Fourier transform:\nWe can transform the audio wave-\nform into a 2D tensor with dif-\nferent rows corresponding to dif-\nferent frequencies and different\ncolumns corresponding to differ-\nent points in time. Using convolu-\ntion in the time makes the model\nequivariant to shifts in time. Us-\ning convolution across the fre-\nquency axis makes the mode\nequivariant to frequency, so that\nthe same melody played in a dif-\nferent octave produces the same\nrepresentation but at a different\nheight in the network\u2019s output.\n\nme\n\nColor image data: One channel\ncontains the red pixels, one the\ngreen pixels, and one the blue\npixels. The convolution kernel\nmoves over both the horizontal\nand vertical axes of the image,\nconferring translation equivari-\nance in both directions.\n\n3-D\n\nTable 9.1: Examples of different formats of data that can be used with convolutional\n\nVolumetric data: A common\nsource of this kind of data is med-\nical imaging technology, such as\nCT scans.\n\nnetworks.\n\n361\n\nColor video data: One axis corre-\nsponds to time, one to the height\nof the video frame, and one to\nthe width of the video frame.\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nNote that the use of convolution for processing variable sized inputs only makes\nsense for inputs that have variable size because they contain varying amounts\nof observation of the same kind of thing\u2014different lengths of recordings over\ntime, different widths of observations over space, etc. Convolution does not make\nsense if the input has variable size because it can optionally include different\nkinds of observations. For example, if we are processing college applications, and\nour features consist of both grades and standardized test scores, but not every\napplicant took the standardized test, then it does not make sense to convolve the\nsame weights over both the features corresponding to the grades and the features\ncorresponding to the test scores.\n\n9.8 Efficient Convolution Algorithms\n\nModern convolutional network applications often involve networks containing more\nthan one million units. Powerful implementations exploiting parallel computation\nresources, as discussed in section 12.1, are essential. However, in many cases it\nis also possible to speed up convolution by selecting an appropriate convolution\nalgorithm.\n\nConvolution is equivalent to converting both the input and the kernel to the\nfrequency domain using a Fourier transform, performing point-wise multiplication\nof the two signals, and converting back to the time domain using an inverse\nFourier transform. For some problem sizes, this can be faster than the naive\nimplementation of discrete convolution.\n\nWhen a d-dimensional kernel can be expressed as the outer product of d\nvectors, one vector per dimension, the kernel is called separable. When the\nkernel is separable, naive convolution is inefficient. It is equivalent to compose d\none-dimensional convolutions with each of these vectors. The composed approach\nis significantly faster than performing one d-dimensional convolution with their\nouter product. The kernel also takes fewer parameters to represent as vectors.\nIf the kernel is w elements wide in each dimension, then naive multidimensional\nconvolution requires O(w?) runtime and parameter storage space, while separable\nconvolution requires O(w x d) runtime and parameter storage space. Of course,\nnot every convolution can be represented in this way.\n\nDevising faster ways of performing convolution or approximate convolution\nwithout harming the accuracy of the model is an active area of research. Even tech-\nniques that improve the efficiency of only forward propagation are useful because\nin the commercial setting, it is typical to devote more resources to deployment of\na network than to its training.\n\n362\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\n9.9 Random or Unsupervised Features\n\nTypically, the most expensive part of convolutional network training is learning the\nfeatures. The output layer is usually relatively inexpensive due to the small number\nof features provided as input to this layer after passing through several layers of\npooling. When performing supervised training with gradient descent, every gradient\nstep requires a complete run of forward propagation and backward propagation\nthrough the entire network. One way to reduce the cost of convolutional network\ntraining is to use features that are not trained in a supervised fashion.\n\nThere are three basic strategies for obtaining convolution kernels without\nsupervised training. One is to simply initialize them randomly. Another is to\ndesign them by hand, for example by setting each kernel to detect edges at a\ncertain orientation or scale. Finally, one can learn the kernels with an unsupervised\ncriterion. For example, Coates ef al. (2011) apply k-means clustering to small\nimage patches, then use each learned centroid as a convolution kernel. Part III\ndescribes many more unsupervised learning approaches. Learning the features\nwith an unsupervised criterion allows them to be determined separately from the\nclassifier layer at the top of the architecture. One can then extract the features for\nthe entire training set just once, essentially constructing a new training set for the\nlast layer. Learning the last layer is then typically a convex optimization problem,\nassuming the last layer is something like logistic regression or an SVM.\n\nRandom filters often work surprisingly well in convolutional networks (Jarrett\net al., 2009; Saxe et al., 2011; Pinto et al., 2011; Cox and Pinto, 2011). Saxe et al.\n(2011) showed that layers consisting of convolution following by pooling naturally\nbecome frequency selective and translation invariant when assigned random weights.\nThey argue that this provides an inexpensive way to choose the architecture of\na convolutional network: first evaluate the performance of several convolutional\nnetwork architectures by training only the last layer, then take the best of these\narchitectures and train the entire architecture using a more expensive approach.\n\nAn intermediate approach is to learn the features, but using methods that do\nnot require full forward and back-propagation at every gradient step. As with\nmultilayer perceptrons, we use greedy layer-wise pretraining, to train the first layer\nin isolation, then extract all features from the first layer only once, then train the\nsecond layer in isolation given those features, and so on. Chapter 8 has described\nhow to perform supervised greedy layer-wise pretraining, and part III extends this\nto greedy layer-wise pretraining using an unsupervised criterion at each layer. The\ncanonical example of greedy layer-wise pretraining of a convolutional model is the\nconvolutional deep belief network (Lee et al., 2009). Convolutional networks offer\n\n363\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nus the opportunity to take the pretraining strategy one step further than is possible\nwith multilayer perceptrons. Instead of training an entire convolutional layer at a\ntime, we can train a model of a small patch, as Coates et al. (2011) do with k-means.\nWe can then use the parameters from this patch-based model to define the kernels\nof a convolutional layer. This means that it is possible to use unsupervised learning\nto train a convolutional network without ever using convolution during the training\nprocess. Using this approach, we can train very large models and incur a high\ncomputational cost only at inference time (Ranzato ef al., 2007b; Jarrett et al.,\n2009; Kavukcuoglu et al., 2010; Coates et al., 2013). This approach was popular\nfrom roughly 2007-2013, when labeled datasets were small and computational\npower was more limited. Today, most convolutional networks are trained in a\npurely supervised fashion, using full forward and back-propagation through the\nentire network on each training iteration.\n\nAs with other approaches to unsupervised pretraining, it remains difficult to\ntease apart the cause of some of the benefits seen with this approach. Unsupervised\npretraining may offer some regularization relative to supervised training, or it may\nsimply allow us to train much larger architectures due to the reduced computational\ncost of the learning rule.\n\n9.10 The Neuroscientific Basis for Convolutional Net-\n\nworks\n\nConvolutional networks are perhaps the greatest success story of biologically\ninspired artificial intelligence. Though convolutional networks have been guided\nby many other fields, some of the key design principles of neural networks were\ndrawn from neuroscience.\n\nThe history of convolutional networks begins with neuroscientific experiments\nlong before the relevant computational models were developed. Neurophysiologists\nDavid Hubel and Torsten Wiesel collaborated for several years to determine many\nof the most basic facts about how the mammalian vision system works (Hubel and\nWiesel, 1959, 1962, 1968). Their accomplishments were eventually recognized with\na Nobel prize. Their findings that have had the greatest influence on contemporary\ndeep learning models were based on recording the activity of individual neurons in\ncats. They observed how neurons in the cat\u2019s brain responded to images projected\nin precise locations on a screen in front of the cat. Their great discovery was\nthat neurons in the early visual system responded most strongly to very specific\npatterns of light, such as precisely oriented bars, but responded hardly at all to\nother patterns.\n\n364\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nTheir work helped to characterize many aspects of brain function that are\nbeyond the scope of this book. From the point of view of deep learning, we can\nfocus on a simplified, cartoon view of brain function.\n\nIn this simplified view, we focus on a part of the brain called V1, also known\nas the primary visual cortex. V1 is the first area of the brain that begins to\nperform significantly advanced processing of visual input. In this cartoon view,\nimages are formed by light arriving in the eye and stimulating the retina, the\nlight-sensitive tissue in the back of the eye. The neurons in the retina perform\nsome simple preprocessing of the image but do not substantially alter the way it is\nrepresented. The image then passes through the optic nerve and a brain region\ncalled the lateral geniculate nucleus. The main role, as far as we are concerned\nhere, of both of these anatomical regions is primarily just to carry the signal from\nthe eye to V1, which is located at the back of the head.\n\nA convolutional network layer is designed to capture three properties of V1:\n\n1. V1 is arranged in a spatial map. It actually has a two-dimensional structure\nmirroring the structure of the image in the retina. For example, light\narriving at the lower half of the retina affects only the corresponding half of\nV1. Convolutional networks capture this property by having their features\ndefined in terms of two dimensional maps.\n\n2. V1 contains many simple cells. A simple cell\u2019s activity can to some extent\nbe characterized by a linear function of the image in a small, spatially\nlocalized receptive field. The detector units of a convolutional network are\ndesigned to emulate these properties of simple cells.\n\n3. V1 also contains many complex cells. These cells respond to features that\nare similar to those detected by simple cells, but complex cells are invariant\nto small shifts in the position of the feature. This inspires the pooling units\nof convolutional networks. Complex cells are also invariant to some changes\nin lighting that cannot be captured simply by pooling over spatial locations.\nThese invariances have inspired some of the cross-channel pooling strategies\nin convolutional networks, such as maxout units (Goodfellow et al., 2013a).\n\nThough we know the most about V1, it is generally believed that the same\nbasic principles apply to other areas of the visual system. In our cartoon view of\nthe visual system, the basic strategy of detection followed by pooling is repeatedly\napplied as we move deeper into the brain. As we pass through multiple anatomical\nlayers of the brain, we eventually find cells that respond to some specific concept\nand are invariant to many transformations of the input. These cells have been\n\n365\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nnicknamed \u201cgrandmother cells\u2019\u2014the idea is that a person could have a neuron that\nactivates when seeing an image of their grandmother, regardless of whether she\nappears in the left or right side of the image, whether the image is a close-up of\nher face or zoomed out shot of her entire body, whether she is brightly lit, or in\nshadow, etc.\n\nThese grandmother cells have been shown to actually exist in the human brain,\nin a region called the medial temporal lobe (Quiroga e\u00a2 al., 2005). Researchers\ntested whether individual neurons would respond to photos of famous individuals.\nThey found what has come to be called the \u201cHalle Berry neuron\u201d: an individual\nneuron that is activated by the concept of Halle Berry. This neuron fires when a\nperson sees a photo of Halle Berry, a drawing of Halle Berry, or even text containing\nthe words \u201cHalle Berry.\u201d Of course, this has nothing to do with Halle Berry herself;\nother neurons responded to the presence of Bill Clinton, Jennifer Aniston, etc.\n\nThese medial temporal lobe neurons are somewhat more general than modern\nconvolutional networks, which would not automatically generalize to identifying\na person or object when reading its name. The closest analog to a convolutional\nnetwork\u2019s last layer of features is a brain area called the inferotemporal cortex\n(IT). When viewing an object, information flows from the retina, through the\nLGN, to V1, then onward to V2, then V4, then IT. This happens within the first\n100ms of glimpsing an object. If a person is allowed to continue looking at the\nobject for more time, then information will begin to flow backwards as the brain\nuses top-down feedback to update the activations in the lower level brain areas.\nHowever, if we interrupt the person\u2019s gaze, and observe only the firing rates that\nresult from the first 100ms of mostly feedforward activation, then IT proves to be\nvery similar to a convolutional network. Convolutional networks can predict IT\nfiring rates, and also perform very similarly to (time limited) humans on object\nrecognition tasks (DiCarlo, 2013).\n\nThat being said, there are many differences between convolutional networks\nand the mammalian vision system. Some of these differences are well known\nto computational neuroscientists, but outside the scope of this book. Some of\nthese differences are not yet known, because many basic questions about how the\nmammalian vision system works remain unanswered. As a brief list:\n\ne The human eye is mostly very low resolution, except for a tiny patch called the\nfovea. The fovea only observes an area about the size of a thumbnail held at\narms length. Though we feel as if we can see an entire scene in high resolution,\nthis is an illusion created by the subconscious part of our brain, as it stitches\ntogether several glimpses of small areas. Most convolutional networks actually\nreceive large full resolution photographs as input. The human brain makes\n\n366\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nseveral eye movements called saccades to glimpse the most visually salient\nor task-relevant parts of a scene. Incorporating similar attention mechanisms\ninto deep learning models is an active research direction. In the context of\ndeep learning, attention mechanisms have been most successful for natural\nlanguage processing, as described in section 12.4.5.1. Several visual models\nwith foveation mechanisms have been developed but so far have not become\nthe dominant approach (Larochelle and Hinton, 2010; Denil et al., 2012).\n\nThe human visual system is integrated with many other senses, such as\nhearing, and factors like our moods and thoughts. Convolutional networks\nso far are purely visual.\n\nThe human visual system does much more than just recognize objects. It is\nable to understand entire scenes including many objects and relationships\nbetween objects, and processes rich 3-D geometric information needed for\nour bodies to interface with the world. Convolutional networks have been\napplied to some of these problems but these applications are in their infancy.\n\nEven simple brain areas like V1 are heavily impacted by feedback from higher\nlevels. Feedback has been explored extensively in neural network models but\nhas not yet been shown to offer a compelling improvement.\n\nWhile feedforward IT firing rates capture much of the same information as\nconvolutional network features, it is not clear how similar the intermediate\ncomputations are. The brain probably uses very different activation and\npooling functions. An individual neuron\u2019s activation probably is not well-\ncharacterized by a single linear filter response. A recent model of V1 involves\nmultiple quadratic filters for each neuron (Rust ef al., 2005). Indeed our\ncartoon picture of \u201csimple cells\u201d and \u201ccomplex cells\u201d might create a non-\nexistent distinction; simple cells and complex cells might both be the same\nkind of cell but with their \u201cparameters\u201d enabling a continuum of behaviors\nranging from what we call \u201csimple\u201d to what we call \u201ccomplex.\u201d\n\nIt is also worth mentioning that neuroscience has told us relatively little\nabout how to train convolutional networks. Model structures with parameter\nsharing across multiple spatial locations date back to early connectionist models\nof vision (Marr and Poggio, 1976), but these models did not use the modern\nback-propagation algorithm and gradient descent. For example, the Neocognitron\n(Fukushima, 1980) incorporated most of the model architecture design elements of\nthe modern convolutional network but relied on a layer-wise unsupervised clustering\nalgorithm.\n\n367\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nLang and Hinton (1988) introduced the use of back-propagation to train\ntime-delay neural networks (TDNNs). To use contemporary terminology,\nTDNNs are one-dimensional convolutional networks applied to time series. Back-\npropagation applied to these models was not inspired by any neuroscientific observa-\ntion and is considered by some to be biologically implausible. Following the success\nof back-propagation-based training of TDNNs, (LeCun ez al., 1989) developed\nthe modern convolutional network by applying the same training algorithm to 2-D\nconvolution applied to images.\n\nSo far we have described how simple cells are roughly linear and selective for\ncertain features, complex cells are more nonlinear and become invariant to some\ntransformations of these simple cell features, and stacks of layers that alternate\nbetween selectivity and invariance can yield grandmother cells for very specific\nphenomena. We have not yet described precisely what these individual cells detect.\nIn a deep, nonlinear network, it can be difficult to understand the function of\nindividual cells. Simple cells in the first layer are easier to analyze, because their\nresponses are driven by a linear function. In an artificial neural network, we can\njust display an image of the convolution kernel to see what the corresponding\nchannel of a convolutional layer responds to. In a biological neural network, we\ndo not have access to the weights themselves. Instead, we put an electrode in the\nneuron itself, display several samples of white noise images in front of the animal\u2019s\nretina, and record how each of these samples causes the neuron to activate. We can\nthen fit a linear model to these responses in order to obtain an approximation o\nthe neuron\u2019s weights. This approach is known as reverse correlation (Ringach\nand Shapley, 2004).\n\nReverse correlation shows us that most V1 cells have weights that are described\nby Gabor functions. The Gabor function describes the weight at a 2-D point\nin the image. We can think of an image as being a function of 2-D coordinates,\nI(x,y). Likewise, we can think of a simple cell as sampling the image at a set 0\nlocations, defined by a set of x coordinates X and a set of y coordinates, Y, and\napplying weights that are also a function of the location, w(z,y). From this poin\nof view, the response of a simple cell to an image is given by\n\ns(J) =S\u00b0 Yo w(e,y) Ua, y). (9.15)\n\nweEX yEY\n\nSpecifically, w(a,y) takes the form of a Gabor function:\nw(a, Y;Q, Bx, By, f, \u00a2, X0; YO, T) = a exp (\u2014Bex\u201d? _ Byy\u2019) cos( fa\u2019 + \u00a2), (9.16)\n\nwhere\nx! = (x \u2014 aq) cos(T) + (y \u2014 yo) sin(r) (9.17)\n368\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nand\n/\n\ny = \u2014(x \u2014 20) sin(r) + (y \u2014 yo) cos(r). (9.18)\n\nHere, a, Bz, By, f, 6, Zo, yo, and T are parameters that control the properties\nof the Gabor function. Figure 9.18 shows some examples of Gabor functions with\ndifferent settings of these parameters.\n\nThe parameters xo, yo, and 7 define a coordinate system. We translate and\nrotate x and yto form a and y\u2019. Specifically, the simple cell will respond to image\nfeatures centered at the point (xo, yo), and it will respond to changes in brightness\nas we move along a line rotated 7 radians from the horizontal.\n\nViewed as a function of x\u2019 and y/, the function w then responds to changes in\nbrightness as we move along the 2 axis. It has two important factors: one is a\nGaussian function and the other is a cosine function.\n\nThe Gaussian factor a exp (- B,x\u201d? \u2014 Byy\" 2) can be seen as a gating term that\nensures the simple cell will only respond to values near where x\u2019 and y/ are both\nzero, in other words, near the center of the cell\u2019s receptive field. The scaling factor\na adjusts the total magnitude of the simple cell\u2019s response, while 8; and 6, control\nhow quickly its receptive field falls off.\n\nThe cosine factor cos(f\u2019 +) controls how the simple cell responds to changing\nbrightness along the 2\u2019 axis. The parameter f controls the frequency of the cosine\nand \u00a2 controls its phase offset.\n\nAltogether, this cartoon view of simple cells means that a simple cell responds\nto a specific spatial frequency of brightness in a specific direction at a specific\nlocation. Simple cells are most excited when the wave of brightness in the image\nhas the same phase as the weights. This occurs when the image is bright where the\n\nweights are positive and dark where the weights are negative. Simple cells are most\ninhibited when the wave of brightness is fully out of phase with the weights\u2014when\nthe image is dark where the weights are positive and bright where the weights are\nnegative.\n\nThe cartoon view of a complex cell is that it computes the L? norm of the\n2-D vector containing two simple cells\u2019 responses: c( I) = \\/so(1)? + s1(1)?. An\nimportant special case occurs when s 1 has all of the same parameters as sg except\nfor \u00a2, and \u00a2 is set such that 5; is one quarter cycle out of phase with so. In this\ncase, so and s; form a quadrature pair. A complex cell defined in this way\nresponds when the Gaussian reweighted image I(x, y) exp (\u20148,.2\u201d \u2014 8,y\u201d) contains\na high amplitude sinusoidal wave with frequency f in direction r near (x9, w),\nregardless of the phase offset of this wave. In other words, the complex cell is\ninvariant to small translations of the image in direction 7, or to negating the image\n\n369\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nBORO OOS\nDOGO OOO\nDonon ooo\nDOGO OO\nDOGO DOR\nDOGO BRR\nDOO Done\nSSSSeeee Dnt Dono\n\nFigure 9.18: Gabor functions with a variety of parameter settings.\n\nWhite indicates\n\nlarge positive weight, black indicates large negative weight, and the background gray\ncorresponds to zero weight. (Left)Gabor functions with different values of the parameters\nthat control the coordinate system: xo, yo, and +. Each Gabor function in this grid is\nassigned a value of x and yo proportional to its position in its grid, and 7 is chosen so\nthat each Gabor filter is sensitive to the direction radiating out from the center of the grid.\nFor the other two plots, 2, yo, and 7 are fixed to zero. (Center)Gabor functions with\ndifferent Gaussian scale parameters 3, and \u00a7,. Gabor functions are arranged in increasing\nwidth (decreasing 6,) as we move left to right through the grid, and increasing height\n(decreasing 3,) as we move top to bottom. For the other two plots, the 8 values are fixed\nto 1.5x the image width. (Right)Gabor functions with different sinusoid parameters f\nand \u00a2. As we move top to bottom, f increases, and as we move left to right, \u00a2 increases.\nFor the other two plots, \u00a2 is fixed to 0 and f is fixed to 5x the image width.\n\n(replacing black with white and vice versa).\n\nSome of the most striking correspondences between neuroscience and machine\nlearning come from visually comparing the features learned by machine learning\nmodels with those employed by V1. Olshausen and Field (1996) showed that\na simple unsupervised learning algorithm, sparse coding, learns features with\nreceptive fields similar to those of simple cells. Since then, we have found that\nan extremely wide variety of statistical learning algorithms learn features with\nGabor-like functions when applied to natural images. This includes most deep\nlearning algorithms, which learn these features in their first layer. Figure 9.19\nshows some examples. Because so many different learning algorithms learn edge\ndetectors, it is difficult to conclude that any specific learning algorithm is the\n\u201cright\u201d model of the brain just based on the features that it learns (though it can\ncertainly be a bad sign if an algorithm does not learn some sort of edge detector\nwhen applied to natural images). These features are an important part of the\nstatistical structure of natural images and can be recovered by many different\napproaches to statistical modeling. See Hyvarinen et al. (2009) for a review of the\nfield of natural image statistics.\n\n370\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nFigure 9.19: Many machine learning algorithms learn features that detect edges or specific\ncolors of edges when applied to natural images. These feature detectors are reminiscent of\nthe Gabor functions known to be present in primary visual cortex. (Left)Weights learned\nby an unsupervised learning algorithm (spike and slab sparse coding) applied to small\nimage patches. (Right)Convolution kernels learned by the first layer of a fully supervised\nconvolutional maxout network. Neighboring pairs of filters drive the same maxout unit.\n\n9.11 Convolutional Networks and the History of Deep\nLearning\n\nConvolutional networks have played an important role in the history of deep\nlearning. They are a key example of a successful application of insights obtained\nby studying the brain to machine learning applications. They were also some of\nthe first deep models to perform well, long before arbitrary deep models were\nconsidered viable. Convolutional networks were also some of the first neural\nnetworks to solve important commercial applications and remain at the forefront\nof commercial applications of deep learning today. For example, in the 1990s, the\nneural network research group at AT&T developed a convolutional network for\nreading checks (LeCun et al., 1998b). By the end of the 1990s, this system deployed\nby NEC was reading over 10% of all the checks in the US. Later, several OCR\nand handwriting recognition systems based on convolutional nets were deployed by\nMicrosoft (Simard et al., 2003). See chapter 12 for more details on such applications\nand more modern applications of convolutional networks. See LeCun ef al. (2010)\nfor a more in-depth history of convolutional networks up to 2010.\n\nConvolutional networks were also used to win many contests. The current\nintensity of commercial interest in deep learning began when Krizhevsky et al.\n(2012) won the ImageNet object recognition challenge, but convolutional networks\n\n371\n", "CHAPTER 9. CONVOLUTIONAL NETWORKS\n\nhad been used to win other machine learning and computer vision contests with\nless impact for years earlier.\n\nConvolutional nets were some of the first working deep networks trained with\nback-propagation. It is not entirely clear why convolutional networks succeeded\nwhen general back-propagation networks were considered to have failed. It may\nsimply be that convolutional networks were more computationally efficient than\nfully connected networks, so it was easier to run multiple experiments with them\nand tune their implementation and hyperparameters. Larger networks also seem\nto be easier to train. With modern hardware, large fully connected networks\nappear to perform reasonably on many tasks, even when using datasets that were\navailable and activation functions that were popular during the times when fully\nconnected networks were believed not to work well. It may be that the primary\nbarriers to the success of neural networks were psychological (practitioners did\nnot expect neural networks to work, so they did not make a serious effort to use\nneural networks). Whatever the case, it is fortunate that convolutional networks\nperformed well decades ago. In many ways, they carried the torch for the rest of\ndeep learning and paved the way to the acceptance of neural networks in general.\n\nConvolutional networks provide a way to specialize neural networks to work\nwith data that has a clear grid-structured topology and to scale such models to\nvery large size. This approach has been the most successful on a two-dimensional,\nimage topology. To process one-dimensional, sequential data, we turn next to\nanother powerful specialization of the neural networks framework: recurrent neural\nnetworks.\n\n372\n", "Chapter 10\n\nSequence Modeling: Recurrent\nand Recursive Nets\n\nRecurrent neural networks or RNNs (Rumelhart et al., 1986a) are a family of\nneural networks for processing sequential data. Much as a convolutional network\nis a neural network that is specialized for processing a grid of values X such as\nan image, a recurrent neural network is a neural network that is specialized for\nprocessing a sequence of values #,...,a'7). Just as convolutional networks\ncan readily scale to images with large width and height, and some convolutional\nnetworks can process images of variable size, recurrent networks can scale to much\nlonger sequences than would be practical for networks without sequence-based\nspecialization. Most recurrent networks can also process sequences of variable\nlength.\n\nTo go from multi-layer networks to recurrent networks, we need to take advan-\ntage of one of the early ideas found in machine learning and statistical models of\nthe 1980s: sharing parameters across different parts of a model. Parameter sharing\nmakes it possible to extend and apply the model to examples of different forms\n(different lengths, here) and generalize across them. If we had separate parameters\nfor each value of the time index, we could not generalize to sequence lengths not\nseen during training, nor share statistical strength across different sequence lengths\nand across different positions in time. Such sharing is particularly important when\na specific piece of information can occur at multiple positions within the sequence.\nFor example, consider the two sentences \u201cI went to Nepal in 2009\u201d and \u201cIn 2009,\nI went to Nepal.\u201d If we ask a machine learning model to read each sentence and\nextract the year in which the narrator went to Nepal, we would like it to recognize\nthe year 2009 as the relevant piece of information, whether it appears in the sixth\n\n373\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nword or the second word of the sentence. Suppose that we trained a feedforward\nnetwork that processes sentences of fixed length. A traditional fully connected\nfeedforward network would have separate parameters for each input feature, so it\nwould need to learn all of the rules of the language separately at each position in\nthe sentence. By comparison, a recurrent neural network shares the same weights\nacross several time steps.\n\nA related idea is the use of convolution across a 1-D temporal sequence. This\nconvolutional approach is the basis for time-delay neural networks (Lang and\nHinton, 1988; Waibel et al., 1989; Lang et al., 1990). The convolution operation\nallows a network to share parameters across time, but is shallow. The output\nof convolution is a sequence where each member of the output is a function of\na small number of neighboring members of the input. The idea of parameter\nsharing manifests in the application of the same convolution kernel at each time\nstep. Recurrent networks share parameters in a different way. Each member of the\noutput is a function of the previous members of the output. Each member of the\noutput is produced using the same update rule applied to the previous outputs.\nThis recurrent formulation results in the sharing of parameters through a very\ndeep computational graph.\n\nFor the simplicity of exposition, we refer to RNNs as operating on a sequence\nthat contains vectors x\u201c) with the time step index \u00a2 ranging from 1 to r. In\npractice, recurrent networks usually operate on minibatches of such sequences,\nwith a different sequence length 7 for each member of the minibatch. We have\nomitted the minibatch indices to simplify notation. Moreover, the time step index\nneed not literally refer to the passage of time in the real world. Sometimes it refers\nonly to the position in the sequence. RNNs may also be applied in two dimensions\nacross spatial data such as images, and even when applied to data involving time,\nthe network may have connections that go backwards in time, provided that the\nentire sequence is observed before it is provided to the network.\n\nThis chapter extends the idea of a computational graph to include cycles. These\ncycles represent the influence of the present value of a variable on its own value\nat a future time step. Such computational graphs allow us to define recurrent\nneural networks. We then describe many different ways to construct, train, and\nuse recurrent neural networks.\n\nFor more information on recurrent neural networks than is available in this\nchapter, we refer the reader to the textbook of Graves (2012).\n\n374\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\n10.1 Unfolding Computational Graphs\n\nA computational graph is a way to formalize the structure of a set of computations,\nsuch as those involved in mapping inputs and parameters to outputs and loss.\nPlease refer to section 6.5.1 for a general introduction. In this section we explain\nthe idea of unfolding a recursive or recurrent computation into a computational\ngraph that has a repetitive structure, typically corresponding to a chain of events.\nUnfolding this graph results in the sharing of parameters across a deep network\nstructure.\n\nFor example, consider the classical form of a dynamical system:\ns) = f(s); 6), (10.1)\nwhere s) is called the state of the system.\n\nEquation 10.1 is recurrent because the definition of s at time t refers back to\nthe same definition at time t \u2014 1.\n\nFor a finite number of time steps 7, the graph can be unfolded by applying\n\nthe definition 7 \u2014 1 times. For example, if we unfold equation 10.1 for 7 = 3 time\nsteps, we obtain\n\ns) =f(s?);@) (10.2)\n=f ( f(s\u2018; 0); 8) (10.3)\n\nUnfolding the equation by repeatedly applying the definition in this way has\nyielded an expression that does not involve recurrence. Such an expression can\nnow be represented by a traditional directed acyclic computational graph. The\nunfolded computational graph of equation 10.1 and equation 10.3 is illustrated in\n\nfigure 10.1.\nCe () (.\u201d) \u00a9 C0)\ntog) be pi sl) )\nvf f f fox\n\nFigure 10.1: The classical dynamical system described by equation 10.1, illustrated as an\nunfolded computational graph. Each node represents the state at some time t and the\nfunction f maps the state at t to the state at t+ 1. The same parameters (the same value\nof @ used to parametrize f) are used for all time steps.\n\nAs another example, let us consider a dynamical system driven by an external\nsignal a,\ns) = f(s) 0; 8), (10.4)\n\n375\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nwhere we see that the state now contains information about the whole past sequence.\n\nRecurrent neural networks can be built in many different ways. Much as\nalmost any function can be considered a feedforward neural network, essentially\nany function involving recurrence can be considered a recurrent neural network.\n\nMany recurrent neural networks use equation 10.5 or a similar equation to\ndefine the values of their hidden units. To indicate that the state is the hidden\nunits of the network, we now rewrite equation 10.4 using the variable h to represent\nthe state:\n\nnO = f(r\u2019), 2:6), (10.5)\n\nillustrated in figure 10.2, typical RNNs will add extra architectural features such\nas output layers that read information out of the state h to make predictions.\n\nWhen the recurrent network is trained to perform a task that requires predicting\nthe future from the past, the network typically learns to use h\u00a9 as a kind of lossy\nsummary of the task-relevant aspects of the past sequence of inputs up to t. This\nsummary is in general necessarily lossy, since it maps an arbitrary length sequence\n(2 aD ol?) ) 2) to a fixed length vector h(. Depending on the\ntraining criterion, this summary might selectively keep some aspects of the past\nsequence with more precision than other aspects. For example, if the RNN is used\nin statistical language modeling, typically to predict the next word given previous\nwords, it may not be necessary to store all of the information in the input sequence\nup to time t, but rather only enough information to predict the rest of the sentence.\nThe most demanding situation is when we ask h\u2122 to be rich enough to allow\none to approximately recover the input sequence, as in autoencoder frameworks\n(chapter 14).\n\ntaco ek Ri ac)\n\\ \u2018 \\ \u2018\n\u2014\u00bb *--- fF f f fse-\nf Unfold\n\nFigure 10.2: A recurrent network with no outputs. This recurrent network just processes\ninformation from the input x by incorporating it into the state h that is passed forward\nthrough time. (Left)Circuit diagram. The black square indicates a delay of a single time\nstep. (Right/The same network seen as an unfolded computational graph, where each\nnode is now associated with one particular time instance.\n\nEquation 10.5 can be drawn in two different ways. One way to draw the RNN\nis with a diagram containing one node for every component that might exist in a\n\n376\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nphysical implementation of the model, such as a biological neural network. In this\nview, the network defines a circuit that operates in real time, with physical parts\nwhose current state can influence their future state, as in the left of figure 10.2.\nThroughout this chapter, we use a black square in a circuit diagram to indicate\nthat an interaction takes place with a delay of a single time step, from the state\nat time t to the state at time t+ 1. The other way to draw the RNN is as an\nunfolded computational graph, in which each component is represented by many\ndifferent variables, with one variable per time step, representing the state of the\ncomponent at that point in time. Each variable for each time step is drawn as a\nseparate node of the computational graph, as in the right of figure 10.2. What we\ncall unfolding is the operation that maps a circuit as in the left side of the figure\nto a computational graph with repeated pieces as in the right side. The unfolded\ngraph now has a size that depends on the sequence length.\n\nWe can represent the unfolded recurrence after t steps with a function g:\n\nhn =g (a, wD gl) ge?) a) (10.6)\n=f(h-)) 2:0) (10.7)\nThe function g\u00ae takes the whole past sequence (a), vt) gt) 2 gl), xl)\n\nas input and produces the current state, but the unfolded recurrent structure\nallows us to factorize g into repeated application of a function f. The unfolding\nprocess thus introduces two major advantages:\n\n1. Regardless of the sequence length, the learned model always has the same\ninput size, because it is specified in terms of transition from one state to\nanother state, rather than specified in terms of a variable-length history of\nstates.\n\n2. It is possible to use the same transition function f with the same parameters\nat every time step.\n\nThese two factors make it possible to learn a single model f that operates on\nall time steps and all sequence lengths, rather than needing to learn a separate\nmodel g\u201c) for all possible time steps. Learning a single, shared model allows\ngeneralization to sequence lengths that did not appear in the training set, and\nallows the model to be estimated with far fewer training examples than would be\nrequired without parameter sharing.\n\nBoth the recurrent graph and the unrolled graph have their uses. The recurrent\ngraph is succinct. The unfolded graph provides an explicit description of which\ncomputations to perform. The unfolded graph also helps to illustrate the idea of\n\n377\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ninformation flow forward in time (computing outputs and losses) and backward\nin time (computing gradients) by explicitly showing the path along which this\ninformation flows.\n\n10.2 Recurrent Neural Networks\n\nArmed with the graph unrolling and parameter sharing ideas of section 10.1, we\ncan design a wide variety of recurrent neural networks.\n\nUnfold V V\n\n(*) ran Ww Ww Ww\n\nKORO\n\n\\ /\need\n\nU U U\nFigure 10.3: The computational graph to compute the training loss of a recurrent network\nthat maps an input sequence of a values to a corresponding sequence of output o values.\nA loss L measures how far each o is from the corresponding training target y. When using\nsoftmax outputs, we assume o is the unnormalized log probabilities. The loss L internally\ncomputes y = softmax(o) and compares this to the target y. The RNN has input to hidden\nconnections parametrized by a weight matrix U, hidden-to-hidden recurrent connections\nparametrized by a weight matrix W, and hidden-to-output connections parametrized by\na weight matrix V. Equation 10.8 defines forward propagation in this model. (Left)The\nRNN and its loss drawn with recurrent connections. (Right)The same seen as an time-\n\nunfolded computational graph, where each node is now associated with one particular\ntime instance.\n\nO + O09\n\nSome examples of important design patterns for recurrent neural networks\ninclude the following:\n\n378\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ne Recurrent networks that produce an output at each time step and have\nrecurrent connections between hidden units, illustrated in figure 10.3.\n\ne Recurrent networks that produce an output at each time step and have\nrecurrent connections only from the output at one time step to the hidden\nunits at the next time step, illustrated in figure 10.4\n\ne Recurrent networks with recurrent connections between hidden units, that\nread an entire sequence and then produce a single output, illustrated in\nfigure 10.5.\n\nfigure 10.3 is a reasonably representative example that we return to throughout\nmost of the chapter.\n\nThe recurrent neural network of figure 10.3 and equation 10.8 is universal in the\nsense that any function computable by a Turing machine can be computed by such\na recurrent network of a finite size. The output can be read from the RNN after\na number of time steps that is asymptotically linear in the number of time steps\nused by the Turing machine and asymptotically linear in the length of the input\n(Siegelmann and Sontag, 1991; Siegelmann, 1995; Siegelmann and Sontag, 1995;\nHyotyniemi, 1996). The functions computable by a Turing machine are discrete,\nso these results regard exact implementation of the function, not approximations.\nThe RNN, when used as a Turing machine, takes a binary sequence as input and its\noutputs must be discretized to provide a binary output. It is possible to compute all\nfunctions in this setting using a single specific RNN of finite size (Siegelmann and\nSontag (1995) use 886 units). The \u201cinput\u201d of the Turing machine is a specification\nof the function to be computed, so the same network that simulates this Turing\nmachine is sufficient for all problems. The theoretical RNN used for the proof\ncan simulate an unbounded stack by representing its activations and weights with\nrational numbers of unbounded precision.\n\nWe now develop the forward propagation equations for the RNN depicted in\nfigure 10.3. The figure does not specify the choice of activation function for the\nhidden units. Here we assume the hyperbolic tangent activation function. Also,\nthe figure does not specify exactly what form the output and loss function take.\nHere we assume that the output is discrete, as if the RNN is used to predict words\nor characters. A natural way to represent discrete variables is to regard the output\no as giving the unnormalized log probabilities of each possible value of the discrete\nvariable. We can then apply the softmax operation as a post-processing step to\nobtain a vector y of normalized probabilities over the output. Forward propagation\nbegins with a specification of the initial state A. Then, for each time step from\n\n379\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nFigure 10.4: An RNN whose only recurrence is the feedback connection from the output\no the hidden layer. At each time step t, the input is \u00a3;, the hidden layer activations are\nh), the outputs are o), the targets are y\u00ae and the loss is L. (Left)Circuit diagram.\nRight)/Unfolded computational graph. Such an RNN is less powerful (can express a\nsmaller set of functions) than those in the family represented by figure 10.3. The RNN\nin figure 10.3 can choose to put any information it wants about the past into its hidden\nrepresentation h and transmit h to the future. The RNN in this figure is trained to\nput a specific output value into o, and o is the only information it is allowed to send\no the future. There are no direct connections from h going forward. The previous h\nis connected to the present only indirectly, via the predictions it was used to produce.\nUnless o is very high-dimensional and rich, it will usually lack important information\nrom the past. This makes the RNN in this figure less powerful, but it may be easier to\nrain because each time step can be trained in isolation from the others, allowing greater\nparallelization during training, as described in section 10.2.1.\n\n380\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nt=1 to t=T, we apply the following update equations:\n\na = b+ Wht) + Ua (10.8)\nh\u00a9 = tanh(a\u201d) (10.9)\n0 = c+Vn (10.10)\ng = softmax(o\u2122) (10.11)\n\nwhere the parameters are the bias vectors b and c along with the weight matrices\nU, V and W, respectively for input-to-hidden, hidden-to-output and hidden-to-\nhidden connections. This is an example of a recurrent network that maps an\ninput sequence to an output sequence of the same length. The total loss for a\ngiven sequence of x values paired with a sequence of y values would then be just\nthe sum of the losses over all the time steps. For example, if L is the negative\nlog-likelihood of y given #),..., a, then\n\nL({e,...,@} \u00a5,...,y}) (10.12)\n=o\u201d (10.13)\nt\n~~ Slog Pmoel (y {a, co) w'}) ) (10.14)\nt\n\nwhere Pmodel (y {a 20. a }) is given by reading the entry for y\u2122 from the\nmodel\u2019s output vector gy\u201c. Computing the gradient of this loss function with respect\nto the parameters is an expensive operation. The gradient computation involves\nperforming a forward propagation pass moving left to right through our illustration\nof the unrolled graph in figure 10.3, followed by a backward propagation pass\nmoving right to left through the graph. The runtime is O(7) and cannot be reduced\nby parallelization because the forward propagation graph is inherently sequential;\neach time step may only be computed after the previous one. States computed\nin the forward pass must be stored until they are reused during the backward\npass, so the memory cost is also O(r). The back-propagation algorithm applied\nto the unrolled graph with O(7) cost is called back-propagation through time\nor BPTT and is discussed further in section 10.2.2. The network with recurrence\nbetween hidden units is thus very powerful but also expensive to train. Is there an\nalternative?\n\n10.2.1. Teacher Forcing and Networks with Output Recurrence\n\nThe network with recurrent connections only from the output at one time step to\nthe hidden units at the next time step (shown in figure 10.4) is strictly less powerful\n\n381\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nbecause it lacks hidden-to-hidden recurrent connections. For example, it cannot\nsimulate a universal Turing machine. Because this network lacks hidden-to-hidden\nrecurrence, it requires that the output units capture all of the information about\nthe past that the network will use to predict the future. Because the output units\nare explicitly trained to match the training set targets, they are unlikely to capture\nthe necessary information about the past history of the input, unless the user\nknows how to describe the full state of the system and provides it as part of the\ntraining set targets. The advantage of eliminating hidden-to-hidden recurrence\nis that, for any loss function based on comparing the prediction at time \u00a2 to the\ntraining target at time ft, all the time steps are decoupled. Training can thus be\nparallelized, with the gradient for each step t computed in isolation. There is no\nneed to compute the output for the previous time step first, because the training\nset provides the ideal value of that output.\n\nVo\noN oN\n[ow fo... kb\n\\ WwW > Ww\nsue 7%\n\nU U U U\n\n\u201cON\n\ntg) I\n\n\\ \u2019\n\nsue\n\nFigure 10.5: Time-unfolded recurrent neural network with a single output at the end\nof the sequence. Such a network can be used to summarize a sequence and produce a\nfixed-size representation used as input for further processing. There might be a target\n\nright at the end (as depicted here) or the gradient on the output o) can be obtained by\nback-propagating from further downstream modules.\n\nModels that have recurrent connections from their outputs leading back into\nthe model may be trained with teacher forcing. Teacher forcing is a procedure\nthat emerges from the maximum likelihood criterion, in which during training the\nmodel receives the ground truth output y as input at time t+ 1. We can see\nthis by examining a sequence with two time steps. The conditional maximum\n\n382\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nw\n@ Ww\nVv 4\nU >\nTrain time Test time\n\nFigure 10.6: Illustration of teacher forcing. Teacher forcing is a training technique that is\napplicable to RNNs that have connections from their output to their hidden states at the\nnext time step. (Left)At train time, we feed the correct output y drawn from the train\nset as input toh +), (Right)When the model is deployed, the true output is generally\nnot known. In this case, we approximate the correct output y with the model\u2019s output\no\u201c), and feed the output back into the model.\n\n383\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nlikelihood criterion is\nlog p (yy | x), @?)) (10.15)\n\n=logp(y\u201d jy), 2, 2?) +logp (y ja), x) (10.16)\n\nIn this example, we see that at time t = 2, the model is trained to maximize the\nconditional probability of y\u00ae) given both the w sequence so far and the previous y\nvalue from the training set. Maximum likelihood thus specifies that during training,\nrather than feeding the model\u2019s own output back into itself, these connections\nshould be fed with the target values specifying what the correct output should be.\nThis is illustrated in figure 10.6.\n\nWe originally motivated teacher forcing as allowing us to avoid back-propagation\nthrough time in models that lack hidden-to-hidden connections. Teacher forcing\nmay still be applied to models that have hidden-to-hidden connections so long as\nthey have connections from the output at one time step to values computed in the\nnext time step. However, as soon as the hidden units become a function of earlier\ntime steps, the BPTT algorithm is necessary. Some models may thus be trained\nwith both teacher forcing and BPTT.\n\nThe disadvantage of strict teacher forcing arises if the network is going to be\nlater used in an open-loop mode, with the network outputs (or samples from\nthe output distribution) fed back as input. In this case, the kind of inputs that\nthe network sees during training could be quite different from the kind of inputs\nthat it will see at test time. One way to mitigate this problem is to train with\nboth teacher-forced inputs and with free-running inputs, for example by predicting\nthe correct target a number of steps in the future through the unfolded recurrent\noutput-to-input paths. In this way, the network can learn to take into account\ninput conditions (such as those it generates itself in the free-running mode) not\nseen during training and how to map the state back towards one that will make\nthe network generate proper outputs after a few steps. Another approach (Bengio\net al., 2015b) to mitigate the gap between the inputs seen at train time and the\ninputs seen at test time randomly chooses to use generated values or actual data\nvalues as input. This approach exploits a curriculum learning strategy to gradually\nuse more of the generated values as input.\n\n10.2.2 Computing the Gradient in a Recurrent Neural Network\n\nComputing the gradient through a recurrent neural network is straightforward.\nOne simply applies the generalized back-propagation algorithm of section 6.5.6\n\n384\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nto the unrolled computational graph. No specialized algorithms are necessary.\nGradients obtained by back-propagation may then be used with any general-purpose\ngradient-based techniques to train an RNN.\n\nTo gain some intuition for how the BPTT algorithm behaves, we provide an\nexample of how to compute gradients by BPTT for the RNN equations above\n(equation 10.8 and equation 10.12). The nodes of our computational graph include\nthe parameters U, V,W, b and cas well as the sequence of nodes indexed by\nt for c,h, o and L\u00ae. For each node N we need to compute the gradient\nVn recursively, based on the gradient computed at nodes that follow it in the\ngraph. We start the recursion with the nodes immediately preceding the final loss\n\nOL\n\naL = (10.17)\n\nIn this derivation we assume that the outputs o are used as the argument to the\nsoftmax function to obtain the vector y of probabilities over the output. We also\nassume that the loss is the negative log-likelihood of the true target y given the\ninput so far. The gradient Vj on the outputs at time step \u00a2, for all 7,t, is as\nfollows:\n\naL aL aL) sg\n\n)\nVogl); ; 1,4: 10.18\n(Val); ao aL\u00ae aol) Yi iy ( )\n\nWe work our way backwards, starting from the end of the sequence. At the final\ntime step 7, h\u2122 only has o as a descendent, so its gradient is simple:\n\nVianb=VIV al. 10.19)\n\nWe can then iterate backwards in time to back-propagate gradients through time,\nfrom t =7 \u2014 1 down to t = 1, noting that ph (for t < 7) has as descendents both\no and n+), Its gradient is thus given by\n\nT T\nOhtt+)) do\")\nV,oL= (a) (V,u+n L) + (sem (V owl) 10.20)\n2\n= W\" (VpcrvL) diag (: \u2014 (ni) ) ) +V1 (VoL) 10.21)\n\nwhere diag (1 - (RID) *) indicates the diagonal matrix containing the elements\n\n1- (ni) Y. This is the Jacobian of the hyperbolic tangent associated with the\nhidden unit i at time t+ 1.\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nOnce the gradients on the internal nodes of the computational graph are\nobtained, we can obtain the gradients on the parameter nodes. Because the\nparameters are shared across many time steps, we must take some care when\ndenoting calculus operations involving these variables. The equations we wish to\nimplement use the bprop method of section 6.5.6, that computes the contribution\nof a single edge in the computational graph to the gradient. However, the Vw f\noperator used in calculus takes into account the contribution of W to the value\nof f due to all edges in the computational graph. To resolve this ambiguity, we\nintroduce dummy variables W that are defined to be copies of W but with each\nW) used only at time step t. We may then use V yz) to denote the contribution\nof the weights at time step t to the gradient.\n\nUsing this notation, the gradient on the remaining parameters is given by:\n\ndol) \\\nS- (=) VoL = SV ool (10.22)\nt\nan) \\ | . 2\nVol = S> (Sic) Vi wLl = So diag (: a (n) ) Vpw \u00a3 (10.23)\nt t\n\nVL\n\naL\nVE = dD (; =) Vv =o (Wonk) KO\u201d (10.24\nt 7 0; t\naL\nVwL = ry [ is) Pwo (10.25\nt a Oh;\n2\n= Yiodiag (1- (n') ) (Pro) atv\" (10.26\nt\naL\nVuL = >y| is) Put (10.27\nta \\ Oh;\n2\n= Sdiag (: - (n'?) ) (V,wL) a\u201d (10.28\n\nWe do not need to compute the gradient with respect to 2 for training because\nit does not have any parameters as ancestors in the computational graph defining\nthe loss.\n\n386\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\n10.2.3. Recurrent Networks as Directed Graphical Models\n\nIn the example recurrent network we have developed so far, the losses L) were\ncross-entropies between training targets y and outputs o). As with a feedforward\nnetwork, it is in principle possible to use almost any loss with a recurrent network.\nThe loss should be chosen based on the task. As with a feedforward network, we\nusually wish to interpret the output of the RNN as a probability distribution, and\nwe usually use the cross-entropy associated with that distribution to define the loss.\nMean squared error is the cross-entropy loss associated with an output distribution\nthat is a unit Gaussian, for example, just as with a feedforward network.\n\nWhen we use a predictive log-likelihood training objective, such as equa-\ntion 10.12, we train the RNN to estimate the conditional distribution of the next\nsequence element y given the past inputs. This may mean that we maximize\nthe log-likelihood\n\nlog p(y | a ,..., 2), (10.29)\n\nor, if the model includes connections from the output at one time step to the next\ntime step,\nlog p(y? | a) a) yo yD). (10.30)\n\nDecomposing the joint probability over the sequence of y values as a series of\none-step probabilistic predictions is one way to capture the full joint distribution\nacross the whole sequence. When we do not feed past y values as inputs that\ncondition the next step prediction, the directed graphical model contains no edges\nfrom any y\u00ae in the past to the current y\u201c. In this case, the outputs y are\nconditionally independent given the sequence of # values. When we do feed the\nactual y values (not their prediction, but the actual observed or generated values)\nback into the network, the directed graphical model contains edges from all y\nvalues in the past to the current y value.\n\nAs a simple example, let us consider the case where the RNN models only a\nsequence of scalar random variables Y = fy, Lee sy}, with no additional inputs\nx. The input at time step \u00a2 is simply the output at time step t\u2014 1. The RNN then\ndefines a directed graphical model over the y variables. We parametrize the joint\ndistribution of these observations using the chain rule (equation 3.6) for conditional\nprobabilities:\n\nP(X) = PQ, \u00a5) =] PW |v, y\"),....\u00a5) 20.381)\nt=1\n\nwhere the right-hand side of the bar is empty for t = 1, of course. Hence the\nnegative log-likelihood of a set of values {y,...,y(} according to such a model\n\n387\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nFigure 10.7: Fully connected graphical model for a sequence y, y),...,y,...: every\npast observation y may influence the conditional distribution of some yo (for t > i),\ngiven the previous values. Parametrizing the graphical model directly according to this\ngraph (as in equation 10.6) might be very inefficient, with an ever growing number of\ninputs and parameters for each element of the sequence. RNNs obtain the same full\nconnectivity but efficient parametrization, as illustrated in figure 10.8.\n\nis\nL= SOL (10.32)\nt\nwhere\nLO = \u2014 log P(y\u00ae = y | yy, yg). (10.33)\n~ \u00bb\n1 \u201c ) \u2018\n\nFigure 10.8: Introducing the state variable in the graphical model of the RNN, even\nthough it is a deterministic function of its inputs, helps to see how we can obtain a very\nefficient parametrization, based on equation 10.5. Every stage in the sequence (for h\u201c)\nand y*)) involves the same structure (the same number of inputs for each node) and can\nshare the same parameters with the other stages.\n\nThe edges in a graphical model indicate which variables depend directly on other\nvariables. Many graphical models aim to achieve statistical and computational\nefficiency by omitting edges that do not correspond to strong interactions. For\n\n388\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nexample, it is common to make the Markov assumption that the graphical model\nshould only contain edges from fy@-k), yt DI to y\u201c), rather than containing\nedges from the entire past history. However, in some cases, we believe that all past\ninputs should have an influence on the next element of the sequence. RNNs are\nuseful when we believe that the distribution over y) may depend on a value of y\u201c\nfrom the distant past in a way that is not captured by the effect of yO on yt),\n\nOne way to interpret an RNN as a graphical model is to view the RNN as\ndefining a graphical model whose structure is the complete graph, able to represent\ndirect dependencies between any pair of y values. The graphical model over the y\nvalues with the complete graph structure is shown in figure 10.7. The complete\ngraph interpretation of the RNN is based on ignoring the hidden units h\u00ae by\nmarginalizing them out of the model.\n\nIt is more interesting to consider the graphical model structure of RNNs that\nresults from regarding the hidden units h as random variables.! Including the\nhidden units in the graphical model reveals that the RNN provides a very efficient\nparametrization of the joint distribution over the observations. Suppose that we\nrepresented an arbitrary joint distribution over discrete values with a tabular\nrepresentation\u2014an array containing a separate entry for each possible assignment\nof values, with the value of that entry giving the probability of that assignment\noccurring. If y can take on k different values, the tabular representation would\nhave O(k\") parameters. By comparison, due to parameter sharing, the number of\nparameters in the RNN is O(1) as a function of sequence length. The number of\nparameters in the RNN may be adjusted to control model capacity but is not forced\nto scale with sequence length. Equation 10.5 shows that the RNN parametrizes\nlong-term relationships between variables efficiently, using recurrent applications\nof the same function f and same parameters 8 at each time step. Figure 10.8\nillustrates the graphical model interpretation. Incorporating the h\u2122 nodes in\nthe graphical model decouples the past and the future, acting as an intermediate\nquantity between them. A variable y in the distant past may influence a variable\ny via its effect on h. The structure of this graph shows that the model can be\nefficiently parametrized by using the same conditional probability distributions at\neach time step, and that when the variables are all observed, the probability of the\njoint assignment of all variables can be evaluated efficiently.\n\nEven with the efficient parametrization of the graphical model, some operations\nremain computationally challenging. For example, it is difficult to predict missing\n\n\u2018The conditional distribution over these variables given their parents is deterministic. This is\nperfectly legitimate, though it is somewhat rare to design a graphical model with such deterministic\nhidden units.\n\n389\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nvalues in the middle of the sequence.\n\nThe price recurrent networks pay for their reduced number of parameters is\nthat optimizing the parameters may be difficult.\n\nThe parameter sharing used in recurrent networks relies on the assumption\nthat the same parameters can be used for different time steps. Equivalently, the\nassumption is that the conditional probability distribution over the variables at\ntime t+ 1 given the variables at time t is stationary , meaning that the relationship\nbetween the previous time step and the next time step does not depend on \u00a2t. In\nprinciple, it would be possible to use \u00a2 as an extra input at each time step and let\nthe learner discover any time-dependence while sharing as much as it can between\ndifferent time steps. This would already be much better than using a different\nconditional probability distribution for each t, but the network would then have to\nextrapolate when faced with new values of t.\n\nTo complete our view of an RNN as a graphical model, we must describe how\nto draw samples from the model. The main operation that we need to perform is\nsimply to sample from the conditional distribution at each time step. However,\nthere is one additional complication. The RNN must have some mechanism for\ndetermining the length of the sequence. This can be achieved in various ways.\n\nIn the case when the output is a symbol taken from a vocabulary, one can\nadd a special symbol corresponding to the end of a sequence (Schmidhuber, 2012).\nWhen that symbol is generated, the sampling process stops. In the training set,\nwe insert this symbol as an extra member of the sequence, immediately after a)\nin each training example.\n\nAnother option is to introduce an extra Bernoulli output to the model that\nrepresents the decision to either continue generation or halt generation at each\ntime step. This approach is more general than the approach of adding an extra\nsymbol to the vocabulary, because it may be applied to any RNN, rather than\nonly RNNs that output a sequence of symbols. For example, it may be applied to\nan RNN that emits a sequence of real numbers. The new output unit is usually a\nsigmoid unit trained with the cross-entropy loss. In this approach the sigmoid is\ntrained to maximize the log-probability of the correct prediction as to whether the\nsequence ends or continues at each time step.\n\nAnother way to determine the sequence length 7 is to add an extra output to\nthe model that predicts the integer 7 itself. The model can sample a value of rT\nand then sample 7 steps worth of data. This approach requires adding an extra\ninput to the recurrent update at each time step so that the recurrent update is\naware of whether it is near the end of the generated sequence. This extra input\ncan either consist of the value of 7 or can consist of 7 \u2014 t, the number of remaining\n\n390\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ntime steps. Without this extra input, the RNN might generate sequences that\nend abruptly, such as a sentence that ends before it is complete. This approach is\nbased on the decomposition\n\nP(a,...,a@) = P(r)P(a\u2122,..., 2 | 7). (10.34)\n\nThe strategy of predicting 7 directly is used for example by Goodfellow et al.\n(2014d).\n\n10.2.4 Modeling Sequences Conditioned on Context with RNNs\n\nIn the previous section we described how an RNN could correspond to a directed\ngraphical model over a sequence of random variables y with no inputs a. Of\ncourse, our development of RNNs as in equation 10.8 included a sequence of\ninputs xe), x\u00ae),..., 07), In general, RNNs allow the extension of the graphical\nmodel view to represent not only a joint distribution over the y variables but\nalso a conditional distribution over y given x. As discussed in the context of\nfeedforward networks in section 6.2.1.1, any model representing a variable P(y; @)\ncan be reinterpreted as a model representing a conditional distribution P(y|w )\nwith w = @. We can extend such a model to represent a distribution P(y | x) by\nusing the same P(y | w) as before, but making w a function of x. In the case of\nan RNN, this can be achieved in different ways. We review here the most common\nand obvious choices.\n\nPreviously, we have discussed RNNs that take a sequence of vectors x) for\nt=1,...,7 as input. Another option is to take only a single vector x as input.\nWhen @ is a fixed-size vector, we can simply make it an extra input of the RNN\nthat generates the y sequence. Some common ways of providing an extra input to\nan RNN are:\n\n1. as an extra input at each time step, or\n2. as the initial state h, or\n\n3. both.\n\nThe first and most common approach is illustrated in figure 10.9. The interaction\nbetween the input 2 and each hidden unit vector h\u201c is parametrized by a newly\nintroduced weight matrix R that was absent from the model of only the sequence\nof y values. The same product #'R is added as additional input to the hidden\nunits at every time step. We can think of the choice of # as determining the value\n\n391\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nof \u00ab' R that is effectively a new bias parameter used for each of the hidden units.\nThe weights remain independent of the input. We can think of this model as taking\nthe parameters @ of the non-conditional model and turning them into w, where\nthe bias parameters within w are now a function of the input.\n\nFigure 10.9: An RNN that maps a fixed-length vector x into a distribution over sequences\nY. This RNN is appropriate for tasks such as image captioning, where a single image is\nused as input to a model that then produces a sequence of words describing the image.\nEach element y ) of the observed output sequence serves both as input (for the current\ntime step) and, during training, as target (for the previous time step).\n\nRather than receiving only a single vector # as input, the RNN may receive\na sequence of vectors a) as input. The RNN described in equation 10.8 corre-\nsponds to a conditional distribution P(y, Ly? | a ..., at\u201d)) that makes a\nconditional independence assumption that this distribution factorizes as\n\n[] Po? | 2\u00ae,.-.,2). (10.35)\nt\n\nTo remove the conditional independence assumption, we can add connections from\nthe output at time \u00a2 to the hidden unit at time t+ 1, as shown in figure 10.10. The\nmodel can then represent arbitrary probability distributions over the y sequence.\nThis kind of model representing a distribution over a sequence given another\n\n392\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nFigure 10.10: A conditional recurrent neural network mapping a variable-length sequence\nof x values into a distribution over sequences of y values of the same length. Compared to\nfigure 10.3, this RNN contains connections from the previous output to the current state.\nThese connections allow this RNN to model an arbitrary distribution over sequences of y\ngiven sequences of a of the same length. The RNN of figure 10.3 is only able to represent\ndistributions in which the y values are conditionally independent from each other given\nthe a values.\n\n393\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nsequence still has one restriction, which is that the length of both sequences must\nbe the same. We describe how to remove this restriction in section 10.4.\n\nFigure 10.11: Computation of a typical bidirectional recurrent neural network, meant\nto learn to map input sequences x to target sequences y, with loss L at each step t.\nThe h recurrence propagates information forward in time (towards the right) while the\ng recurrence propagates information backward in time (towards the left). Thus at each\npoint t, the output units o can benefit from a relevant summary of the past in its h\ninput and from a relevant summary of the future in its g\u201c) input.\n\n10.3. Bidirectional RNNs\n\nAll of the recurrent networks we have considered up to now have a \u201ccausal\u201d struc-\nture, meaning that the state at time \u00a2 only captures information from the past,\nx ,...,a-), and the present input \u00ab. Some of the models we have discussed\nalso allow information from past y values to affect the current state when the y\nvalues are available.\n\nHowever, in many applications we want to output a prediction of y which may\n\n394\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ndepend on the whole input sequence. For example, in speech recognition, the correct\ninterpretation of the current sound as a phoneme may depend on the next few\nphonemes because of co-articulation and potentially may even depend on the next\nfew words because of the linguistic dependencies between nearby words: if there\nare two interpretations of the current word that are both acoustically plausible, we\nmay have to look far into the future (and the past) to disambiguate them. This is\nalso true of handwriting recognition and many other sequence-to-sequence learning\ntasks, described in the next section.\n\nBidirectional recurrent neural networks (or bidirectional RNNs) were invented\nto address that need (Schuster and Paliwal, 1997). They have been extremely suc-\ncessful (Graves, 2012) in applications where that need arises, such as handwriting\nrecognition (Graves et al., 2008; Graves and Schmidhuber, 2009), speech recogni-\ntion (Graves and Schmidhuber, 2005; Graves e\u00a2 al., 2013) and bioinformatics (Baldi\net al., 1999).\n\nAs the name suggests, bidirectional RNNs combine an RNN that moves forward\nthrough time beginning from the start of the sequence with another RNN that\nmoves backward through time beginning from the end of the sequence. Figure 10.11\nillustrates the typical bidirectional RNN, with h\u00ae standing for the state of the\nsub-RNN that moves forward through time and g standing for the state of the\nsub-RNN that moves backward through time. This allows the output units o\nto compute a representation that depends on both the past and the future but\nis most sensitive to the input values around time t, without having to specify a\nfixed-size window around t (as one would have to do with a feedforward network,\na convolutional network, or a regular RNN with a fixed-size look-ahead buffer).\n\nThis idea can be naturally extended to 2-dimensional input, such as images, by\nhaving four RNNs, each one going in one of the four directions: up, down, left,\nright. At each point (i,7) of a 2-D grid, an output Oj; could then compute a\nrepresentation that would capture mostly local information but could also depend\non long-range inputs, if the RNN is able to learn to carry that information.\nCompared to a convolutional network, RNNs applied to images are typically more\nexpensive but allow for long-range lateral interactions between features in the\nsame feature map (Visin ef al., 2015; Kalchbrenner et al., 2015). Indeed, the\nforward propagation equations for such RNNs may be written in a form that shows\nthey use a convolution that computes the bottom-up input to each layer, prior\nto the recurrent propagation across the feature map that incorporates the lateral\ninteractions.\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\n10.4 Encoder-Decoder Sequence-to-Sequence Architec-\ntures\n\nWe have seen in figure 10.5 how an RNN can map an input sequence to a fixed-size\nvector. We have seen in figure 10.9 how an RNN can map a fixed-size vector to a\nsequence. We have seen in figures 10.3, 10.4, 10.10 and 10.11 how an RNN can\nmap an input sequence to an output sequence of the same length.\n\nEncoder\n\nal L\n\n\\ /\nnd\n\nOO\nOOOO\n\nFigure 10.12: Example of an encoder-decoder or sequence-to-sequence RNN architecture,\nfor learning to generate an output sequence (yO, ee vy) given an input sequence\n(x,x@),...,x(\"=)). It is composed of an encoder RNN that reads the input sequence\nand a decoder RNN that generates the output sequence (or computes the probability of a\ngiven output sequence). The final hidden state of the encoder RNN is used to compute a\ngenerally fixed-size context variable C which represents a semantic summary of the input\n\nsequence and is given as input to the decoder RNN.\n\nHere we discuss how an RNN can be trained to map an input sequence to an\noutput sequence which is not necessarily of the same length. This comes up in\nmany applications, such as speech recognition, machine translation or question\n\n396\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nanswering, where the input and output sequences in the training set are generally\nnot of the same length (although their lengths might be related).\n\nWe often call the input to the RNN the \u201ccontext.\u201d We want to produce a\nrepresentation of this context, C. The context C might be a vector or sequence of\nvectors that summarize the input sequence X = (a), eng gM),\n\nThe simplest RNN architecture for mapping a variable-length sequence to\nanother variable-length sequence was first proposed by Cho ef al. (2014a) and\nshortly after by Sutskever et al. (2014), who independently developed that archi-\ntecture and were the first to obtain state-of-the-art translation using this approach.\nThe former system is based on scoring proposals generated by another machine\ntranslation system, while the latter uses a standalone recurrent network to generate\nthe translations. These authors respectively called this architecture, illustrated\nin figure 10.12, the encoder-decoder or sequence-to-sequence architecture. The\nidea is very simple: (1) an encoder or reader or input RNN processes the input\nsequence. The encoder emits the context C\u2019, usually as a simple function of its\nfinal hidden state. (2) a decoder or writer or output RNN is conditioned on\nthat fixed-length vector (just like in figure 10.9) to generate the output sequence\nY = (y\u00ae,...,y). The innovation of this kind of architecture over those\npresented in earlier sections of this chapter is that the lengths n, and n, can\nvary from each other, while previous architectures constrained ng = rm = 7. na\nsequence-to-sequence architecture, the two RNNs are trained jointly to maximize\nthe average of log P(y\u2122, yl) pa) ..., gi\")) over all the pairs of a and y\nsequences in the training set. The last state hn, of the encoder RNN is typically\nused as a representation C\u2019 of the input sequence that is provided as input to the\ndecoder RNN.\n\nIf the context C' is a vector, then the decoder RNN is simply a vector-to-\nsequence RNN as described in section 10.2.4. As we have seen, there are at least\ntwo ways for a vector-to-sequence RNN to receive input. The input can be provided\nas the initial state of the RNN, or the input can be connected to the hidden units\nat each time step. These two ways can also be combined.\n\nThere is no constraint that the encoder must have the same size of hidden layer\nas the decoder.\n\nOne clear limitation of this architecture is when the context C output by the\nencoder RNN has a dimension that is too small to properly summarize a long\nsequence. This phenomenon was observed by Bahdanau ez? al. (2015) in the context\nof machine translation. They proposed to make C a variable-length sequence rather\nthan a fixed-size vector. Additionally, they introduced an attention mechanism\nthat learns to associate elements of the sequence C\u2019 to elements of the output\n\n397\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nsequence. See section 12.4.5.1 for more details.\n\n10.5 Deep Recurrent Networks\n\nThe computation in most RNNs can be decomposed into three blocks of parameters\nand associated transformations:\n\n1. from the input to the hidden state,\n2. from the previous hidden state to the next hidden state, and\n\n3. from the hidden state to the output.\n\nWith the RNN architecture of figure 10.3, each of these three blocks is associated\nwith a single weight matrix. In other words, when the network is unfolded, each\nof these corresponds to a shallow transformation. By a shallow transformation,\nwe mean a transformation that would be represented by a single layer within\na deep MLP. Typically this is a transformation represented by a learned affine\ntransformation followed by a fixed nonlinearity.\n\nWould it be advantageous to introduce depth in each of these operations?\nExperimental evidence (Graves et al., 2013; Pascanu et al., 2014a) strongly suggests\nso. The experimental evidence is in agreement with the idea that we need enough\ndepth in order to perform the required mappings. See also Schmidhuber (1992),\nEl Hihi and Bengio (1996), or Jaeger (2007a) for earlier work on deep RNNs.\n\nGraves et al. (2013) were the first to show a significant benefit of decomposing\nthe state of an RNN into multiple layers as in figure 10.13 (left). We can think\nof the lower layers in the hierarchy depicted in figure 10.13a as playing a role\nin transforming the raw input into a representation that is more appropriate, at\nthe higher levels of the hidden state. Pascanu et al. (2014a) go a step further\nand propose to have a separate MLP (possibly deep) for each of the three blocks\nenumerated above, as illustrated in figure 10.13b. Considerations of representational\ncapacity suggest to allocate enough capacity in each of these three steps, but doing\nso by adding depth may hurt learning by making optimization difficult. In general,\nit is easier to optimize shallower architectures, and adding the extra depth of\nfigure 10.13b makes the shortest path from a variable in time step t to a variable\nin time step t+ 1 become longer. For example, if an MLP with a single hidden\nlayer is used for the state-to-state transition, we have doubled the length of the\nshortest path between variables in any two different time steps, compared with the\nordinary RNN of figure 10.3. However, as argued by Pascanu ef al. (2014a), this\n\n398\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\n(a) (b) (c)\n\nFigure 10.13: A recurrent neural network can be made deep in many ways (Pascanu\net al., 2014a). (a)/The hidden recurrent state can be broken down into groups organized\nhierarchically. (b)/Deeper computation (e.g., an MLP) can be introduced in the input-to-\nhidden, hidden-to-hidden and hidden-to-output parts. This may lengthen the shortest\npath linking different time steps. (c)The path-lengthening effect can be mitigated by\nintroducing skip connections.\n\n399\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ncan be mitigated by introducing skip connections in the hidden-to-hidden path, as\nillustrated in figure 10.13c.\n\n10.6 Recursive Neural Networks\n\nFigure 10.14: A recursive network has a computational graph that generalizes that of the\nrecurrent network from a chain to a tree. A variable-size sequence #, a 2),...,a@\u00ae can\nbe mapped to a fixed-size representation (the output 0), with a fixed set of parameters\n(the weight matrices U, V, W). The figure illustrates a supervised learning case in which\nsome target y is provided which is associated with the whole sequence.\n\nRecursive neural networks\u201d represent yet another generalization of recurrent\nnetworks, with a different kind of computational graph, which is structured as a\ndeep tree, rather than the chain-like structure of RNNs. The typical computational\ngraph for a recursive network is illustrated in figure 10.14. Recursive neural\n\n?We suggest to not abbreviate \u201crecursive neural network\u201d as \u201cRNN\u201d to avoid confusion with\n\u201crecurrent neural network.\u201d\n\n400\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nnetworks were introduced by Pollack (1990) and their potential use for learning to\nreason was described by Bottou (2011). Recursive networks have been successfully\napplied to processing data structures as input to neural nets (Frasconi et al., 1997,\n1998), in natural language processing (Socher et al., 201 1a,c, 2013a) as well as in\ncomputer vision (Socher ef al., 2011b).\n\nOne clear advantage of recursive nets over recurrent nets is that for a sequence\nof the same length 7, the depth (measured as the number of compositions of\nnonlinear operations) can be drastically reduced from r to O(logr), which might\nhelp deal with long-term dependencies. An open question is how to best structure\nthe tree. One option is to have a tree structure which does not depend on the data,\nsuch as a balanced binary tree. In some application domains, external methods\ncan suggest the appropriate tree structure. For example, when processing natural\nlanguage sentences, the tree structure for the recursive network can be fixed to\nthe structure of the parse tree of the sentence provided by a natural language\nparser (Socher et al., 2011a, 2013a). Ideally, one would like the learner itself to\ndiscover and infer the tree structure that is appropriate for any given input, as\nsuggested by Bottou (2011).\n\nMany variants of the recursive net idea are possible. For example, Frasconi\net al. (1997) and Frasconi e? al. (1998) associate the data with a tree structure,\nand associate the inputs and targets with individual nodes of the tree. The\ncomputation performed by each node does not have to be the traditional artificial\nneuron computation (affine transformation of all inputs followed by a monotone\nnonlinearity). For example, Socher et al. (2013a) propose using tensor operations\nand bilinear forms, which have previously been found useful to model relationships\nbetween concepts (Weston et al., 2010; Bordes et al., 2012) when the concepts are\nrepresented by continuous vectors (embeddings).\n\n10.7 The Challenge of Long-Term Dependencies\n\nThe mathematical challenge of learning long-term dependencies in recurrent net-\nworks was introduced in section 8.2.5. The basic problem is that gradients prop-\nagated over many stages tend to either vanish (most of the time) or explode\n(rarely, but with much damage to the optimization). Even if we assume that the\nparameters are such that the recurrent network is stable (can store memories,\nwith gradients not exploding), the difficulty with long-term dependencies arises\nfrom the exponentially smaller weights given to long-term interactions (involving\nthe multiplication of many Jacobians) compared to short-term ones. Many other\nsources provide a deeper treatment (Hochreiter, 1991; Doya, 1993; Bengio et al.,\n\n401\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nProjection of output\n\n\u201460 \u201440 \u201420 0 20 40 60\n\nInput coordinate\n\nFigure 10.15: When composing many nonlinear functions (like the linear-tanh layer shown\nhere), the result is highly nonlinear, typically with most of the values associated with a tiny\nderivative, some values with a large derivative, and many alternations between increasing\nand decreasing. In this plot, we plot a linear projection of a 100-dimensional hidden state\ndown to a single dimension, plotted on the yaxis. The x-axis is the coordinate of the\ninitial state along a random direction in the 100-dimensional space. We can thus view this\nplot as a linear cross-section of a high-dimensional function. The plots show the function\nafter each time step, or equivalently, after each number of times the transition function\nhas been composed.\n\n1994; Pascanu et al., 2013) . In this section, we describe the problem in more\ndetail. The remaining sections describe approaches to overcoming the problem.\n\nRecurrent networks involve the composition of the same function multiple\ntimes, once per time step. These compositions can result in extremely nonlinear\nbehavior, as illustrated in figure 10.15.\n\nIn particular, the function composition employed by recurrent neural networks\nsomewhat resembles matrix multiplication. We can think of the recurrence relation\n\nnO =wialt-) (10.36)\n\nas a very simple recurrent neural network lacking a nonlinear activation function,\nand lacking inputs w. As described in section 8.2.5, this recurrence relation\nessentially describes the power method. It may be simplified to\n\nan =(w')' An, (10.37)\nand if W admits an eigendecomposition of the form\n\nW=Qaq', (10.38)\n402\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nwith orthogonal Q, the recurrence may be simplified further to\nnh) =Q\u2019aA' QR. (10.39)\n\nThe eigenvalues are raised to the power of \u00a2t causing eigenvalues with magnitude\nless than one to decay to zero and eigenvalues with magnitude greater than one to\nexplode. Any component of h\u00a9) that is not aligned with the largest eigenvector\nwill eventually be discarded.\n\nThis problem is particular to recurrent networks. In the scalar case, imagine\nmultiplying a weight w by itself many times. The product w will either vanish or\nexplode depending on the magnitude of w. However, if we make a non-recurrent\nnetwork that has a different weight w at each time step, the situation is different.\nIf the initial state is given by 1, then the state at time t is given by T],w. Suppose\nthat the w) values are generated randomly, independently from one another, with\nzero mean and variance v. The variance of the product is O(v\"). To obtain some\ndesired variance v* we may choose the individual weights with variance v = V/v*.\nVery deep feedforward networks with carefully chosen scaling can thus avoid the\nvanishing and exploding gradient problem, as argued by Sussillo (2014).\n\nThe vanishing and exploding gradient problem for RNNs was independently\ndiscovered by separate researchers (Hochreiter, 1991; Bengio et al., 1993, 1994).\nOne may hope that the problem can be avoided simply by staying in a region of\nparameter space where the gradients do not vanish or explode. Unfortunately, in\norder to store memories in a way that is robust to small perturbations, the RNN\nmust enter a region of parameter space where gradients vanish (Bengio et al., 1993,\n1994). Specifically, whenever the model is able to represent long term dependencies,\nthe gradient of a long term interaction has exponentially smaller magnitude than\nthe gradient of a short term interaction. It does not mean that it is impossible\nto learn, but that it might take a very long time to learn long-term dependencies,\nbecause the signal about these dependencies will tend to be hidden by the smallest\nfluctuations arising from short-term dependencies. In practice, the experiments\nin Bengio et al. (1994) show that as we increase the span of the dependencies that\nneed to be captured, gradient-based optimization becomes increasingly difficult,\nwith the probability of successful training of a traditional RNN via SGD rapidly\nreaching 0 for sequences of only length 10 or 20.\n\nFor a deeper treatment of recurrent networks as dynamical systems, see Doya\n(1993), Bengio et al. (1994) and Siegelmann and Sontag (1995), with a review\nin Pascanu et al. (2013). The remaining sections of this chapter discuss various\napproaches that have been proposed to reduce the difficulty of learning long-\nterm dependencies (in some cases allowing an RNN to learn dependencies across\n\n403\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nhundreds of steps), but the problem of learning long-term dependencies remains\none of the main challenges in deep learning.\n\n10.8 Echo State Networks\n\nThe recurrent weights mapping from h\u201c-)) to h and the input weights mapping\nfrom \u00ab) to h\u00ae are some of the most difficult parameters to learn in a recurrent\nnetwork. One proposed (Jaeger, 2003; Maass et al., 2002; Jaeger and Haas, 2004;\nJaeger, 2007b) approach to avoiding this difficulty is to set the recurrent weights\nsuch that the recurrent hidden units do a good job of capturing the history of past\ninputs, and learn only the output weights. This is the idea that was independently\nproposed for echo state networks or ESNs (Jaeger and Haas, 2004; Jaeger, 2007b)\nand liquid state machines (Maass ef a/., 2002). The latter is similar, except\nthat it uses spiking neurons (with binary outputs) instead of the continuous-valued\nhidden units used for ESNs. Both ESNs and liquid state machines are termed\nreservoir computing (LukoSevitius and Jaeger, 2009) to denote the fact that\nthe hidden units form of reservoir of temporal features which may capture different\naspects of the history of inputs.\n\nOne way to think about these reservoir computing recurrent networks is that\nthey are similar to kernel machines: they map an arbitrary length sequence (the\nhistory of inputs up to time t\u00a2) into a fixed-length vector (the recurrent state hn),\non which a linear predictor (typically a linear regression) can be applied to solve\nthe problem of interest. The training criterion may then be easily designed to be\nconvex as a function of the output weights. For example, if the output consists\nof linear regression from the hidden units to the output targets, and the training\ncriterion is mean squared error, then it is convex and may be solved reliably with\nsimple learning algorithms (Jaeger, 2003).\n\nThe important question is therefore: how do we set the input and recurrent\nweights so that a rich set of histories can be represented in the recurrent neural\nnetwork state? The answer proposed in the reservoir computing literature is to\nview the recurrent net as a dynamical system, and set the input and recurrent\nweights such that the dynamical system is near the edge of stability.\n\nThe original idea was to make the eigenvalues of the Jacobian of the state-to-\nstate transition function be close to 1. As explained in section 8.2.5, an important\ncharacteristic of a recurrent network is the eigenvalue spectrum of the Jacobians\n\nJY = =. Of particular importance is the spectral radius of J, defined to\n\nbe the maximum of the absolute values of its eigenvalues.\n\n404\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nTo understand the effect of the spectral radius, consider the simple case of\nback-propagation with a Jacobian matrix J that does not change with t. This\ncase happens, for example, when the network is purely linear. Suppose that J has\nan eigenvector v with corresponding eigenvalue A. Consider what happens as we\npropagate a gradient vector backwards through time. If we begin with a gradient\nvector g, then after one step of back-propagation, we will have Jg, and after n\nsteps we will have J\u201dg. Now consider what happens if we instead back-propagate\na perturbed version of g. If we begin with g + dv, then after one step, we will\nhave J(g + dv). After n steps, we will have J\"(g + dv). From this we can see\nthat back-propagation starting from g and back-propagation starting from g+ dv\ndiverge by 6J\u201dv after n steps of back-propagation. If v is chosen to be a unit\neigenvector of J with eigenvalue A, then multiplication by the Jacobian simply\nscales the difference at each step. The two executions of back-propagation are\nseparated by a distance of 6|A|\". When v corresponds to the largest value of |A|,\nthis perturbation achieves the widest possible separation of an initial perturbation\nof size 6.\n\nWhen |A| > 1, the deviation size 5|\\|\" grows exponentially large. When |A| < 1,\nthe deviation size becomes exponentially small.\n\nOf course, this example assumed that the Jacobian was the same at every\ntime step, corresponding to a recurrent network with no nonlinearity. When a\nnonlinearity is present, the derivative of the nonlinearity will approach zero on\nmany time steps, and help to prevent the explosion resulting from a large spectral\nradius. Indeed, the most recent work on echo state networks advocates using a\nspectral radius much larger than unity (Yildiz et al., 2012; Jaeger, 2012).\n\nEverything we have said about back-propagation via repeated matrix multipli-\n\ncation applies equally to forward propagation in a network with no nonlinearity,\nwhere the state ht) = AOTw.,\n\nWhen a linear map W/ always shrinks h as measured by the L? norm, then\nwe say that the map is contractive. When the spectral radius is less than one,\nthe mapping from h to A+ is contractive, so a small change becomes smaller\nafter each time step. This necessarily makes the network forget information about\nthe past when we use a finite level of precision (such as 32 bit integers) to store\nthe state vector.\n\nThe Jacobian matrix tells us how a small change of h\u201c propagates one step\nforward, or equivalently, how the gradient on ht) propagates one step backward,\nduring back-propagation. Note that neither W nor J need to be symmetric (al-\nthough they are square and real), so they can have complex-valued eigenvalues and\neigenvectors, with imaginary components corresponding to potentially oscillatory\n\n405\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nbehavior (if the same Jacobian was applied iteratively). Even though h\u00a9 ora\nsmall variation of h of interest in back-propagation are real-valued, they can\nbe expressed in such a complex-valued basis. What matters is what happens to\nthe magnitude (complex absolute value) of these possibly complex-valued basis\ncoefficients, when we multiply the matrix by the vector. An eigenvalue with\nmagnitude greater than one corresponds to magnification (exponential growth, if\napplied iteratively) or shrinking (exponential decay, if applied iteratively).\n\nWith a nonlinear map, the Jacobian is free to change at each step. The\ndynamics therefore become more complicated. However, it remains true that a\nsmall initial variation can turn into a large variation after several steps. One\ndifference between the purely linear case and the nonlinear case is that the use of\n\na squashing nonlinearity such as tanh can cause the recurrent dynamics to become\nbounded. Note that it is possible for back-propagation to retain unbounded\ndynamics even when forward propagation has bounded dynamics, for example,\nwhen a sequence of tanh units are all in the middle of their linear regime and are\nconnected by weight matrices with spectral radius greater than 1. However, it is\nrare for all of the tanh units to simultaneously lie at their linear activation point.\n\nThe strategy of echo state networks is simply to fix the weights to have some\nspectral radius such as 3, where information is carried forward through time but\ndoes not explode due to the stabilizing effect of saturating nonlinearities like tanh.\n\nMore recently, it has been shown that the techniques used to set the weights\nin ESNs could be used to initialize the weights in a fully trainable recurrent net-\nwork (with the hidden-to-hidden recurrent weights trained using back-propagation\nthrough time), helping to learn long-term dependencies (Sutskever, 2012; Sutskever\net al., 2013). In this setting, an initial spectral radius of 1.2 performs well, combined\nwith the sparse initialization scheme described in section 8.4.\n\n10.9 Leaky Units and Other Strategies for Multiple\nTime Scales\n\nOne way to deal with long-term dependencies is to design a model that operates\nat multiple time scales, so that some parts of the model operate at fine-grained\ntime scales and can handle small details, while other parts operate at coarse time\nscales and transfer information from the distant past to the present more efficiently.\nVarious strategies for building both fine and coarse time scales are possible. These\ninclude the addition of skip connections across time, \u201cleaky units\u201d that integrate\nsignals with different time constants, and the removal of some of the connections\n\n406\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nused to model fine-grained time scales.\n\n10.9.1 Adding Skip Connections through Time\n\nOne way to obtain coarse time scales is to add direct connections from variables in\nthe distant past to variables in the present. The idea of using such skip connections\ndates back to Lin et al. (1996) and follows from the idea of incorporating delays in\nfeedforward neural networks (Lang and Hinton, 1988). In an ordinary recurrent\nnetwork, a recurrent connection goes from a unit at time t to a unit at time t+ 1.\nIt is possible to construct recurrent networks with longer delays (Bengio, 1991).\n\nAs we have seen in section 8.2.5, gradients may vanish or explode exponentially\nwith respect to the number of time steps. Lin et al. (1996) introduced recurrent\nconnections with a time-delay of d to mitigate this problem. Gradients now\ndiminish exponentially as a function of 7 rather than 7. Since there are both\ndelayed and single step connections, gradients may still explode exponentially in rT.\nThis allows the learning algorithm to capture longer dependencies although not all\nlong-term dependencies may be represented well in this way.\n\n10.9.2. Leaky Units and a Spectrum of Different Time Scales\n\nAnother way to obtain paths on which the product of derivatives is close to one is to\nhave units with linear self-connections and a weight near one on these connections.\n\nWhen we accumulate a running average pi of some value v by applying the\nupdate wp \u00a9 apt-D + (1 \u2014 a)v the a parameter is an example of a linear self-\nconnection from pe-D to po. When a is near one, the running average remembers\ninformation about the past for a long time, and when a is near zero, information\nabout the past is rapidly discarded. Hidden units with linear self-connections can\nbehave similarly to such running averages. Such hidden units are called leaky\nunits.\n\nSkip connections through d time steps are a way of ensuring that a unit can\nalways learn to be influenced by a value from d time steps earlier. The use of a\nlinear self-connection with a weight near one is a different way of ensuring that the\nunit can access values from the past. The linear self-connection approach allows\nthis effect to be adapted more smoothly and flexibly by adjusting the real-valued\nqa rather than by adjusting the integer-valued skip length.\n\nThese ideas were proposed by Mozer (1992) and by El Hihi and Bengio (1996).\nLeaky units were also found to be useful in the context of echo state networks\n(Jaeger et al., 2007).\n\n407\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nThere are two basic strategies for setting the time constants used by leaky\nunits. One strategy is to manually fix them to values that remain constant, for\nexample by sampling their values from some distribution once at initialization time.\nAnother strategy is to make the time constants free parameters and learn them.\nHaving such leaky units at different time scales appears to help with long-term\ndependencies (Mozer, 1992; Pascanu ef al., 2013).\n\n10.9.3 Removing Connections\n\nAnother approach to handle long-term dependencies is the idea of organizing\nthe state of the RNN at multiple time-scales (E] Hihi and Bengio, 1996), with\ninformation flowing more easily through long distances at the slower time scales.\n\nThis idea differs from the skip connections through time discussed earlier\nbecause it involves actively removing length-one connections and replacing them\nwith longer connections. Units modified in such a way are forced to operate on a\nlong time scale. Skip connections through time add edges. Units receiving such\nnew connections may learn to operate on a long time scale but may also choose to\nfocus on their other short-term connections.\n\nThere are different ways in which a group of recurrent units can be forced to\noperate at different time scales. One option is to make the recurrent units leaky,\nbut to have different groups of units associated with different fixed time scales.\nThis was the proposal in Mozer (1992) and has been successfully used in Pascanu\net al. (2013). Another option is to have explicit and discrete updates taking place\nat different times, with a different frequency for different groups of units. This is\nthe approach of E] Hihi and Bengio (1996) and Koutnik ef al. (2014). It worked\nwell on a number of benchmark datasets.\n\n10.10 The Long Short-Term Memory and Other Gated\nRNNs\n\nAs of this writing, the most effective sequence models used in practical applications\nare called gated RNNs. These include the long short-term memory and\nnetworks based on the gated recurrent unit.\n\nLike leaky units, gated RNNs are based on the idea of creating paths through\ntime that have derivatives that neither vanish nor explode. Leaky units did\nthis with connection weights that were either manually chosen constants or were\nparameters. Gated RNNs generalize this to connection weights that may change\n\n408\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nat each time step.\n\noutput\n\nself-loop\n\ninput | input gate orget gate utput gate\n\nFigure 10.16: Block diagram of the LSTM recurrent network \u201ccell.\u201d Cells are connected\nrecurrently to each other, replacing the usual hidden units of ordinary recurrent networks.\nAn input feature is computed with a regular artificial neuron unit. Its value can be\naccumulated into the state if the sigmoidal input gate allows it. The state unit has a\nlinear self-loop whose weight is controlled by the forget gate. The output of the cell can\nbe shut off by the output gate. All the gating units have a sigmoid nonlinearity, while the\ninput unit can have any squashing nonlinearity. The state unit can also be used as an\nextra input to the gating units. The black square indicates a delay of a single time step.\n\nLeaky units allow the network to accumulate information (such as evidence\nfor a particular feature or category) over a long duration. However, once that\ninformation has been used, it might be useful for the neural network to forget the\nold state. For example, if a sequence is made of sub-sequences and we want a leaky\nunit to accumulate evidence inside each sub-subsequence, we need a mechanism to\nforget the old state by setting it to zero. Instead of manually deciding when to\nclear the state, we want the neural network to learn to decide when to do it. This\n\n409\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nis what gated RNNs do.\n\n10.10.1 LSTM\n\nThe clever idea of introducing self-loops to produce paths where the gradient\ncan flow for long durations is a core contribution of the initial long short-term\nmemory (LSTM) model (Hochreiter and Schmidhuber, 1997). A crucial addition\nhas been to make the weight on this self-loop conditioned on the context, rather than\nfixed (Gers et al., 2000). By making the weight of this self-loop gated (controlled\nby another hidden unit), the time scale of integration can be changed dynamically.\nIn this case, we mean that even for an LSTM with fixed parameters, the time scale\nof integration can change based on the input sequence, because the time constants\nare output by the model itself. The LSTM has been found extremely successful\nin many applications, such as unconstrained handwriting recognition (Graves\net al., 2009), speech recognition (Graves et al., 2013; Graves and Jaitly, 2014),\nhandwriting generation (Graves, 2013), machine translation (Sutskever et al., 2014),\nimage captioning (Kiros et al., 2014b; Vinyals et al., 2014b; Xu et al., 2015) and\nparsing (Vinyals ef al., 2014a).\n\nThe LSTM block diagram is illustrated in figure 10.16. The corresponding\nforward propagation equations are given below, in the case of a shallow recurrent\nnetwork architecture. Deeper architectures have also been successfully used (Graves\net al., 2013; Pascanu et al., 2014a). Instead of a unit that simply applies an element-\nwise nonlinearity to the affine transformation of inputs and recurrent units, LSTM\nrecurrent networks have \u201cLSTM cells\u201d that have an internal recurrence (a self-loop),\nin addition to the outer recurrence of the RNN. Each cell has the same inputs\nand outputs as an ordinary recurrent network, but has more parameters and a\nsystem of gating units that controls the flow of information. The most important\ncomponent is the state unit s() that has a linear self-loop similar to the leaky\nunits described in the previous section. However, here, the self-loop weight (or the\nassociated time constant) is controlled by a forget gate unit fo (for time step t\nand cell i), that sets this weight to a value between 0 and 1 via a sigmoid unit:\n\nAO =o [bi + diuhey + Yomi |, (10.40)\nJ j\n\nwhere a) is the current input vector and h is the current hidden layer vector,\ncontaining the outputs of all the LSTM cells, and bf ,U!, WS are respectively\nbiases, input weights and recurrent weights for the forget gates. The LSTM cell\n\n410\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ninternal state is thus updated as follows, but with a conditional self-loop weight\n\n8) = (OS) + go | bit SUi ge) + DWighh\u201d |, (10.41)\nJ j\nwhere b, U and W respectively denote the biases, input weights and recurrent\nweights into the LSTM cell. The external input gate unit g\u201d is computed\nsimilarly to the forget gate (with a sigmoid unit to obtain a gating value between\n0 and 1), but with its own parameters:\n\ngl =o We Dus oe y+ Wa YD). (10.42)\n\nof the LSTM cell can also be shut off, via the output gate g\u201d?\n\ni?\n\nThe output hi ()\nwhich also uses a sigmoid unit for gating:\n\nni) = tanh (1\u00b0) g? (10.43)\n\nt)\nqo =o he Dour ee \u201cUM Phi (10.44)\n\nwhich has parameters b\u00b0, U\u00b0, W\u00b0 for its biases, input weights and recurrent\nweights, respectively. Among the variants, one can choose to use the cell state st )\nas an extra input (with its weight) into the three gates of the i-th unit, as shown\nin figure 10.16. This would require three additional parameters.\n\nLSTM networks have been shown to learn long-term dependencies more easily\nthan the simple recurrent architectures, first on artificial data sets designed for\ntesting the ability to learn long-term dependencies (Bengio et al., 1994; Hochreiter\nand Schmidhuber, 1997; Hochreiter et al., 2001), then on challenging sequence\nprocessing tasks where state-of-the-art performance was obtained (Graves, 2012;\nGraves et al., 2013; Sutskever et al., 2014). Variants and alternatives to the LSTM\nhave been studied and used and are discussed next.\n\n10.10.2 Other Gated RNNs\n\nWhich pieces of the LSTM architecture are actually necessary? What other\nsuccessful architectures could be designed that allow the network to dynamically\ncontrol the time scale and forgetting behavior of different units?\n\n411\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nSome answers to these questions are given with the recent work on gated RNNs,\nwhose units are also known as gated recurrent units or GRUs (Cho ef al., 2014b;\nChung et al., 2014, 2015a; Jozefowicz et al., 2015; Chrupala et al., 2015). The main\ndifference with the LSTM is that a single gating unit simultaneously controls the\nforgetting factor and the decision to update the state unit. The update equations\nare the following:\n\n1 = ul REY + dul 0 [B+ SOU ga) 4S Wir PAE J,\nJ J\n(10.45)\nwhere u stands for \u201cupdate\u201d gate and r for \u201creset\u201d gate. Their value is defined as\nusual:\n\nul) So [ot Sous 4 So we (10.46)\nJ J\n\nand\n\nri =o [b+ Usa) +O Wh}? |. (10.47)\nj j\n\nThe reset and updates gates can individually \u201cignore\u201d parts of the state vector.\nThe update gates act like conditional leaky integrators that can linearly gate any\ndimension, thus choosing to copy it (at one extreme of the sigmoid) or completely\nignore it (at the other extreme) by replacing it by the new \u201ctarget state\u201d value\n(towards which the leaky integrator wants to converge). The reset gates control\nwhich parts of the state get used to compute the next target state, introducing an\nadditional nonlinear effect in the relationship between past state and future state.\n\nMany more variants around this theme can be designed. For example the\nreset gate (or forget gate) output could be shared across multiple hidden units.\nAlternately, the product of a global gate (covering a whole group of units, such as\nan entire layer) and a local gate (per unit) could be used to combine global control\nand local control. However, several investigations over architectural variations\nof the LSTM and GRU found no variant that would clearly beat both of these\nacross a wide range of tasks (Greff ef al., 2015; Jozefowicz et al., 2015). Greff\net al. (2015) found that a crucial ingredient is the forget gate, while Jozefowicz\net al. (2015) found that adding a bias of 1 to the LSTM forget gate, a practice\nadvocated by Gers et al. (2000), makes the LSTM as strong as the best of the\nexplored architectural variants.\n\n412\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\n10.11 Optimization for Long-Term Dependencies\n\nSection 8.2.5 and section 10.7 have described the vanishing and exploding gradient\nproblems that occur when optimizing RNNs over many time steps.\n\nAn interesting idea proposed by Martens and Sutskever (2011) is that second\nderivatives may vanish at the same time that first derivatives vanish. Second-order\noptimization algorithms may roughly be understood as dividing the first derivative\nby the second derivative (in higher dimension, multiplying the gradient by the\ninverse Hessian). If the second derivative shrinks at a similar rate to the first\nderivative, then the ratio of first and second derivatives may remain relatively\nconstant. Unfortunately, second-order methods have many drawbacks, including\nhigh computational cost, the need for a large minibatch, and a tendency to be\nattracted to saddle points. Martens and Sutskever (2011) found promising results\nusing second-order methods. Later, Sutskever ef al. (2013) found that simpler\nmethods such as Nesterov momentum with careful initialization could achieve\nsimilar results. See Sutskever (2012) for more detail. Both of these approaches\nhave largely been replaced by simply using SGD (even without momentum) applied\nto LSTMs. This is part of a continuing theme in machine learning that it is often\nmuch easier to design a model that is easy to optimize than it is to design a more\npowerful optimization algorithm.\n\n10.11.1 Clipping Gradients\n\nAs discussed in section 8.2.4, strongly nonlinear functions such as those computed\nby a recurrent net over many time steps tend to have derivatives that can be\neither very large or very small in magnitude. This is illustrated in figure 8.3 and\nfigure 10.17, in which we see that the objective function (as a function of the\nparameters) has a \u201clandscape\u201d in which one finds \u201ccliffs\u201d: wide and rather flat\nregions separated by tiny regions where the objective function changes quickly,\nforming a kind of cliff.\n\nThe difficulty that arises is that when the parameter gradient is very large, a\ngradient descent parameter update could throw the parameters very far, into a\nregion where the objective function is larger, undoing much of the work that had\nbeen done to reach the current solution. The gradient tells us the direction that\ncorresponds to the steepest descent within an infinitesimal region surrounding the\ncurrent parameters. Outside of this infinitesimal region, the cost function may\nbegin to curve back upwards. The update must be chosen to be small enough to\navoid traversing too much upward curvature. We typically use learning rates that\n\n413\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\ndecay slowly enough that consecutive steps have approximately the same learning\nrate. A step size that is appropriate for a relatively linear part of the landscape is\noften inappropriate and causes uphill motion if we enter a more curved part of the\nlandscape on the next step.\n\nWithout clipping With clipping\n= =\n= =\n5 S\nWw Ww\nb b\n\nFigure 10.17: Example of the effect of gradient clipping in a recurrent network with\ntwo parameters w and b. Gradient clipping can make gradient descent perform more\nreasonably in the vicinity of extremely steep cliffs. These steep cliffs commonly occur\nin recurrent networks near where a recurrent network behaves approximately linearly.\nThe cliff is exponentially steep in the number of time steps because the weight matrix\nis multiplied by itself once for each time step. (Left)Gradient descent without gradient\nclipping overshoots the bottom of this small ravine, then receives a very large gradient\nfrom the cliff face. The large gradient catastrophically propels the parameters outside the\naxes of the plot. (Right)Gradient descent with gradient clipping has a more moderate\nreaction to the cliff. While it does ascend the cliff face, the step size is restricted so that\nit cannot be propelled away from steep region near the solution. Figure adapted with\npermission from Pascanu ef al. (2013).\n\nA simple type of solution has been in use by practitioners for many years:\nclipping the gradient. There are different instances of this idea (Mikolov, 2012;\nPascanu et al., 2013), One option is to clip the parameter gradient from a minibatch\nelement-wise (Mikolov, 2012) just before the parameter update. Another is to clip\nthe norm ||g|| of the gradient g (Pascanu et al., 2013) just before the parameter\nupdate:\n\nif ||g|| > v (10.48)\n\ngu\ngo iigil (10.49)\n\n414\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nwhere v is the norm threshold and g is used to update parameters. Because the\ngradient of all the parameters (including different groups of parameters, such as\nweights and biases) is renormalized jointly with a single scaling factor, the latter\nmethod has the advantage that it guarantees that each step is still in the gradient\ndirection, but experiments suggest that both forms work similarly. Although\nthe parameter update has the same direction as the true gradient, with gradient\nnorm clipping, the parameter update vector norm is now bounded. This bounded\ngradient avoids performing a detrimental step when the gradient explodes. In\nfact, even simply taking a random step when the gradient magnitude is above\na threshold tends to work almost as well. If the explosion is so severe that the\ngradient is numerically Inf or Nan (considered infinite or not-a-number), then\na random step of size v can be taken and will typically move away from the\nnumerically unstable configuration. Clipping the gradient norm per-minibatch will\nnot change the direction of the gradient for an individual minibatch. However,\ntaking the average of the norm-clipped gradient from many minibatches is not\nequivalent to clipping the norm of the true gradient (the gradient formed from\nusing all examples). Examples that have large gradient norm, as well as examples\nthat appear in the same minibatch as such examples, will have their contribution\nto the final direction diminished. This stands in contrast to traditional minibatch\ngradient descent, where the true gradient direction is equal to the average over all\nminibatch gradients. Put another way, traditional stochastic gradient descent uses\nan unbiased estimate of the gradient, while gradient descent with norm clipping\nintroduces a heuristic bias that we know empirically to be useful. With element-\nwise clipping, the direction of the update is not aligned with the true gradient\nor the minibatch gradient, but it is still a descent direction. It has also been\nproposed (Graves, 2013) to clip the back-propagated gradient (with respect to\nhidden units) but no comparison has been published between these variants; we\nconjecture that all these methods behave similarly.\n\n10.11.2 Regularizing to Encourage Information Flow\n\nGradient clipping helps to deal with exploding gradients, but it does not help with\nvanishing gradients. To address vanishing gradients and better capture long-term\ndependencies, we discussed the idea of creating paths in the computational graph of\nthe unfolded recurrent architecture along which the product of gradients associated\nwith arcs is near 1. One approach to achieve this is with LSTMs and other self-\nloops and gating mechanisms, described above in section 10.10. Another idea is\nto regularize or constrain the parameters so as to encourage \u201cinformation flow.\u201d\nIn particular, we would like the gradient vector V;,) L being back-propagated to\n\n415\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nmaintain its magnitude, even if the loss function only penalizes the output at the\nend of the sequence. Formally, we want\n\ndh)\nto be as large as\nVaw L. (10.51)\n\nWith this objective, Pascanu et al. (2013) propose the following regularizer:\n\n()\n[IM nco\u00a3) see | |\nQ= 1 . 10.52\n>| ofl (10.52)\n\nComputing the gradient of this regularizer may appear difficult, but Pascanu\net al. (2013) propose an approximation in which we consider the back-propagated\nvectors V;,(:)L as if they were constants (for the purpose of this regularizer, so\nthat there is no need to back-propagate through them). The experiments with\nthis regularizer suggest that, if combined with the norm clipping heuristic (which\nhandles gradient explosion), the regularizer can considerably increase the span of\nthe dependencies that an RNN can learn. Because it keeps the RNN dynamics\non the edge of explosive gradients, the gradient clipping is particularly important.\nWithout gradient clipping, gradient explosion prevents learning from succeeding.\n\nA key weakness of this approach is that it is not as effective as the LSTM for\ntasks where data is abundant, such as language modeling.\n\n10.12 Explicit Memory\n\nIntelligence requires knowledge and acquiring knowledge can be done via learning,\nwhich has motivated the development of large-scale deep architectures. However,\nthere are different kinds of knowledge. Some knowledge can be implicit, sub-\nconscious, and difficult to verbalize\u2014such as how to walk, or how a dog looks\ndifferent from a cat. Other knowledge can be explicit, declarative, and relatively\nstraightforward to put into words\u2014every day commonsense knowledge, like \u201ca cat\nis a kind of animal,\u201d or very specific facts that you need to know to accomplish\nyour current goals, like \u201cthe meeting with the sales team is at 3:00 PM in room\n141.\u201d\n\nNeural networks excel at storing implicit knowledge. However, they struggle to\nmemorize facts. Stochastic gradient descent requires many presentations of the\n\n416\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nMemory cells\n\nReading\nWriting\nmechanism\n\nmechanism\n\nTask network,\ncontrolling the memory\n\nFigure 10.18: A schematic of an example of a network with an explicit memory, capturing\nsome of the key design elements of the neural Turing machine. In this diagram we\ndistinguish the \u201crepresentation\u201d part of the model (the \u201ctask network,\u201d here a recurrent\nnet in the bottom) from the \u201cmemory\u201d part of the model (the set of cells), which can\nstore facts. The task network learns to \u201ccontrol\u201d the memory, deciding where to read from\nand where to write to within the memory (through the reading and writing mechanisms,\nindicated by bold arrows pointing at the reading and writing addresses).\n\n417\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nsame input before it can be stored in a neural network parameters, and even then,\nthat input will not be stored especially precisely. Graves ef al. (2014b) hypothesized\nthat this is because neural networks lack the equivalent of the working memory\nsystem that allows human beings to explicitly hold and manipulate pieces of\ninformation that are relevant to achieving some goal. Such explicit memory\ncomponents would allow our systems not only to rapidly and \u201cintentionally\u201d store\nand retrieve specific facts but also to sequentially reason with them. The need\nfor neural networks that can process information in a sequence of steps, changing\nthe way the input is fed into the network at each step, has long been recognized\nas important for the ability to reason rather than to make automatic, intuitive\nresponses to the input (Hinton, 1990).\n\nTo resolve this difficulty, Weston et al. (2014) introduced memory networks\nthat include a set of memory cells that can be accessed via an addressing mecha-\nnism. Memory networks originally required a supervision signal instructing them\nhow to use their memory cells. Graves et al. (2014b) introduced the neural\nTuring machine, which is able to learn to read from and write arbitrary content\nto memory cells without explicit supervision about which actions to undertake,\nand allowed end-to-end training without this supervision signal, via the use of\na content-based soft attention mechanism (see Bahdanau et al. (2015) and sec-\ntion 12.4.5.1). This soft addressing mechanism has become standard with other\nrelated architectures emulating algorithmic mechanisms in a way that still allows\ngradient-based optimization (Sukhbaatar et al., 2015; Joulin and Mikolov, 2015;\nKumar et al., 2015; Vinyals et al., 2015a; Grefenstette et al., 2015).\n\nEach memory cell can be thought of as an extension of the memory cells in\nLSTMs and GRUs. The difference is that the network outputs an internal state\nthat chooses which cell to read from or write to, just as memory accesses in a\ndigital computer read from or write to a specific address.\n\nIt is difficult to optimize functions that produce exact, integer addresses. To\nalleviate this problem, NTMs actually read to or write from many memory cells\nsimultaneously. To read, they take a weighted average of many cells. To write, they\nmodify multiple cells by different amounts. The coefficients for these operations\nare chosen to be focused on a small number of cells, for example, by producing\nthem via a softmax function. Using these weights with non-zero derivatives allows\nthe functions controlling access to the memory to be optimized using gradient\ndescent. The gradient on these coefficients indicates whether each of them should\nbe increased or decreased, but the gradient will typically be large only for those\nmemory addresses receiving a large coefficient.\n\nThese memory cells are typically augmented to contain a vector, rather than\n\n418\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nthe single scalar stored by an LSTM or GRU memory cell. There are two reasons\nto increase the size of the memory cell. One reason is that we have increased the\ncost of accessing a memory cell. We pay the computational cost of producing a\ncoefficient for many cells, but we expect these coefficients to cluster around a small\nnumber of cells. By reading a vector value, rather than a scalar value, we can\noffset some of this cost. Another reason to use vector-valued memory cells is that\nthey allow for content-based addressing, where the weight used to read to or\nwrite from a cell is a function of that cell. Vector-valued cells allow us to retrieve a\ncomplete vector-valued memory if we are able to produce a pattern that matches\nsome but not all of its elements. This is analogous to the way that people can\nrecall the lyrics of a song based on a few words. We can think of a content-based\nread instruction as saying, \u201cRetrieve the lyrics of the song that has the chorus \u2018We\nall live in a yellow submarine.\u2019\u201d Content-based addressing is more useful when we\nmake the objects to be retrieved large\u2014if every letter of the song was stored in a\nseparate memory cell, we would not be able to find them this way. By comparison,\nlocation-based addressing is not allowed to refer to the content of the memory.\nWe can think of a location-based read instruction as saying \u201cRetrieve the lyrics of\nthe song in slot 347.\u201d Location-based addressing can often be a perfectly sensible\nmechanism even when the memory cells are small.\n\nIf the content of a memory cell is copied (not forgotten) at most time steps, then\nthe information it contains can be propagated forward in time and the gradients\npropagated backward in time without either vanishing or exploding.\n\nThe explicit memory approach is illustrated in figure 10.18, where we see that\na \u201ctask neural network\u201d is coupled with a memory. Although that task neural\nnetwork could be feedforward or recurrent, the overall system is a recurrent network.\nThe task network can choose to read from or write to specific memory addresses.\nExplicit memory seems to allow models to learn tasks that ordinary RNNs or LSTM\nRNNs cannot learn. One reason for this advantage may be because information and\ngradients can be propagated (forward in time or backwards in time, respectively)\nfor very long durations.\n\nAs an alternative to back-propagation through weighted averages of memory\ncells, we can interpret the memory addressing coefficients as probabilities and\nstochastically read just one cell (Zaremba and Sutskever, 2015). Optimizing models\nthat make discrete decisions requires specialized optimization algorithms, described\nin section 20.9.1. So far, training these stochastic architectures that make discrete\ndecisions remains harder than training deterministic algorithms that make soft\ndecisions.\n\nWhether it is soft (allowing back-propagation) or stochastic and hard, the\n\n419\n", "CHAPTER 10. SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS\n\nmechanism for choosing an address is in its form identical to the attention\nmechanism which had been previously introduced in the context of machine\ntranslation (Bahdanau e\u00a2 al., 2015) and discussed in section 12.4.5.1. The idea\nof attention mechanisms for neural networks was introduced even earlier, in the\ncontext of handwriting generation (Graves, 2013), with an attention mechanism\nthat was constrained to move only forward in time through the sequence. In\nthe case of machine translation and memory networks, at each step, the focus of\nattention can move to a completely different place, compared to the previous step.\n\nRecurrent neural networks provide a way to extend deep learning to sequential\ndata. They are the last major tool in our deep learning toolbox. Our discussion now\nmoves to how to choose and use these tools and how to apply them to real-world\ntasks.\n\n420\n", "Chapter 11\n\nPractical Methodology\n\nSuccessfully applying deep learning techniques requires more than just a good\nknowledge of what algorithms exist and the principles that explain how they\nwork. A good machine learning practitioner also needs to know how to choose an\nalgorithm for a particular application and how to monitor and respond to feedback\nobtained from experiments in order to improve a machine learning system. During\nday to day development of machine learning systems, practitioners need to decide\nwhether to gather more data, increase or decrease model capacity, add or remove\nregularizing features, improve the optimization of a model, improve approximate\ninference in a model, or debug the software implementation of the model. All of\nthese operations are at the very least time-consuming to try out, so it is important\nto be able to determine the right course of action rather than blindly guessing.\n\nMost of this book is about different machine learning models, training algo-\nrithms, and objective functions. This may give the impression that the most\nimportant ingredient to being a machine learning expert is knowing a wide variety\nof machine learning techniques and being good at different kinds of math. In prac-\ntice, one can usually do much better with a correct application of a commonplace\nalgorithm than by sloppily applying an obscure algorithm. Correct application of\nan algorithm depends on mastering some fairly simple methodology. Many of the\nrecommendations in this chapter are adapted from Ng (2015).\n\nWe recommend the following practical design process:\n\ne Determine your goals\u2014what error metric to use, and your target value for\nthis error metric. These goals and error metrics should be driven by the\nproblem that the application is intended to solve.\n\ne Establish a working end-to-end pipeline as soon as possible, including the\n\n421\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nestimation of the appropriate performance metrics.\n\ne Instrument the system well to determine bottlenecks in performance. Diag-\nnose which components are performing worse than expected and whether it\nis due to overfitting, underfitting, or a defect in the data or software.\n\ne Repeatedly make incremental changes such as gathering new data, adjusting\nhyperparameters, or changing algorithms, based on specific findings from\nyour instrumentation.\n\nAs a running example, we will use Street View address number transcription\nsystem (Goodfellow ef al., 2014d). The purpose of this application is to add\nbuildings to Google Maps. Street View cars photograph the buildings and record\nthe GPS coordinates associated with each photograph. A convolutional network\nrecognizes the address number in each photograph, allowing the Google Maps\ndatabase to add that address in the correct location. The story of how this\ncommercial application was developed gives an example of how to follow the design\nmethodology we advocate.\n\nWe now describe each of the steps in this process.\n\n11.1 Performance Metrics\n\nDetermining your goals, in terms of which error metric to use, is a necessary first\nstep because your error metric will guide all of your future actions. You should\nalso have an idea of what level of performance you desire.\n\nKeep in mind that for most applications, it is impossible to achieve absolute\nzero error. The Bayes error defines the minimum error rate that you can hope to\nachieve, even if you have infinite training data and can recover the true probability\ndistribution. This is because your input features may not contain complete\ninformation about the output variable, or because the system might be intrinsically\nstochastic. You will also be limited by having a finite amount of training data.\n\nThe amount of training data can be limited for a variety of reasons. When your\ngoal is to build the best possible real-world product or service, you can typically\ncollect more data but must determine the value of reducing error further and weigh\nthis against the cost of collecting more data. Data collection can require time,\nmoney, or human suffering (for example, if your data collection process involves\nperforming invasive medical tests). When your goal is to answer a scientific question\nabout which algorithm performs better on a fixed benchmark, the benchmark\n\n422\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nspecification usually determines the training set and you are not allowed to collect\nmore data.\n\nHow can one determine a reasonable level of performance to expect? Typically,\nin the academic setting, we have some estimate of the error rate that is attainable\nbased on previously published benchmark results. In the real-word setting, we\nhave some idea of the error rate that is necessary for an application to be safe,\ncost-effective, or appealing to consumers. Once you have determined your realistic\ndesired error rate, your design decisions will be guided by reaching this error rate.\n\nAnother important consideration besides the target value of the performance\nmetric is the choice of which metric to use. Several different performance metrics\nmay be used to measure the effectiveness of a complete application that includes\nmachine learning components. These performance metrics are usually different\nfrom the cost function used to train the model. As described in section 5.1.2, it is\ncommon to measure the accuracy, or equivalently, the error rate, of a system.\n\nHowever, many applications require more advanced metrics.\n\nSometimes it is much more costly to make one kind of a mistake than another.\nFor example, an e-mail spam detection system can make two kinds of mistakes:\nincorrectly classifying a legitimate message as spam, and incorrectly allowing a\nspam message to appear in the inbox. It is much worse to block a legitimate\nmessage than to allow a questionable message to pass through. Rather than\nmeasuring the error rate of a spam classifier, we may wish to measure some form\nof total cost, where the cost of blocking legitimate messages is higher than the cost\nof allowing spam messages.\n\nSometimes we wish to train a binary classifier that is intended to detect some\nrare event. For example, we might design a medical test for a rare disease. Suppose\nthat only one in every million people has this disease. We can easily achieve\n99.9999% accuracy on the detection task, by simply hard-coding the classifier\nto always report that the disease is absent. Clearly, accuracy is a poor way to\ncharacterize the performance of such a system. One way to solve this problem is\nto instead measure precision and recall. Precision is the fraction of detections\nreported by the model that were correct, while recall is the fraction of true events\nthat were detected. A detector that says no one has the disease would achieve\nperfect precision, but zero recall. A detector that says everyone has the disease\nwould achieve perfect recall, but precision equal to the percentage of people who\nhave the disease (0.0001% in our example of a disease that only one people in a\nmillion have). When using precision and recall, it is common to plot a PR curve,\nwith precision on the y-axis and recall on the x-axis. The classifier generates a score\nthat is higher if the event to be detected occurred. For example, a feedforward\n\n423\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nnetwork designed to detect a disease outputs 7 = P(y = 1 | x), estimating the\nprobability that a person whose medical results are described by features a has\nthe disease. We choose to report a detection whenever this score exceeds some\nthreshold. By varying the threshold, we can trade precision for recall. In many\ncases, we wish to summarize the performance of the classifier with a single number\nrather than a curve. To do so, we can convert precision p and recall r into an\nF-score given by\n2pr\noar\n\n(11.1)\n\nAnother option is to report the total area lying beneath the PR curve.\n\nIn some applications, it is possible for the machine learning system to refuse to\nmake a decision. This is useful when the machine learning algorithm can estimate\nhow confident it should be about a decision, especially if a wrong decision can\nbe harmful and if a human operator is able to occasionally take over. The Street\nView transcription system provides an example of this situation. The task is to\ntranscribe the address number from a photograph in order to associate the location\nwhere the photo was taken with the correct address in a map. Because the value\nof the map degrades considerably if the map is inaccurate, it is important to add\nan address only if the transcription is correct. If the machine learning system\nthinks that it is less likely than a human being to obtain the correct transcription,\nthen the best course of action is to allow a human to transcribe the photo instead.\nOf course, the machine learning system is only useful if it is able to dramatically\nreduce the amount of photos that the human operators must process. A natural\nperformance metric to use in this situation is coverage. Coverage is the fraction\nof examples for which the machine learning system is able to produce a response.\nIt is possible to trade coverage for accuracy. One can always obtain 100% accuracy\nby refusing to process any example, but this reduces the coverage to 0%. For the\nStreet View task, the goal for the project was to reach human-level transcription\naccuracy while maintaining 95% coverage. Human-level performance on this task\nis 98% accuracy.\n\nMany other metrics are possible. We can for example, measure click-through\nrates, collect user satisfaction surveys, and so on. Many specialized application\nareas have application-specific criteria as well.\n\nWhat is important is to determine which performance metric to improve ahead\nof time, then concentrate on improving this metric. Without clearly defined goals,\nit can be difficult to tell whether changes to a machine learning system make\nprogress or not.\n\n424\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\n11.2 Default Baseline Models\n\nAfter choosing performance metrics and goals, the next step in any practical\napplication is to establish a reasonable end-to-end system as soon as possible. In\nthis section, we provide recommendations for which algorithms to use as the first\nbaseline approach in various situations. Keep in mind that deep learning research\nprogresses quickly, so better default algorithms are likely to become available soon\nafter this writing.\n\nDepending on the complexity of your problem, you may even want to begin\nwithout using deep learning. If your problem has a chance of being solved by\njust choosing a few linear weights correctly, you may want to begin with a simple\nstatistical model like logistic regression.\n\nIf you know that your problem falls into an \u201cAI-complete\u201d category like object\nrecognition, speech recognition, machine translation, and so on, then you are likely\nto do well by beginning with an appropriate deep learning model.\n\nFirst, choose the general category of model based on the structure of your\ndata. If you want to perform supervised learning with fixed-size vectors as input,\nuse a feedforward network with fully connected layers. If the input has known\ntopological structure (for example, if the input is an image), use a convolutional\nnetwork. In these cases, you should begin by using some kind of piecewise linear\nunit (ReLUs or their generalizations like Leaky ReLUs, PreLus and maxout). If\nyour input or output is a sequence, use a gated recurrent net (LSTM or GRU).\n\nA reasonable choice of optimization algorithm is SGD with momentum with a\ndecaying learning rate (popular decay schemes that perform better or worse on\ndifferent problems include decaying linearly until reaching a fixed minimum learning\nrate, decaying exponentially, or decreasing the learning rate by a factor of 2-10\neach time validation error plateaus). Another very reasonable alternative is Adam.\nBatch normalization can have a dramatic effect on optimization performance,\nespecially for convolutional networks and networks with sigmoidal nonlinearities.\nWhile it is reasonable to omit batch normalization from the very first baseline, it\nshould be introduced quickly if optimization appears to be problematic.\n\nUnless your training set contains tens of millions of examples or more, you\nshould include some mild forms of regularization from the start. Early stopping\nshould be used almost universally. Dropout is an excellent regularizer that is easy\nto implement and compatible with many models and training algorithms. Batch\nnormalization also sometimes reduces generalization error and allows dropout to\nbe omitted, due to the noise in the estimate of the statistics used to normalize\neach variable.\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nIf your task is similar to another task that has been studied extensively, you\nwill probably do well by first copying the model and algorithm that is already\nknown to perform best on the previously studied task. You may even want to copy\na trained model from that task. For example, it is common to use the features\nfrom a convolutional network trained on ImageNet to solve other computer vision\ntasks (Girshick et al., 2015).\n\nA common question is whether to begin by using unsupervised learning, de-\nscribed further in part III. This is somewhat domain specific. Some domains, such\nas natural language processing, are known to benefit tremendously from unsuper-\nvised learning techniques such as learning unsupervised word embeddings. In other\ndomains, such as computer vision, current unsupervised learning techniques do\nnot bring a benefit, except in the semi-supervised setting, when the number of\nlabeled examples is very small (Kingma et al., 2014; Rasmus et al., 2015). If your\napplication is in a context where unsupervised learning is known to be important,\nthen include it in your first end-to-end baseline. Otherwise, only use unsupervised\nlearning in your first attempt if the task you want to solve is unsupervised. You\ncan always try adding unsupervised learning later if you observe that your initial\nbaseline overfits.\n\n11.3 Determining Whether to Gather More Data\n\nAfter the first end-to-end system is established, it is time to measure the perfor-\nmance of the algorithm and determine how to improve it. Many machine learning\nnovices are tempted to make improvements by trying out many different algorithms.\nHowever, it is often much better to gather more data than to improve the learning\nalgorithm.\n\nHow does one decide whether to gather more data? First, determine whether\nthe performance on the training set is acceptable. If performance on the training\nset is poor, the learning algorithm is not using the training data that is already\navailable, so there is no reason to gather more data. Instead, try increasing the\nsize of the model by adding more layers or adding more hidden units to each layer.\nAlso, try improving the learning algorithm, for example by tuning the learning\nrate hyperparameter. If large models and carefully tuned optimization algorithms\ndo not work well, then the problem might be the quality of the training data. The\ndata may be too noisy or may not include the right inputs needed to predict the\ndesired outputs. This suggests starting over, collecting cleaner data or collecting a\nricher set of features.\n\nIf the performance on the training set is acceptable, then measure the per-\n\n426\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nformance on a test set. If the performance on the test set is also acceptable,\nthen there is nothing left to be done. If test set performance is much worse than\ntraining set performance, then gathering more data is one of the most effective\nsolutions. The key considerations are the cost and feasibility of gathering more\ndata, the cost and feasibility of reducing the test error by other means, and the\namount of data that is expected to be necessary to improve test set performance\nsignificantly. At large internet companies with millions or billions of users, it is\nfeasible to gather large datasets, and the expense of doing so can be considerably\nless than the other alternatives, so the answer is almost always to gather more\ntraining data. For example, the development of large labeled datasets was one of\nthe most important factors in solving object recognition. In other contexts, such as\nmedical applications, it may be costly or infeasible to gather more data. A simple\nalternative to gathering more data is to reduce the size of the model or improve\nregularization, by adjusting hyperparameters such as weight decay coefficients,\nor by adding regularization strategies such as dropout. If you find that the gap\nbetween train and test performance is still unacceptable even after tuning the\nregularization hyperparameters, then gathering more data is advisable.\n\nWhen deciding whether to gather more data, it is also necessary to decide\nhow much to gather. It is helpful to plot curves showing the relationship between\ntraining set size and generalization error, like in figure 5.4. By extrapolating such\ncurves, one can predict how much additional training data would be needed to\nachieve a certain level of performance. Usually, adding a small fraction of the total\nnumber of examples will not have a noticeable impact on generalization error. It is\ntherefore recommended to experiment with training set sizes on a logarithmic scale,\nfor example doubling the number of examples between consecutive experiments.\n\nIf gathering much more data is not feasible, the only other way to improve\ngeneralization error is to improve the learning algorithm itself. This becomes the\ndomain of research and not the domain of advice for applied practitioners.\n\n11.4 Selecting Hyperparameters\n\nMost deep learning algorithms come with many hyperparameters that control many\naspects of the algorithm\u2019s behavior. Some of these hyperparameters affect the time\nand memory cost of running the algorithm. Some of these hyperparameters affect\nthe quality of the model recovered by the training process and its ability to infer\ncorrect results when deployed on new inputs.\n\nThere are two basic approaches to choosing these hyperparameters: choosing\nthem manually and choosing them automatically. Choosing the hyperparameters\n\n427\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nmanually requires understanding what the hyperparameters do and how machine\nlearning models achieve good generalization. Automatic hyperparameter selection\nalgorithms greatly reduce the need to understand these ideas, but they are often\nmuch more computationally costly.\n\n11.4.1 Manual Hyperparameter Tuning\n\nTo set hyperparameters manually, one must understand the relationship between\nhyperparameters, training error, generalization error and computational resources\n(memory and runtime). This means establishing a solid foundation on the fun-\ndamental ideas concerning the effective capacity of a learning algorithm from\nchapter 5.\n\nThe goal of manual hyperparameter search is usually to find the lowest general-\nization error subject to some runtime and memory budget. We do not discuss how\nto determine the runtime and memory impact of various hyperparameters here\nbecause this is highly platform-dependent.\n\nThe primary goal of manual hyperparameter search is to adjust the effective\ncapacity of the model to match the complexity of the task. Effective capacity\nis constrained by three factors: the representational capacity of the model, the\nability of the learning algorithm to successfully minimize the cost function used to\ntrain the model, and the degree to which the cost function and training procedure\nregularize the model. A model with more layers and more hidden units per layer has\nhigher representational capacity\u2014it is capable of representing more complicated\nfunctions. It can not necessarily actually learn all of these functions though, if\nthe training algorithm cannot discover that certain functions do a good job of\nminimizing the training cost, or if regularization terms such as weight decay forbid\nsome of these functions.\n\nThe generalization error typically follows a U-shaped curve when plotted as\na function of one of the hyperparameters, as in figure 5.3. At one extreme, the\nhyperparameter value corresponds to low capacity, and generalization error is high\nbecause training error is high. This is the underfitting regime. At the other extreme,\nthe hyperparameter value corresponds to high capacity, and the generalization\nerror is high because the gap between training and test error is high. Somewhere\nin the middle lies the optimal model capacity, which achieves the lowest possible\ngeneralization error, by adding a medium generalization gap to a medium amount\nof training error.\n\nFor some hyperparameters, overfitting occurs when the value of the hyper-\nparameter is large. The number of hidden units in a layer is one such example,\n\n428\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nbecause increasing the number of hidden units increases the capacity of the model.\nFor some hyperparameters, overfitting occurs when the value of the hyperparame-\nter is small. For example, the smallest allowable weight decay coefficient of zero\ncorresponds to the greatest effective capacity of the learning algorithm.\n\nNot every hyperparameter will be able to explore the entire U-shaped curve.\nMany hyperparameters are discrete, such as the number of units in a layer or the\nnumber of linear pieces in a maxout unit, so it is only possible to visit a few points\nalong the curve. Some hyperparameters are binary. Usually these hyperparameters\nare switches that specify whether or not to use some optional component of\nthe learning algorithm, such as a preprocessing step that normalizes the input\nfeatures by subtracting their mean and dividing by their standard deviation. These\nhyperparameters can only explore two points on the curve. Other hyperparameters\nhave some minimum or maximum value that prevents them from exploring some\npart of the curve. For example, the minimum weight decay coefficient is zero. This\nmeans that if the model is underfitting when weight decay is zero, we can not enter\nthe overfitting region by modifying the weight decay coefficient. In other words,\nsome hyperparameters can only subtract capacity.\n\nThe learning rate is perhaps the most important hyperparameter. If you\nhave time to tune only one hyperparameter, tune the learning rate. It con-\ntrols the effective capacity of the model in a more complicated way than other\nhyperparameters\u2014the effective capacity of the model is highest when the learning\nrate is correct for the optimization problem, not when the learning rate is especially\nlarge or especially small. The learning rate has a U-shaped curve for training error,\nillustrated in figure 11.1. When the learning rate is too large, gradient descent\ncan inadvertently increase rather than decrease the training error. In the idealized\nquadratic case, this occurs if the learning rate is at least twice as large as its\noptimal value (LeCun ef al., 1998a). When the learning rate is too small, training\nis not only slower, but may become permanently stuck with a high training error.\nThis effect is poorly understood (it would not happen for a convex loss function).\n\nTuning the parameters other than the learning rate requires monitoring both\ntraining and test error to diagnose whether your model is overfitting or underfitting,\nthen adjusting its capacity appropriately.\n\nIf your error on the training set is higher than your target error rate, you have\nno choice but to increase capacity. If you are not using regularization and you are\nconfident that your optimization algorithm is performing correctly, then you must\nadd more layers to your network or add more hidden units. Unfortunately, this\nincreases the computational costs associated with the model.\n\nIf your error on the test set is higher than than your target error rate, you can\n\n429\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\n0-? 10-1 10\u00b0\n\nLearning rate (logarithmic scale)\n\nTraining error\nrOrR NY wR MAN\n\nFigure 11.1: Typical relationship between the learning rate and the training error. Notice\nthe sharp rise in error when the learning is above an optimal value. This is for a fixed\ntraining time, as a smaller learning rate may sometimes only slow down training by a\nfactor proportional to the learning rate reduction. Generalization error can follow this\ncurve or be complicated by regularization effects arising out of having a too large or\ntoo small learning rates, since poor optimization can, to some degree, reduce or prevent\noverfitting, and even points with equivalent training error can have different generalization\nerror.\n\nnow take two kinds of actions. The test error is the sum of the training error and\nthe gap between training and test error. The optimal test error is found by trading\noff these quantities. Neural networks typically perform best when the training\nerror is very low (and thus, when capacity is high) and the test error is primarily\ndriven by the gap between train and test error. Your goal is to reduce this gap\nwithout increasing training error faster than the gap decreases. To reduce the gap,\nchange regularization hyperparameters to reduce effective model capacity, such as\nby adding dropout or weight decay. Usually the best performance comes from a\nlarge model that is regularized well, for example by using dropout.\n\nMost hyperparameters can be set by reasoning about whether they increase or\ndecrease model capacity. Some examples are included in Table 11.1.\n\nWhile manually tuning hyperparameters, do not lose sight of your end goal:\ngood performance on the test set. Adding regularization is only one way to achieve\nthis goal. As long as you have low training error, you can always reduce general-\nization error by collecting more training data. The brute force way to practically\nguarantee success is to continually increase model capacity and training set size\nuntil the task is solved. This approach does of course increase the computational\ncost of training and inference, so it is only feasible given appropriate resources. In\n\n430\n", "CHAPTER 11.\n\nPRACTICAL METHODOLOGY\n\nHyperparameter\n\nIncreases\ncapacity\nwhen...\n\nReason\n\nCaveats\n\nNumber of hid-\nden units\n\nincreased\n\nIncreasing the number of\nhidden units increases the\nrepresentational capacity\nof the model.\n\nIncreasing the number\nof hidden units increases\nboth the time and memory\ncost of essentially every op-\neration on the model.\n\nLearning rate\n\ntuned op-\ntimally\n\nAn improper learning rate,\nwhether too high or too\nlow, results in a model\nwith low effective capacity\ndue to optimization failure\n\nConvolution ker-\nnel width\n\nincreased\n\nIncreasing the kernel width\nincreases the number of pa-\nrameters in the model\n\nA wider kernel results in\na narrower output dimen-\nsion, reducing model ca-\npacity unless you use im-\nplicit zero padding to re-\nduce this effect. Wider\nkernels require more mem-\nory for parameter storage\nand increase runtime, but\na narrower output reduces\nmemory cost.\n\nImplicit\npadding\n\nZero\n\nincreased\n\nAdding implicit zeros be-\nfore convolution keeps the\nrepresentation size large\n\nIncreased time and mem-\nory cost of most opera-\ntions.\n\nWeight decay co-\nefficient\n\ndecreased\n\nDecreasing the weight de-\ncay coefficient frees the\nmodel parameters to be-\ncome larger\n\nDropout rate\n\ndecreased\n\nDropping units less often\ngives the units more oppor-\ntunities to \u201cconspire\u201d with\neach other to fit the train-\ning set\n\nTable 11.1: The effect of various hyperparameters on model capacity.\n\n431\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nprinciple, this approach could fail due to optimization difficulties, but for many\nproblems optimization does not seem to be a significant barrier, provided that the\nmodel is chosen appropriately.\n\n11.4.2 Automatic Hyperparameter Optimization Algorithms\n\nThe ideal learning algorithm just takes a dataset and outputs a function, without\nrequiring hand-tuning of hyperparameters. The popularity of several learning\nalgorithms such as logistic regression and SVMs stems in part from their ability to\nperform well with only one or two tuned hyperparameters. Neural networks can\nsometimes perform well with only a small number of tuned hyperparameters, but\noften benefit significantly from tuning of forty or more hyperparameters. Manual\nhyperparameter tuning can work very well when the user has a good starting point,\nsuch as one determined by others having worked on the same type of application\nand architecture, or when the user has months or years of experience in exploring\nhyperparameter values for neural networks applied to similar tasks. However,\nfor many applications, these starting points are not available. In these cases,\nautomated algorithms can find useful values of the hyperparameters.\n\nIf we think about the way in which the user of a learning algorithm searches for\ngood values of the hyperparameters, we realize that an optimization is taking place:\nwe are trying to find a value of the hyperparameters that optimizes an objective\nfunction, such as validation error, sometimes under constraints (such as a budget\nfor training time, memory or recognition time). It is therefore possible, in principle,\nto develop hyperparameter optimization algorithms that wrap a learning\nalgorithm and choose its hyperparameters, thus hiding the hyperparameters of the\nlearning algorithm from the user. Unfortunately, hyperparameter optimization\nalgorithms often have their own hyperparameters, such as the range of values that\nshould be explored for each of the learning algorithm\u2019s hyperparameters. However,\nthese secondary hyperparameters are usually easier to choose, in the sense that\nacceptable performance may be achieved on a wide range of tasks using the same\nsecondary hyperparameters for all tasks.\n\n11.4.3 Grid Search\n\nWhen there are three or fewer hyperparameters, the common practice is to perform\ngrid search. For each hyperparameter, the user selects a small finite set of\nvalues to explore. The grid search algorithm then trains a model for every joint\nspecification of hyperparameter values in the Cartesian product of the set of values\nfor each individual hyperparameter. The experiment that yields the best validation\n\n432\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nGrid Random\n\nFigure 11.2: Comparison of grid search and random search. For illustration purposes we\ndisplay two hyperparameters but we are typically interested in having many more. (Left)To\nperform grid search, we provide a set of values for each hyperparameter. The search\nalgorithm runs training for every joint hyperparameter setting in the cross product of these\nsets. (Right)To perform random search, we provide a probability distribution over joint\nhyperparameter configurations. Usually most of these hyperparameters are independent\nfrom each other. Common choices for the distribution over a single hyperparameter include\nuniform and log-uniform (to sample from a log-uniform distribution, take the exp of a\nsample from a uniform distribution). The search algorithm then randomly samples joint\nhyperparameter configurations and runs training with each of them. Both grid search\nand random search evaluate the validation set error and return the best configuration.\nThe figure illustrates the typical case where only some hyperparameters have a significant\ninfluence on the result. In this illustration, only the hyperparameter on the horizontal axis\nhas a significant effect. Grid search wastes an amount of computation that is exponential\nin the number of non-influential hyperparameters, while random search tests a unique\nvalue of every influential hyperparameter on nearly every trial. Figure reproduced with\npermission from Bergstra and Bengio (2012).\n\n433\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nset error is then chosen as having found the best hyperparameters. See the left of\nfigure 11.2 for an illustration of a grid of hyperparameter values.\n\nHow should the lists of values to search over be chosen? In the case of numerical\n(ordered) hyperparameters, the smallest and largest element of each list is chosen\nconservatively, based on prior experience with similar experiments, to make sure\nthat the optimal value is very likely to be in the selected range. Typically, a grid\nsearch involves picking values approximately on a logarithmic scale, e.g., a learning\nrate taken within the set {.1,.01, 107\u00b0, 10-4, 107\u00b0}, or a number of hidden units\ntaken with the set {50, 100, 200, 500, 1000, 2000}.\n\nGrid search usually performs best when it is performed repeatedly. For example,\nsuppose that we ran a grid search over a hyperparameter a using values of {\u20141, 0,1}.\nIf the best value found is 1, then we underestimated the range in which the best a\nlies and we should shift the grid and run another search with a in, for example,\n{1,2,3}. If we find that the best value of a is 0, then we may wish to refine our\nestimate by zooming in and running a grid search over {\u2014.1,0,.1}.\n\nThe obvious problem with grid search is that its computational cost grows\nexponentially with the number of hyperparameters. If there are m hyperparameters,\neach taking at most n values, then the number of training and evaluation trials\nrequired grows as O(n\u2122). The trials may be run in parallel and exploit loose\nparallelism (with almost no need for communication between different machines\ncarrying out the search) Unfortunately, due to the exponential cost of grid search,\neven parallelization may not provide a satisfactory size of search.\n\n11.4.4 Random Search\n\nFortunately, there is an alternative to grid search that is as simple to program, more\nconvenient to use, and converges much faster to good values of the hyperparameters:\nrandom search (Bergstra and Bengio, 2012).\n\nA random search proceeds as follows. First we define a marginal distribution\nfor each hyperparameter, e.g., a Bernoulli or multinoulli for binary or discrete\nhyperparameters, or a uniform distribution on a log-scale for positive real-valued\nhyperparameters. For example,\n\nlog learning rate ~ u(\u20141,-\u20145) (11.2)\nlearning rate = 1(!08_learming_rate, (11.3)\n\nwhere u(a, b) indicates a sample of the uniform distribution in the interval (a,b).\nSimilarly the log number _of hidden units may be sampled from wu(log(50),\nlog(2000)).\n\n434\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nUnlike in the case of a grid search, one should not discretize or bin the values\nof the hyperparameters. This allows one to explore a larger set of values, and does\nnot incur additional computational cost. In fact, as illustrated in figure 11.2, a\nrandom search can be exponentially more efficient than a grid search, when there\nare several hyperparameters that do not strongly affect the performance measure.\nThis is studied at length in Bergstra and Bengio (2012), who found that random\nsearch reduces the validation set error much faster than grid search, in terms of\nthe number of trials run by each method.\n\nAs with grid search, one may often want to run repeated versions of random\nsearch, to refine the search based on the results of the first run.\n\nThe main reason why random search finds good solutions faster than grid search\nis that there are no wasted experimental runs, unlike in the case of grid search,\nwhen two values of a hyperparameter (given values of the other hyperparameters)\nwould give the same result. In the case of grid search, the other hyperparameters\nwould have the same values for these two runs, whereas with random search, they\nwould usually have different values. Hence if the change between these two values\ndoes not marginally make much difference in terms of validation set error, grid\nsearch will unnecessarily repeat two equivalent experiments while random search\nwill still give two independent explorations of the other hyperparameters.\n\n11.4.5 Model-Based Hyperparameter Optimization\n\nThe search for good hyperparameters can be cast as an optimization problem.\nThe decision variables are the hyperparameters. The cost to be optimized is the\nvalidation set error that results from training using these hyperparameters. In\nsimplified settings where it is feasible to compute the gradient of some differentiable\nerror measure on the validation set with respect to the hyperparameters, we can\nsimply follow this gradient (Bengio et al., 1999; Bengio, 2000; Maclaurin et al.,\n2015). Unfortunately, in most practical settings, this gradient is unavailable, either\ndue to its high computation and memory cost, or due to hyperparameters having\nintrinsically non-differentiable interactions with the validation set error, as in the\ncase of discrete-valued hyperparameters.\n\nTo compensate for this lack of a gradient, we can build a model of the validation\nset error, then propose new hyperparameter guesses by performing optimization\nwithin this model. Most model-based algorithms for hyperparameter search use a\nBayesian regression model to estimate both the expected value of the validation set\nerror for each hyperparameter and the uncertainty around this expectation. Opti-\nmization thus involves a tradeoff between exploration (proposing hyperparameters\n\n435\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nfor which there is high uncertainty, which may lead to a large improvement but may\nalso perform poorly) and exploitation (proposing hyperparameters which the model\nis confident will perform as well as any hyperparameters it has seen so far\u2014usually\nhyperparameters that are very similar to ones it has seen before). Contemporary\napproaches to hyperparameter optimization include Spearmint (Snoek et al., 2012),\nTPE (Bergstra et al., 2011) and SMAC (Hutter et al., 2011).\n\nCurrently, we cannot unambiguously recommend Bayesian hyperparameter\noptimization as an established tool for achieving better deep learning results or\nfor obtaining those results with less effort. Bayesian hyperparameter optimization\nsometimes performs comparably to human experts, sometimes better, but fails\ncatastrophically on other problems. It may be worth trying to see if it works on\na particular problem but is not yet sufficiently mature or reliable. That being\nsaid, hyperparameter optimization is an important field of research that, while\noften driven primarily by the needs of deep learning, holds the potential to benefit\nnot only the entire field of machine learning but the discipline of engineering in\ngeneral.\n\nOne drawback common to most hyperparameter optimization algorithms with\nmore sophistication than random search is that they require for a training ex-\nperiment to run to completion before they are able to extract any information\nfrom the experiment. This is much less efficient, in the sense of how much infor-\nmation can be gleaned early in an experiment, than manual search by a human\npractitioner, since one can usually tell early on if some set of hyperparameters is\ncompletely pathological. Swersky ef al. (2014) have introduced an early version\nof an algorithm that maintains a set of multiple experiments. At various time\npoints, the hyperparameter optimization algorithm can choose to begin a new\nexperiment, to \u201cfreeze\u201d a running experiment that is not promising, or to \u201cthaw\u201d\nand resume an experiment that was earlier frozen but now appears promising given\nmore information.\n\n11.5 Debugging Strategies\n\nWhen a machine learning system performs poorly, it is usually difficult to tell\nwhether the poor performance is intrinsic to the algorithm itself or whether there\nis a bug in the implementation of the algorithm. Machine learning systems are\ndifficult to debug for a variety of reasons.\n\nIn most cases, we do not know a priori what the intended behavior of the\nalgorithm is. In fact, the entire point of using machine learning is that it will\ndiscover useful behavior that we were not able to specify ourselves. If we train a\n\n436\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nneural network on a new classification task and it achieves 5% test error, we have\nno straightforward way of knowing if this is the expected behavior or sub-optimal\nbehavior.\n\nA further difficulty is that most machine learning models have multiple parts\nthat are each adaptive. If one part is broken, the other parts can adapt and still\nachieve roughly acceptable performance. For example, suppose that we are training\na neural net with several layers parametrized by weights W and biases b. Suppose\nfurther that we have manually implemented the gradient descent rule for each\nparameter separately, and we made an error in the update for the biases:\n\nbe b-a (11.4)\n\nwhere ais the learning rate. This erroneous update does not use the gradient at\nall. It causes the biases to constantly become negative throughout learning, which\nis clearly not a correct implementation of any reasonable learning algorithm. The\nbug may not be apparent just from examining the output of the model though.\nDepending on the distribution of the input, the weights may be able to adapt to\ncompensate for the negative biases.\n\nMost debugging strategies for neural nets are designed to get around one or\nboth of these two difficulties. Either we design a case that is so simple that the\ncorrect behavior actually can be predicted, or we design a test that exercises one\npart of the neural net implementation in isolation.\n\nSome important debugging tests include:\n\nVisualize the model in action : When training a model to detect objects in\nimages, view some images with the detections proposed by the model displayed\nsuperimposed on the image. When training a generative model of speech, listen to\nsome of the speech samples it produces. This may seem obvious, but it is easy to\nfall into the practice of only looking at quantitative performance measurements\nlike accuracy or log-likelihood. Directly observing the machine learning model\nperforming its task will help to determine whether the quantitative performance\nnumbers it achieves seem reasonable. Evaluation bugs can be some of the most\ndevastating bugs because they can mislead you into believing your system is\nperforming well when it is not.\n\nVisualize the worst mistakes : Most models are able to output some sort of\nconfidence measure for the task they perform. For example, classifiers based on a\nsoftmax output layer assign a probability to each class. The probability assigned\nto the most likely class thus gives an estimate of the confidence the model has in\nits classification decision. Typically, maximum likelihood training results in these\nvalues being overestimates rather than accurate probabilities of correct prediction,\n\n437\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nbut they are somewhat useful in the sense that examples that are actually less\nlikely to be correctly labeled receive smaller probabilities under the model. By\nviewing the training set examples that are the hardest to model correctly, one can\noften discover problems with the way the data has been preprocessed or labeled.\nFor example, the Street View transcription system originally had a problem where\nthe address number detection system would crop the image too tightly and omit\nsome of the digits. The transcription network then assigned very low probability\nto the correct answer on these images. Sorting the images to identify the most\nconfident mistakes showed that there was a systematic problem with the cropping.\nModifying the detection system to crop much wider images resulted in much better\nperformance of the overall system, even though the transcription network needed\nto be able to process greater variation in the position and scale of the address\nnumbers.\n\nReasoning about software using train and test error: It is often difficult to\ndetermine whether the underlying software is correctly implemented. Some clues\ncan be obtained from the train and test error. If training error is low but test error\nis high, then it is likely that that the training procedure works correctly, and the\nmodel is overfitting for fundamental algorithmic reasons. An alternative possibility\nis that the test error is measured incorrectly due to a problem with saving the\nmodel after training then reloading it for test set evaluation, or if the test data\nwas prepared differently from the training data. If both train and test error are\nhigh, then it is difficult to determine whether there is a software defect or whether\nthe model is underfitting due to fundamental algorithmic reasons. This scenario\nrequires further tests, described next.\n\nFit a tiny dataset: If you have high error on the training set, determine whether\nit is due to genuine underfitting or due to a software defect. Usually even small\nmodels can be guaranteed to be able fit a sufficiently small dataset. For example,\na classification dataset with only one example can be fit just by setting the biases\nof the output layer correctly. Usually if you cannot train a classifier to correctly\nlabel a single example, an autoencoder to successfully reproduce a single example\nwith high fidelity, or a generative model to consistently emit samples resembling a\nsingle example, there is a software defect preventing successful optimization on the\ntraining set. This test can be extended to a small dataset with few examples.\n\nCompare back-propagated derivatives to numerical derivatives: If you are using\na software framework that requires you to implement your own gradient com-\nputations, or if you are adding a new operation to a differentiation library and\nmust define its bprop method, then a common source of error is implementing this\ngradient expression incorrectly. One way to verify that these derivatives are correct\n\n438\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nis to compare the derivatives computed by your implementation of automatic\ndifferentiation to the derivatives computed by a finite differences. Because\ncr+e)\u2014 f(x\nf'(x) = lim I aI ) (11.5)\n\n\u00ab0 \u20ac\n\nwe can approximate the derivative by using a small, finite e:\n\nfw) = fle)\n\nf(a) \u00ae& ; (11.6)\n\nWe can improve the accuracy of the approximation by using the centered differ-\n\nence: 1 j\nf(e+36) \u2014 f(a 36)\nfe) &\n\u20ac\nThe perturbation size \u20ac must chosen to be large enough to ensure that the pertur-\nbation is not rounded down too much by finite-precision numerical computations.\n\n(11.7)\n\nUsually, we will want to test the gradient or Jacobian of a vector-valued function\ng:R\u2122\u201d +R\u201d. Unfortunately, finite differencing only allows us to take a single\nderivative at a time. We can either run finite differencing mn times to evaluate all\nof the partial derivatives of g, or we can apply the test to a new function that uses\nrandom projections at both the input and output of g. For example, we can apply\nour test of the implementation of the derivatives to f(x) where f(x) = u\"g(vz),\nwhere u and v are randomly chosen vectors. Computing f\u2019(x) correctly requires\nbeing able to back-propagate through g correctly, yet is efficient to do with finite\ndifferences because f has only a single input and a single output. It is usually\na good idea to repeat this test for more than one value of u and v to reduce\nthe chance that the test overlooks mistakes that are orthogonal to the random\nprojection.\n\nIf one has access to numerical computation on complex numbers, then there is\na very efficient way to numerically estimate the gradient by using complex numbers\nas input to the function (Squire and Trapp, 1998). The method is based on the\nobservation that\n\nfle + ie) = fv) + ief\"(@) + 018) (118)\nreal( fla +ie)) = fle) +0(2), imag\") = pa) +0(e), (119)\n\nwhere i= /\u2014I. Unlike in the real-valued case above, there is no cancellation effect\ndue to taking the difference between the value of f at different points. This allows\nthe use of tiny values of \u20ac like \u20ac = 1071\u00b0\u00b0, which make the O(c?) error insignificant\nfor all practical purposes.\n\n439\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nMonitor histograms of activations and gradient: It is often useful to visualize\nstatistics of neural network activations and gradients, collected over a large amount\nof training iterations (maybe one epoch). The pre-activation value of hidden units\ncan tell us if the units saturate, or how often they do. For example, for rectifiers,\nhow often are they off? Are there units that are always off? For tanh units,\nthe average of the absolute value of the pre-activations tells us how saturated\nthe unit is. In a deep network where the propagated gradients quickly grow or\nquickly vanish, optimization may be hampered. Finally, it is useful to compare the\nmagnitude of parameter gradients to the magnitude of the parameters themselves.\nAs suggested by Bottou (2015), we would like the magnitude of parameter updates\nover a minibatch to represent something like 1% of the magnitude of the parameter,\nnot 50% or 0.001% (which would make the parameters move too slowly). It may\nbe that some groups of parameters are moving at a good pace while others are\nstalled. When the data is sparse (like in natural language), some parameters may\nbe very rarely updated, and this should be kept in mind when monitoring their\nevolution.\n\nFinally, many deep learning algorithms provide some sort of guarantee about\nthe results produced at each step. For example, in part III, we will see some approx-\nimate inference algorithms that work by using algebraic solutions to optimization\nproblems. Typically these can be debugged by testing each of their guarantees.\nSome guarantees that some optimization algorithms offer include that the objective\nfunction will never increase after one step of the algorithm, that the gradient with\nrespect to some subset of variables will be zero after each step of the algorithm,\nand that the gradient with respect to all variables will be zero at convergence.\nUsually due to rounding error, these conditions will not hold exactly in a digital\ncomputer, so the debugging test should include some tolerance parameter.\n\n11.6 Example: Multi-Digit Number Recognition\n\nTo provide an end-to-end description of how to apply our design methodology\nin practice, we present a brief account of the Street View transcription system,\nfrom the point of view of designing the deep learning components. Obviously,\nmany other components of the complete system, such as the Street View cars, the\ndatabase infrastructure, and so on, were of paramount importance.\n\nFrom the point of view of the machine learning task, the process began with\ndata collection. The cars collected the raw data and human operators provided\nlabels. The transcription task was preceded by a significant amount of dataset\ncuration, including using other machine learning techniques to detect the house\n\n440\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nnumbers prior to transcribing them.\n\nThe transcription project began with a choice of performance metrics and\ndesired values for these metrics. An important general principle is to tailor the\nchoice of metric to the business goals for the project. Because maps are only useful\nif they have high accuracy, it was important to set a high accuracy requirement\nfor this project. Specifically, the goal was to obtain human-level, 98% accuracy.\nThis level of accuracy may not always be feasible to obtain. In order to reach\nthis level of accuracy, the Street View transcription system sacrifices coverage.\nCoverage thus became the main performance metric optimized during the project,\nwith accuracy held at 98%. As the convolutional network improved, it became\npossible to reduce the confidence threshold below which the network refuses to\ntranscribe the input, eventually exceeding the goal of 95% coverage.\n\nAfter choosing quantitative goals, the next step in our recommended methodol-\nogy is to rapidly establish a sensible baseline system. For vision tasks, this means a\nconvolutional network with rectified linear units. The transcription project began\nwith such a model. At the time, it was not common for a convolutional network\nto output a sequence of predictions. In order to begin with the simplest possible\nbaseline, the first implementation of the output layer of the model consisted of n\ndifferent softmax units to predict a sequence of n characters. These softmax units\nwere trained exactly the same as if the task were classification, with each softmax\nunit trained independently.\n\nOur recommended methodology is to iteratively refine the baseline and test\nwhether each change makes an improvement. The first change to the Street View\ntranscription system was motivated by a theoretical understanding of the coverage\nmetric and the structure of the data. Specifically, the network refuses to classify\nan input \u00ab whenever the probability of the output sequence p(y | x) < t for\nsome threshold t. Initially, the definition of p(y | x) was ad-hoc, based on simply\nmultiplying all of the softmax outputs together. This motivated the development\nof a specialized output layer and cost function that actually computed a principled\nlog-likelihood. This approach allowed the example rejection mechanism to function\nmuch more effectively.\n\nAt this point, coverage was still below 90%, yet there were no obvious theoretical\nproblems with the approach. Our methodology therefore suggests to instrument\nthe train and test set performance in order to determine whether the problem\nis underfitting or overfitting. In this case, train and test set error were nearly\nidentical. Indeed, the main reason this project proceeded so smoothly was the\navailability of a dataset with tens of millions of labeled examples. Because train\nand test set error were so similar, this suggested that the problem was either due\n\n441\n", "CHAPTER 11. PRACTICAL METHODOLOGY\n\nto underfitting or due to a problem with the training data. One of the debugging\nstrategies we recommend is to visualize the model\u2019s worst errors. In this case, that\nmeant visualizing the incorrect training set transcriptions that the model gave the\nhighest confidence. These proved to mostly consist of examples where the input\nimage had been cropped too tightly, with some of the digits of the address being\nremoved by the cropping operation. For example, a photo of an address \u201c1849\u201d\nmight be cropped too tightly, with only the \u201c849\u201d remaining visible. This problem\ncould have been resolved by spending weeks improving the accuracy of the address\nnumber detection system responsible for determining the cropping regions. Instead,\nthe team took a much more practical decision, to simply expand the width of the\ncrop region to be systematically wider than the address number detection system\npredicted. This single change added ten percentage points to the transcription\nsystem\u2019s coverage.\n\nFinally, the last few percentage points of performance came from adjusting\nhyperparameters. This mostly consisted of making the model larger while main-\ntaining some restrictions on its computational cost. Because train and test error\nremained roughly equal, it was always clear that any performance deficits were due\nto underfitting, as well as due to a few remaining problems with the dataset itself.\n\nOverall, the transcription project was a great success, and allowed hundreds of\nmillions of addresses to be transcribed both faster and at lower cost than would\nhave been possible via human effort.\n\nWe hope that the design principles described in this chapter will lead to many\nother similar successes.\n\n442\n", "Chapter 12\n\nApplications\n\nIn this chapter, we describe how to use deep learning to solve applications in com-\nputer vision, speech recognition, natural language processing, and other application\nareas of commercial interest. We begin by discussing the large scale neural network\nimplementations required for most serious AI applications. Next, we review several\nspecific application areas that deep learning has been used to solve. While one\ngoal of deep learning is to design algorithms that are capable of solving a broad\nvariety of tasks, so far some degree of specialization is needed. For example, vision\ntasks require processing a large number of input features (pixels) per example.\nLanguage tasks require modeling a large number of possible values (words in the\nvocabulary) per input feature.\n\n12.1 Large-Scale Deep Learning\n\nDeep learning is based on the philosophy of connectionism: while an individual\nbiological neuron or an individual feature in a machine learning model is not\nintelligent, a large population of these neurons or features acting together can\nexhibit intelligent behavior. It truly is important to emphasize the fact that the\nnumber of neurons must be large. One of the key factors responsible for the\nimprovement in neural network\u2019s accuracy and the improvement of the complexity\nof tasks they can solve between the 1980s and today is the dramatic increase in\nthe size of the networks we use. As we saw in section 1.2.3, network sizes have\ngrown exponentially for the past three decades, yet artificial neural networks are\nonly as large as the nervous systems of insects.\n\nBecause the size of neural networks is of paramount importance, deep learning\n\n443\n", "CHAPTER 12. APPLICATIONS\n\nrequires high performance hardware and software infrastructure.\n\n12.1.1 Fast CPU Implementations\n\nTraditionally, neural networks were trained using the CPU of a single machine.\nToday, this approach is generally considered insufficient. We now mostly use GPU\ncomputing or the CPUs of many machines networked together. Before moving to\nthese expensive setups, researchers worked hard to demonstrate that CPUs could\nnot manage the high computational workload required by neural networks.\n\nA description of how to implement efficient numerical CPU code is beyond\nthe scope of this book, but we emphasize here that careful implementation for\nspecific CPU families can yield large improvements. For example, in 2011, the best\nCPUs available could run neural network workloads faster when using fixed-point\narithmetic rather than floating-point arithmetic. By creating a carefully tuned fixed-\npoint implementation, Vanhoucke et al. (2011) obtained a threefold speedup over\na strong floating-point system. Each new model of CPU has different performance\ncharacteristics, so sometimes floating-point implementations can be faster too.\nThe important principle is that careful specialization of numerical computation\nroutines can yield a large payoff. Other strategies, besides choosing whether to use\nfixed or floating point, include optimizing data structures to avoid cache misses\nand using vector instructions. Many machine learning researchers neglect these\nimplementation details, but when the performance of an implementation restricts\nthe size of the model, the accuracy of the model suffers.\n\n12.1.2 GPU Implementations\n\nMost modern neural network implementations are based on graphics processing\nunits. Graphics processing units (GPUs) are specialized hardware components\nthat were originally developed for graphics applications. The consumer market for\nvideo gaming systems spurred development of graphics processing hardware. The\nperformance characteristics needed for good video gaming systems turn out to be\nbeneficial for neural networks as well.\n\nVideo game rendering requires performing many operations in parallel quickly.\nModels of characters and environments are specified in terms of lists of 3-D\ncoordinates of vertices. Graphics cards must perform matrix multiplication and\ndivision on many vertices in parallel to convert these 3-D coordinates into 2-D\non-screen coordinates. The graphics card must then perform many computations\nat each pixel in parallel to determine the color of each pixel. In both cases, the\n\n444\n", "CHAPTER 12. APPLICATIONS\n\ncomputations are fairly simple and do not involve much branching compared to\nthe computational workload that a CPU usually encounters. For example, each\nvertex in the same rigid object will be multiplied by the same matrix; there is no\nneed to evaluate an if statement per-vertex to determine which matrix to multiply\nby. The computations are also entirely independent of each other, and thus may\nbe parallelized easily. The computations also involve processing massive buffers of\nmemory, containing bitmaps describing the texture (color pattern) of each object\nto be rendered. Together, this results in graphics cards having been designed to\nhave a high degree of parallelism and high memory bandwidth, at the cost of\nhaving a lower clock speed and less branching capability relative to traditional\n\nCPUs.\n\nNeural network algorithms require the same performance characteristics as the\nreal-time graphics algorithms described above. Neural networks usually involve\nlarge and numerous buffers of parameters, activation values, and gradient values,\neach of which must be completely updated during every step of training. These\nbuffers are large enough to fall outside the cache of a traditional desktop computer\nso the memory bandwidth of the system often becomes the rate limiting factor.\nGPUs offer a compelling advantage over CPUs due to their high memory bandwidth.\nNeural network training algorithms typically do not involve much branching or\nsophisticated control, so they are appropriate for GPU hardware. Since neural\nnetworks can be divided into multiple individual \u201cneurons\u201d that can be processed\nindependently from the other neurons in the same layer, neural networks easily\nbenefit from the parallelism of GPU computing.\n\nGPU hardware was originally so specialized that it could only be used for\ngraphics tasks. Over time, GPU hardware became more flexible, allowing custom\nsubroutines to be used to transform the coordinates of vertices or assign colors to\npixels. In principle, there was no requirement that these pixel values actually be\nbased on a rendering task. These GPUs could be used for scientific computing by\nwriting the output of a computation to a buffer of pixel values. Steinkrau ef al.\n(2005) implemented a two-layer fully connected neural network on a GPU and\nreported a threefold speedup over their CPU-based baseline. Shortly thereafter,\nChellapilla e\u00a2 al. (2006) demonstrated that the same technique could be used to\naccelerate supervised convolutional networks.\n\nThe popularity of graphics cards for neural network training exploded after\nthe advent of general purpose GPUs. These GP-GPUs could execute arbitrary\ncode, not just rendering subroutines. NVIDIA\u2019s CUDA programming language\nprovided a way to write this arbitrary code in a C-like language. With their\nrelatively convenient programming model, massive parallelism, and high memory\n\n445\n", "CHAPTER 12. APPLICATIONS\n\nbandwidth, GP-GPUs now offer an ideal platform for neural network programming.\nThis platform was rapidly adopted by deep learning researchers soon after it became\navailable (Raina et al., 2009; Ciresan et al., 2010).\n\nWriting efficient code for GP-GPUs remains a difficult task best left to spe-\ncialists. The techniques required to obtain good performance on GPU are very\ndifferent from those used on CPU. For example, good CPU-based code is usually\ndesigned to read information from the cache as much as possible. On GPU, most\nwritable memory locations are not cached, so it can actually be faster to compute\nthe same value twice, rather than compute it once and read it back from memory.\nGPU code is also inherently multi-threaded and the different threads must be\ncoordinated with each other carefully. For example, memory operations are faster if\nthey can be coalesced. Coalesced reads or writes occur when several threads can\neach read or write a value that they need simultaneously, as part of a single memory\ntransaction. Different models of GPUs are able to coalesce different kinds of read\nor write patterns. Typically, memory operations are easier to coalesce if among n\nthreads, thread i accesses byte i+ 7 of memory, and 7 is a multiple of some power\nof 2. The exact specifications differ between models of GPU. Another common\nconsideration for GPUs is making sure that each thread in a group executes the\nsame instruction simultaneously. This means that branching can be difficult on\nGPU. Threads are divided into small groups called warps. Each thread in a warp\nexecutes the same instruction during each cycle, so if different threads within the\nsame warp need to execute different code paths, these different code paths must\nbe traversed sequentially rather than in parallel.\n\nDue to the difficulty of writing high performance GPU code, researchers should\nstructure their workflow to avoid needing to write new GPU code in order to test\nnew models or algorithms. Typically, one can do this by building a software library\nof high performance operations like convolution and matrix multiplication, then\nspecifying models in terms of calls to this library of operations. For example, the\nmachine learning library Pylearn2 (Goodfellow et al., 2013c) specifies all of its\nmachine learning algorithms in terms of calls to Theano (Bergstra et al., 2010;\nBastien et al., 2012) and cuda-convnet (Krizhevsky, 2010), which provide these\nhigh-performance operations. This factored approach can also ease support for\nmultiple kinds of hardware. For example, the same Theano program can run on\neither CPU or GPU, without needing to change any of the calls to Theano itself.\nOther libraries like TensorFlow (Abadi et al., 2015) and Torch (Collobert et al.,\n2011b) provide similar features.\n\n446\n", "CHAPTER 12. APPLICATIONS\n\n12.1.3 Large-Scale Distributed Implementations\n\nIn many cases, the computational resources available on a single machine are\ninsufficient. We therefore want to distribute the workload of training and inference\nacross many machines.\n\nDistributing inference is simple, because each input example we want to process\ncan be run by a separate machine. This is known as data parallelism.\n\nIt is also possible to get model parallelism, where multiple machines work\ntogether on a single datapoint, with each machine running a different part of the\nmodel. This is feasible for both inference and training.\n\nData parallelism during training is somewhat harder. We can increase the size\nof the minibatch used for a single SGD step, but usually we get less than linear\nreturns in terms of optimization performance. It would be better to allow multiple\nmachines to compute multiple gradient descent steps in parallel. Unfortunately,\nthe standard definition of gradient descent is as a completely sequential algorithm:\nthe gradient at step t is a function of the parameters produced by step \u00a2 \u2014 1.\n\nThis can be solved using asynchronous stochastic gradient descent (Ben-\ngio et al., 2001; Recht et al., 2011). In this approach, several processor cores share\nthe memory representing the parameters. Each core reads parameters without a\nlock, then computes a gradient, then increments the parameters without a lock.\nThis reduces the average amount of improvement that each gradient descent step\nyields, because some of the cores overwrite each other\u2019s progress, but the increased\nrate of production of steps causes the learning process to be faster overall. Dean\net al. (2012) pioneered the multi-machine implementation of this lock-free approach\nto gradient descent, where the parameters are managed by a parameter server\nrather than stored in shared memory. Distributed asynchronous gradient descent\nremains the primary strategy for training large deep networks and is used by\nmost major deep learning groups in industry (Chilimbi et a/., 2014; Wu et al.,\n2015). Academic deep learning researchers typically cannot afford the same scale\nof distributed learning systems but some research has focused on how to build\ndistributed networks with relatively low-cost hardware available in the university\nsetting (Coates et al., 2013).\n\n12.1.4 Model Compression\n\nIn many commercial applications, it is much more important that the time and\nmemory cost of running inference in a machine learning model be low than that\nthe time and memory cost of training be low. For applications that do not require\n\n447\n", "CHAPTER 12. APPLICATIONS\n\npersonalization, it is possible to train a model once, then deploy it to be used by\nbillions of users. In many cases, the end user is more resource-constrained than\nthe developer. For example, one might train a speech recognition network with a\npowerful computer cluster, then deploy it on mobile phones.\n\nA key strategy for reducing the cost of inference is model compression (Bu-\ncilua et al., 2006). The basic idea of model compression is to replace the original,\nexpensive model with a smaller model that requires less memory and runtime to\nstore and evaluate.\n\nModel compression is applicable when the size of the original model is driven\nprimarily by a need to prevent overfitting. In most cases, the model with the\nlowest generalization error is an ensemble of several independently trained models.\nEvaluating all m ensemble members is expensive. Sometimes, even a single model\ngeneralizes better if it is large (for example, if it is regularized with dropout).\n\nThese large models learn some function f(a), but do so using many more\nparameters than are necessary for the task. Their size is necessary only due to\nthe limited number of training examples. As soon as we have fit this function\nf(x), we can generate a training set containing infinitely many examples, simply\nby applying f to randomly sampled points a. We then train the new, smaller,\nmodel to match f(a) on these points. In order to most efficiently use the capacity\nof the new, small model, it is best to sample the new a points from a distribution\nresembling the actual test inputs that will be supplied to the model later. This can\nbe done by corrupting training examples or by drawing points from a generative\nmodel trained on the original training set.\n\nAlternatively, one can train the smaller model only on the original training\npoints, but train it to copy other features of the model, such as its posterior\ndistribution over the incorrect classes (Hinton et al., 2014, 2015).\n\n12.1.5 Dynamic Structure\n\nOne strategy for accelerating data processing systems in general is to build systems\nthat have dynamic structure in the graph describing the computation needed\nto process an input. Data processing systems can dynamically determine which\nsubset of many neural networks should be run on a given input. Individual neural\nnetworks can also exhibit dynamic structure internally by determining which subset\nof features (hidden units) to compute given information from the input. This\nform of dynamic structure inside neural networks is sometimes called conditional\ncomputation (Bengio, 2013; Bengio et al., 2013b). Since many components of\nthe architecture may be relevant only for a small amount of possible inputs, the\n\n448\n", "CHAPTER 12. APPLICATIONS\n\nsystem can run faster by computing these features only when they are needed.\n\nDynamic structure of computations is a basic computer science principle applied\ngenerally throughout the software engineering discipline. The simplest versions\nof dynamic structure applied to neural networks are based on determining which\nsubset of some group of neural networks (or other machine learning models) should\nbe applied to a particular input.\n\nA venerable strategy for accelerating inference in a classifier is to use a cascade\nof classifiers. The cascade strategy may be applied when the goal is to detect the\npresence of a rare object (or event). To know for sure that the object is present,\nwe must use a sophisticated classifier with high capacity, that is expensive to run.\nHowever, because the object is rare, we can usually use much less computation\nto reject inputs as not containing the object. In these situations, we can train\na sequence of classifiers. The first classifiers in the sequence have low capacity,\nand are trained to have high recall. In other words, they are trained to make sure\nwe do not wrongly reject an input when the object is present. The final classifier\nis trained to have high precision. At test time, we run inference by running the\nclassifiers in a sequence, abandoning any example as soon as any one element in\nthe cascade rejects it. Overall, this allows us to verify the presence of objects with\nhigh confidence, using a high capacity model, but does not force us to pay the cost\nof full inference for every example. There are two different ways that the cascade\ncan achieve high capacity. One way is to make the later members of the cascade\nindividually have high capacity. In this case, the system as a whole obviously has\nhigh capacity, because some of its individual members do. It is also possible to\nmake a cascade in which every individual model has low capacity but the system\nas a whole has high capacity due to the combination of many small models. Viola\nand Jones (2001) used a cascade of boosted decision trees to implement a fast and\nrobust face detector suitable for use in handheld digital cameras. Their classifier\nlocalizes a face using essentially a sliding window approach in which many windows\nare examined and rejected if they do not contain faces. Another version of cascades\nuses the earlier models to implement a sort of hard attention mechanism: the\nearly members of the cascade localize an object and later members of the cascade\nperform further processing given the location of the object. For example, Google\ntranscribes address numbers from Street View imagery using a two-step cascade\nthat first locates the address number with one machine learning model and then\ntranscribes it with another (Goodfellow e\u00a2 al., 2014d).\n\nDecision trees themselves are an example of dynamic structure, because each\nnode in the tree determines which of its subtrees should be evaluated for each input.\nA simple way to accomplish the union of deep learning and dynamic structure\n\n449\n", "CHAPTER 12. APPLICATIONS\n\nis to train a decision tree in which each node uses a neural network to make the\nsplitting decision (Guo and Gelfand, 1992), though this has typically not been\ndone with the primary goal of accelerating inference computations.\n\nIn the same spirit, one can use a neural network, called the gater to select\nwhich one out of several expert networks will be used to compute the output,\ngiven the current input. The first version of this idea is called the mixture of\nexperts (Nowlan, 1990; Jacobs et al., 1991), in which the gater outputs a set\nof probabilities or weights (obtained via a softmax nonlinearity), one per expert,\nand the final output is obtained by the weighted combination of the output of\nthe experts. In that case, the use of the gater does not offer a reduction in\ncomputational cost, but if a single expert is chosen by the gater for each example,\nwe obtain the hard mixture of experts (Collobert ef al., 2001, 2002), which\ncan considerably accelerate training and inference time. This strategy works well\nwhen the number of gating decisions is small because it is not combinatorial. But\nwhen we want to select different subsets of units or parameters, it is not possible\nto use a \u201csoft switch\u201d because it requires enumerating (and computing outputs for)\nall the gater configurations. To deal with this problem, several approaches have\nbeen explored to train combinatorial gaters. Bengio e/ al. (2013b) experiment with\nseveral estimators of the gradient on the gating probabilities, while Bacon ef al.\n(2015) and Bengio e\u00a2 al. (2015a) use reinforcement learning techniques (policy\ngradient) to learn a form of conditional dropout on blocks of hidden units and get\nan actual reduction in computational cost without impacting negatively on the\nquality of the approximation.\n\nAnother kind of dynamic structure is a switch, where a hidden unit can\nreceive input from different units depending on the context. This dynamic routing\napproach can be interpreted as an attention mechanism (Olshausen et al., 1993).\nSo far, the use of a hard switch has not proven effective on large-scale applications.\nContemporary approaches instead use a weighted average over many possible inputs,\nand thus do not achieve all of the possible computational benefits of dynamic\nstructure. Contemporary attention mechanisms are described in section 12.4.5.1.\n\nOne major obstacle to using dynamically structured systems is the decreased\ndegree of parallelism that results from the system following different code branches\nfor different inputs. This means that few operations in the network can be described\nas matrix multiplication or batch convolution on a minibatch of examples. We\ncan write more specialized sub-routines that convolve each example with different\nkernels or multiply each row of a design matrix by a different set of columns\nof weights. Unfortunately, these more specialized subroutines are difficult to\nimplement efficiently. CPU implementations will be slow due to the lack of cache\n", "CHAPTER 12. APPLICATIONS\n\ncoherence and GPU implementations will be slow due to the lack of coalesced\nmemory transactions and the need to serialize warps when members of a warp take\ndifferent branches. In some cases, these issues can be mitigated by partitioning the\nexamples into groups that all take the same branch, and processing these groups\nof examples simultaneously. This can be an acceptable strategy for minimizing\nthe time required to process a fixed amount of examples in an offline setting. In\na real-time setting where examples must be processed continuously, partitioning\nthe workload can result in load-balancing issues. For example, if we assign one\nmachine to process the first step in a cascade and another machine to process\nthe last step in a cascade, then the first will tend to be overloaded and the last\nwill tend to be underloaded. Similar issues arise if each machine is assigned to\nimplement different nodes of a neural decision tree.\n\n12.1.6 Specialized Hardware Implementations of Deep Networks\n\nSince the early days of neural networks research, hardware designers have worked\non specialized hardware implementations that could speed up training and/or\ninference of neural network algorithms. See early and more recent reviews of\nspecialized hardware for deep networks (Lindsey and Lindblad, 1994; Beiu et al.,\n2003; Misra and Saha, 2010).\n\nDifferent forms of specialized hardware (Graf and Jackel, 1989; Mead and\nIsmail, 2012; Kim et al., 2009; Pham et al., 2012; Chen et al., 2014a,b) have\nbeen developed over the last decades, either with ASICs (application-specific inte-\ngrated circuit), either with digital (based on binary representations of numbers),\nanalog (Graf and Jackel, 1989; Mead and Ismail, 2012) (based on physical imple-\nmentations of continuous values as voltages or currents) or hybrid implementations\n(combining digital and analog components). In recent years more flexible FPGA\n(field programmable gated array) implementations (where the particulars of the\ncircuit can be written on the chip after it has been built) have been developed.\n\nThough software implementations on general-purpose processing units (CPUs\nand GPUs) typically use 32 or 64 bits of precision to represent floating point\nnumbers, it has long been known that it was possible to use less precision, at\nleast at inference time (Holt and Baker, 1991; Holi and Hwang, 1993; Presley\nand Haggard, 1994; Simard and Graf, 1994; Wawrzynek et al., 1996; Savich et al.,\n2007). This has become a more pressing issue in recent years as deep learning\nhas gained in popularity in industrial products, and as the great impact of faster\nhardware was demonstrated with GPUs. Another factor that motivates current\nresearch on specialized hardware for deep networks is that the rate of progress of\na single CPU or GPU core has slowed down, and most recent improvements in\n\n451\n", "CHAPTER 12. APPLICATIONS\n\ncomputing speed have come from parallelization across cores (either in CPUs or\nGPUs). This is very different from the situation of the 1990s (the previous neural\nnetwork era) where the hardware implementations of neural networks (which might\ntake two years from inception to availability of a chip) could not keep up with\nthe rapid progress and low prices of general-purpose CPUs. Building specialized\nhardware is thus a way to push the envelope further, at a time when new hardware\ndesigns are being developed for low-power devices such as phones, aiming for\ngeneral-public applications of deep learning (e.g., with speech, computer vision or\nnatural language).\n\nRecent work on low-precision implementations of backprop-based neural nets\n(Vanhoucke et al., 2011; Courbariaux et al., 2015; Gupta et al., 2015) suggests\nthat between 8 and 16 bits of precision can suffice for using or training deep\nneural networks with back-propagation. What is clear is that more precision is\nrequired during training than at inference time, and that some forms of dynamic\nfixed point representation of numbers can be used to reduce how many bits are\nrequired per number. Traditional fixed point numbers are restricted to a fixed\nrange (which corresponds to a given exponent in a floating point representation).\nDynamic fixed point representations share that range among a set of numbers\n(such as all the weights in one layer). Using fixed point rather than floating point\nrepresentations and using less bits per number reduces the hardware surface area,\npower requirements and computing time needed for performing multiplications,\nand multiplications are the most demanding of the operations needed to use or\ntrain a modern deep network with backprop.\n\n12.2 Computer Vision\n\nComputer vision has traditionally been one of the most active research areas for\ndeep learning applications, because vision is a task that is effortless for humans\nand many animals but challenging for computers (Ballard ef al., 1983). Many of\nthe most popular standard benchmark tasks for deep learning algorithms are forms\nof object recognition or optical character recognition.\n\nComputer vision is a very broad field encompassing a wide variety of ways\nof processing images, and an amazing diversity of applications. Applications of\ncomputer vision range from reproducing human visual abilities, such as recognizing\nfaces, to creating entirely new categories of visual abilities. As an example of\nthe latter category, one recent computer vision application is to recognize sound\nwaves from the vibrations they induce in objects visible in a video (Davis et al.,\n2014). Most deep learning research on computer vision has not focused on such\n\n452\n", "CHAPTER 12. APPLICATIONS\n\nexotic applications that expand the realm of what is possible with imagery but\nrather a small core of AI goals aimed at replicating human abilities. Most deep\nlearning for computer vision is used for object recognition or detection of some\nform, whether this means reporting which object is present in an image, annotating\nan image with bounding boxes around each object, transcribing a sequence of\nsymbols from an image, or labeling each pixel in an image with the identity of the\nobject it belongs to. Because generative modeling has been a guiding principle\nof deep learning research, there is also a large body of work on image synthesis\nusing deep models. While image synthesis ex nthilo is usually not considered a\ncomputer vision endeavor, models capable of image synthesis are usually useful for\nimage restoration, a computer vision task involving repairing defects in images or\nremoving objects from images.\n\n12.2.1 Preprocessing\n\nMany application areas require sophisticated preprocessing because the original\ninput comes in a form that is difficult for many deep learning architectures to\nrepresent. Computer vision usually requires relatively little of this kind of pre-\nprocessing. The images should be standardized so that their pixels all lie in the\nsame, reasonable range, like [0,1] or [-1, 1]. Mixing images that lie in [0,1] with\nimages that lie in [0, 255] will usually result in failure. Formatting images to have\nthe same scale is the only kind of preprocessing that is strictly necessary. Many\ncomputer vision architectures require images of a standard size, so images must be\ncropped or scaled to fit that size. Even this rescaling is not always strictly necessary.\nSome convolutional models accept variably-sized inputs and dynamically adjust\nthe size of their pooling regions to keep the output size constant (Waibel et al.,\n1989). Other convolutional models have variable-sized output that automatically\nscales in size with the input, such as models that denoise or label each pixel in an\nimage (Hadsell et al., 2007).\n\nDataset augmentation may be seen as a way of preprocessing the training set\nonly. Dataset augmentation is an excellent way to reduce the generalization error\nof most computer vision models. A related idea applicable at test time is to show\nthe model many different versions of the same input (for example, the same image\ncropped at slightly different locations) and have the different instantiations of the\nmodel vote to determine the output. This latter idea can be interpreted as an\nensemble approach, and helps to reduce generalization error.\n\nOther kinds of preprocessing are applied to both the train and the test set with\nthe goal of putting each example into a more canonical form in order to reduce the\namount of variation that the model needs to account for. Reducing the amount of\n\n453\n", "CHAPTER 12. APPLICATIONS\n\nvariation in the data can both reduce generalization error and reduce the size of\nthe model needed to fit the training set. Simpler tasks may be solved by smaller\nmodels, and simpler solutions are more likely to generalize well. Preprocessing\nof this kind is usually designed to remove some kind of variability in the input\ndata that is easy for a human designer to describe and that the human designer\nis confident has no relevance to the task. When training with large datasets and\nlarge models, this kind of preprocessing is often unnecessary, and it is best to just\nlet the model learn which kinds of variability it should become invariant to. For\nexample, the AlexNet system for classifying ImageNet only has one preprocessing\nstep: subtracting the mean across training examples of each pixel (Krizhevsky\net al., 2012).\n\n12.2.1.1 Contrast Normalization\n\nOne of the most obvious sources of variation that can be safely removed for\nmany tasks is the amount of contrast in the image. Contrast simply refers to the\nmagnitude of the difference between the bright and the dark pixels in an image.\nThere are many ways of quantifying the contrast of an image. In the context of\ndeep learning, contrast usually refers to the standard deviation of the pixels in an\nimage or region of an image. Suppose we have an image represented by a tensor\nX \u20ac R\u2122*\u00b0*3, with X;,;,1 being the red intensity at row 7 and column j, X;,;,2 giving\nthe green intensity and X;,;,3 giving the blue intensity. Then the contrast of the\nentire image is given by\n\nr c 3\n\n= >>Y (Xign \u2014 X)\u00b0 (12.1)\n\ni=1 j=l k=1\n\nwhere X is the mean intensity of the entire image:\nR= EYP Xun (122)\n\nGlobal contrast normalization (GCN) aims to prevent images from having\nvarying amounts of contrast by subtracting the mean from each image, then\nrescaling it so that the standard deviation across its pixels is equal to some\nconstant s. This approach is complicated by the fact that no scaling factor can\nchange the contrast of a zero-contrast image (one whose pixels all have equal\nintensity). Images with very low but non-zero contrast often have little information\ncontent. Dividing by the true standard deviation usually accomplishes nothing\n\n454\n", "CHAPTER 12. APPLICATIONS\n\nmore than amplifying sensor noise or compression artifacts in such cases. This\nmotivates introducing a small, positive regularization parameter A to bias the\nestimate of the standard deviation. Alternately, one can constrain the denominator\nto be at least \u20ac. Given an input image X, GCN produces an output image X\u2019,\ndefined such that\n\nXijk \u2014X\n< \u2014\\ 2\nmax {\u00ab Vr + oe Viet j= Wie (Xije ~ x) \\\n\nXie s (12.3)\n\nDatasets consisting of large images cropped to interesting objects are unlikely\nto contain any images with nearly constant intensity. In these cases, it is safe\nto practically ignore the small denominator problem by setting A = 0 and avoid\ndivision by 0 in extremely rare cases by setting \u20ac to an extremely low value like\n10-8. This is the approach used by Goodfellow ef al. (2013a) on the CIFAR-10\ndataset. Small images cropped randomly are more likely to have nearly constant\nintensity, making aggressive regularization more useful. Coates ef al. (2011) used\n\u20ac = 0 and \\ = 10 on small, randomly selected patches drawn from CIFAR-10.\n\nThe scale parameter s can usually be set to 1, as done by Coates et al. (2011),\nor chosen to make each individual pixel have standard deviation across examples\nclose to 1, as done by Goodfellow et al. (2013a).\n\nThe standard deviation in equation 12.3 is just a rescaling of the L? norm\nof the image (assuming the mean of the image has already been removed). It is\npreferable to define GCN in terms of standard deviation rather than L? norm\nbecause the standard deviation includes division by the number of pixels, so GCN\nbased on standard deviation allows the same s to be used regardless of image\nsize. However, the observation that the L? norm is proportional to the standard\ndeviation can help build a useful intuition. One can understand GCN as mapping\nexamples to a spherical shell. See figure 12.1 for an illustration. This can be a\nuseful property because neural networks are often better at responding to directions\nin space rather than exact locations. Responding to multiple distances in the\nsame direction requires hidden units with collinear weight vectors but different\nbiases. Such coordination can be difficult for the learning algorithm to discover.\nAdditionally, many shallow graphical models have problems with representing\nmultiple separated modes along the same line. GCN avoids these problems by\nreducing each example to a direction rather than a direction and a distance.\n\nCounterintuitively, there is a preprocessing operation known as sphering and\nit is not the same operation as GCN. Sphering does not refer to making the data\nlie on a spherical shell, but rather to rescaling the principal components to have\n\n455\n", "CHAPTER 12. APPLICATIONS\n\nRaw input GCN, A\\=0 GCN, 4 = 107?\ni.\nof ag\n\u20141.5 0.0 1.5 \u20141.5 0.0 1.5\nxo xO\n\nFigure 12.1: GCN maps examples onto a sphere. (Left)Raw input data may have any norm.\n(Center)GCN with A = 0 maps all non-zero examples perfectly onto a sphere. Here we use\ns =1ande=107*. Because we use GCN based on normalizing the standard deviation\nrather than the L? norm, the resulting sphere is not the unit sphere. (Right)Regularized\nGCN, with A > 0, draws examples toward the sphere but does not completely discard the\nvariation in their norm. We leave s and \u00a2\u20ac the same as before.\n\nequal variance, so that the multivariate normal distribution used by PCA has\nspherical contours. Sphering is more commonly known as whitening.\n\nGlobal contrast normalization will often fail to highlight image features we\nwould like to stand out, such as edges and corners. If we have a scene with a large\ndark area and a large bright area (such as a city square with half the image in\nthe shadow of a building) then global contrast normalization will ensure there is a\nlarge difference between the brightness of the dark area and the brightness of the\nlight area. It will not, however, ensure that edges within the dark region stand out.\n\nThis motivates local contrast normalization. Local contrast normalization\nensures that the contrast is normalized across each small window, rather than over\nthe image as a whole. See figure 12.2 for a comparison of global and local contrast\nnormalization.\n\nVarious definitions of local contrast normalization are possible. In all cases,\none modifies each pixel by subtracting a mean of nearby pixels and dividing by\na standard deviation of nearby pixels. In some cases, this is literally the mean\nand standard deviation of all pixels in a rectangular window centered on the\npixel to be modified (Pinto ez al., 2008). In other cases, this is a weighted mean\nand weighted standard deviation using Gaussian weights centered on the pixel to\nbe modified. In the case of color images, some strategies process different color\n", "CHAPTER 12. APPLICATIONS\n\nLCN\n\nFigure 12.2: A comparison of global and local contrast normalization. Visually, the effects\nof global contrast normalization are subtle. It places all images on roughly the same\nscale, which reduces the burden on the learning algorithm to handle multiple scales. Local\ncontrast normalization modifies the image much more, discarding all regions of constant\nintensity. This allows the model to focus on just the edges. Regions of fine texture,\nsuch as the houses in the second row, may lose some detail due to the bandwidth of the\nnormalization kernel being too high.\n\nInput image GCN\n\nchannels separately while others combine information from different channels to\nnormalize each pixel (Sermanet ef al., 2012).\n\nLocal contrast normalization can usually be implemented efficiently by using\nseparable convolution (see section 9.8) to compute feature maps of local means and\nlocal standard deviations, then using element-wise subtraction and element-wise\ndivision on different feature maps.\n\nLocal contrast normalization is a differentiable operation and can also be used as\na nonlinearity applied to the hidden layers of a network, as well as a preprocessing\noperation applied to the input.\n\nAs with global contrast normalization, we typically need to regularize local\ncontrast normalization to avoid division by zero. In fact, because local contrast\nnormalization typically acts on smaller windows, it is even more important to\nregularize. Smaller windows are more likely to contain values that are all nearly\nthe same as each other, and thus more likely to have zero standard deviation.\n\n457\n", "CHAPTER 12. APPLICATIONS\n\n12.2.1.2 Dataset Augmentation\n\nAs described in section 7.4, it is easy to improve the generalization of a classifier\nby increasing the size of the training set by adding extra copies of the training\nexamples that have been modified with transformations that do not change the\nclass. Object recognition is a classification task that is especially amenable to\nthis form of dataset augmentation because the class is invariant to so many\ntransformations and the input can be easily transformed with many geometric\noperations. As described before, classifiers can benefit from random translations,\nrotations, and in some cases, flips of the input to augment the dataset. In specialized\ncomputer vision applications, more advanced transformations are commonly used\nfor dataset augmentation. These schemes include random perturbation of the\ncolors in an image (Krizhevsky et al., 2012) and nonlinear geometric distortions of\nthe input (LeCun et al., 1998b).\n\n12.3 Speech Recognition\n\nThe task of speech recognition is to map an acoustic signal containing a spoken\nnatural language utterance into the corresponding sequence of words intended by\nthe speaker. Let X = (a), a2@),..., a7) denote the sequence of acoustic input\nvectors (traditionally produced by splitting the audio into 20ms frames). Most\nspeech recognition systems preprocess the input using specialized hand-designed\nfeatures, but some (Jaitly and Hinton, 2011) deep learning systems learn features\nfrom raw input. Let y= (m1, ye,-.-, yn ) denote the target output sequence (usually\na sequence of words or characters). The automatic speech recognition (ASR)\ntask consists of creating a function fAgp that computes the most probable linguistic\nsequence y given the acoustic sequence X:\n\nfasr(X) = arg max P*(y |X = X) (12.4)\n\nwhere P* is the true conditional distribution relating the inputs X to the targets\ny.\n\nSince the 1980s and until about 2009-2012, state-of-the art speech recognition\nsystems primarily combined hidden Markov models (HMMs) and Gaussian mixture\nmodels (GMMs). GMMs modeled the association between acoustic features and\nphonemes (Bah! ef al., 1987), while HMMs modeled the sequence of phonemes.\nThe GMM-HMM model family treats acoustic waveforms as being generated\nby the following process: first an HMM generates a sequence of phonemes and\ndiscrete sub-phonemic states (such as the beginning, middle, and end of each\n\n458\n", "CHAPTER 12. APPLICATIONS\n\nphoneme), then a GMM transforms each discrete symbol into a brief segment of\naudio waveform. Although GMM-HMM systems dominated ASR, until recently,\nspeech recognition was actually one of the first areas where neural networks were\napplied, and numerous ASR systems from the late 1980s and early 1990s used\nneural nets (Bourlard and Wellekens, 1989; Waibel et al., 1989; Robinson and\nFallside, 1991; Bengio et al., 1991, 1992; Konig et al., 1996). At the time, the\nperformance of ASR based on neural nets approximately matched the performance\nof GMM-HMM systems. For example, Robinson and Fallside (1991) achieved\n26% phoneme error rate on the TIMIT (Garofolo ei al., 1993) corpus (with 39\nphonemes to discriminate between), which was better than or comparable to\nHMM-based systems. Since then, TIMIT has been a benchmark for phoneme\nrecognition, playing a role similar to the role MNIST plays for object recognition.\nHowever, because of the complex engineering involved in software systems for\nspeech recognition and the effort that had been invested in building these systems\non the basis of GMM-HMMs, the industry did not see a compelling argument\nfor switching to neural networks. As a consequence, until the late 2000s, both\nacademic and industrial research in using neural nets for speech recognition mostly\nfocused on using neural nets to learn extra features for GMM-HMM systems.\n\nLater, with much larger and deeper models and much larger datasets, recognition\naccuracy was dramatically improved by using neural networks to replace GMMs\nfor the task of associating acoustic features to phonemes (or sub-phonemic states).\nStarting in 2009, speech researchers applied a form of deep learning based on\nunsupervised learning to speech recognition. This approach to deep learning was\nbased on training undirected probabilistic models called restricted Boltzmann\nmachines (RBMs) to model the input data. RBMs will be described in part III.\n\nTo solve speech recognition tasks, unsupervised pretraining was used to build\ndeep feedforward networks whose layers were each initialized by training an RBM.\nThese networks take spectral acoustic representations in a fixed-size input window\n(around a center frame) and predict the conditional probabilities of HMM states\nfor that center frame. Training such deep networks helped to significantly improve\nthe recognition rate on TIMIT (Mohamed et al., 2009, 2012a), bringing down the\nphoneme error rate from about 26% to 20.7%. See Mohamed e\u00a2 al. (2012b) for an\nanalysis of reasons for the success of these models. Extensions to the basic phone\nrecognition pipeline included the addition of speaker-adaptive features (\\lohamed\net al., 2011) that further reduced the error rate. This was quickly followed up\nby work to expand the architecture from phoneme recognition (which is what\nTIMIT is focused on) to large-vocabulary speech recognition (Dahl ef al., 2012),\nwhich involves not just recognizing phonemes but also recognizing sequences of\nwords from a large vocabulary. Deep networks for speech recognition eventually\n\n459\n", "CHAPTER 12. APPLICATIONS\n\nshifted from being based on pretraining and Boltzmann machines to being based\non techniques such as rectified linear units and dropout (Zeiler et al., 2013; Dahl\net al., 2013). By that time, several of the major speech groups in industry had\nstarted exploring deep learning in collaboration with academic researchers. Hinton\net al. (2012a) describe the breakthroughs achieved by these collaborators, which\nare now deployed in products such as mobile phones.\n\nLater, as these groups explored larger and larger labeled datasets and incorpo-\nrated some of the methods for initializing, training, and setting up the architecture\nof deep nets, they realized that the unsupervised pretraining phase was either\nunnecessary or did not bring any significant improvement.\n\nThese breakthroughs in recognition performance for word error rate in speech\nrecognition were unprecedented (around 30% improvement) and were following a\nlong period of about ten years during which error rates did not improve much with\nthe traditional GMM-HMM technology, in spite of the continuously growing size of\ntraining sets (see figure 2.4 of Deng and Yu (2014)). This created a rapid shift in\nthe speech recognition community towards deep learning. In a matter of roughly\ntwo years, most of the industrial products for speech recognition incorporated deep\nneural networks and this success spurred a new wave of research into deep learning\nalgorithms and architectures for ASR, which is still ongoing today.\n\nOne of these innovations was the use of convolutional networks (Sainath et al.,\n2013) that replicate weights across time and frequency, improving over the earlier\ntime-delay neural networks that replicated weights only across time. The new\ntwo-dimensional convolutional models regard the input spectrogram not as one\nlong vector but as an image, with one axis corresponding to time and the other to\nfrequency of spectral components.\n\nAnother important push, still ongoing, has been towards end-to-end deep\nlearning speech recognition systems that completely remove the HMM. The first\nmajor breakthrough in this direction came from Graves et al. (2013) who trained\na deep LSTM RNN (see section 10.10), using MAP inference over the frame-to-\nphoneme alignment, as in LeCun ei? al. (1998b) and in the CTC framework (Graves\net al., 2006; Graves, 2012). A deep RNN (Graves ef al., 2013) has state variables\nfrom several layers at each time step, giving the unfolded graph two kinds of depth:\nordinary depth due to a stack of layers, and depth due to time unfolding. This\nwork brought the phoneme error rate on TIMIT to a record low of 17.7%. See\nPascanu et al. (2014a) and Chung ez al. (2014) for other variants of deep RNNs,\napplied in other settings.\n\nAnother contemporary step toward end-to-end deep learning ASR is to let the\nsystem learn how to \u201calign\u201d the acoustic-level information with the phonetic-level\n\n460\n", "CHAPTER 12. APPLICATIONS\ninformation (Chorowski et al., 2014; Lu et al., 2015).\n\n12.4 Natural Language Processing\n\nNatural language processing (NLP) is the use of human languages, such as\nEnglish or French, by a computer. Computer programs typically read and emit\nspecialized languages designed to allow efficient and unambiguous parsing by simple\nprograms. More naturally occurring languages are often ambiguous and defy formal\ndescription. Natural language processing includes applications such as machine\ntranslation, in which the learner must read a sentence in one human language and\nemit an equivalent sentence in another human language. Many NLP applications\nare based on language models that define a probability distribution over sequences\nof words, characters or bytes in a natural language.\n\nAs with the other applications discussed in this chapter, very generic neural\nnetwork techniques can be successfully applied to natural language processing.\nHowever, to achieve excellent performance and to scale well to large applications,\nsome domain-specific strategies become important. To build an efficient model of\nnatural language, we must usually use techniques that are specialized for processing\nsequential data. In many cases, we choose to regard natural language as a sequence\nof words, rather than a sequence of individual characters or bytes. Because the total\nnumber of possible words is so large, word-based language models must operate on\nan extremely high-dimensional and sparse discrete space. Several strategies have\nbeen developed to make models of such a space efficient, both in a computational\nand in a statistical sense.\n\n12.4.1 n-grams\n\nA language model defines a probability distribution over sequences of tokens\nin a natural language. Depending on how the model is designed, a token may\nbe a word, a character, or even a byte. Tokens are always discrete entities. The\nearliest successful language models were based on models of fixed-length sequences\nof tokens called n-grams. An n-gram is a sequence of n tokens.\n\nModels based on n-grams define the conditional probability of the n-th token\ngiven the preceding n \u2014 1 tokens. The model uses products of these conditional\ndistributions to define the probability distribution over longer sequences:\n\nP(2x1,...,27) = P(a1,...,2n\u20141) [J Plar| te-nyi,--,21-1): (12.5)\n\nt=n\n\n461\n", "CHAPTER 12. APPLICATIONS\n\nThis decomposition is justified by the chain rule of probability. The probability\ndistribution over the initial sequence P(,,...,2%n\u20141) may be modeled by a different\nmodel with a smaller value of n.\n\nTraining n-gram models is straightforward because the maximum likelihood\nestimate can be computed simply by counting how many times each possible n\ngram occurs in the training set. Models based on n-grams have been the core\nbuilding block of statistical language modeling for many decades (Jelinek and\nMercer, 1980; Katz, 1987; Chen and Goodman, 1999).\n\nFor small values of n, models have particular names: unigram for n=1, bigram\nfor n=2, and trigram for n=3. These names derive from the Latin prefixes for\nthe corresponding numbers and the Greek suffix \u201c-gram\u201d denoting something that\nis written.\n\nUsually we train both an n-gram model and ann\u20141 gram model simultaneously.\nThis makes it easy to compute\n\nPr(@t\u2014n4+1; tee ,%)\nPr\u20141(@t-n415++++%-1)\n\nP(at| Tt-nti,---;@t-1) = (12.6)\n\nsimply by looking up two stored probabilities. For this to exactly reproduce\ninference in Pp, we must omit the final character from each sequence when we\ntrain Pn\u20141.\n\nAs an example, we demonstrate how a trigram model computes the probability\nof the sentence \u201cTHE DOG RAN AWAY.\u201d The first words of the sentence cannot be\nhandled by the default formula based on conditional probability because there is no\ncontext at the beginning of the sentence. Instead, we must use the marginal prob-\nability over words at the start of the sentence. We thus evaluate P3(THE DOG RAN).\nFinally, the last word may be predicted using the typical case, of using the condi-\ntional distribution P(AWAY | DOG RAN). Putting this together with equation 12.6,\nwe obtain:\n\nP(THE DOG RAN AWAY) = P3(THE DOG RAN) P3(DOG RAN AWAY)/P (DOG RAN).\n(12.7)\n\nA fundamental limitation of maximum likelihood for n-gram models is that P,\nas estimated from training set counts is very likely to be zero in many cases, even\nthough the tuple (@:~n41,.--,@+) may appear in the test set. This can cause two\ndifferent kinds of catastrophic outcomes. When P,_; is zero, the ratio is undefined,\nso the model does not even produce a sensible output. When Pp_1 is non-zero but\nP,, is zero, the test log-likelihood is \u2014oo. To avoid such catastrophic outcomes,\nmost n-gram models employ some form of smoothing. Smoothing techniques\n\n462\n", "CHAPTER 12. APPLICATIONS\n\nshift probability mass from the observed tuples to unobserved ones that are similar.\nSee Chen and Goodman (1999) for a review and empirical comparisons. One basic\ntechnique consists of adding non-zero probability mass to all of the possible next\nsymbol values. This method can be justified as Bayesian inference with a uniform\nor Dirichlet prior over the count parameters. Another very popular idea is to form\na mixture model containing higher-order and lower-order n-gram models, with the\nhigher-order models providing more capacity and the lower-order models being\nmore likely to avoid counts of zero. Back-off methods look-up the lower-order\nn-grams if the frequency of the context v~1,...,t-n+1 is too small to use the\nhigher-order model. More formally, they estimate the distribution over x; by using\ncontexts Yj-n+k,---,2t-1, for increasing k, until a sufficiently reliable estimate is\nfound.\n\nClassical n-gram models are particularly vulnerable to the curse of dimension-\nality. There are |V|\" possible n-grams and |V| is often very large. Even with a\nmassive training set and modest n, most n-grams will not occur in the training set.\nOne way to view a classical n-gram model is that it is performing nearest-neighbor\nlookup. In other words, it can be viewed as a local non-parametric predictor,\nsimilar to k-nearest neighbors. The statistical problems facing these extremely\nlocal predictors are described in section 5.11.2. The problem for a language model\nis even more severe than usual, because any two different words have the same dis-\ntance from each other in one-hot vector space. It is thus difficult to leverage much\ninformation from any \u201cneighbors\u2019\u2014only training examples that repeat literally the\nsame context are useful for local generalization. To overcome these problems, a\nlanguage model must be able to share knowledge between one word and other\nsemantically similar words.\n\nTo improve the statistical efficiency of n-gram models, class-based language\nmodels (Brown et al., 1992; Ney and Kneser, 1993; Niesler et al., 1998) introduce\nthe notion of word categories and then share statistical strength between words that\nare in the same category. The idea is to use a clustering algorithm to partition the\nset of words into clusters or classes, based on their co-occurrence frequencies with\nother words. The model can then use word class IDs rather than individual word\nIDs to represent the context on the right side of the conditioning bar. Composite\nmodels combining word-based and class-based models via mixing or back-off are\nalso possible. Although word classes provide a way to generalize between sequences\nin which some word is replaced by another of the same class, much information is\nlost in this representation.\n\n463\n", "CHAPTER 12. APPLICATIONS\n\n12.4.2 Neural Language Models\n\nNeural language models or NLMs are a class of language model designed\nto overcome the curse of dimensionality problem for modeling natural language\nsequences by using a distributed representation of words (Bengio et al., 2001).\nUnlike class-based n-gram models, neural language models are able to recognize\nthat two words are similar without losing the ability to encode each word as distinct\nfrom the other. Neural language models share statistical strength between one\nword (and its context) and other similar words and contexts. The distributed\nrepresentation the model learns for each word enables this sharing by allowing the\nmodel to treat words that have features in common similarly. For example, if the\nword dog and the word cat map to representations that share many attributes, then\nsentences that contain the word cat can inform the predictions that will be made by\nthe model for sentences that contain the word dog, and vice-versa. Because there\nare many such attributes, there are many ways in which generalization can happen,\ntransferring information from each training sentence to an exponentially large\nnumber of semantically related sentences. The curse of dimensionality requires the\nmodel to generalize to a number of sentences that is exponential in the sentence\nlength. The model counters this curse by relating each training sentence to an\nexponential number of similar sentences.\n\nWe sometimes call these word representations word embeddings. In this\ninterpretation, we view the raw symbols as points in a space of dimension equal\nto the vocabulary size. The word representations embed those points in a feature\nspace of lower dimension. In the original space, every word is represented by\na one-hot vector, so every pair of words is at Euclidean distance 2 from each\nother. In the embedding space, words that frequently appear in similar contexts\n(or any pair of words sharing some \u201cfeatures\u201d learned by the model) are close to\neach other. This often results in words with similar meanings being neighbors.\nFigure 12.3 zooms in on specific areas of a learned word embedding space to show\nhow semantically similar words map to representations that are close to each other.\n\nNeural networks in other domains also define embeddings. For example, a\nhidden layer of a convolutional network provides an \u201cimage embedding.\u201d Usually\nNLP practitioners are much more interested in this idea of embeddings because\nnatural language does not originally lie in a real-valued vector space. The hidden\nlayer has provided a more qualitatively dramatic change in the way the data is\nrepresented.\n\nThe basic idea of using distributed representations to improve models for\nnatural language processing is not restricted to neural networks. It may also be\nused with graphical models that have distributed representations in the form of\n\n464\n", "CHAPTER 12. APPLICATIONS\n\nmultiple latent variables (Mnih and Hinton, 2007).\n\n22\n\nFrance\nChit@sian 21\nErna\n\n20\n\nGermany Iraq\nOntario 19\n\nAl ear\n\nEuropea, itishy 18\n\u201cie\nnada\n\n17\n\u201434 \u201432 \u201430 \u201428 \u201426 35.0 35.5 36.0 36.5 37.0 37.5 38.0\n\nFigure 12.3: Two-dimensional visualizations of word embeddings obtained from a neural\nmachine translation model (Baldanau ef al., 2015), zooming in on specific areas where\nsemantically related words have embedding vectors that are close to each other. Countries\nappear on the left and numbers on the right. Keep in mind that these embeddings are 2-D\nfor the purpose of visualization. In real applications, embeddings typically have higher\ndimensionality and can simultaneously capture many kinds of similarity between words.\n\n12.4.3 High-Dimensional Outputs\n\nIn many natural language applications, we often want our models to produce\nwords (rather than characters) as the fundamental unit of the output. For large\nvocabularies, it can be very computationally expensive to represent an output\ndistribution over the choice of a word, because the vocabulary size is large. In many\napplications, V contains hundreds of thousands of words. The naive approach to\nrepresenting such a distribution is to apply an affine transformation from a hidden\nrepresentation to the output space, then apply the softmax function. Suppose\nwe have a vocabulary V with size |V|. The weight matrix describing the linear\ncomponent of this affine transformation is very large, because its output dimension\nis |V|. This imposes a high memory cost to represent the matrix, and a high\ncomputational cost to multiply by it. Because the softmax is normalized across all\n|V| outputs, it is necessary to perform the full matrix multiplication at training\ntime as well as test time\u2014we cannot calculate only the dot product with the weight\nvector for the correct output. The high computational costs of the output layer\nthus arise both at training time (to compute the likelihood and its gradient) and\nat test time (to compute probabilities for all or selected words). For specialized\n\n465\n", "CHAPTER 12. APPLICATIONS\n\nloss functions, the gradient can be computed efficiently (Vincent ef al., 2015), but\nthe standard cross-entropy loss applied to a traditional softmax output layer poses\nmany difficulties.\n\nSuppose that h is the top hidden layer used to predict the output probabilities\ny. If we parametrize the transformation from h to y with learned weights W\nand learned biases 6, then the affine-softmax output layer performs the following\ncomputations:\n\na; = bi + > Wighy Vi \u20ac {1,..-,/V|}, (12.8)\nj\n~ e%\nYi = ya (12.9)\ni=1 \u00a9\"\n\nIf h contains np, elements then the above operation is O(|V|np). With na in the\nthousands and |V| in the hundreds of thousands, this operation dominates the\ncomputation of most neural language models.\n\n12.4.3.1 Use of a Short List\n\nThe first neural language models (Bengio e\u00a2 al., 2001, 2003) dealt with the high cost\nof using a softmax over a large number of output words by limiting the vocabulary\nsize to 10,000 or 20,000 words. Schwenk and Gauvain (2002) and Schwenk (2007)\nbuilt upon this approach by splitting the vocabulary V into a shortlist L of most\nfrequent words (handled by the neural net) and a tail T = V\\L of more rare words\n(handled by an n-gram model). To be able to combine the two predictions, the\nneural net also has to predict the probability that a word appearing after context\nC belongs to the tail list. This may be achieved by adding an extra sigmoid output\nunit to provide an estimate of P(t \u20ac T| C\u2019). The extra output can then be used to\nachieve an estimate of the probability distribution over all words in V as follows:\n\nPly=i| C) =lerP(y =1| Cie L)\u2014 Pie T|C))\n+ lietP(y =i| C,i\u20ac T)P(iET|C) (12.10)\n\nwhere P(y =i | C,i \u20ac L) is provided by the neural language model and P(y =i |\nC,i \u20ac T) is provided by the n-gram model. With slight modification, this approach\ncan also work using an extra output value in the neural language model\u2019s softmax\nlayer, rather than a separate sigmoid unit.\n\nAn obvious disadvantage of the short list approach is that the potential gener-\nalization advantage of the neural language models is limited to the most frequent\n\n466\n", "CHAPTER 12. APPLICATIONS\n\nwords, where, arguably, it is the least useful. This disadvantage has stimulated\nthe exploration of alternative methods to deal with high-dimensional outputs,\ndescribed below.\n\n12.4.3.2 Hierarchical Softmax\n\nA classical approach (Goodman, 2001) to reducing the computational burden\nof high-dimensional output layers over large vocabulary sets V is to decompose\nprobabilities hierarchically. Instead of necessitating a number of computations\nproportional to |V| (and also proportional to the number of hidden units, np),\nthe |V| factor can be reduced to as low as log|V|. Bengio (2002) and Morin and\nBengio (2005) introduced this factorized approach to the context of neural language\nmodels.\n\nOne can think of this hierarchy as building categories of words, then categories\nof categories of words, then categories of categories of categories of words, etc.\nThese nested categories form a tree, with words at the leaves. In a balanced tree,\nthe tree has depth O(log|V|). The probability of a choosing a word is given by\nthe product of the probabilities of choosing the branch leading to that word at\nevery node on a path from the root of the tree to the leaf containing the word.\nFigure 12.4 illustrates a simple example. nih and Hinton (2009) also describe\nhow to use multiple paths to identify a single word in order to better model words\nthat have multiple meanings. Computing the probability of a word then involves\nsummation over all of the paths that lead to that word.\n\nTo predict the conditional probabilities required at each node of the tree, we\ntypically use a logistic regression model at each node of the tree, and provide the\nsame context C' as input to all of these models. Because the correct output is\nencoded in the training set, we can use supervised learning to train the logistic\nregression models. This is typically done using a standard cross-entropy loss,\ncorresponding to maximizing the log-likelihood of the correct sequence of decisions.\n\nBecause the output log-likelihood can be computed efficiently (as low as log |V|\nrather than |V]), its gradients may also be computed efficiently. This includes not\nonly the gradient with respect to the output parameters but also the gradients\nwith respect to the hidden layer activations.\n\nIt is possible but usually not practical to optimize the tree structure to minimize\nthe expected number of computations. Tools from information theory specify how\nto choose the optimal binary code given the relative frequencies of the words. To\ndo so, we could structure the tree so that the number of bits associated with a word\nis approximately equal to the logarithm of the frequency of that word. However, in\n\n467\n", "CHAPTER 12. APPLICATIONS\n\n~) \u00a9) \u00a9) &\nOOOO OO O \u00a9\n\n(0,0,0) \u2014 (0,0,1) (0,1,0) \u2014 (0,1,1) (1,0,0) (1,1,0) (1,1,1)\n\nFigure 12.4: Illustration of a simple hierarchy of word categories, with 8 words wo,...,w7\norganized into a three level hierarchy. The leaves of the tree represent actual specific words.\nInternal nodes represent groups of words. Any node can be indexed by the sequence\nof binary decisions (0=left, 1=right) to reach the node from the root. Super-class (0)\ncontains the classes (0, 0) and (0, 1), which respectively contain the sets of words {wo, w1}\nand {we,w3}, and similarly super-class (1) contains the classes (1,0) and (1,1), which\nrespectively contain the words (w4,ws5) and (w\u00a2,w7). If the tree is sufficiently balanced,\nhe maximum depth (number of binary decisions) is on the order of the logarithm of\nhe number of words |V|: the choice of one out of |V| words can be obtained by doing\nO(log |V]) operations (one for each of the nodes on the path from the root). In this example,\ncomputing the probability of a word y can be done by multiplying three probabilities,\nassociated with the binary decisions to move left or right at each node on the path from\nhe root to a node y. Let b;(y) be the i-th binary decision when traversing the tree\nowards the value y. The probability of sampling an output y decomposes into a product\nof conditional probabilities, using the chain rule for conditional probabilities, with each\nnode indexed by the prefix of these bits. For example, node (1,0) corresponds to the\nprefix (bg (w,) = 1, (w,) = 0), and the probability of w4 can be decomposed as follows:\n\nP(y = wa) = P(bo = 1,b, = 0, b2 = 0) (12.11)\nP(bp = 1)P(b = 0| by = 1)P(bz = 0| bo = 1,b1 = 0). (12.12)\n\n468\n", "CHAPTER 12. APPLICATIONS\n\npractice, the computational savings are typically not worth the effort because the\ncomputation of the output probabilities is only one part of the total computation\nin the neural language model. For example, suppose there are | fully connected\nhidden layers of width n;,. Let np be the weighted average of the number of bits\nrequired to identify a word, with the weighting given by the frequency of these\nwords. In this example, the number of operations needed to compute the hidden\nactivations grows as as O(In?) while the output computations grow as O(nj,nj).\nAs long as np) < Inj, we can reduce computation more by shrinking nq than by\nshrinking ny. Indeed, np is often small. Because the size of the vocabulary rarely\nexceeds a million words and logy(10\u00b0) ~ 20, it is possible to reduce np to about 20,\nbut np is often much larger, around 10? or more. Rather than carefully optimizing\na tree with a branching factor of 2, one can instead define a tree with depth two\nand a branching factor of VI . Such a tree corresponds to simply defining a set\nof mutually exclusive word classes. The simple approach based on a tree of depth\ntwo captures most of the computational benefit of the hierarchical strategy.\n\nOne question that remains somewhat open is how to best define these word\nclasses, or how to define the word hierarchy in general. Early work used existing\nhierarchies (Morin and Bengio, 2005) but the hierarchy can also be learned, ideally\njointly with the neural language model. Learning the hierarchy is difficult. An exact\noptimization of the log-likelihood appears intractable because the choice of a word\nhierarchy is a discrete one, not amenable to gradient-based optimization. However,\none could use discrete optimization to approximately optimize the partition of\nwords into word classes.\n\nAn important advantage of the hierarchical softmax is that it brings computa-\ntional benefits both at training time and at test time, if at test time we want to\ncompute the probability of specific words.\n\nOf course, computing the probability of all |V| words will remain expensive\neven with the hierarchical softmax. Another important operation is selecting the\nmost likely word in a given context. Unfortunately the tree structure does not\nprovide an efficient and exact solution to this problem.\n\nA disadvantage is that in practice the hierarchical softmax tends to give worse\ntest results than sampling-based methods we will describe next. This may be due\nto a poor choice of word classes.\n\n12.4.3.3 Importance Sampling\n\nOne way to speed up the training of neural language models is to avoid explicitly\ncomputing the contribution of the gradient from all of the words that do not appear\n\n469\n", "CHAPTER 12. APPLICATIONS\n\nin the next position. Every incorrect word should have low probability under the\nmodel. It can be computationally costly to enumerate all of these words. Instead,\nit is possible to sample only a subset of the words. Using the notation introduced\nin equation 12.8, the gradient can be written as follows:\n\nOlogP(y|C) \u2014 Alogsoftmaxy (a)\n\n0 70 (12.13\nO ey\n59 108 yen (12.14\n0 ai\n= Sp (tu\u2014 log de ) (12.15\nOdy _, Oai\n== dPU i|C) mi (12.16\n\nwhere a is the vector of pre-softmax activations (or scores), with one element\nper word. The first term is the positive phase term (pushing a, up) while the\nsecond term is the negative phase term (pushing a; down for all i, with weight\nP(i| C). Since the negative phase term is an expectation, we can estimate it with\na Monte Carlo sample. However, that would require sampling from the model itself.\nSampling from the model requires computing P(i | C) for all i in the vocabulary,\nwhich is precisely what we are trying to avoid.\n\nInstead of sampling from the model, one can sample from another distribution,\ncalled the proposal distribution (denoted q), and use appropriate weights to correct\nfor the bias introduced by sampling from the wrong distribution (Bengio and\nS\u00e9n\u00e9cal, 2003; Bengio and S\u00e9n\u00e9cal, 2008). This is an application of a more general\ntechnique called importance sampling, which will be described in more detail\nin section 17.2. Unfortunately, even exact importance sampling is not efficient\nbecause it requires computing weights pi/qi, where pj = P(i | C), which can\nonly be computed if all the scores a; are computed. The solution adopted for\nthis application is called biased importance sampling, where the importance\nweights are normalized to sum to 1. When negative word 1 is sampled, the\nassociated gradient is weighted by\n\nwy = \u2014 Pelt (12.17)\njet Pnj/Inj\n\nThese weights are used to give the appropriate importance to the m negative\nsamples from q used to form the estimated negative phase contribution to the\n\n470\n", "CHAPTER 12. APPLICATIONS\n\ngradient:\nIVI m\n\n. Oai 1 an\nd PUL O) a \u00a9 Sow; a (12.18)\n\ni=l\n\nA unigram or a bigram distribution works well as the proposal distribution q. It is\neasy to estimate the parameters of such a distribution from data. After estimating\nthe parameters, it is also possible to sample from such a distribution very efficiently.\n\nImportance sampling is not only useful for speeding up models with large\nsoftmax outputs. More generally, it is useful for accelerating training with large\nsparse output layers, where the output is a sparse vector rather than a 1-of-n\nchoice. An example is a bag of words. A bag of words is a sparse vector v\nwhere v; indicates the presence or absence of word 7 from the vocabulary in the\ndocument. Alternately, v; can indicate the number of times that word 7 appears.\nMachine learning models that emit such sparse vectors can be expensive to train\nfor a variety of reasons. Early in learning, the model may not actually choose to\nmake the output truly sparse. Moreover, the loss function we use for training might\nmost naturally be described in terms of comparing every element of the output to\nevery element of the target. This means that it is not always clear that there is a\ncomputational benefit to using sparse outputs, because the model may choose to\nmake the majority of the output non-zero and all of these non-zero values need to\nbe compared to the corresponding training target, even if the training target is zero.\nDauphin e\u00a2 al. (2011) demonstrated that such models can be accelerated using\nimportance sampling. The efficient algorithm minimizes the loss reconstruction for\nthe \u201cpositive words\u201d (those that are non-zero in the target) and an equal number\nof \u201cnegative words.\u201d The negative words are chosen randomly, using a heuristic to\nsample words that are more likely to be mistaken. The bias introduced by this\nheuristic oversampling can then be corrected using importance weights.\n\nIn all of these cases, the computational complexity of gradient estimation for\nthe output layer is reduced to be proportional to the number of negative samples\nrather than proportional to the size of the output vector.\n\n12.4.3.4 Noise-Contrastive Estimation and Ranking Loss\n\nOther approaches based on sampling have been proposed to reduce the computa-\ntional cost of training neural language models with large vocabularies. An early\nexample is the ranking loss proposed by Collobert and Weston (2008a), which\nviews the output of the neural language model for each word as a score and tries to\nmake the score of the correct word ay be ranked high in comparison to the other\n\n471\n", "CHAPTER 12. APPLICATIONS\n\nscores a;. The ranking loss proposed then is\n\nL = S > max(0,1 \u2014 ay + a). (12.19)\n\na\n\nThe gradient is zero for the 7-th term if the score of the observed word, ay, is\ngreater than the score of the negative word a; by a margin of 1. One issue with\nthis criterion is that it does not provide estimated conditional probabilities, which\nare useful in some applications, including speech recognition and text generation\n(including conditional text generation tasks such as translation).\n\nA more recently used training objective for neural language model is noise-\ncontrastive estimation, which is introduced in section 18.6. This approach has\nbeen successfully applied to neural language models (Mnih and Teh, 2012; Mnih\nand Kavukcuoglu, 2013).\n\n12.4.4 Combining Neural Language Models with n-grams\n\nA major advantage of mgram models over neural networks is that n-gram models\nachieve high model capacity (by storing the frequencies of very many tuples)\nwhile requiring very little computation to process an example (by looking up\nonly a few tuples that match the current context). If we use hash tables or trees\nto access the counts, the computation used for n-grams is almost independent\nof capacity. In comparison, doubling a neural network\u2019s number of parameters\ntypically also roughly doubles its computation time. Exceptions include models\nthat avoid using all parameters on each pass. Embedding layers index only a single\nembedding in each pass, so we can increase the vocabulary size without increasing\nthe computation time per example. Some other models, such as tiled convolutional\nnetworks, can add parameters while reducing the degree of parameter sharing\nin order to maintain the same amount of computation. However, typical neural\nnetwork layers based on matrix multiplication use an amount of computation\nproportional to the number of parameters.\n\nOne easy way to add capacity is thus to combine both approaches in an ensemble\nconsisting of a neural language model and an n-gram language model (Bengio\net al., 2001, 2003). As with any ensemble, this technique can reduce test error if\nthe ensemble members make independent mistakes. The field of ensemble learning\nprovides many ways of combining the ensemble members\u2019 predictions, including\nuniform weighting and weights chosen on a validation set. Mikolov et al. (201 1a)\nextended the ensemble to include not just two models but a large array of models.\nIt is also possible to pair a neural network with a maximum entropy model and\ntrain both jointly (Mikolov et al., 2011b). This approach can be viewed as training\n\n472\n", "CHAPTER 12. APPLICATIONS\n\na neural network with an extra set of inputs that are connected directly to the\noutput, and not connected to any other part of the model. The extra inputs are\nindicators for the presence of particular n-grams in the input context, so these\nvariables are very high-dimensional and very sparse. The increase in model capacity\nis huge\u2014the new portion of the architecture contains up to |sV |\u201d parameters\u2014but\nthe amount of added computation needed to process an input is minimal because\nthe extra inputs are very sparse.\n\n12.4.5 Neural Machine Translation\n\nMachine translation is the task of reading a sentence in one natural language and\nemitting a sentence with the equivalent meaning in another language. Machine\ntranslation systems often involve many components. At a high level, there is\noften one component that proposes many candidate translations. Many of these\ntranslations will not be grammatical due to differences between the languages. For\nexample, many languages put adjectives after nouns, so when translated to English\ndirectly they yield phrases such as \u201capple red.\u201d The proposal mechanism suggests\nmany variants of the suggested translation, ideally including \u201cred apple.\u201d A second\ncomponent of the translation system, a language model, evaluates the proposed\ntranslations, and can score \u201cred apple\u201d as better than \u201capple red.\u201d\n\nThe earliest use of neural networks for machine translation was to upgrade the\nlanguage model of a translation system by using a neural language model (Schwenk\net al., 2006; Schwenk, 2010). Previously, most machine translation systems had\nused an n-gram model for this component. The n-gram based models used for\nmachine translation include not just traditional back-off mgram models (Jelinek\nand Mercer, 1980; Katz, 1987; Chen and Goodman, 1999) but also maximum\nentropy language models (Berger ei al., 1996), in which an affine-softmax layer\npredicts the next word given the presence of frequent n-grams in the context.\n\nTraditional language models simply report the probability of a natural language\nsentence. Because machine translation involves producing an output sentence given\nan input sentence, it makes sense to extend the natural language model to be\nconditional. As described in section 6.2.1.1, it is straightforward to extend a model\nthat defines a marginal distribution over some variable to define a conditional\ndistribution over that variable given a context C\u2019, where C might be a single variable\nor a list of variables. Devlin e\u00e9 al. (2014) beat the state-of-the-art in some statistical\nmachine translation benchmarks by using an MLP to score a phrase ti, ta,..., tz\nin the target language given a phrase s|,82,...,Sn in the source language. The\nMEP estimates P(t1,t2,...,t, | $1,9,.--,Sn). The estimate formed by this MLP\nreplaces the estimate provided by conditional n-gram models.\n\n473\n", "CHAPTER 12. APPLICATIONS\n\nOutput object (English\nsentence)\n\nDecoder\n\nIntermediate, semantic representation\n\nEncoder\n\nSource object (French sentence or image)\n\nFigure 12.5: The encoder-decoder architecture to map back and forth between a surface\nrepresentation (such as a sequence of words or an image) and a semantic representation.\nBy using the output of an encoder of data from one modality (such as the encoder mapping\nfrom French sentences to hidden representations capturing the meaning of sentences) as\nthe input to a decoder for another modality (such as the decoder mapping from hidden\nrepresentations capturing the meaning of sentences to English), we can train systems that\ntranslate from one modality to another. This idea has been applied successfully not just\nto machine translation but also to caption generation from images.\n\nA drawback of the MLP-based approach is that it requires the sequences to be\npreprocessed to be of fixed length. To make the translation more flexible, we would\nlike to use a model that can accommodate variable length inputs and variable\nlength outputs. An RNN provides this ability. Section 10.2.4 describes several ways\nof constructing an RNN that represents a conditional distribution over a sequence\ngiven some input, and section 10.4 describes how to accomplish this conditioning\nwhen the input is a sequence. In all cases, one model first reads the input sequence\nand emits a data structure that summarizes the input sequence. We call this\nsummary the \u201ccontext\u201d C. The context C' may be a list of vectors, or it may be a\nvector or tensor. The model that reads the input to produce C' may be an RNN\n(Cho et al., 2014a; Sutskever et al., 2014; Jean et al., 2014) or a convolutional\nnetwork (Kalchbrenner and Blunsom, 2013). A second model, usually an RNN,\nthen reads the context C' and generates a sentence in the target language. This\ngeneral idea of an encoder-decoder framework for machine translation is illustrated\nin figure 12.5.\n\nIn order to generate an entire sentence conditioned on the source sentence, the\nmodel must have a way to represent the entire source sentence. Earlier models\nwere only able to represent individual words or phrases. From a representation\n\nATA\n", "CHAPTER 12. APPLICATIONS\n\nlearning point of view, it can be useful to learn a representation in which sentences\nthat have the same meaning have similar representations regardless of whether\nthey were written in the source language or the target language. This strategy was\nexplored first using a combination of convolutions and RNNs (Kalchbrenner and\nBlunsom, 2013). Later work introduced the use of an RNN for scoring proposed\ntranslations (Cho ef al., 2014a) and for generating translated sentences (Sutskever\net al., 2014). Jean et al. (2014) scaled these models to larger vocabularies.\n\n12.4.5.1 Using an Attention Mechanism and Aligning Pieces of Data\n\nFigure 12.6: A modern attention mechanism, as introduced by Baldanau et al. (2015), is\nessentially a weighted average. A context vector c is formed by taking a weighted average\nof feature vectors h with weights a\u201c). In some applications, the feature vectors h are\nhidden units of a neural network, but they may also be raw input to the model. The\nweights a) are produced by the model itself. They are usually values in the interval\n[0, 1] and are intended to concentrate around just one h so that the weighted average\napproximates reading that one specific time step precisely. The weights a\u201c) are usually\nproduced by applying a softmax function to relevance scores emitted by another portion\nof the model. The attention mechanism is more expensive computationally than directly\nindexing the desired h), but direct indexing cannot be trained with gradient descent. The\nattention mechanism based on weighted averages is a smooth, differentiable approximation\nthat can be trained with existing optimization algorithms.\n\nUsing a fixed-size representation to capture all the semantic details of a very\nlong sentence of say 60 words is very difficult. It can be achieved by training a\nsufficiently large RNN well enough and for long enough, as demonstrated by Cho\net al. (2014a) and Sutskever et al. (2014). However, a more efficient approach is\nto read the whole sentence or paragraph (to get the context and the gist of what\n\n475\n", "CHAPTER 12. APPLICATIONS\n\nis being expressed), then produce the translated words one at a time, each time\nfocusing on a different part of the input sentence in order to gather the semantic\ndetails that are required to produce the next output word. That is exactly the\nidea that Bahdanau et al. (2015) first introduced. The attention mechanism used\nto focus on specific parts of the input sequence at each time step is illustrated in\nfigure 12.6.\n\nWe can think of an attention-based system as having three components:\n\n1. A process that \u201creads\u201d raw data (such as source words in a source sentence),\nand converts them into distributed representations, with one feature vector\nassociated with each word position.\n\n2. A list of feature vectors storing the output of the reader. This can be\nunderstood as a \u201cmemory\u201d containing a sequence of facts, which can be\nretrieved later, not necessarily in the same order, without having to visit all\nof them.\n\n3. A process that \u201cexploits\u201d the content of the memory to sequentially perform\na task, at each time step having the ability put attention on the content of\none memory element (or a few, with a different weight).\n\nThe third component generates the translated sentence.\n\nWhen words in a sentence written in one language are aligned with correspond-\ning words in a translated sentence in another language, it becomes possible to relate\nthe corresponding word embeddings. Earlier work showed that one could learn a\nkind of translation matrix relating the word embeddings in one language with the\nword embeddings in another (Kotisky ef al., 2014), yielding lower alignment error\nrates than traditional approaches based on the frequency counts in the phrase table.\nThere is even earlier work on learning cross-lingual word vectors (KKlementiev et al.,\n2012). Many extensions to this approach are possible. For example, more efficient\ncross-lingual alignment (Gouws et al., 2014) allows training on larger datasets.\n\n12.4.6 Historical Perspective\n\nThe idea of distributed representations for symbols was introduced by Rumelhart\net al. (1986a) in one of the first explorations of back-propagation, with symbols\ncorresponding to the identity of family members and the neural network capturing\nthe relationships between family members, with training examples forming triplets\nsuch as (Colin, Mother, Victoria). The first layer of the neural network learned\na representation of each family member. For example, the features for Colin\n\n476\n", "CHAPTER 12. APPLICATIONS\n\nmight represent which family tree Colin was in, what branch of that tree he was\nin, what generation he was from, etc. One can think of the neural network as\ncomputing learned rules relating these attributes together in order to obtain the\ndesired predictions. The model can then make predictions such as inferring who is\nthe mother of Colin.\n\nThe idea of forming an embedding for a symbol was extended to the idea of an\nembedding for a word by Deerwester ef al. (1990). These embeddings were learned\nusing the SVD. Later, embeddings would be learned by neural networks.\n\nThe history of natural language processing is marked by transitions in the\npopularity of different ways of representing the input to the model. Following\nthis early work on symbols or words, some of the earliest applications of neural\nnetworks to NLP (Miikkulainen and Dyer, 1991; Schmidhuber, 1996) represented\nthe input as a sequence of characters.\n\nBengio et al. (2001) returned the focus to modeling words and introduced\nneural language models, which produce interpretable word embeddings. These\nneural models have scaled up from defining representations of a small set of symbols\nin the 1980s to millions of words (including proper nouns and misspellings) in\nmodern applications. This computational scaling effort led to the invention of the\ntechniques described above in section 12.4.3.\n\nInitially, the use of words as the fundamental units of language models yielded\nimproved language modeling performance (Bengio ef al., 2001). To this day,\nnew techniques continually push both character-based models (Sutskever et al.,\n2011) and word-based models forward, with recent work (Gillick e\u00a2 al., 2015) even\nmodeling individual bytes of Unicode characters.\n\nThe ideas behind neural language models have been extended into several\nnatural language processing applications, such as parsing (Henderson, 2003, 2004;\nCollobert, 2011), part-of-speech tagging, semantic role labeling, chunking, etc,\nsometimes using a single multi-task learning architecture (Collobert and Weston,\n2008a; Collobert et al., 2011a) in which the word embeddings are shared across\ntasks.\n\nTwo-dimensional visualizations of embeddings became a popular tool for an-\nalyzing language models following the development of the t-SNE dimensionality\nreduction algorithm (van der Maaten and Hinton, 2008) and its high-profile appli-\ncation to visualization word embeddings by Joseph Turian in 2009.\n\nATT\n", "CHAPTER 12. APPLICATIONS\n\n12.5 Other Applications\n\nIn this section we cover a few other types of applications of deep learning that\nare different from the standard object recognition, speech recognition and natural\nlanguage processing tasks discussed above. Part III of this book will expand that\nscope even further to tasks that remain primarily research areas.\n\n12.5.1 Recommender Systems\n\nOne of the major families of applications of machine learning in the information\ntechnology sector is the ability to make recommendations of items to potential\nusers or customers. Two major types of applications can be distinguished: online\nadvertising and item recommendations (often these recommendations are still for\nthe purpose of selling a product). Both rely on predicting the association between\na user and an item, either to predict the probability of some action (the user\nbuying the product, or some proxy for this action) or the expected gain (which\nmay depend on the value of the product) if an ad is shown or a recommendation is\nmade regarding that product to that user. The internet is currently financed in\ngreat part by various forms of online advertising. There are major parts of the\neconomy that rely on online shopping. Companies including Amazon and eBay\nuse machine learning, including deep learning, for their product recommendations.\nSometimes, the items are not products that are actually for sale. Examples include\nselecting posts to display on social network news feeds, recommending movies to\nwatch, recommending jokes, recommending advice from experts, matching players\nfor video games, or matching people in dating services.\n\nOften, this association problem is handled like a supervised learning problem:\ngiven some information about the item and about the user, predict the proxy of\ninterest (user clicks on ad, user enters a rating, user clicks on a \u201clike\u201d button, user\nbuys product, user spends some amount of money on the product, user spends\ntime visiting a page for the product, etc). This often ends up being either a\nregression problem (predicting some conditional expected value) or a probabilistic\nclassification problem (predicting the conditional probability of some discrete\nevent).\n\nThe early work on recommender systems relied on minimal information as\ninputs for these predictions: the user ID and the item ID. In this context, the\nonly way to generalize is to rely on the similarity between the patterns of values of\nthe target variable for different users or for different items. Suppose that user 1\nand user 2 both like items A, B and C. From this, we may infer that user 1 and\n\n478\n", "CHAPTER 12. APPLICATIONS\n\nuser 2 have similar tastes. If user 1 likes item D, then this should be a strong\ncue that user 2 will also like D. Algorithms based on this principle come under\nthe name of collaborative filtering. Both non-parametric approaches (such as\nnearest-neighbor methods based on the estimated similarity between patterns of\npreferences) and parametric methods are possible. Parametric methods often rely\non learning a distributed representation (also called an embedding) for each user\nand for each item. Bilinear prediction of the target variable (such as a rating) is a\nsimple parametric method that is highly successful and often found as a component\nof state-of-the-art systems. The prediction is obtained by the dot product between\nthe user embedding and the item embedding (possibly corrected by constants that\ndepend only on either the user ID or the item ID). Let R be the matrix containing\nour predictions, A a matrix with user embeddings in its rows and B a matrix with\nitem embeddings in its columns. Let b and c be vectors that contain respectively\na kind of bias for each user (representing how grumpy or positive that user is\nin general) and for each item (representing its general popularity). The bilinear\nprediction is thus obtained as follows:\n\nRui = but cs + S> Aug Bji- (12.20)\nj\n\nTypically one wants to minimize the squared error between predicted ratings\nRui and actual ratings R,,;. User embeddings and item embeddings can then be\nconveniently visualized when they are first reduced to a low dimension (two or\nthree), or they can be used to compare users or items against each other, just\nlike word embeddings. One way to obtain these embeddings is by performing a\nsingular value decomposition of the matrix R of actual targets (such as ratings).\nThis corresponds to factorizing R =U DV\u2019 (or a normalized variant) into the\nproduct of two factors, the lower rank matrices A = UD and B = V\u2019. One\nproblem with the SVD is that it treats the missing entries in an arbitrary way,\nas if they corresponded to a target value of 0. Instead we would like to avoid\npaying any cost for the predictions made on missing entries. Fortunately, the sum\nof squared errors on the observed ratings can also be easily minimized by gradient-\nbased optimization. The SVD and the bilinear prediction of equation 12.20 both\nperformed very well in the competition for the Netflix prize (Bennett and Lanning,\n2007), aiming at predicting ratings for films, based only on previous ratings by\na large set of anonymous users. Many machine learning experts participated in\nthis competition, which took place between 2006 and 2009. It raised the level of\nresearch in recommender systems using advanced machine learning and yielded\nimprovements in recommender systems. Even though it did not win by itself,\nthe simple bilinear prediction or SVD was a component of the ensemble models\n\n479\n", "CHAPTER 12. APPLICATIONS\n\npresented by most of the competitors, including the winners (T\u00e9scher et al., 2009;\nKoren, 2009).\n\nBeyond these bilinear models with distributed representations, one of the first\nuses of neural networks for collaborative filtering is based on the RBM undirected\nprobabilistic model (Salakhutdinov et al., 2007). RBMs were an important element\nof the ensemble of methods that won the Netflix competition (T\u00e9scher et al., 2009;\nKoren, 2009). More advanced variants on the idea of factorizing the ratings matrix\nhave also been explored in the neural networks community (Salakhutdinov and\nMnih, 2008).\n\nHowever, there is a basic limitation of collaborative filtering systems: when a\nnew item or a new user is introduced, its lack of rating history means that there\nis no way to evaluate its similarity with other items or users (respectively), or\nthe degree of association between, say, that new user and existing items. This\nis called the problem of cold-start recommendations. A general way of solving\nthe cold-start recommendation problem is to introduce extra information about\nthe individual users and items. For example, this extra information could be user\nprofile information or features of each item. Systems that use such information\nare called content-based recommender systems. The mapping from a rich\nset of user features or item features to an embedding can be learned through a\ndeep learning architecture (Huang et al., 2013; Elkahky et al., 2015).\n\nSpecialized deep learning architectures such as convolutional networks have also\nbeen applied to learn to extract features from rich content such as from musical\naudio tracks, for music recommendation (van den Odrd et al., 2013). In that work,\nthe convolutional net takes acoustic features as input and computes an embedding\nfor the associated song. The dot product between this song embedding and the\nembedding for a user is then used to predict whether a user will listen to the song.\n\n12.5.1.1 Exploration Versus Exploitation\n\nWhen making recommendations to users, an issue arises that goes beyond ordinary\nsupervised learning and into the realm of reinforcement learning. Many recom-\nmendation problems are most accurately described theoretically as contextual\nbandits (Langford and Zhang, 2008; Lu et al., 2010). The issue is that when we\nuse the recommendation system to collect data, we get a biased and incomplete\nview of the preferences of users: we only see the responses of users to the items\nthey were recommended and not to the other items. In addition, in some cases\nwe may not get any information on users for whom no recommendation has been\nmade (for example, with ad auctions, it may be that the price proposed for an\n\n480\n", "CHAPTER 12. APPLICATIONS\n\nad was below a minimum price threshold, or does not win the auction, so the\nad is not shown at all). More importantly, we get no information about what\noutcome would have resulted from recommending any of the other items. This\nwould be like training a classifier by picking one class 4 for each training example\nx (typically the class with the highest probability according to the model) and\nthen only getting as feedback whether this was the correct class or not. Clearly,\neach example conveys less information than in the supervised case where the true\nlabel y is directly accessible, so more examples are necessary. Worse, if we are not\ncareful, we could end up with a system that continues picking the wrong decisions\neven as more and more data is collected, because the correct decision initially had a\nvery low probability: until the learner picks that correct decision, it does not learn\nabout the correct decision. This is similar to the situation in reinforcement learning\nwhere only the reward for the selected action is observed. In general, reinforcement\nlearning can involve a sequence of many actions and many rewards. The bandits\nscenario is a special case of reinforcement learning, in which the learner takes only\na single action and receives a single reward. The bandit problem is easier in the\nsense that the learner knows which reward is associated with which action. In\nthe general reinforcement learning scenario, a high reward or a low reward might\nhave been caused by a recent action or by an action in the distant past. The term\ncontextual bandits refers to the case where the action is taken in the context of\nsome input variable that can inform the decision. For example, we at least know\nthe user identity, and we want to pick an item. The mapping from context to\naction is also called a policy. The feedback loop between the learner and the data\ndistribution (which now depends on the actions of the learner) is a central research\nissue in the reinforcement learning and bandits literature.\n\nReinforcement learning requires choosing a tradeoff between exploration and\nexploitation. Exploitation refers to taking actions that come from the current,\nbest version of the learned policy\u2014actions that we know will achieve a high reward.\nExploration refers to taking actions specifically in order to obtain more training\ndata. If we know that given context x, action a gives us a reward of 1, we do not\nknow whether that is the best possible reward. We may want to exploit our current\npolicy and continue taking action a in order to be relatively sure of obtaining a\nreward of 1. However, we may also want to explore by trying action a\u2019. We do not\nknow what will happen if we try action a\u2019. We hope to get a reward of 2, but we\nrun the risk of getting a reward of 0. Either way, we at least gain some knowledge.\n\nExploration can be implemented in many ways, ranging from occasionally\ntaking random actions intended to cover the entire space of possible actions, to\nmodel-based approaches that compute a choice of action based on its expected\nreward and the model\u2019s amount of uncertainty about that reward.\n\n481\n", "CHAPTER 12. APPLICATIONS\n\nMany factors determine the extent to which we prefer exploration or exploitation.\nOne of the most prominent factors is the time scale we are interested in. If the\nagent has only a short amount of time to accrue reward, then we prefer more\nexploitation. If the agent has a long time to accrue reward, then we begin with\nmore exploration so that future actions can be planned more effectively with more\nknowledge. As time progresses and our learned policy improves, we move toward\nmore exploitation.\n\nSupervised learning has no tradeoff between exploration and exploitation\nbecause the supervision signal always specifies which output is correct for each\ninput. There is no need to try out different outputs to determine if one is better\nthan the model\u2019s current output\u2014we always know that the label is the best output.\n\nAnother difficulty arising in the context of reinforcement learning, besides the\nexploration-exploitation trade-off, is the difficulty of evaluating and comparing\ndifferent policies. Reinforcement learning involves interaction between the learner\nand the environment. This feedback loop means that it is not straightforward to\nevaluate the learner\u2019s performance using a fixed set of test set input values. The\npolicy itself determines which inputs will be seen. Dudik ef al. (2011) present\ntechniques for evaluating contextual bandits.\n\n12.5.2 Knowledge Representation, Reasoning and Question An-\nswering\n\nDeep learning approaches have been very successful in language modeling, machine\ntranslation and natural language processing due to the use of embeddings for\nsymbols (Rumelhart et al., 1986a) and words (Deerwester et al., 1990; Bengio et al.,\n2001). These embeddings represent semantic knowledge about individual words\nand concepts. A research frontier is to develop embeddings for phrases and for\nrelations between words and facts. Search engines already use machine learning for\nthis purpose but much more remains to be done to improve these more advanced\nrepresentations.\n\n12.5.2.1 Knowledge, Relations and Question Answering\n\nOne interesting research direction is determining how distributed representations\ncan be trained to capture the relations between two entities. These relations\nallow us to formalize facts about objects and how objects interact with each other.\n\nIn mathematics, a binary relation is a set of ordered pairs of objects. Pairs\nthat are in the set are said to have the relation while those who are not in the set\n\n482\n", "CHAPTER 12. APPLICATIONS\n\ndo not. For example, we can define the relation \u201cis less than\u201d on the set of entities\n{1, 2,3} by defining the set of ordered pairs S = {(1,2), (1,3), (2,3)}. Once this\nrelation is defined, we can use it like a verb. Because (1,2) \u20ac S, we say that 1 is\nless than 2. Because (2,1) \u00a2 S, we can not say that 2 is less than 1. Of course, the\nentities that are related to one another need not be numbers. We could define a\nrelation is_a_type_of containing tuples like (dog, mammal).\n\nIn the context of AI, we think of a relation as a sentence in a syntactically\nsimple and highly structured language. The relation plays the role of a verb,\nwhile two arguments to the relation play the role of its subject and object. These\nsentences take the form of a triplet of tokens\n\n(subject, verb, object) (12.21)\n\nwith values\n(entity ;, relation,, entity ;,). (12.22)\n\nWe can also define an attribute, a concept analogous to a relation, but taking\nonly one argument:\n(entity;, attribute ;). (12.23)\n\nFor example, we could define the has_fur attribute, and apply it to entities like\ndog.\n\nMany applications require representing relations and reasoning about them.\nHow should we best do this within the context of neural networks?\n\nMachine learning models of course require training data. We can infer relations\nbetween entities from training datasets consisting of unstructured natural language.\nThere are also structured databases that identify relations explicitly. A common\nstructure for these databases is the relational database, which stores this same\nkind of information, albeit not formatted as three token sentences. When a\ndatabase is intended to convey commonsense knowledge about everyday life or\nexpert knowledge about an application area to an artificial intelligence system,\nwe call the database a knowledge base. Knowledge bases range from general\nones like Freebase, OpenCyc, WordNet, or Wikibase,! etc. to more specialized\nknowledge bases, like GeneOntology.\u201d Representations for entities and relations\ncan be learned by considering each triplet in a knowledge base as a training example\nand maximizing a training objective that captures their joint distribution (Bordes\net al., 2013a).\n\n\u2018Respectively available from these web sites: freebase.com, cyc.com/opencyc, wordnet.\nprinceton.edu, wikiba.se\n?geneontology.org\n\n483\n", "CHAPTER 12. APPLICATIONS\n\nIn addition to training data, we also need to define a model family to train.\nA common approach is to extend neural language models to model entities and\nrelations. Neural language models learn a vector that provides a distributed\nrepresentation of each word. They also learn about interactions between words,\nsuch as which word is likely to come after a sequence of words, by learning functions\nof these vectors. We can extend this approach to entities and relations by learning\nan embedding vector for each relation. In fact, the parallel between modeling\nlanguage and modeling knowledge encoded as relations is so close that researchers\nhave trained representations of such entities by using both knowledge bases and\nnatural language sentences (Bordes et al., 2011, 2012; Wang et al., 2014a) or\ncombining data from multiple relational databases (Bordes et al., 2013b). Many\npossibilities exist for the particular parametrization associated with such a model.\nEarly work on learning about relations between entities (Paccanaro and Hinton,\n2000) posited highly constrained parametric forms (\u201clinear relational embeddings\u201d),\noften using a different form of representation for the relation than for the entities.\nFor example, Paccanaro and Hinton (2000) and Bordes e\u00a2 al. (2011) used vectors for\nentities and matrices for relations, with the idea that a relation acts like an operator\non entities. Alternatively, relations can be considered as any other entity (Bordes\net al., 2012), allowing us to make statements about relations, but more flexibility is\nput in the machinery that combines them in order to model their joint distribution.\n\nA practical short-term application of such models is link prediction: predict-\ning missing arcs in the knowledge graph. This is a form of generalization to new\nfacts, based on old facts. Most of the knowledge bases that currently exist have\nbeen constructed through manual labor, which tends to leave many and probably\nthe majority of true relations absent from the knowledge base. See Wang et al.\n(2014b), Lin e\u00a2 al. (2015) and Garcia-~Duran et al. (2015) for examples of such an\napplication.\n\nEvaluating the performance of a model on a link prediction task is difficult\nbecause we have only a dataset of positive examples (facts that are known to\nbe true). If the model proposes a fact that is not in the dataset, we are unsure\nwhether the model has made a mistake or discovered a new, previously unknown\nfact. The metrics are thus somewhat imprecise and are based on testing how the\nmodel ranks a held-out of set of known true positive facts compared to other facts\nthat are less likely to be true. A common way to construct interesting examples\nthat are probably negative (facts that are probably false) is to begin with a true\nfact and create corrupted versions of that fact, for example by replacing one entity\nin the relation with a different entity selected at random. The popular precision at\n10% metric counts how many times the model ranks a \u201ccorrect\u201d fact among the\ntop 10% of all corrupted versions of that fact.\n\n484\n", "CHAPTER 12. APPLICATIONS\n\nAnother application of knowledge bases and distributed representations for\nthem is word-sense disambiguation (Navigli and Velardi, 2005; Bordes et al.,\n2012), which is the task of deciding which of the senses of a word is the appropriate\none, in some context.\n\nEventually, knowledge of relations combined with a reasoning process and\nunderstanding of natural language could allow us to build a general question\nanswering system. A general question answering system must be able to process\ninput information and remember important facts, organized in a way that enables\nit to retrieve and reason about them later. This remains a difficult open problem\nwhich can only be solved in restricted \u201ctoy\u201d environments. Currently, the best\napproach to remembering and retrieving specific declarative facts is to use an\nexplicit memory mechanism, as described in section 10.12. Memory networks were\nfirst proposed to solve a toy question answering task (Weston et al., 2014). Kumar\net al. (2015) have proposed an extension that uses GRU recurrent nets to read\nthe input into the memory and to produce the answer given the contents of the\nmemory.\n\nDeep learning has been applied to many other applications besides the ones\ndescribed here, and will surely be applied to even more after this writing. It would\nbe impossible to describe anything remotely resembling a comprehensive coverage\nof such a topic. This survey provides a representative sample of what is possible\nas of this writing.\n\nThis concludes part II, which has described modern practices involving deep\nnetworks, comprising all of the most successful methods. Generally speaking, these\nmethods involve using the gradient of a cost function to find the parameters of a\nmodel that approximates some desired function. With enough training data, this\napproach is extremely powerful. We now turn to part III, in which we step into the\nterritory of research\u2014methods that are designed to work with less training data\nor to perform a greater variety of tasks, where the challenges are more difficult\nand not as close to being solved as the situations we have described so far.\n", "Part III\n\nDeep Learning Research\n\n486\n", "This part of the book describes the more ambitious and advanced approaches\nto deep learning, currently pursued by the research community.\n\nIn the previous parts of the book, we have shown how to solve supervised\nlearning problems\u2014how to learn to map one vector to another, given enough\nexamples of the mapping.\n\nNot all problems we might want to solve fall into this category. We may\nwish to generate new examples, or determine how likely some point is, or handle\nmissing values and take advantage of a large set of unlabeled examples or examples\nfrom related tasks. A shortcoming of the current state of the art for industrial\napplications is that our learning algorithms require large amounts of supervised\ndata to achieve good accuracy. In this part of the book, we discuss some of\nthe speculative approaches to reducing the amount of labeled data necessary\nfor existing models to work well and be applicable across a broader range of\ntasks. Accomplishing these goals usually requires some form of unsupervised or\nsemi-supervised learning.\n\nMany deep learning algorithms have been designed to tackle unsupervised\nlearning problems, but none have truly solved the problem in the same way that\ndeep learning has largely solved the supervised learning problem for a wide variety of\ntasks. In this part of the book, we describe the existing approaches to unsupervised\nlearning and some of the popular thought about how we can make progress in this\nfield.\n\nA central cause of the difficulties with unsupervised learning is the high di-\nmensionality of the random variables being modeled. This brings two distinct\nchallenges: a statistical challenge and a computational challenge. The statistical\nchallenge regards generalization: the number of configurations we may want to\ndistinguish can grow exponentially with the number of dimensions of interest, and\nthis quickly becomes much larger than the number of examples one can possibly\nhave (or use with bounded computational resources). The computational challenge\nassociated with high-dimensional distributions arises because many algorithms for\nlearning or using a trained model (especially those based on estimating an explicit\nprobability function) involve intractable computations that grow exponentially\nwith the number of dimensions.\n\nWith probabilistic models, this computational challenge arises from the need to\nperform intractable inference or simply from the need to normalize the distribution.\n\ne Intractable inference: inference is discussed mostly in chapter 19. It regards\nthe question of guessing the probable values of some variables a, given other\nvariables b, with respect to a model that captures the joint distribution over\n\n487\n", "a, b and c. In order to even compute such conditional probabilities one needs\nto sum over the values of the variables c, as well as compute a normalization\nconstant which sums over the values of a and c.\n\ne Intractable normalization constants (the partition function): the partition\nfunction is discussed mostly in chapter 18. Normalizing constants of proba-\nbility functions come up in inference (above) as well as in learning. Many\nprobabilistic models involve such a normalizing constant. Unfortunately,\nlearning such a model often requires computing the gradient of the loga-\nrithm of the partition function with respect to the model parameters. That\ncomputation is generally as intractable as computing the partition function\nitself. Monte Carlo Markov chain (MCMC) methods (chapter 17) are of-\nten used to deal with the partition function (computing it or its gradient).\nUnfortunately, MCMC methods suffer when the modes of the model distribu-\ntion are numerous and well-separated, especially in high-dimensional spaces\n(section 17.5).\n\nOne way to confront these intractable computations is to approximate them,\nand many approaches have been proposed as discussed in this third part of the\nbook. Another interesting way, also discussed here, would be to avoid these\nintractable computations altogether by design, and methods that do not require\nsuch computations are thus very appealing. Several generative models have been\nproposed in recent years, with that motivation. A wide variety of contemporary\napproaches to generative modeling are discussed in chapter 20.\n\nPart III is the most important for a researcher\u2014someone who wants to un-\nderstand the breadth of perspectives that have been brought to the field of deep\nlearning, and push the field forward towards true artificial intelligence.\n\n488\n", "Chapter 13\n\nLinear Factor Models\n\nMany of the research frontiers in deep learning involve building a probabilistic model\nof the input, Pmodel(Z). Such a model can, in principle, use probabilistic inference to\npredict any of the variables in its environment given any of the other variables. Many\nof these models also have latent variables h, with pmodei(@) = Enpmodei(# | 2).\nThese latent variables provide another means of representing the data. Distributed\nrepresentations based on latent variables can obtain all of the advantages of\nrepresentation learning that we have seen with deep feedforward and recurrent\nnetworks.\n\nIn this chapter, we describe some of the simplest probabilistic models with\nlatent variables: linear factor models. These models are sometimes used as building\nblocks of mixture models (Hinton et al., 1995a; Ghahramani and Hinton, 1996;\nRoweis et al., 2002) or larger, deep probabilistic models (Tang et al., 2012). They\nalso show many of the basic approaches necessary to build generative models that\nthe more advanced deep models will extend further.\n\nA linear factor model is defined by the use of a stochastic, linear decoder\nfunction that generates a by adding noise to a linear transformation of h.\n\nThese models are interesting because they allow us to discover explanatory\nfactors that have a simple joint distribution. The simplicity of using a linear decoder\nmade these models some of the first latent variable models to be extensively studied.\n\nA linear factor model describes the data generation process as follows. First,\nwe sample the explanatory factors h from a distribution\n\nh~ p(h), (13.1)\n\nwhere p(h) is a factorial distribution, with p(h) = J], p(hi), so that it is easy to\n489\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nsample from. Next we sample the real-valued observable variables given the factors:\nz= Wh- b+ noise (13.2)\n\nwhere the noise is typically Gaussian and diagonal (independent across dimensions).\nThis is illustrated in figure 13.1.\n\nx=Wh+ 6+ noise\n\nFigure 13.1: The directed graphical model describing the linear factor model family, in\nwhich we assume that an observed data vector x is obtained by a linear combination of\nindependent latent factors h, plus some noise. Different models, such as probabilistic\nPCA, factor analysis or ICA, make different choices about the form of the noise and of\nthe prior p(h).\n\n13.1 Probabilistic PCA and Factor Analysis\n\nProbabilistic PCA (principal components analysis), factor analysis and other linear\nfactor models are special cases of the above equations (13.1 and 13.2) and only\ndiffer in the choices made for the noise distribution and the model\u2019s prior over\nlatent variables h before observing x.\n\nIn factor analysis (Bartholomew, 1987; Basilevsky, 1994), the latent variable\nprior is just the unit variance Gaussian\n\nh~ N(h:0,1) (13.3)\n\nwhile the observed variables 2; are assumed to be conditionally independent,\ngiven h. Specifically, the noise is assumed to be drawn from a diagonal co-\nvariance Gaussian distribution, with covariance matrix y = diag(o\u201d), with\n\no? = [0?, 03,...,07]' a vector of per-variable variances.\n\ntn\nThe role of the latent variables is thus to capture the dependencies between\nthe different observed variables x;. Indeed, it can easily be shown that a is just a\nmultivariate normal random variable, with\n\nx~ N(a;b, WW! +2). (13.4)\n490\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nIn order to cast PCA in a probabilistic framework, we can make a slight\nmodification to the factor analysis model, making the conditional variances oF\nequal to each other. In that case the covariance of \u00ab is juss WW ' + o7I, where\n\no? is now ascalar. This yields the conditional distribution\n\nx~ N(a;b, WW ! +072) (13.5)\n\nor equivalently\nx=Wh+b+0z (13.6)\n\nwhere z ~ N(z;0, J) is Gaussian noise. Tipping and Bishop (1999) then show an\niterative EM algorithm for estimating the parameters W and o\u201d.\n\nThis probabilistic PCA model takes advantage of the observation that most\nvariations in the data can be captured by the latent variables h, up to some small\nresidual reconstruction error o?. As shown by Tipping and Bishop (1999),\nprobabilistic PCA becomes PCA as o > 0. In that case, the conditional expected\nvalue of h given a becomes an orthogonal projection of x \u2014 b onto the space\nspanned by the d columns of W, like in PCA.\n\nAs o + 0, the density model defined by probabilistic PCA becomes very sharp\naround these d dimensions spanned by the columns of W. This can make the\nmodel assign very low likelihood to the data if the data does not actually cluster\nnear a hyperplane.\n\n13.2 Independent Component Analysis (ICA)\n\nIndependent component analysis (ICA) is among the oldest representation learning\nalgorithms (Herault and Ans, 1984; Jutten and Herault, 1991; Comon, 1994;\nHyvarinen, 1999; Hyvarinen et al., 2001a; Hinton et al., 2001; Teh et al., 2003).\nIt is an approach to modeling linear factors that seeks to separate an observed\nsignal into many underlying signals that are scaled and added together to form\nthe observed data. These signals are intended to be fully independent, rather than\nmerely decorrelated from each other.!\n\nMany different specific methodologies are referred to as ICA. The variant\nthat is most similar to the other generative models we have described here is a\nvariant (Pham ef al., 1992) that trains a fully parametric generative model. The\nprior distribution over the underlying factors, p(h), must be fixed ahead of time by\nthe user. The model then deterministically generates x = Wh. We can perform a\n\n\u2018See section 3.8 for a discussion of the difference between uncorrelated variables and indepen-\ndent variables.\n\n491\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nnonlinear change of variables (using equation 3.47) to determine p(a#). Learning\nthe model then proceeds as usual, using maximum likelihood.\n\nThe motivation for this approach is that by choosing p(h) to be independent,\nwe can recover underlying factors that are as close as possible to independent.\nThis is commonly used, not to capture high-level abstract causal factors, but to\nrecover low-level signals that have been mixed together. In this setting, each\ntraining example is one moment in time, each x; is one sensor\u2019s observation of\nthe mixed signals, and each h; is one estimate of one of the original signals. For\nexample, we might have n people speaking simultaneously. If we have n different\nmicrophones placed in different locations, ICA can detect the changes in the volume\nbetween each speaker as heard by each microphone, and separate the signals so\nthat each h; contains only one person speaking clearly. This is commonly used\nin neuroscience for electroencephalography, a technology for recording electrical\nsignals originating in the brain. Many electrode sensors placed on the subject\u2019s\nhead are used to measure many electrical signals coming from the body. The\nexperimenter is typically only interested in signals from the brain, but signals from\nthe subject\u2019s heart and eyes are strong enough to confound measurements taken\nat the subject\u2019s scalp. The signals arrive at the electrodes mixed together, so\nICA is necessary to separate the electrical signature of the heart from the signals\noriginating in the brain, and to separate signals in different brain regions from\neach other.\n\nAs mentioned before, many variants of ICA are possible. Some add some noise\nin the generation of x rather than using a deterministic decoder. Most do not\nuse the maximum likelihood criterion, but instead aim to make the elements of\nh = W~'z independent from each other. Many criteria that accomplish this goal\nare possible. Equation 3.47 requires taking the determinant of W, which can be\nan expensive and numerically unstable operation. Some variants of ICA avoid this\nproblematic operation by constraining W to be orthogonal.\n\nAll variants of ICA require that p(h) be non-Gaussian. This is because if p(h)\nis an independent prior with Gaussian components, then W is not identifiable.\nWe can obtain the same distribution over p(a) for many values of W. This is very\ndifferent from other linear factor models like probabilistic PCA and factor analysis,\nthat often require p(h) to be Gaussian in order to make many operations on the\nmodel have closed form solutions. In the maximum likelihood approach where the\nuser explicitly specifies the distribution, a typical choice is to use p(hi) = ohn).\nTypical choices of these non-Gaussian distributions have larger peaks near 0 than\ndoes the Gaussian distribution, so we can also see most implementations of ICA\nas learning sparse features.\n\n492\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nMany variants of ICA are not generative models in the sense that we use the\nphrase. In this book, a generative model either represents p(x) or can draw samples\nfrom it. Many variants of ICA only know how to transform between x and h, but\ndo not have any way of representing p(h), and thus do not impose a distribution\nover p(a). For example, many ICA variants aim to increase the sample kurtosis of\nh = W\u2014'az, because high kurtosis indicates that p(h) is non-Gaussian, but this is\naccomplished without explicitly representing p(h). This is because ICA is more\noften used as an analysis tool for separating signals, rather than for generating\ndata or estimating its density.\n\nJust as PCA can be generalized to the nonlinear autoencoders described in\nchapter 14, ICA can be generalized to a nonlinear generative model, in which\nwe use a nonlinear function f to generate the observed data. See Hyvarinen and\nPajunen (1999) for the initial work on nonlinear ICA and its successful use with\nensemble learning by Roberts and Everson (2001) and Lappalainen et al. (2000).\nAnother nonlinear extension of ICA is the approach of nonlinear independent\ncomponents estimation, or NICE (Dinh ef al., 2014), which stacks a series\nof invertible transformations (encoder stages) that have the property that the\ndeterminant of the Jacobian of each transformation can be computed efficiently.\nThis makes it possible to compute the likelihood exactly and, like ICA, attempts\nto transform the data into a space where it has a factorized marginal distribution,\nbut is more likely to succeed thanks to the nonlinear encoder. Because the encoder\nis associated with a decoder that is its perfect inverse, it is straightforward to\ngenerate samples from the model (by first sampling from p(h) and then applying\nthe decoder).\n\nAnother generalization of ICA is to learn groups of features, with statistical\ndependence allowed within a group but discouraged between groups (Hyvarinen and\nHoyer, 1999; Hyvarinen ef al., 2001b). When the groups of related units are chosen\nto be non-overlapping, this is called independent subspace analysis. It is also\npossible to assign spatial coordinates to each hidden unit and form overlapping\ngroups of spatially neighboring units. This encourages nearby units to learn similar\nfeatures. When applied to natural images, this topographic ICA approach learns\nGabor filters, such that neighboring features have similar orientation, location or\nfrequency. Many different phase offsets of similar Gabor functions occur within\neach region, so that pooling over small regions yields translation invariance.\n\n13.3 Slow Feature Analysis\n\nSlow feature analysis (SFA) is a linear factor model that uses information from\n\n493\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\ntime signals to learn invariant features (Wiskott and Sejnowski, 2002).\n\nSlow feature analysis is motivated by a general principle called the slowness\nprinciple. The idea is that the important characteristics of scenes change very\nslowly compared to the individual measurements that make up a description of a\nscene. For example, in computer vision, individual pixel values can change very\nrapidly. If a zebra moves from left to right across the image, an individual pixel\nwill rapidly change from black to white and back again as the zebra\u2019s stripes pass\nover the pixel. By comparison, the feature indicating whether a zebra is in the\nimage will not change at all, and the feature describing the zebra\u2019s position will\nchange slowly. We therefore may wish to regularize our model to learn features\nthat change slowly over time.\n\nThe slowness principle predates slow feature analysis and has been applied\nto a wide variety of models (Hinton, 1989; F\u00e9ldidk, 1989; Mobahi et al., 2009;\nBergstra and Bengio, 2009). In general, we can apply the slowness principle to any\ndifferentiable model trained with gradient descent. The slowness principle may be\nintroduced by adding a term to the cost function of the form\n\nNSE LF (ae P), f(a) (13.7)\n\nwhere is a hyperparameter determining the strength of the slowness regularization\nterm, t is the index into a time sequence of examples, f is the feature extractor\nto be regularized, and L is a loss function measuring the distance between f(a)\nand f(a@+)), A common choice for L is the mean squared difference.\n\nSlow feature analysis is a particularly efficient application of the slowness\nprinciple. It is efficient because it is applied to a linear feature extractor, and can\nthus be trained in closed form. Like some variants of ICA, SFA is not quite a\ngenerative model per se, in the sense that it defines a linear map between input\nspace and feature space but does not define a prior over feature space and thus\ndoes not impose a distribution p(a) on input space.\n\nThe SFA algorithm (Wiskott and Sejnowski, 2002) consists of defining f (a; 6)\nto be a linear transformation, and solving the optimization problem\n\nminE,(f(@)); \u2014 p(w)? (13.8)\nsubject to the constraints\nf(a); =0 (13.9)\nand\nEy[f(@)7] = 1. (13.10)\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nThe constraint that the learned feature have zero mean is necessary to make the\nproblem have a unique solution; otherwise we could add a constant to all feature\nvalues and obtain a different solution with equal value of the slowness objective.\nThe constraint that the features have unit variance is necessary to prevent the\npathological solution where all features collapse to 0. Like PCA, the SFA features\nare ordered, with the first feature being the slowest. To learn multiple features, we\nmust also add the constraint\n\nVi < j,Es[f(@) f(e);] = 0. (13.11)\n\nThis specifies that the learned features must be linearly decorrelated from each\nother. Without this constraint, all of the learned features would simply capture the\none slowest signal. One could imagine using other mechanisms, such as minimizing\nreconstruction error, to force the features to diversify, but this decorrelation\nmechanism admits a simple solution due to the linearity of SFA features. The SFA\nproblem may be solved in closed form by a linear algebra package.\n\nSFA is typically used to learn nonlinear features by applying a nonlinear basis\nexpansion to a before running SFA. For example, it is common to replace x by the\nquadratic basis expansion, a vector containing elements 2x ;x; for all i and j. Linear\nSFA modules may then be composed to learn deep nonlinear slow feature extractors\nby repeatedly learning a linear SFA feature extractor, applying a nonlinear basis\nexpansion to its output, and then learning another linear SFA feature extractor on\ntop of that expansion.\n\nWhen trained on small spatial patches of videos of natural scenes, SFA with\nquadratic basis expansions learns features that share many characteristics with\nthose of complex cells in V1 cortex (Berkes and Wiskott, 2005). When trained\non videos of random motion within 3-D computer rendered environments, deep\nSFA learns features that share many characteristics with the features represented\nby neurons in rat brains that are used for navigation (Franzius et al., 2007). SFA\nthus seems to be a reasonably biologically plausible model.\n\nA major advantage of SFA is that it is possibly to theoretically predict which\nfeatures SFA will learn, even in the deep, nonlinear setting. To make such theoretical\npredictions, one must know about the dynamics of the environment in terms of\nconfiguration space (e.g., in the case of random motion in the 3-D rendered\nenvironment, the theoretical analysis proceeds from knowledge of the probability\ndistribution over position and velocity of the camera). Given the knowledge of how\nthe underlying factors actually change, it is possible to analytically solve for the\noptimal functions expressing these factors. In practice, experiments with deep SFA\napplied to simulated data seem to recover the theoretically predicted functions.\n\n495\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nThis is in comparison to other learning algorithms where the cost function depends\nhighly on specific pixel values, making it much more difficult to determine what\nfeatures the model will learn.\n\nDeep SFA has also been used to learn features for object recognition and pose\nestimation (Franzius ef al., 2008). So far, the slowness principle has not become\nthe basis for any state of the art applications. It is unclear what factor has limited\nits performance. We speculate that perhaps the slowness prior is too strong, and\nthat, rather than imposing a prior that features should be approximately constant,\nit would be better to impose a prior that features should be easy to predict from\none time step to the next. The position of an object is a useful feature regardless of\nwhether the object\u2019s velocity is high or low, but the slowness principle encourages\nthe model to ignore the position of objects that have high velocity.\n\n13.4 Sparse Coding\n\nSparse coding (Olshausen and Field, 1996) is a linear factor model that has\nbeen heavily studied as an unsupervised feature learning and feature extraction\nmechanism. Strictly speaking, the term \u201csparse coding\u201d refers to the process of\ninferring the value of A in this model, while \u201csparse modeling\u201d refers to the process\nof designing and learning the model, but the term \u201csparse coding\u201d is often used to\nrefer to both.\n\nLike most other linear factor models, it uses a linear decoder plus noise to\nobtain reconstructions of a, as specified in equation 13.2. More specifically, sparse\ncoding models typically assume that the linear factors have Gaussian noise with\nisotropic precision (:\n\n1\np(\u00ab | h) =N(@;Wh +b, ZT). (13.12)\nThe distribution p(h) is chosen to be one with sharp peaks near 0 (Olshausen\nand Field, 1996). Common choices include factorized Laplace, Cauchy or factorized\nStudent-t distributions. For example, the Laplace prior parametrized in terms of\nthe sparsity penalty coefficient \\ is given by\n\np(Ii) = Laplace(hi; 0, *) = Aer dahl (13.13)\n\nand the Student-t prior by\n\n1\np(hi) < \u2014 as\n6B\n\n496\n\n(13.14)\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nTraining sparse coding with maximum likelihood is intractable. Instead, the\ntraining alternates between encoding the data and training the decoder to better\nreconstruct the data given the encoding. This approach will be justified further as\na principled approximation to maximum likelihood later, in section 19.3.\n\nFor models such as PCA, we have seen the use of a parametric encoder function\nthat predicts h and consists only of multiplication by a weight matrix. The encoder\nthat we use with sparse coding is not a parametric encoder. Instead, the encoder\nis an optimization algorithm, that solves an optimization problem in which we seek\nthe single most likely code value:\n\nht = f(@) = argmaxp(h | 2) (13.15)\n\nWhen combined with equation 13.13 and equation 13.12, this yields the following\noptimization problem:\n\narg max p(h | 2) (13.16)\nh\n\n= arg max log p(h | x) (13.17)\nh\n\n=arg min A||h||1 + Blla \u2014 WhI|5, (13.18)\nh\n\nwhere we have dropped terms not depending on h and divided by positive scaling\nfactors to simplify the equation.\n\nDue to the imposition of an L! norm on h, this procedure will yield a sparse\nh* (See section 7.1.2).\n\nTo train the model rather than just perform inference, we alternate between\nminimization with respect to h and minimization with respect to W. In this\npresentation, we treat 3 as a hyperparameter. Typically it is set to 1 because its\nrole in this optimization problem is shared with \\ and there is no need for both\nhyperparameters. In principle, we could also treat @ as a parameter of the model\nand learn it. Our presentation here has discarded some terms that do not depend\non h but do depend on ~. To learn 8, these terms must be included, or @ will\ncollapse to 0.\n\nNot all approaches to sparse coding explicitly build a p(h) and a p(a | h).\n\nOften we are just interested in learning a dictionary of features with activation\nvalues that will often be zero when extracted using this inference procedure.\n\nIf we sample h from a Laplace prior, it is in fact a zero probability event for\nan element of h to actually be zero. The generative model itself is not especially\nsparse, only the feature extractor is. Goodfellow et al. (2013d) describe approximate\n\n497\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\ninference in a different model family, the spike and slab sparse coding model, for\nwhich samples from the prior usually contain true zeros.\n\nThe sparse coding approach combined with the use of the non-parametric\nencoder can in principle minimize the combination of reconstruction error and\nlog-prior better than any specific parametric encoder. Another advantage is that\nthere is no generalization error to the encoder. A parametric encoder must learn\nhow to map \u00ab to A in a way that generalizes. For unusual # that do not resemble\nthe training data, a learned, parametric encoder may fail to find an h that results\nin accurate reconstruction or a sparse code. For the vast majority of formulations\nof sparse coding models, where the inference problem is convex, the optimization\nprocedure will always find the optimal code (unless degenerate cases such as\nreplicated weight vectors occur). Obviously, the sparsity and reconstruction costs\ncan still rise on unfamiliar points, but this is due to generalization error in the\ndecoder weights, rather than generalization error in the encoder. The lack of\ngeneralization error in sparse coding\u2019s optimization-based encoding process may\nresult in better generalization when sparse coding is used as a feature extractor for\na classifier than when a parametric function is used to predict the code. Coates\nand Ng (2011) demonstrated that sparse coding features generalize better for\nobject recognition tasks than the features of a related model based on a parametric\nencoder, the linear-sigmoid autoencoder. Inspired by their work, Goodfellow ef al.\n(2013d) showed that a variant of sparse coding generalizes better than other feature\nextractors in the regime where extremely few labels are available (twenty or fewer\nlabels per class).\n\nThe primary disadvantage of the non-parametric encoder is that it requires\ngreater time to compute h given a because the non-parametric approach requires\nrunning an iterative algorithm. The parametric autoencoder approach, developed\nin chapter 14, uses only a fixed number of layers, often only one. Another\ndisadvantage is that it is not straight-forward to back-propagate through the\nnon-parametric encoder, which makes it difficult to pretrain a sparse coding model\nwith an unsupervised criterion and then fine-tune it using a supervised criterion.\nModified versions of sparse coding that permit approximate derivatives do exist\nbut are not widely used (Bagnell and Bradley, 2009).\n\nSparse coding, like other linear factor models, often produces poor samples, as\nshown in figure 13.2. This happens even when the model is able to reconstruct\nthe data well and provide useful features for a classifier. The reason is that each\nindividual feature may be learned well, but the factorial prior on the hidden code\nresults in the model including random subsets of all of the features in each generated\nsample. This motivates the development of deeper models that can impose a non-\n\n498\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nA\n9\ne\n4\n\n|G | | Sea\n\n=\n\nOS | GF] HH ND | OV) Ss |S\n\nFigure 13.2: Example samples and weights from a spike and slab sparse coding model\ntrained on the MNIST dataset. (Left)The samples from the model do not resemble the\ntraining examples. At first glance, one might assume the model is poorly fit. (Right)The\nweight vectors of the model have learned to represent penstrokes and sometimes complete\ndigits. The model has thus learned useful features. The problem is that the factorial prior\nover features results in random subsets of features being combined. Few such subsets\nare appropriate to form a recognizable MNIST digit. This motivates the development of\ngenerative models that have more powerful distributions over their latent codes. Figure\nreproduced with permission from Goodfellow e\u00a2 al. (2013d).\n\nfactorial distribution on the deepest code layer, as well as the development of more\nsophisticated shallow models.\n\n13.5 Manifold Interpretation of PCA\n\nLinear factor models including PCA and factor analysis can be interpreted as\nlearning a manifold (Hinton ez al., 1997). We can view probabilistic PCA as\ndefining a thin pancake-shaped region of high probability\u2014a Gaussian distribution\nthat is very narrow along some axes, just as a pancake is very flat along its vertical\naxis, but is elongated along other axes, just as a pancake is wide along its horizontal\naxes. This is illustrated in figure 13.3. PCA can be interpreted as aligning this\npancake with a linear manifold in a higher-dimensional space. This interpretation\napplies not just to traditional PCA but also to any linear autoencoder that learns\nmatrices W and V with the goal of making the reconstruction of & lie as close to\nzx as possible,\n\nLet the encoder be\nh= f(a)=W'(a#\u2014-p). (13.19)\n\n499\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\nThe encoder computes a low-dimensional representation of h. With the autoencoder\nview, we have a decoder computing the reconstruction\n\n& = g(h) =b+Vh. (13.20)\n\nFigure 13.3: Flat Gaussian capturing probability concentration near a low-dimensional\nmanifold. The figure shows the upper half of the \u201cpancake\u201d above the \u201cmanifold plane\u201d\nwhich goes through its middle. The variance in the direction orthogonal to the manifold is\nvery small (arrow pointing out of plane) and can be considered like \u201cnoise,\u201d while the other\nvariances are large (arrows in the plane) and correspond to \u201csignal,\u201d and a coordinate\nsystem for the reduced-dimension data.\n\nThe choices of linear encoder and decoder that minimize reconstruction error\nE [lla \u2014 @|\\?| (13.21)\n\ncorrespond to V = W, yp = 6b = E{a| and the columns of W form an orthonormal\nbasis which spans the same subspace as the principal eigenvectors of the covariance\nmatrix\n\nC =E[(a \u2014 w)(x\u2014 w)\"}. (13.22)\nIn the case of PCA, the columns of W are these eigenvectors, ordered by the\nmagnitude of the corresponding eigenvalues (which are all real and non-negative).\n\nOne can also show that eigenvalue ; of C' corresponds to the variance of x\nin the direction of eigenvector uv. If 2 \u20ac R\u00b0 and h \u20ac R\u00a2 with d < D, then the\n\n500\n", "CHAPTER 13. LINEAR FACTOR MODELS\n\noptimal reconstruction error (choosing ps, b, V and W as above) is\n\nD\nmin E[lja \u2014 @\\|7] = S> A. (13.23)\ni=d+1\n\nHence, if the covariance has rank d, the eigenvalues Ag+1 to Ap are 0 and recon-\nstruction error is 0.\n\nFurthermore, one can also show that the above solution can be obtained by\nmaximizing the variances of the elements of h, under orthogonal W, instead of\nminimizing reconstruction error.\n\nLinear factor models are some of the simplest generative models and some of the\nsimplest models that learn a representation of data. Much as linear classifiers and\nlinear regression models may be extended to deep feedforward networks, these linear\nfactor models may be extended to autoencoder networks and deep probabilistic\nmodels that perform the same tasks but with a much more powerful and flexible\nmodel family.\n", "Chapter 14\n\nAutoencoders\n\nAn autoencoder is a neural network that is trained to attempt to copy its input\nto its output. Internally, it has a hidden layer h that describes a code used to\nrepresent the input. The network may be viewed as consisting of two parts: an\nencoder function h = f(a) and a decoder that produces a reconstruction r = g(h).\nThis architecture is presented in figure 14.1. If an autoencoder succeeds in simply\nlearning to set g(f(x)) = x everywhere, then it is not especially useful. Instead,\nautoencoders are designed to be unable to learn to copy perfectly. Usually they are\nrestricted in ways that allow them to copy only approximately, and to copy only\ninput that resembles the training data. Because the model is forced to prioritize\nwhich aspects of the input should be copied, it often learns useful properties of the\ndata.\n\nModern autoencoders have generalized the idea of an encoder and a de-\ncoder beyond deterministic functions to stochastic mappings Pencoder(h | #) and\nPdecoder (# | h).\n\nThe idea of autoencoders has been part of the historical landscape of neural\nnetworks for decades (LeCun, 1987; Bourlard and Kamp, 1988; Hinton and Zemel,\n1994). Traditionally, autoencoders were used for dimensionality reduction or\nfeature learning. Recently, theoretical connections between autoencoders and\nlatent variable models have brought autoencoders to the forefront of generative\nmodeling, as we will see in chapter 20. Autoencoders may be thought of as being\na special case of feedforward networks, and may be trained with all of the same\ntechniques, typically minibatch gradient descent following gradients computed\nby back-propagation. Unlike general feedforward networks, autoencoders may\nalso be trained using recirculation (Hinton and McClelland, 1988), a learning\nalgorithm based on comparing the activations of the network on the original input\n\n502\n", "CHAPTER 14. AUTOENCODERS\n\nto the activations on the reconstructed input. Recirculation is regarded as more\nbiologically plausible than back-propagation, but is rarely used for machine learning\napplications.\n\nFigure 14.1: The general structure of an autoencoder, mapping an input x to an output\n(called reconstruction) r through an internal representation or code h. The autoencoder\nhas two components: the encoder f (mapping a to h) and the decoder g (mapping h to\nr).\n\n14.1 Undercomplete Autoencoders\n\nCopying the input to the output may sound useless, but we are typically not\ninterested in the output of the decoder. Instead, we hope that training the\nautoencoder to perform the input copying task will result in h taking on useful\nproperties.\n\nOne way to obtain useful features from the autoencoder is to constrain h to\nhave smaller dimension than a. An autoencoder whose code dimension is less\nthan the input dimension is called undercomplete. Learning an undercomplete\nrepresentation forces the autoencoder to capture the most salient features of the\ntraining data.\n\nThe learning process is described simply as minimizing a loss function\n\nL(x, 9(f(#))) (14.1)\n\nwhere L is a loss function penalizing g(f(a)) for being dissimilar from a, such as\nthe mean squared error.\n\nWhen the decoder is linear and L is the mean squared error, an undercomplete\nautoencoder learns to span the same subspace as PCA. In this case, an autoencoder\ntrained to perform the copying task has learned the principal subspace of the\ntraining data as a side-effect.\n\nAutoencoders with nonlinear encoder functions f and nonlinear decoder func-\ntions g can thus learn a more powerful nonlinear generalization of PCA. Unfortu-\n\n503\n", "CHAPTER 14. AUTOENCODERS\n\nnately, if the encoder and decoder are allowed too much capacity, the autoencoder\ncan learn to perform the copying task without extracting useful information about\nthe distribution of the data. Theoretically, one could imagine that an autoencoder\nwith a one-dimensional code but a very powerful nonlinear encoder could learn to\nrepresent each training example x with the code i. The decoder could learn to\nmap these integer indices back to the values of specific training examples. This\nspecific scenario does not occur in practice, but it illustrates clearly that an autoen-\ncoder trained to perform the copying task can fail to learn anything useful about\nthe dataset if the capacity of the autoencoder is allowed to become too great.\n\n14.2 Regularized Autoencoders\n\nUndercomplete autoencoders, with code dimension less than the input dimension,\ncan learn the most salient features of the data distribution. We have seen that\nthese autoencoders fail to learn anything useful if the encoder and decoder are\ngiven too much capacity.\n\nA similar problem occurs if the hidden code is allowed to have dimension\nequal to the input, and in the overcomplete case in which the hidden code has\ndimension greater than the input. In these cases, even a linear encoder and linear\ndecoder can learn to copy the input to the output without learning anything useful\nabout the data distribution.\n\nIdeally, one could train any architecture of autoencoder successfully, choosing\nthe code dimension and the capacity of the encoder and decoder based on the\ncomplexity of distribution to be modeled. Regularized autoencoders provide the\nability to do so. Rather than limiting the model capacity by keeping the encoder\nand decoder shallow and the code size small, regularized autoencoders use a loss\nfunction that encourages the model to have other properties besides the ability\nto copy its input to its output. These other properties include sparsity of the\nrepresentation, smallness of the derivative of the representation, and robustness\nto noise or to missing inputs. A regularized autoencoder can be nonlinear and\novercomplete but still learn something useful about the data distribution even if\nthe model capacity is great enough to learn a trivial identity function.\n\nIn addition to the methods described here which are most naturally interpreted\nas regularized autoencoders, nearly any generative model with latent variables\nand equipped with an inference procedure (for computing latent representations\ngiven input) may be viewed as a particular form of autoencoder. Two generative\nmodeling approaches that emphasize this connection with autoencoders are the\ndescendants of the Helmholtz machine (Hinton et al., 1995b), such as the variational\n\nc\n\n504\n", "CHAPTER 14. AUTOENCODERS\n\nautoencoder (section 20.10.3) and the generative stochastic networks (section 20.12).\nThese models naturally learn high-capacity, overcomplete encodings of the input\nand do not require regularization for these encodings to be useful. Their encodings\nare naturally useful because the models were trained to approximately maximize\nthe probability of the training data rather than to copy the input to the output.\n\n14.2.1 Sparse Autoencoders\n\nA sparse autoencoder is simply an autoencoder whose training criterion involves a\nsparsity penalty Q(h) on the code layer h, in addition to the reconstruction error:\n\nL(x, g(f(x))) + 2(h) (14.2)\nwhere g(h) is the decoder output and typically we have h = f(a), the encoder\noutput.\n\nSparse autoencoders are typically used to learn features for another task such\nas classification. An autoencoder that has been regularized to be sparse must\nrespond to unique statistical features of the dataset it has been trained on, rather\nthan simply acting as an identity function. In this way, training to perform the\ncopying task with a sparsity penalty can yield a model that has learned useful\nfeatures as a byproduct.\n\nWe can think of the penalty Q(h) simply as a regularizer term added to\na feedforward network whose primary task is to copy the input to the output\n(unsupervised learning objective) and possibly also perform some supervised task\n(with a supervised learning objective) that depends on these sparse features.\nUnlike other regularizers such as weight decay, there is not a straightforward\nBayesian interpretation to this regularizer. As described in section 5.6.1, training\nwith weight decay and other regularization penalties can be interpreted as a\nMAP approximation to Bayesian inference, with the added regularizing penalty\ncorresponding to a prior probability distribution over the model parameters. In\nthis view, regularized maximum likelihood corresponds to maximizing p(@ | \u00ab),\nwhich is equivalent to maximizing log p(x | 8) + log p(@). The log p(a | 8) term\nis the usual data log-likelihood term and the logp(@) term, the log-prior over\nparameters, incorporates the preference over particular values of 8. This view was\ndescribed in section 5.6. Regularized autoencoders defy such an interpretation\nbecause the regularizer depends on the data and is therefore by definition not a\nprior in the formal sense of the word. We can still think of these regularization\nterms as implicitly expressing a preference over functions.\n\nRather than thinking of the sparsity penalty as a regularizer for the copying\ntask, we can think of the entire sparse autoencoder framework as approximating\n\n505\n", "CHAPTER 14. AUTOENCODERS\n\nmaximum likelihood training of a generative model that has latent variables.\nSuppose we have a model with visible variables 2 and latent variables h, with\nan explicit joint distribution pmodel(@,h) = Pmodel(h) Pmodel(# | h). We refer to\nPmodel(h.) as the model\u2019s prior distribution over the latent variables, representing\nthe model\u2019s beliefs prior to seeing x. This is different from the way we have\npreviously used the word \u201cprior,\u201d to refer to the distribution p(@) encoding our\nbeliefs about the model\u2019s parameters before we have seen the training data. The\nlog-likelihood can be decomposed as\n\nlog Pmodel (@) = log S> Pmodel (h, x). (14.3)\nh\n\nWe can think of the autoencoder as approximating this sum with a point estimate\nfor just one highly likely value for h. This is similar to the sparse coding generative\nmodel (section 13.4), but with h being the output of the parametric encoder rather\nthan the result of an optimization that infers the most likely h. From this point of\nview, with this chosen h, we are maximizing\n\nlog Pmodel (Rh, x) = log Pmodei(h) + log Pmodel (# h). (14.4)\n\nThe log pmodei(h) term can be sparsity-inducing. For example, the Laplace prior,\n\nrv\nPmodel (Mi) = 3\u00b0 Alhil (14.5)\n\ncorresponds to an absolute value sparsity penalty. Expressing the log-prior as an\nabsolute value penalty, we obtain\n\nO(n) => hi) (14.6)\n\nnN\n\u2014 log pmodei(h) = S> (ain log ;) = Q(h) + const (14.7)\n\na\n\nwhere the constant term depends only on A and not h. We typically treat A as a\nhyperparameter and discard the constant term since it does not affect the parameter\nlearning. Other priors such as the Student-t prior can also induce sparsity. From\nthis point of view of sparsity as resulting from the effect of Pmodei (R) on approximate\nmaximum likelihood learning, the sparsity penalty is not a regularization term at\nall. It is just a consequence of the model\u2019s distribution over its latent variables.\nThis view provides a different motivation for training an autoencoder: it is a way\nof approximately training a generative model. It also provides a different reason for\n\nc\n\n506\n", "CHAPTER 14. AUTOENCODERS\n\nwhy the features learned by the autoencoder are useful: they describe the latent\nvariables that explain the input.\n\nEarly work on sparse autoencoders (Ranzato et al., 2007a, 2008) explored\nvarious forms of sparsity and proposed a connection between the sparsity penalty\nand the log Z term that arises when applying maximum likelihood to an undirected\nprobabilistic model p(a) = 2 p(a). The idea is that minimizing log Z prevents a\nprobabilistic model from having high probability everywhere, and imposing sparsity\non an autoencoder prevents the autoencoder from having low reconstruction\nerror everywhere. In this case, the connection is on the level of an intuitive\nunderstanding of a general mechanism rather than a mathematical correspondence.\nThe interpretation of the sparsity penalty as corresponding to log pmodei(h) in a\ndirected model pmodel (Rh) Pmodel(# | h) is more mathematically straightforward.\n\nOne way to achieve actual zeros in h for sparse (and denoising) autoencoders\nwas introduced in Glorot ef al. (2011b). The idea is to use rectified linear units to\nproduce the code layer. With a prior that actually pushes the representations to\nzero (like the absolute value penalty), one can thus indirectly control the average\nnumber of zeros in the representation.\n\n14.2.2 Denoising Autoencoders\n\nRather than adding a penalty 2 to the cost function, we can obtain an autoencoder\nthat learns something useful by changing the reconstruction error term of the cost\nfunction.\n\nTraditionally, autoencoders minimize some function\n\nL(x, 9(f(x))) (14.8)\n\nwhere L is a loss function penalizing g(f(a)) for being dissimilar from a, such as\nthe L? norm of their difference. This encourages go f to learn to be merely an\nidentity function if they have the capacity to do so.\n\nA denoising autoencoder or DAE instead minimizes\n\nL(x, 9(f(\u00ae))), (14.9)\n\nwhere & is a copy of x that has been corrupted by some form of noise. Denoising\nautoencoders must therefore undo this corruption rather than simply copying their\ninput.\n\nDenoising training forces f and g to implicitly learn the structure of Pgata (2),\nas shown by Alain and Bengio (2013) and Bengio et al. (2013c). Denoising\n\nc\n\n507\n", "CHAPTER 14. AUTOENCODERS\n\nautoencoders thus provide yet another example of how useful properties can emerge\nas a byproduct of minimizing reconstruction error. They are also an example of\nhow overcomplete, high-capacity models may be used as autoencoders so long\nas care is taken to prevent them from learning the identity function. Denoising\nautoencoders are presented in more detail in section 14.5.\n\n14.2.3 Regularizing by Penalizing Derivatives\n\nAnother strategy for regularizing an autoencoder is to use a penalty Q as in sparse\nautoencoders,\n\nL(x, g(f(@))) + Qh, x), (14.10)\nbut with a different form of (2:\n\nO(h, 2) =AS7 ||\\Vehil?. (14.11)\n\nThis forces the model to learn a function that does not change much when \u00ab\nchanges slightly. Because this penalty is applied only at training examples, it forces\nthe autoencoder to learn features that capture information about the training\ndistribution.\n\nAn autoencoder regularized in this way is called a contractive autoencoder\nor CAE. This approach has theoretical connections to denoising autoencoders,\nmanifold learning and probabilistic modeling. The CAE is described in more detail\nin section 14.7.\n\n14.3. Representational Power, Layer Size and Depth\n\nAutoencoders are often trained with only a single layer encoder and a single layer\ndecoder. However, this is not a requirement. In fact, using deep encoders and\ndecoders offers many advantages.\n\nRecall from section 6.4.1 that there are many advantages to depth in a feedfor-\nward network. Because autoencoders are feedforward networks, these advantages\nalso apply to autoencoders. Moreover, the encoder is itself a feedforward network\nas is the decoder, so each of these components of the autoencoder can individually\nbenefit from depth.\n\nOne major advantage of non-trivial depth is that the universal approximator\ntheorem guarantees that a feedforward neural network with at least one hidden\nlayer can represent an approximation of any function (within a broad class) to an\n\nc\n\n508\n", "CHAPTER 14. AUTOENCODERS\n\narbitrary degree of accuracy, provided that it has enough hidden units. This means\nthat an autoencoder with a single hidden layer is able to represent the identity\nfunction along the domain of the data arbitrarily well. However, the mapping from\ninput to code is shallow. This means that we are not able to enforce arbitrary\nconstraints, such as that the code should be sparse. A deep autoencoder, with at\nleast one additional hidden layer inside the encoder itself, can approximate any\nmapping from input to code arbitrarily well, given enough hidden units.\n\nDepth can exponentially reduce the computational cost of representing some\nfunctions. Depth can also exponentially decrease the amount of training data\nneeded to learn some functions. See section 6.4.1 for a review of the advantages of\ndepth in feedforward networks.\n\nExperimentally, deep autoencoders yield much better compression than corre-\nsponding shallow or linear autoencoders (Hinton and Salakhutdinov, 2006).\n\nA common strategy for training a deep autoencoder is to greedily pretrain\nthe deep architecture by training a stack of shallow autoencoders, so we often\nencounter shallow autoencoders, even when the ultimate goal is to train a deep\nautoencoder.\n\n14.4 Stochastic Encoders and Decoders\n\nAutoencoders are just feedforward networks. The same loss functions and output\nunit types that can be used for traditional feedforward networks are also used for\nautoencoders.\n\nAs described in section 6.2.2.4, a general strategy for designing the output units\nand the loss function of a feedforward network is to define an output distribution\np(y | z) and minimize the negative log-likelihood \u2014 log p(y | x). In that setting, y\nwas a vector of targets, such as class labels.\n\nIn the case of an autoencoder, x is now the target as well as the input. However,\nwe can still apply the same machinery as before. Given a hidden code h, we may\nthink of the decoder as providing a conditional distribution pdecoder(@ | 2). We\nmay then train the autoencoder by minimizing \u2014 log Paecoder(a@ | h). The exact\nform of this loss function will change depending on the form of pgecoder- AS with\ntraditional feedforward networks, we usually use linear output units to parametrize\nthe mean of a Gaussian distribution if x is real-valued. In that case, the negative\nlog-likelihood yields a mean squared error criterion. Similarly, binary x values\ncorrespond to a Bernoulli distribution whose parameters are given by a sigmoid\noutput unit, discrete x values correspond to a softmax distribution, and so on.\n\nc\n\n509\n", "CHAPTER 14. AUTOENCODERS\n\nTypically, the output variables are treated as being conditionally independent\ngiven h so that this probability distribution is inexpensive to evaluate, but some\ntechniques such as mixture density outputs allow tractable modeling of outputs\nwith correlations.\n\nPencoder(h | x) Padecoder(# | h)\n\nFigure 14.2: The structure of a stochastic autoencoder, in which both the encoder and the\ndecoder are not simple functions but instead involve some noise injection, meaning that\ntheir output can be seen as sampled from a distribution, Pencoder(h | x) for the encoder\nand Pdecoder(& | h) for the decoder.\n\nTo make a more radical departure from the feedforward networks we have seen\npreviously, we can also generalize the notion of an encoding function f(x) to\nan encoding distribution Pencoder(h | x), as illustrated in figure 14.2.\n\nAny latent variable model pmodei (hk, #) defines a stochastic encoder\n\nPencoder (ht | x) = Pmodel (A | x) (14.12)\n\nand a stochastic decoder\n\nPdecoder(& | h) = Pmodei (& | h). (14.13)\n\nIn general, the encoder and decoder distributions are not necessarily conditional\ndistributions compatible with a unique joint distribution Pmoae(v,h). Alain et al.\n(2015) showed that training the encoder and decoder as a denoising autoencoder\nwill tend to make them compatible asymptotically (with enough capacity and\nexamples).\n\n14.5 Denoising Autoencoders\n\nThe denoising autoencoder (DAE) is an autoencoder that receives a corrupted\ndata point as input and is trained to predict the original, uncorrupted data point\nas its output.\n\nThe DAE training procedure is illustrated in figure 14.3. We introduce a\ncorruption process C(x | x) which represents a conditional distribution over\n\nc\n\n510\n", "CHAPTER 14. AUTOENCODERS\n\nFigure 14.3: The computational graph of the cost function for a denoising autoencoder,\nwhich is trained to reconstruct the clean data point x from its corrupted version \u00ab.\nThis is accomplished by minimizing the loss L = \u2014 log paecoder(@ | h = f(#)), where\nZ is a corrupted version of the data example zx, obtained through a given corruption\nprocess C(& | x). Typically the distribution paecoder is a factorial distribution whose mean\nparameters are emitted by a feedforward network g.\n\ncorrupted samples x, given a data sample x. The autoencoder then learns a\nreconstruction distribution Preconstruct (X | X) estimated from training pairs\n(a,%), as follows:\n\n1. Sample a training example a from the training data.\n2. Sample a corrupted version & from C(X | x = 2).\n\n3. Use (a, @) as a training example for estimating the autoencoder reconstruction\ndistribution Preconstruct(@ | Z) = Ddecoder(x | h) with h the output of encoder\nf(#) and pdecoder typically defined by a decoder g(h).\n\nTypically we can simply perform gradient-based approximate minimization (such\nas minibatch gradient descent) on the negative log-likelihood \u2014 log paecoder(x | h)-\nSo long as the encoder is deterministic, the denoising autoencoder is a feedforward\nnetwork and may be trained with exactly the same techniques as any other\nfeedforward network.\n\nWe can therefore view the DAE as performing stochastic gradient descent on\nthe following expectation:\n\n_ Ey pata (x) EEN C(kla) log Pdecoder (x h= f@)) (14.14)\nwhere Paata(x) is the training distribution.\n\n511\n", "CHAPTER 14. AUTOENCODERS\n\nFigure 14.4: A denoising autoencoder is trained to map a corrupted data point % back to\nthe original data point x. We illustrate training examples \u00ab as red crosses lying near a\nlow-dimensional manifold illustrated with the bold black line. We illustrate the corruption\nprocess C'(& | x) with a gray circle of equiprobable corruptions. A gray arrow demonstrates\nhow one training example is transformed into one sample from this corruption process.\nWhen the denoising autoencoder is trained to minimize the average of squared errors\n\\lg( f(@)) \u20142||?, the reconstruction g (f()) estimates Ex z.paata(x)C(XpoLX | &]. The vector\ng(f()) \u2014& points approximately towards the nearest point on the manifold, since g(f(x))\nestimates the center of mass of the clean points x which could have given rise to &. The\nautoencoder thus learns a vector field g( f (x)) \u2014 x indicated by the green arrows. This\nvector field estimates the score V log paata(@) up to a multiplicative factor that is the\naverage root mean square reconstruction error.\n\n512\n", "CHAPTER 14. AUTOENCODERS\n\n14.5.1 Estimating the Score\n\nScore matching (Hyvarinen, 2005) is an alternative to maximum likelihood. It\nprovides a consistent estimator of probability distributions based on encouraging\nthe model to have the same score as the data distribution at every training point\nz. In this context, the score is a particular gradient field:\n\nVz log p(a). (14.15)\n\nScore matching is discussed further in section 18.4. For the present discussion\nregarding autoencoders, it is sufficient to understand that learning the gradient\nfield of log paata is one way to learn the structure of Pgata itself.\n\nA very important property of DAEs is that their training criterion (with\nconditionally Gaussian p(a | h)) makes the autoencoder learn a vector field\n(9( f(a)) \u2014 a) that estimates the score of the data distribution. This is illustrated\nin figure 14.4.\n\nDenoising training of a specific kind of autoencoder (sigmoidal hidden units,\nlinear reconstruction units) using Gaussian noise and mean squared error as\nthe reconstruction cost is equivalent (Vincent, 2011) to training a specific kind\nof undirected probabilistic model called an RBM with Gaussian visible units.\nThis kind of model will be described in detail in section 20.5.1; for the present\ndiscussion it suffices to know that it is a model that provides an explicit pmodel(@;@).\nWhen the RBM is trained using denoising score matching (Kingma and LeCun,\n2010), its learning algorithm is equivalent to denoising training in the corresponding\nautoencoder. With a fixed noise level, regularized score matching is not a consistent\nestimator; it instead recovers a blurred version of the distribution. However, if\nthe noise level is chosen to approach 0 when the number of examples approaches\ninfinity, then consistency is recovered. Denoising score matching is discussed in\nmore detail in section 18.5.\n\nOther connections between autoencoders and RBMs exist. Score matching\napplied to RBMs yields a cost function that is identical to reconstruction error\ncombined with a regularization term similar to the contractive penalty of the\nCAE (Swersky e\u00a2 al., 2011). Bengio and Delalleau (2009) showed that an autoen-\ncoder gradient provides an approximation to contrastive divergence training of\n\nRBMs.\n\nFor continuous-valued a, the denoising criterion with Gaussian corruption and\nreconstruction distribution yields an estimator of the score that is applicable to\ngeneral encoder and decoder parametrizations (Alain and Bengio, 2013). This\nmeans a generic encoder-decoder architecture may be made to estimate the score\n\nc\n\n513\n", "CHAPTER 14. AUTOENCODERS\n\nby training with the squared error criterion\n\nI|o(f(#)) \u2014 all? (14.16)\n\nand corruption\n\nC(% = ala) =N(@;p= 2,0 =0'1) (14.17)\n\nwith noise variance 07. See figure 14.5 for an illustration of how this works.\n\na4\na\u201c\n+\n\nee tf LEN\nSS\n\nAS\n\n\"erate tr rrr rrrers\n\na\nMNO OA AO\n\noe ee el al on ie ene\n\neee ee Oe 2 2\nTV NNN YLT EE RRA RR RRP\n\nPUAN NQV VALET ETRE EE PRES\n\nA ee ee\n\n-Re eR KEE\n\n.\n-\n*\n7\n7\n7\n*\n-\n'\nLi\n,\n\ny\u00a5YY ee\ni i a a a a |\n\na\nxy we\n\nFigure 14.5: Vector field learned by a denoising autoencoder around a 1-D curved manifold\nnear which the data concentrates in a 2-D space. Each arrow is proportional to the\nreconstruction minus input vector of the autoencoder and points towards higher probability\naccording to the implicitly estimated probability distribution. The vector field has zeros\nat both maxima of the estimated density function (on the data manifolds) and at minima\nof that density function. For example, the spiral arm forms a one-dimensional manifold of\nlocal maxima that are connected to each other. Local minima appear near the middle of\nthe gap between two arms. When the norm of reconstruction error (shown by the length\nof the arrows) is large, it means that probability can be significantly increased by moving\nin the direction of the arrow, and that is mostly the case in places of low probability.\nThe autoencoder maps these low probability points to higher probability reconstructions.\nWhere probability is maximal, the arrows shrink because the reconstruction becomes more\naccurate. Figure reproduced with permission from Alain and Bengio (2013).\n\nIn general, there is no guarantee that the reconstruction g(f(x)) minus the\ninput x corresponds to the gradient of any function, let alone to the score. That is\n\n514\n", "CHAPTER 14. AUTOENCODERS\n\nwhy the early results (Vincent, 2011) are specialized to particular parametrizations\nwhere g(f(a#)) \u2014 # may be obtained by taking the derivative of another function.\nKamyshanska and Memisevic (2015) generalized the results of Vincent (2011) by\nidentifying a family of shallow autoencoders such that g(f(a)) \u2014 a corresponds to\na score for all members of the family.\n\nSo far we have described only how the denoising autoencoder learns to represent\na probability distribution. More generally, one may want to use the autoencoder as\na generative model and draw samples from this distribution. This will be described\nlater, in section 20.11.\n\n14.5.1.1 Historical Perspective\n\nThe idea of using MLPs for denoising dates back to the work of LeCun (1987)\nand Gallinari et al. (1987). Behnke (2001) also used recurrent networks to denoise\nimages. Denoising autoencoders are, in some sense, just MLPs trained to denoise.\nHowever, the name \u201cdenoising autoencoder\u201d refers to a model that is intended not\nmerely to learn to denoise its input but to learn a good internal representation\nas a side effect of learning to denoise. This idea came much later (Vincent\net al., 2008, 2010). The learned representation may then be used to pretrain a\ndeeper unsupervised network or a supervised network. Like sparse autoencoders,\nsparse coding, contractive autoencoders and other regularized autoencoders, the\nmotivation for DAEs was to allow the learning of a very high-capacity encoder\nwhile preventing the encoder and decoder from learning a useless identity function.\n\nPrior to the introduction of the modern DAE, Inayoshi and Kurita (2005)\nexplored some of the same goals with some of the same methods. Their approach\nminimizes reconstruction error in addition to a supervised objective while injecting\nnoise in the hidden layer of a supervised MLP, with the objective to improve\ngeneralization by introducing the reconstruction error and the injected noise.\nHowever, their method was based on a linear encoder and could not learn function\nfamilies as powerful as can the modern DAE.\n\n14.6 Learning Manifolds with Autoencoders\n\nLike many other machine learning algorithms, autoencoders exploit the idea\nthat data concentrates around a low-dimensional manifold or a small set of such\nmanifolds, as described in section 5.11.3. Some machine learning algorithms exploit\nthis idea only insofar as that they learn a function that behaves correctly on the\nmanifold but may have unusual behavior if given an input that is off the manifold.\n\n515\n", "CHAPTER 14. AUTOENCODERS\n\nAutoencoders take this idea further and aim to learn the structure of the manifold.\n\nTo understand how autoencoders do this, we must present some important\ncharacteristics of manifolds.\n\nAn important characterization of a manifold is the set of its tangent planes.\nAt a point x on a ddimensional manifold, the tangent plane is given by d basis\nvectors that span the local directions of variation allowed on the manifold. As\nillustrated in figure 14.6, these local directions specify how one can change &\ninfinitesimally while staying on the manifold.\n\nAll autoencoder training procedures involve a compromise between two forces:\n\n1. Learning a representation Ah of a training example x such that aw can be\napproximately recovered from h through a decoder. The fact that a2 is drawn\nfrom the training data is crucial, because it means the autoencoder need\nnot successfully reconstruct inputs that are not probable under the data\ngenerating distribution.\n\n2. Satisfying the constraint or regularization penalty. This can be an architec-\ntural constraint that limits the capacity of the autoencoder, or it can be\na regularization term added to the reconstruction cost. These techniques\ngenerally prefer solutions that are less sensitive to the input.\n\nClearly, neither force alone would be useful\u2014copying the input to the output\nis not useful on its own, nor is ignoring the input. Instead, the two forces together\nare useful because they force the hidden representation to capture information\nabout the structure of the data generating distribution. The important principle\nis that the autoencoder can afford to represent only the variations that are needed\nto reconstruct training examples. If the data generating distribution concentrates\nnear a low-dimensional manifold, this yields representations that implicitly capture\na local coordinate system for this manifold: only the variations tangent to the\nmanifold around x need to correspond to changes in h= f(a). Hence the encoder\nlearns a mapping from the input space x to a representation space, a mapping that\nis only sensitive to changes along the manifold directions, but that is insensitive to\nchanges orthogonal to the manifold.\n\nA one-dimensional example is illustrated in figure 14.7, showing that, by making\nthe reconstruction function insensitive to perturbations of the input around the\ndata points, we cause the autoencoder to recover the manifold structure.\n\nTo understand why autoencoders are useful for manifold learning, it is in-\nstructive to compare them to other approaches. What is most commonly learned\nto characterize a manifold is a representation of the data points on (or near)\n\nc\n\n516\n", "CHAPTER 14. AUTOENCODERS\n\nFigure 14.6: An illustration of the concept of a tangent hyperplane. Here we create a\none-dimensional manifold in 784-dimensional space. We take an MNIST image with 784\noixels and transform it by translating it vertically. The amount of vertical translation\ndefines a coordinate along a one-dimensional manifold that traces out a curved path\nhrough image space. This plot shows a few points along this manifold. For visualization,\nwe have projected the manifold into two dimensional space using PCA. An n-dimensional\nmanifold has an n-dimensional tangent plane at every point. This tangent plane touches\nhe manifold exactly at that point and is oriented parallel to the surface at that point.\nIt defines the space of directions in which it is possible to move while remaining on\nhe manifold. This one-dimensional manifold has a single tangent line. We indicate an\nexample tangent line at one point, with an image showing how this tangent direction\nappears in image space. Gray pixels indicate pixels that do not change as we move along\nhe tangent line, white pixels indicate pixels that brighten, and black pixels indicate pixels\nhat darken.\n\n", "CHAPTER 14. AUTOENCODERS\n\n\u2014- Identity\n\u2014 Optimal reconstruction\n\nFigure 14.7: If the autoencoder learns a reconstruction function that is invariant to small\nperturbations near the data points, it captures the manifold structure of the data. Here\nthe manifold structure is a collection of 0-dimensional manifolds. The dashed diagonal\nline indicates the identity function target for reconstruction. The optimal reconstruction\nfunction crosses the identity function wherever there is a data point. The horizontal\narrows at the bottom of the plot indicate the r(a) \u2014 a reconstruction direction vector\nat the base of the arrow, in input space, always pointing towards the nearest \u201cmanifold\u201d\n(a single datapoint, in the 1-D case). The denoising autoencoder explicitly tries to make\nthe derivative of the reconstruction function r(x) small around the data points. The\ncontractive autoencoder does the same for the encoder. Although the derivative of r(a) is\nasked to be small around the data points, it can be large between the data points. The\nspace between the data points corresponds to the region between the manifolds, where\nthe reconstruction function must have a large derivative in order to map corrupted points\nback onto the manifold.\n\nthe manifold. Such a representation for a particular example is also called its\nembedding. It is typically given by a low-dimensional vector, with less dimensions\nthan the \u201cambient\u201d space of which the manifold is a low-dimensional subset. Some\nalgorithms (non-parametric manifold learning algorithms, discussed below) directly\nlearn an embedding for each training example, while others learn a more general\nmapping, sometimes called an encoder, or representation function, that maps any\npoint in the ambient space (the input space) to its embedding.\n\nManifold learning has mostly focused on unsupervised learning procedures that\nattempt to capture these manifolds. Most of the initial machine learning research\non learning nonlinear manifolds has focused on non-parametric methods based\non the nearest-neighbor graph. This graph has one node per training example\nand edges connecting near neighbors to each other. These methods (Scholkopf\net al., 1998; Roweis and Saul, 2000; Tenenbaum et al., 2000; Brand, 2003; Belkin\n\n518\n", "CHAPTER 14. AUTOENCODERS\n\nFigure 14.8: Non-parametric manifold learning procedures build a nearest neighbor graph\nin which nodes represent training examples a directed edges indicate nearest neighbor\nrelationships. Various procedures can thus obtain the tangent plane associated with a\nneighborhood of the graph as well as a coordinate system that associates each training\nexample with a real-valued vector position, or embedding. It is possible to generalize\nsuch a representation to new examples by a form of interpolation. So long as the number\nof examples is large enough to cover the curvature and twists of the manifold, these\napproaches work well. Images from the QMUL Multiview Face Dataset (Gong et al.,\n2000).\n\nand Niyogi, 2003; Donoho and Grimes, 2003; Weinberger and Saul, 2004; Hinton\nand Roweis, 2003; van der Maaten and Hinton, 2008) associate each of nodes with a\ntangent plane that spans the directions of variations associated with the difference\nvectors between the example and its neighbors, as illustrated in figure 14.8.\n\nA global coordinate system can then be obtained through an optimization or\nsolving a linear system. Figure 14.9 illustrates how a manifold can be tiled by a\nlarge number of locally linear Gaussian-like patches (or \u201cpancakes,\u201d because the\nGaussians are flat in the tangent directions).\n\nHowever, there is a fundamental difficulty with such local non-parametric\napproaches to manifold learning, raised in Bengio and Monperrus (2005): if the\nmanifolds are not very smooth (they have many peaks and troughs and twists),\n\none may need a very large number of training examples to cover each one of\n\n519\n", "CHAPTER 14. AUTOENCODERS\n\nFigure 14.9: If the tangent planes (see figure 14.6) at each location are known, then they\ncan be tiled to form a global coordinate system or a density function. Each local patch\ncan be thought of as a local Euclidean coordinate system or as a locally flat Gaussian, or\n\u201cpancake,\u201d with a very small variance in the directions orthogonal to the pancake and a\nvery large variance in the directions defining the coordinate system on the pancake. A\nmixture of these Gaussians provides an estimated density function, as in the manifold\nParzen window algorithm (Vincent and Bengio, 2003) or its non-local neural-net based\nvariant (Bengio et al., 2006c).\n\nthese variations, with no chance to generalize to unseen variations. Indeed, these\nmethods can only generalize the shape of the manifold by interpolating between\nneighboring examples. Unfortunately, the manifolds involved in AI problems can\nhave very complicated structure that can be difficult to capture from only local\ninterpolation. Consider for example the manifold resulting from translation shown\nin figure 14.6. If we watch just one coordinate within the input vector, 74, as the\nimage is translated, we will observe that one coordinate encounters a peak or a\ntrough in its value once for every peak or trough in brightness in the image. In\nother words, the complexity of the patterns of brightness in an underlying image\ntemplate drives the complexity of the manifolds that are generated by performing\nsimple image transformations. This motivates the use of distributed representations\nand deep learning for capturing manifold structure.\n", "CHAPTER 14. AUTOENCODERS\n\n14.7 Contractive Autoencoders\n\nThe contractive autoencoder (Rifai ef al., 201 1a,b) introduces an explicit regularizer\non the code h = f(a), encouraging the derivatives of f to be as small as possible:\n\n2\n\nQ(h) =r [42 (14.18)\n\nxv\n\nF\nThe penalty Q(h) is the squared Frobenius norm (sum of squared elements) of the\nJacobian matrix of partial derivatives associated with the encoder function.\n\nThere is a connection between the denoising autoencoder and the contractive\nautoencoder: Alain and Bengio (2013) showed that in the limit of small Gaussian\ninput noise, the denoising reconstruction error is equivalent to a contractive\npenalty on the reconstruction function that maps x to r = g( f(x)). In other\nwords, denoising autoencoders make the reconstruction function resist small but\nfinite-sized perturbations of the input, while contractive autoencoders make the\nfeature extraction function resist infinitesimal perturbations of the input. When\nusing the Jacobian-based contractive penalty to pretrain features f(a) for use\nwith a classifier, the best classification accuracy usually results from applying the\ncontractive penalty to f (a) rather than to g(f(a#)). A contractive penalty on f(x)\nalso has close connections to score matching, as discussed in section 14.5.1.\n\nThe name contractive arises from the way that the CAE warps space. Specifi-\ncally, because the CAE is trained to resist perturbations of its input, it is encouraged\nto map a neighborhood of input points to a smaller neighborhood of output points.\nWe can think of this as contracting the input neighborhood to a smaller output\nneighborhood.\n\nTo clarify, the CAE is contractive only locally\u2014all perturbations of a training\npoint g are mapped near to f(a). Globally, two different points 2 and a\u2019 may be\nmapped to f(x) and f(a\u2019) points that are farther apart than the original points.\nIt is plausible that f be expanding in-between or far from the data manifolds (see\nfor example what happens in the 1-D toy example of figure 14.7). When the Q(h)\npenalty is applied to sigmoidal units, one easy way to shrink the Jacobian is to\nmake the sigmoid units saturate to 0 or 1. This encourages the CAE to encode\ninput points with extreme values of the sigmoid that may be interpreted as a\nbinary code. It also ensures that the CAE will spread its code values throughout\nmost of the hypercube that its sigmoidal hidden units can span.\n\nWe can think of the Jacobian matrix J at a point x as approximating the\nnonlinear encoder f(a) as being a linear operator. This allows us to use the word\n\u201ccontractive\u201d more formally. In the theory of linear operators, a linear operator\n\n521\n", "CHAPTER 14. AUTOENCODERS\n\nis said to be contractive if the norm of Ja remains less than or equal to 1 for\nall unit-norm az. In other words, J is contractive if it shrinks the unit sphere.\nWe can think of the CAE as penalizing the Frobenius norm of the local linear\napproximation of f(a) at every training point x in order to encourage each of\nthese local linear operator to become a contraction.\n\nAs described in section 14.6, regularized autoencoders learn manifolds by\nbalancing two opposing forces. In the case of the CAE, these two forces are\nreconstruction error and the contractive penalty Q(h). Reconstruction error alone\nwould encourage the CAE to learn an identity function. The contractive penalty\nalone would encourage the CAE to learn features that are constant with respect to x.\nThe compromise between these two forces yields an autoencoder whose derivatives\nore) are mostly tiny. Only a small number of hidden units, corresponding to a\nsmall number of directions in the input, may have significant derivatives.\n\nThe goal of the CAE is to learn the manifold structure of the data. Directions\nx with large Ja rapidly change h, so these are likely to be directions which\napproximate the tangent planes of the manifold. Experiments by Rifai et al. (201 1a)\nand Rifai e\u00a2 al. (2011b) show that training the CAE results in most singular values\nof J dropping below 1 in magnitude and therefore becoming contractive. However,\nsome singular values remain above 1, because the reconstruction error penalty\nencourages the CAE to encode the directions with the most local variance. The\ndirections corresponding to the largest singular values are interpreted as the tangent\ndirections that the contractive autoencoder has learned. Ideally, these tangent\ndirections should correspond to real variations in the data. For example, a CAE\napplied to images should learn tangent vectors that show how the image changes as\nobjects in the image gradually change pose, as shown in figure 14.6. Visualizations\nof the experimentally obtained singular vectors do seem to correspond to meaningful\ntransformations of the input image, as shown in figure 14.10.\n\nOne practical issue with the CAE regularization criterion is that although it\nis cheap to compute in the case of a single hidden layer autoencoder, it becomes\nmuch more expensive in the case of deeper autoencoders. The strategy followed by\nRifai et al. (2011a) is to separately train a series of single-layer autoencoders, each\ntrained to reconstruct the previous autoencoder\u2019s hidden layer. The composition\nof these autoencoders then forms a deep autoencoder. Because each layer was\nseparately trained to be locally contractive, the deep autoencoder is contractive\nas well. The result is not the same as what would be obtained by jointly training\nthe entire architecture with a penalty on the Jacobian of the deep model, but it\ncaptures many of the desirable qualitative characteristics.\n\nAnother practical issue is that the contraction penalty can obtain useless results\n\nc\n\n522\n", "CHAPTER 14. AUTOENCODERS\n\nContractive autoencoder\n\nFigure 14.10: Illustration of tangent vectors of the manifold estimated by local PCA\n\nand by a contractive autoencoder. The location on the manifold is defined by the input\n\nimage of a dog drawn from the CIFAR-10 dataset. The tangent vectors are estimated\ndh\n\nby the leading singular vectors of the Jacobian matrix 55 of the input-to-code mapping.\n\nAlthough both local PCA and the CAE can capture local tangents, the CAE is able to\nform more accurate estimates from limited training data because it exploits parameter\nsharing across different locations that share a subset of active hidden units. The CAE\ntangent directions typically correspond to moving or changing parts of the object (such as\nthe head or legs). Images reproduced with permission from Rifai et al. (20L1c).\n\nif we do not impose some sort of scale on the decoder. For example, the encoder\ncould consist of multiplying the input by a small constant \u20ac and the decoder\ncould consist of dividing the code by e. As \u20ac approaches 0, the encoder drives the\ncontractive penalty Q(h) to approach 0 without having learned anything about the\ndistribution. Meanwhile, the decoder maintains perfect reconstruction. In Rifai\net al. (201 1a), this is prevented by tying the weights of f and g. Both f and g are\nstandard neural network layers consisting of an affine transformation followed by\nan element-wise nonlinearity, so it is straightforward to set the weight matrix of g\nto be the transpose of the weight matrix of f.\n\n14.8 Predictive Sparse Decomposition\n\nPredictive sparse decomposition (PSD) is a model that is a hybrid of sparse\ncoding and parametric autoencoders (Kavukcuoglu et al., 2008). A parametric\nencoder is trained to predict the output of iterative inference. PSD has been\napplied to unsupervised feature learning for object recognition in images and video\n(Kavukcuoglu et al., 2009, 2010; Jarrett et al., 2009; Farabet et al., 2011), as well\nas for audio (Henaff ef al., 2011). The model consists of an encoder f(a) and a\ndecoder g(h) that are both parametric. During training, h is controlled by the\n\n523\n", "CHAPTER 14. AUTOENCODERS\n\noptimization algorithm. Training proceeds by minimizing\n\n\\|x \u2014 g(h)|? + AlAl, + y\\\\h \u2014 F(a)||?. (14.19)\n\nLike in sparse coding, the training algorithm alternates between minimization with\nrespect to A and minimization with respect to the model parameters. Minimization\nwith respect to h is fast because f(a) provides a good initial value of h and the\ncost function constrains h to remain near f (a) anyway. Simple gradient descent\ncan obtain reasonable values of h in as few as ten steps.\n\nThe training procedure used by PSD is different from first training a sparse\ncoding model and then training f(a) to predict the values of the sparse coding\nfeatures. The PSD training procedure regularizes the decoder to use parameters\nfor which f(a) can infer good code values.\n\nPredictive sparse coding is an example of learned approximate inference.\nIn section 19.5, this topic is developed further. The tools presented in chapter 19\nmake it clear that PSD can be interpreted as training a directed sparse coding\nprobabilistic model by maximizing a lower bound on the log-likelihood of the\nmodel.\n\nIn practical applications of PSD, the iterative optimization is only used during\ntraining. The parametric encoder f is used to compute the learned features when\nthe model is deployed. Evaluating f is computationally inexpensive compared to\ninferring h via gradient descent. Because f is a differentiable parametric function,\nPSD models may be stacked and used to initialize a deep network to be trained\nwith another criterion.\n\n14.9 Applications of Autoencoders\n\nAutoencoders have been successfully applied to dimensionality reduction and infor-\nmation retrieval tasks. Dimensionality reduction was one of the first applications\nof representation learning and deep learning. It was one of the early motivations\nfor studying autoencoders. For example, Hinton and Salakhutdinov (2006) trained\na stack of RBMs and then used their weights to initialize a deep autoencoder\nwith gradually smaller hidden layers, culminating in a bottleneck of 30 units. The\nresulting code yielded less reconstruction error than PCA into 30 dimensions and\nthe learned representation was qualitatively easier to interpret and relate to the\nunderlying categories, with these categories manifesting as well-separated clusters.\n\nLower-dimensional representations can improve performance on many tasks,\nsuch as classification. Models of smaller spaces consume less memory and runtime.\n\nc\n\n524\n", "CHAPTER 14. AUTOENCODERS\n\nMany forms of dimensionality reduction place semantically related examples near\neach other, as observed by Salakhutdinov and Hinton (2007b) and Torralba et al.\n(2008). The hints provided by the mapping to the lower-dimensional space aid\ngeneralization.\n\nOne task that benefits even more than usual from dimensionality reduction is\ninformation retrieval, the task of finding entries in a database that resemble a\nquery entry. This task derives the usual benefits from dimensionality reduction\nthat other tasks do, but also derives the additional benefit that search can become\nextremely efficient in certain kinds of low dimensional spaces. Specifically, if\nwe train the dimensionality reduction algorithm to produce a code that is low-\ndimensional and binary, then we can store all database entries in a hash table\nmapping binary code vectors to entries. This hash table allows us to perform\ninformation retrieval by returning all database entries that have the same binary\ncode as the query. We can also search over slightly less similar entries very\nefficiently, just by flipping individual bits from the encoding of the query. This\napproach to information retrieval via dimensionality reduction and binarization\nis called semantic hashing (Salakhutdinov and Hinton, 2007b, 2009b), and has\nbeen applied to both textual input (Salakhutdinov and Hinton, 2007b, 2009b) and\nimages (Torralba et al., 2008; Weiss et al., 2008; Krizhevsky and Hinton, 2011).\n\nTo produce binary codes for semantic hashing, one typically uses an encoding\nfunction with sigmoids on the final layer. The sigmoid units must be trained to be\nsaturated to nearly 0 or nearly 1 for all input values. One trick that can accomplish\nthis is simply to inject additive noise just before the sigmoid nonlinearity during\ntraining. The magnitude of the noise should increase over time. To fight that\nnoise and preserve as much information as possible, the network must increase the\nmagnitude of the inputs to the sigmoid function, until saturation occurs.\n\nThe idea of learning a hashing function has been further explored in several\ndirections, including the idea of training the representations so as to optimize\na loss more directly linked to the task of finding nearby examples in the hash\ntable (Norouzi and Fleet, 2011).\n\noO\nbdo\nol\n", "Chapter 15\n\nRepresentation Learning\n\nIn this chapter, we first discuss what it means to learn representations and how\nthe notion of representation can be useful to design deep architectures. We discuss\nhow learning algorithms share statistical strength across different tasks, including\nusing information from unsupervised tasks to perform supervised tasks. Shared\nrepresentations are useful to handle multiple modalities or domains, or to transfer\nlearned knowledge to tasks for which few or no examples are given but a task\nrepresentation exists. Finally, we step back and argue about the reasons for the\nsuccess of representation learning, starting with the theoretical advantages of\ndistributed representations (Hinton et al., 1986) and deep representations and\nending with the more general idea of underlying assumptions about the data\ngenerating process, in particular about underlying causes of the observed data.\n\nMany information processing tasks can be very easy or very difficult depending\non how the information is represented. This is a general principle applicable to\ndaily life, computer science in general, and to machine learning. For example, it\nis straightforward for a person to divide 210 by 6 using long division. The task\nbecomes considerably less straightforward if it is instead posed using the Roman\nnumeral representation of the numbers. Most modern people asked to divide CCX\nby VI would begin by converting the numbers to the Arabic numeral representation,\npermitting long division procedures that make use of the place value system. More\nconcretely, we can quantify the asymptotic runtime of various operations using\nappropriate or inappropriate representations. For example, inserting a number\ninto the correct position in a sorted list of numbers is an O(n) operation if the\nlist is represented as a linked list, but only O(log n) if the list is represented as a\nred-black tree.\n\nIn the context of machine learning, what makes one representation better than\n\n526\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nanother? Generally speaking, a good representation is one that makes a subsequent\nlearning task easier. The choice of representation will usually depend on the choice\nof the subsequent learning task.\n\nWe can think of feedforward networks trained by supervised learning as per-\nforming a kind of representation learning. Specifically, the last layer of the network\nis typically a linear classifier, such as a softmax regression classifier. The rest of\nthe network learns to provide a representation to this classifier. Training with a\nsupervised criterion naturally leads to the representation at every hidden layer (but\nmore so near the top hidden layer) taking on properties that make the classification\ntask easier. For example, classes that were not linearly separable in the input\nfeatures may become linearly separable in the last hidden layer. In principle, the\nlast layer could be another kind of model, such as a nearest neighbor classifier\n(Salakhutdinov and Hinton, 2007a). The features in the penultimate layer should\nlearn different properties depending on the type of the last layer.\n\nSupervised training of feedforward networks does not involve explicitly imposing\nany condition on the learned intermediate features. Other kinds of representation\nlearning algorithms are often explicitly designed to shape the representation in\nsome particular way. For example, suppose we want to learn a representation that\nmakes density estimation easier. Distributions with more independences are easier\nto model, so we could design an objective function that encourages the elements\nof the representation vector h to be independent. Just like supervised networks,\nunsupervised deep learning algorithms have a main training objective but also\nlearn a representation as a side effect. Regardless of how a representation was\nobtained, it can be used for another task. Alternatively, multiple tasks (some\nsupervised, some unsupervised) can be learned together with some shared internal\nrepresentation.\n\nMost representation learning problems face a tradeoff between preserving as\nmuch information about the input as possible and attaining nice properties (such\nas independence).\n\nRepresentation learning is particularly interesting because it provides one\nway to perform unsupervised and semi-supervised learning. We often have very\nlarge amounts of unlabeled training data and relatively little labeled training\ndata. Training with supervised learning techniques on the labeled subset often\nresults in severe overfitting. Semi-supervised learning offers the chance to resolve\nthis overfitting problem by also learning from the unlabeled data. Specifically,\nwe can learn good representations for the unlabeled data, and then use these\nrepresentations to solve the supervised learning task.\n\nHumans and animals are able to learn from very few labeled examples. We do\n\nc\n\n527\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nnot yet know how this is possible. Many factors could explain improved human\nperformance\u2014for example, the brain may use very large ensembles of classifiers\nor Bayesian inference techniques. One popular hypothesis is that the brain is\nable to leverage unsupervised or semi-supervised learning. There are many ways\nto leverage unlabeled data. In this chapter, we focus on the hypothesis that the\nunlabeled data can be used to learn a good representation.\n\n15.1 Greedy Layer-Wise Unsupervised Pretraining\n\nUnsupervised learning played a key historical role in the revival of deep neural\nnetworks, enabling researchers for the first time to train a deep supervised network\nwithout requiring architectural specializations like convolution or recurrence. We\ncall this procedure unsupervised pretraining, or more precisely, greedy layer-\nwise unsupervised pretraining. This procedure is a canonical example of how\na representation learned for one task (unsupervised learning, trying to capture\nthe shape of the input distribution) can sometimes be useful for another task\n(supervised learning with the same input domain).\n\nGreedy layer-wise unsupervised pretraining relies on a single-layer represen-\ntation learning algorithm such as an RBM, a single-layer autoencoder, a sparse\ncoding model, or another model that learns latent representations. Each layer is\npretrained using unsupervised learning, taking the output of the previous layer\nand producing as output a new representation of the data, whose distribution (or\nits relation to other variables such as categories to predict) is hopefully simpler.\nSee algorithm 15.1 for a formal description.\n\nGreedy layer-wise training procedures based on unsupervised criteria have long\nbeen used to sidestep the difficulty of jointly training the layers of a deep neural net\nfor a supervised task. This approach dates back at least as far as the Neocognitron\n(Fukushima, 1975). The deep learning renaissance of 2006 began with the discovery\nthat this greedy learning procedure could be used to find a good initialization for\na joint learning procedure over all the layers, and that this approach could be used\nto successfully train even fully connected architectures (Hinton e\u00a2 al., 2006; Hinton\nand Salakhutdinov, 2006; Hinton, 2006; Bengio et al., 2007; Ranzato et al., 2007a).\nPrior to this discovery, only convolutional deep networks or networks whose depth\nresulted from recurrence were regarded as feasible to train. Today, we now know\nthat greedy layer-wise pretraining is not required to train fully connected deep\narchitectures, but the unsupervised pretraining approach was the first method to\nsucceed.\n\nGreedy layer-wise pretraining is called greedy because it is a greedy algo-\n\nc\n\n528\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nrithm, meaning that it optimizes each piece of the solution independently, one\npiece at a time, rather than jointly optimizing all pieces. It is called layer-wise\nbecause these independent pieces are the layers of the network. Specifically, greedy\nlayer-wise pretraining proceeds one layer at a time, training the k-th layer while\nkeeping the previous ones fixed. In particular, the lower layers (which are trained\nfirst) are not adapted after the upper layers are introduced. It is called unsuper-\nvised because each layer is trained with an unsupervised representation learning\nalgorithm. However it is also called pretraining, because it is supposed to be\nonly a first step before a joint training algorithm is applied to fine-tune all the\nlayers together. In the context of a supervised learning task, it can be viewed\nas a regularizer (in some experiments, pretraining decreases test error without\ndecreasing training error) and a form of parameter initialization.\n\nIt is common to use the word \u201cpretraining\u201d to refer not only to the pretraining\nstage itself but to the entire two phase protocol that combines the pretraining\nphase and a supervised learning phase. The supervised learning phase may involve\ntraining a simple classifier on top of the features learned in the pretraining phase,\nor it may involve supervised fine-tuning of the entire network learned in the\npretraining phase. No matter what kind of unsupervised learning algorithm or\nwhat model type is employed, in the vast majority of cases, the overall training\nscheme is nearly the same. While the choice of unsupervised learning algorithm\nwill obviously impact the details, most applications of unsupervised pretraining\nfollow this basic protocol.\n\nGreedy layer-wise unsupervised pretraining can also be used as initialization\nfor other unsupervised learning algorithms, such as deep autoencoders (Hinton\nand Salakhutdinov, 2006) and probabilistic models with many layers of latent\nvariables. Such models include deep belief networks (Hinton et al., 2006) and deep\nBoltzmann machines (Salakhutdinov and Hinton, 2009a). These deep generative\nmodels will be described in chapter 20.\n\nAs discussed in section 8.7.4, it is also possible to have greedy layer-wise\nsupervised pretraining. This builds on the premise that training a shallow network\n\nis easier than training a deep one, which seems to have been validated in several\ncontexts (Erhan e\u00a2 al., 2010).\n\n15.1.1 When and Why Does Unsupervised Pretraining Work?\n\nOn many tasks, greedy layer-wise unsupervised pretraining can yield substantial\nimprovements in test error for classification tasks. This observation was responsible\nfor the renewed interested in deep neural networks starting in 2006 (Hinton et al.,\n\nc\n\n529\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nAlgorithm 15.1 Greedy layer-wise unsupervised pretraining protocol.\n\nGiven the following: Unsupervised feature learning algorithm \u00a3, which takes a\ntraining set of examples and returns an encoder or feature function f. The raw\ninput data is X, with one row per example and f Ox ) is the output of the first\nstage encoder on X. In the case where fine-tuning is performed, we use a learner\nT which takes an initial function f, input examples X (and in the supervised\nfine-tuning case, associated targets Y), and returns a tuned function. The number\nof stages is m.\n\nf < Identity function\n\nX=X\n\nfor k =1,...,mdo\nf = \u00a3(X)\nfeof\nX & fl) (X)\n\nend for\n\nif fine-tuning then\nfeT X.Y)\n\nend if\n\nReturn f\n\n2006; Bengio et al., 2007; Ranzato et al., 2007a). On many other tasks, however,\nunsupervised pretraining either does not confer a benefit or even causes noticeable\nharm. Ma et al. (2015) studied the effect of pretraining on machine learning\nmodels for chemical activity prediction and found that, on average, pretraining was\nslightly harmful, but for many tasks was significantly helpful. Because unsupervised\npretraining is sometimes helpful but often harmful it is important to understand\nwhen and why it works in order to determine whether it is applicable to a particular\ntask.\n\nAt the outset, it is important to clarify that most of this discussion is restricted\nto greedy unsupervised pretraining in particular. There are other, completely\ndifferent paradigms for performing semi-supervised learning with neural networks,\nsuch as virtual adversarial training described in section 7.13. It is also possible to\ntrain an autoencoder or generative model at the same time as the supervised model.\nExamples of this single-stage approach include the discriminative RBM (Larochelle\nand Bengio, 2008) and the ladder network (Rasmus e\u00a2 al., 2015), in which the total\nobjective is an explicit sum of the two terms (one using the labels and one only\nusing the input).\n\nUnsupervised pretraining combines two different ideas. First, it makes use of\n\nc\n\n530\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nthe idea that the choice of initial parameters for a deep neural network can have\na significant regularizing effect on the model (and, to a lesser extent, that it can\nimprove optimization). Second, it makes use of the more general idea that learning\nabout the input distribution can help to learn about the mapping from inputs to\noutputs.\n\nBoth of these ideas involve many complicated interactions between several\nparts of the machine learning algorithm that are not entirely understood.\n\nThe first idea, that the choice of initial parameters for a deep neural network\ncan have a strong regularizing effect on its performance, is the least well understood.\nAt the time that pretraining became popular, it was understood as initializing the\nmodel in a location that would cause it to approach one local minimum rather than\nanother. Today, local minima are no longer considered to be a serious problem\nfor neural network optimization. We now know that our standard neural network\ntraining procedures usually do not arrive at a critical point of any kind. It remains\npossible that pretraining initializes the model in a location that would otherwise\nbe inaccessible\u2014for example, a region that is surrounded by areas where the cost\nfunction varies so much from one example to another that minibatches give only\na very noisy estimate of the gradient, or a region surrounded by areas where the\nHessian matrix is so poorly conditioned that gradient descent methods must use\nvery small steps. However, our ability to characterize exactly what aspects of the\npretrained parameters are retained during the supervised training stage is limited.\nThis is one reason that modern approaches typically use simultaneous unsupervised\nlearning and supervised learning rather than two sequential stages. One may\nalso avoid struggling with these complicated ideas about how optimization in the\nsupervised learning stage preserves information from the unsupervised learning\nstage by simply freezing the parameters for the feature extractors and using\nsupervised learning only to add a classifier on top of the learned features.\n\nThe other idea, that a learning algorithm can use information learned in the\nunsupervised phase to perform better in the supervised learning stage, is better\nunderstood. The basic idea is that some features that are useful for the unsupervised\ntask may also be useful for the supervised learning task. For example, if we train\na generative model of images of cars and motorcycles, it will need to know about\nwheels, and about how many wheels should be in an image. If we are fortunate,\nthe representation of the wheels will take on a form that is easy for the supervised\nlearner to access. This is not yet understood at a mathematical, theoretical level,\nso it is not always possible to predict which tasks will benefit from unsupervised\nlearning in this way. Many aspects of this approach are highly dependent on\nthe specific models used. For example, if we wish to add a linear classifier on\n\n531\n", "CHAPTER 15. REPRESENTATION LEARNING\n\ntop of pretrained features, the features must make the underlying classes linearly\nseparable. These properties often occur naturally but do not always do so. This\nis another reason that simultaneous supervised and unsupervised learning can be\npreferable\u2014the constraints imposed by the output layer are naturally included\nfrom the start.\n\nFrom the point of view of unsupervised pretraining as learning a representation,\nwe can expect unsupervised pretraining to be more effective when the initial\nrepresentation is poor. One key example of this is the use of word embeddings.\nWords represented by one-hot vectors are not very informative because every two\ndistinct one-hot vectors are the same distance from each other (squared L? distance\nof 2). Learned word embeddings naturally encode similarity between words by their\ndistance from each other. Because of this, unsupervised pretraining is especially\nuseful when processing words. It is less useful when processing images, perhaps\nbecause images already lie in a rich vector space where distances provide a low\nquality similarity metric.\n\nFrom the point of view of unsupervised pretraining as a regularizer, we can\nexpect unsupervised pretraining to be most helpful when the number of labeled\nexamples is very small. Because the source of information added by unsupervised\npretraining is the unlabeled data, we may also expect unsupervised pretraining\nto perform best when the number of unlabeled examples is very large. The\nadvantage of semi-supervised learning via unsupervised pretraining with many\nunlabeled examples and few labeled examples was made particularly clear in\n2011 with unsupervised pretraining winning two international transfer learning\ncompetitions (Mesnil et al., 2011; Goodfellow et al., 2011), in settings where the\nnumber of labeled examples in the target task was small (from a handful to dozens\nof examples per class). These effects were also documented in carefully controlled\nexperiments by Paine ef al. (2014).\n\nOther factors are likely to be involved. For example, unsupervised pretraining\nis likely to be most useful when the function to be learned is extremely complicated.\nUnsupervised learning differs from regularizers like weight decay because it does not\nbias the learner toward discovering a simple function but rather toward discovering\nfeature functions that are useful for the unsupervised learning task. If the true\nunderlying functions are complicated and shaped by regularities of the input\ndistribution, unsupervised learning can be a more appropriate regularizer.\n\nThese caveats aside, we now analyze some success cases where unsupervised\npretraining is known to cause an improvement, and explain what is known about\nwhy this improvement occurs. Unsupervised pretraining has usually been used\nto improve classifiers, and is usually most interesting from the point of view of\n\nc\n\n532\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nvv\u00a5v With pretraining\n\nee\u00ae@ Without pretraining\n\n\u20141500\n\u20144000 \u20143000 \u20142000 \u20141000 0 1000 2000 3000 4000\n\nFigure 15.1: Visualization via nonlinear projection of the learning trajectories of different\nneural networks in function space (not parameter space, to avoid the issue of many-to-one\nmappings from parameter vectors to functions), with different random initializations\nand with or without unsupervised pretraining. Each point corresponds to a different\nneural network, at a particular time during its training process. This figure is adapted\nwith permission from Erhan e? al. (2010). A coordinate in function space is an infinite-\ndimensional vector associating every input x with an output y. Erhan ef al. (2010) made\na linear projection to high-dimensional space by concatenating the y for many specific x\npoints. They then made a further nonlinear projection to 2-D by Isomap (Tenenbaum\net al., 2000). Color indicates time. All networks are initialized near the center of the plot\n(corresponding to the region of functions that produce approximately uniform distributions\nover the class y for most inputs). Over time, learning moves the function outward, to\npoints that make strong predictions. Training consistently terminates in one region when\nusing pretraining and in another, non-overlapping region when not using pretraining.\nIsomap tries to preserve global relative distances (and hence volumes) so the small region\ncorresponding to pretrained models may indicate that the pretraining-based estimator\nhas reduced variance.\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nreducing test set error. However, unsupervised pretraining can help tasks other\nthan classification, and can act to improve optimization rather than being merely\na regularizer. For example, it can improve both train and test reconstruction error\nfor deep autoencoders (Hinton and Salakhutdinov, 2006).\n\nErhan et al. (2010) performed many experiments to explain several successes of\nunsupervised pretraining. Both improvements to training error and improvements\nto test error may be explained in terms of unsupervised pretraining taking the\nparameters into a region that would otherwise be inaccessible. Neural network\ntraining is non-deterministic, and converges to a different function every time it\nis run. Training may halt at a point where the gradient becomes small, a point\nwhere early stopping ends training to prevent overfitting, or at a point where the\ngradient is large but it is difficult to find a downhill step due to problems such as\nstochasticity or poor conditioning of the Hessian. Neural networks that receive\nunsupervised pretraining consistently halt in the same region of function space,\nwhile neural networks without pretraining consistently halt in another region. See\nfigure 15.1 for a visualization of this phenomenon. The region where pretrained\nnetworks arrive is smaller, suggesting that pretraining reduces the variance of the\nestimation process, which can in turn reduce the risk of severe over-fitting. In\nother words, unsupervised pretraining initializes neural network parameters into\na region that they do not escape, and the results following this initialization are\nmore consistent and less likely to be very bad than without this initialization.\n\nErhan et al. (2010) also provide some answers as to when pretraining works\nbest\u2014the mean and variance of the test error were most reduced by pretraining for\ndeeper networks. Keep in mind that these experiments were performed before the\ninvention and popularization of modern techniques for training very deep networks\n(rectified linear units, dropout and batch normalization) so less is known about the\neffect of unsupervised pretraining in conjunction with contemporary approaches.\n\nAn important question is how unsupervised pretraining can act as a regularizer.\nOne hypothesis is that pretraining encourages the learning algorithm to discover\nfeatures that relate to the underlying causes that generate the observed data.\nThis is an important idea motivating many other algorithms besides unsupervised\npretraining, and is described further in section 15.3.\n\nCompared to other forms of unsupervised learning, unsupervised pretraining\nhas the disadvantage that it operates with two separate training phases. Many\nregularization strategies have the advantage of allowing the user to control the\nstrength of the regularization by adjusting the value of a single hyperparameter.\nUnsupervised pretraining does not offer a clear way to adjust the the strength\nof the regularization arising from the unsupervised stage. Instead, there are\n\nc\n\n534\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nvery many hyperparameters, whose effect may be measured after the fact but\nis often difficult to predict ahead of time. When we perform unsupervised and\nsupervised learning simultaneously, instead of using the pretraining strategy, there\nis a single hyperparameter, usually a coefficient attached to the unsupervised\ncost, that determines how strongly the unsupervised objective will regularize\nthe supervised model. One can always predictably obtain less regularization by\ndecreasing this coefficient. In the case of unsupervised pretraining, there is not a\nway of flexibly adapting the strength of the regularization\u2014either the supervised\nmodel is initialized to pretrained parameters, or it is not.\n\nAnother disadvantage of having two separate training phases is that each phase\nhas its own hyperparameters. The performance of the second phase usually cannot\nbe predicted during the first phase, so there is a long delay between proposing\nhyperparameters for the first phase and being able to update them using feedback\nfrom the second phase. The most principled approach is to use validation set error\nin the supervised phase in order to select the hyperparameters of the pretraining\nphase, as discussed in Larochelle et al. (2009). In practice, some hyperparameters,\nlike the number of pretraining iterations, are more conveniently set during the\npretraining phase, using early stopping on the unsupervised objective, which is\nnot ideal but computationally much cheaper than using the supervised objective.\n\nToday, unsupervised pretraining has been largely abandoned, except in the\nfield of natural language processing, where the natural representation of words as\none-hot vectors conveys no similarity information and where very large unlabeled\nsets are available. In that case, the advantage of pretraining is that one can pretrain\nonce on a huge unlabeled set (for example with a corpus containing billions of\nwords), learn a good representation (typically of words, but also of sentences), and\nthen use this representation or fine-tune it for a supervised task for which the\ntraining set contains substantially fewer examples. This approach was pioneered\nby by Collobert and Weston (2008b), Turian et al. (2010), and Collobert et al.\n(2011a) and remains in common use today.\n\nDeep learning techniques based on supervised learning, regularized with dropou\nor batch normalization, are able to achieve human-level performance on very many\ntasks, but only with extremely large labeled datasets. These same techniques out-\nperform unsupervised pretraining on medium-sized datasets such as CIFAR-10 and\nMNIST, which have roughly 5,000 labeled examples per class. On extremely small\ndatasets, such as the alternative splicing dataset, Bayesian methods outperform\nmethods based on unsupervised pretraining (Srivastava, 2013). For these reasons,\nthe popularity of unsupervised pretraining has declined. Nevertheless, unsupervised\npretraining remains an important milestone in the history of deep learning research\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nand continues to influence contemporary approaches. The idea of pretraining has\nbeen generalized to supervised pretraining discussed in section 8.7.4, as a very\ncommon approach for transfer learning. Supervised pretraining for transfer learning\nis popular (Oquab et al., 2014; Yosinski et al., 2014) for use with convolutional\nnetworks pretrained on the ImageNet dataset. Practitioners publish the parameters\nof these trained networks for this purpose, just like pretrained word vectors are\npublished for natural language tasks (Collobert et al., 2011a; Mikolov et al., 2013a).\n\n15.2 Transfer Learning and Domain Adaptation\n\nTransfer learning and domain adaptation refer to the situation where what has been\nlearned in one setting (i.e., distribution P,) is exploited to improve generalization\nin another setting (say distribution P2). This generalizes the idea presented in the\nprevious section, where we transferred representations between an unsupervised\nlearning task and a supervised learning task.\n\nIn transfer learning, the learner must perform two or more different tasks,\nbut we assume that many of the factors that explain the variations in P; are\nrelevant to the variations that need to be captured for learning P,. This is typically\nunderstood in a supervised learning context, where the input is the same but the\ntarget may be of a different nature. For example, we may learn about one set of\nvisual categories, such as cats and dogs, in the first setting, then learn about a\ndifferent set of visual categories, such as ants and wasps, in the second setting. If\nthere is significantly more data in the first setting (sampled from P;), then that\nmay help to learn representations that are useful to quickly generalize from only\nvery few examples drawn from P2. Many visual categories share low-level notions\nof edges and visual shapes, the effects of geometric changes, changes in lighting,\netc. In general, transfer learning, multi-task learning (section 7.7), and domain\nadaptation can be achieved via representation learning when there exist features\nthat are useful for the different settings or tasks, corresponding to underlying\nfactors that appear in more than one setting. This is illustrated in figure 7.2, with\nshared lower layers and task-dependent upper layers.\n\nHowever, sometimes, what is shared among the different tasks is not the\nsemantics of the input but the semantics of the output. For example, a speech\nrecognition system needs to produce valid sentences at the output layer, but\nthe earlier layers near the input may need to recognize very different versions of\nthe same phonemes or sub-phonemic vocalizations depending on which person\nis speaking. In cases like these, it makes more sense to share the upper layers\n(near the output) of the neural network, and have a task-specific preprocessing, as\n\nc\n\n536\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nillustrated in figure 15.2.\n\nSelection switch\n\nFigure 15.2: Example architecture for multi-task or transfer learning when the output\nvariable y has the same semantics for all tasks while the input variable x has a different\nmeaning (and possibly even a different dimension) for each task (or, for example, each\nuser), called x), x) and x\u00ae) for three tasks. The lower levels (up to the selection\nswitch) are task-specific, while the upper levels are shared. The lower levels learn to\ntranslate their task-specific input into a generic set of features.\n\nIn the related case of domain adaptation, the task (and the optimal input-to-\noutput mapping) remains the same between each setting, but the input distribution\nis slightly different. For example, consider the task of sentiment analysis, which\nconsists of determining whether a comment expresses positive or negative sentiment.\nComments posted on the web come from many categories. A domain adaptation\nscenario can arise when a sentiment predictor trained on customer reviews of\nmedia content such as books, videos and music is later used to analyze comments\nabout consumer electronics such as televisions or smartphones. One can imagine\nthat there is an underlying function that tells whether any statement is positive,\nneutral or negative, but of course the vocabulary and style may vary from one\ndomain to another, making it more difficult to generalize across domains. Simple\nunsupervised pretraining (with denoising autoencoders) has been found to be very\nsuccessful for sentiment analysis with domain adaptation (Glorot e\u00a2 al., 2011b).\n\nA related problem is that of concept drift, which we can view as a form\nof transfer learning due to gradual changes in the data distribution over time.\nBoth concept drift and transfer learning can be viewed as particular forms of\n\n537\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nmulti-task learning. While the phrase \u201cmulti-task learning\u201d typically refers to\nsupervised learning tasks, the more general notion of transfer learning is applicable\nto unsupervised learning and reinforcement learning as well.\n\nIn all of these cases, the objective is to take advantage of data from the first\nsetting to extract information that may be useful when learning or even when\ndirectly making predictions in the second setting. The core idea of representation\nlearning is that the same representation may be useful in both settings. Using the\nsame representation in both settings allows the representation to benefit from the\ntraining data that is available for both tasks.\n\nAs mentioned before, unsupervised deep learning for transfer learning has found\nsuccess in some machine learning competitions (Mesnil et al., 2011; Goodfellow\net al., 2011). In the first of these competitions, the experimental setup is the\nfollowing. Each participant is first given a dataset from the first setting (from\ndistribution P;), illustrating examples of some set of categories. The participants\nmust use this to learn a good feature space (mapping the raw input to some\nrepresentation), such that when we apply this learned transformation to inputs\nfrom the transfer setting (distribution P2), a linear classifier can be trained and\ngeneralize well from very few labeled examples. One of the most striking results\nfound in this competition is that as an architecture makes use of deeper and\ndeeper representations (learned in a purely unsupervised way from data collected\nin the first setting, P1), the learning curve on the new categories of the second\n(transfer) setting P2: becomes much better. For deep representations, fewer labeled\nexamples of the transfer tasks are necessary to achieve the apparently asymptotic\ngeneralization performance.\n\nTwo extreme forms of transfer learning are one-shot learning and zero-shot\nlearning, sometimes also called zero-data learning. Only one labeled example\nof the transfer task is given for one-shot learning, while no labeled examples are\ngiven at all for the zero-shot learning task.\n\nOne-shot learning (Fei-Fei ef al., 2006) is possible because the representation\nlearns to cleanly separate the underlying classes during the first stage. During the\ntransfer learning stage, only one labeled example is needed to infer the label of many\npossible test examples that all cluster around the same point in representation\nspace. This works to the extent that the factors of variation corresponding to\nthese invariances have been cleanly separated from the other factors, in the learned\nrepresentation space, and we have somehow learned which factors do and do not\nmatter when discriminating objects of certain categories.\n\nAs an example of a zero-shot learning setting, consider the problem of having\na learner read a large collection of text and then solve object recognition problems.\n\nc\n\n538\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nIt may be possible to recognize a specific object class even without having seen an\nimage of that object, if the text describes the object well enough. For example,\nhaving read that a cat has four legs and pointy ears, the learner might be able to\nguess that an image is a cat, without having seen a cat before.\n\nZero-data learning (Larochelle et al., 2008) and zero-shot learning (Palatucci\net al., 2009; Socher et al., 2013b) are only possible because additional information\nhas been exploited during training. We can think of the zero-data learning scenario\nas including three random variables: the traditional inputs x, the traditional\noutputs or targets y, and an additional random variable describing the task, T.\nThe model is trained to estimate the conditional distribution p(y | \u00ab,7\u2019) where\nT is a description of the task we wish the model to perform. In our example of\nrecognizing cats after having read about cats, the output is a binary variable y\nwith y= 1 indicating \u201cyes\u201d and y = 0 indicating \u201cno.\u201d The task variable T then\nrepresents questions to be answered such as \u201cIs there a cat in this image?\u201d If we\n\nhave a training set containing unsupervised examples of objects that live in the\nsame space as T\u2019, we may be able to infer the meaning of unseen instances of T.\nIn our example of recognizing cats without having seen an image of the cat, it is\nimportant that we have had unlabeled text data containing sentences such as \u201ccats\nhave four legs\u201d or \u201ccats have pointy ears.\u201d\n\nZero-shot learning requires T to be represented in a way that allows some sort\nof generalization. For example, T cannot be just a one-hot code indicating an\nobject category. Socher et al. (2013b) provide instead a distributed representation\nof object categories by using a learned word embedding for the word associated\nwith each category.\n\nA similar phenomenon happens in machine translation (Klementiev et al., 2012;\nMikolov et al., 2013b; Gouws ef al., 2014): we have words in one language, and\nthe relationships between words can be learned from unilingual corpora; on the\nother hand, we have translated sentences which relate words in one language with\nwords in the other. Even though we may not have labeled examples translating\nword A in language X to word B in language Y, we can generalize and guess a\ntranslation for word A because we have learned a distributed representation for\nwords in language X, a distributed representation for words in language Y, and\ncreated a link (possibly two-way) relating the two spaces, via training examples\nconsisting of matched pairs of sentences in both languages. This transfer will be\nmost successful if all three ingredients (the two representations and the relations\nbetween them) are learned jointly.\n\nZero-shot learning is a particular form of transfer learning. The same principle\nexplains how one can perform multi-modal learning, capturing a representation\n\nc\n\n539\n", "CHAPTER 15. REPRESENTATION LEARNING\n\n@\u2014space\n\n\u2014 \u2014 = (x,y) pairs in the training set\n\n\u2014 /,: encoder function for x\nooc\u00bb f,: encoder function for y\necceee \u00bb Relationship between embedded points within one of the domains\n\n<\u2014\u2014 Maps between representation spaces\n\nFigure 15.3: Transfer learning between two domains \u00ab and y enables zero-shot learning.\nLabeled or unlabeled examples of x allow one to learn a representation function f, and\nsimilarly with examples of y to learn f,. Each application of the f, and fy functions\nappears as an upward arrow, with the style of the arrows indicating which function is\napplied. Distance in h, space provides a similarity metric between any pair of points\nin x space that may be more meaningful than distance in a space. Likewise, distance\nin h, space provides a similarity metric between any pair of points in y space. Both\nof these similarity functions are indicated with dotted bidirectional arrows. Labeled\nexamples (dashed horizontal lines) are pairs (a, y) which allow one to learn a one-way\nor two-way map (solid bidirectional arrow) between the representations f,(a) and the\nrepresentations f,(y) and anchor these representations to each other. Zero-data learning\nis then enabled as follows. One can associate an image test to a word Ytest, even if no\nimage of that word was ever presented, simply because word-representations fy(Yest )\nand image-representations f, (test) can be related to each other via the maps between\nrepresentation spaces. It works because, although that image and that word were never\npaired, their respective feature vectors fz (test) and fy( test) have been related to each\nother. Figure inspired from suggestion by Hrant Khachatrian.\n\n540\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nin one modality, a representation in the other, and the relationship (in general a joint\ndistribution) between pairs (a, y) consisting of one observation x in one modality\nand another observation y in the other modality (Srivastava and Salakhutdinov,\n2012). By learning all three sets of parameters (from a to its representation, from\ny to its representation, and the relationship between the two representations),\nconcepts in one representation are anchored in the other, and vice-versa, allowing\none to meaningfully generalize to new pairs. The procedure is illustrated in\nfigure 15.3.\n\n15.3 Semi-Supervised Disentangling of Causal Factors\n\nAn important question about representation learning is \u201cwhat makes one repre-\nsentation better than another?\u201d One hypothesis is that an ideal representation\nis one in which the features within the representation correspond to the under-\nlying causes of the observed data, with separate features or directions in feature\nspace corresponding to different causes, so that the representation disentangles the\ncauses from one another. This hypothesis motivates approaches in which we first\nseek a good representation for p(a). Such a representation may also be a good\nrepresentation for computing p(y | a) if y is among the most salient causes of\nz. This idea has guided a large amount of deep learning research since at least\nthe 1990s (Becker and Hinton, 1992; Hinton and Sejnowski, 1999), in more detail.\nFor other arguments about when semi-supervised learning can outperform pure\nsupervised learning, we refer the reader to section 1.2 of Chapelle et al. (2006).\n\nIn other approaches to representation learning, we have often been concerned\nwith a representation that is easy to model\u2014for example, one whose entries are\nsparse, or independent from each other. A representation that cleanly separates\nthe underlying causal factors may not necessarily be one that is easy to model.\nHowever, a further part of the hypothesis motivating semi-supervised learning\nvia unsupervised representation learning is that for many AI tasks, these two\nproperties coincide: once we are able to obtain the underlying explanations for\nwhat we observe, it generally becomes easy to isolate individual attributes from\nthe others. Specifically, if a representation h represents many of the underlying\ncauses of the observed a, and the outputs y are among the most salient causes,\nthen it is easy to predict y from h.\n\nFirst, let us see how semi-supervised learning can fail because unsupervised\nlearning of p(x) is of no help to learn p(y | x). Consider for example the case\nwhere p(x) is uniformly distributed and we want to learn f(x) = Ely | x]. Clearly,\nobserving a training set of a values alone gives us no information about p(y | x).\n\nc\n\n541\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nFigure 15.4: Example of a density over x that is a mixture over three components.\nThe component identity is an underlying explanatory factor, y. Because the mixture\ncomponents (e.g., natural object classes in image data) are statistically salient, just\nmodeling 7x) in an unsupervised way with no labeled example already reveals the factor\n\ny.\n\nNext, let us see a simple example of how semi-supervised learning can succeed.\nConsider the situation where x arises from a mixture, with one mixture component\nper value of y, as illustrated in figure 15.4. If the mixture components are well-\nseparated, then modeling p(x) reveals precisely where each component is, and a\nsingle labeled example of each class will then be enough to perfectly learn p(y | x).\nBut more generally, what could make p(y | x) and p(x) be tied together?\n\nIf y is closely associated with one of the causal factors of x, then p(x) and\np(y | x) will be strongly tied, and unsupervised representation learning that\ntries to disentangle the underlying factors of variation is likely to be useful as a\nsemi-supervised learning strategy.\n\nConsider the assumption that y is one of the causal factors of x, and let\nh represent all those factors. The true generative process can be conceived as\nstructured according to this directed graphical model, with h as the parent of x:\n\np(h, x) = p(x | h)p(h). (15.1)\nAs a consequence, the data has marginal probability\np(x) = Epnp(# | h). (15.2)\n\nFrom this straightforward observation, we conclude that the best possible model\nof x (from a generalization point of view) is the one that uncovers the above \u201ctrue\u201d\n\nc\n\n542\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nstructure, with h as a latent variable that explains the observed variations in x.\nThe \u201cideal\u201d representation learning discussed above should thus recover these latent\nfactors. If y is one of these (or closely related to one of them), then it will be\nvery easy to learn to predict y from such a representation. We also see that the\nconditional distribution of y given x is tied by Bayes\u2019 rule to the components in\nthe above equation:\n\np(x | y)ply) (15.3)\n\np(x)\n\nThus the marginal p(x) is intimately tied to the conditional p(y | x) and knowledge\nof the structure of the former should be helpful to learn the latter. Therefore, in\nsituations respecting these assumptions, semi-supervised learning should improve\nperformance.\n\nPly |x) =\n\nAn important research problem regards the fact that most observations are\nformed by an extremely large number of underlying causes. Suppose y = h,, but\nthe unsupervised learner does not know which h;. The brute force solution is for\nan unsupervised learner to learn a representation that captures all the reasonably\nsalient generative factors h; and disentangles them from each other, thus making\nit easy to predict y from h, regardless of which h; is associated with y.\n\nIn practice, the brute force solution is not feasible because it is not possible\nto capture all or most of the factors of variation that influence an observation.\nFor example, in a visual scene, should the representation always encode all of\nthe smallest objects in the background? It is a well-documented psychological\nphenomenon that human beings fail to perceive changes in their environment that\nare not immediately relevant to the task they are performing\u2014see, e.g., Simons\nand Levin (1998). An important research frontier in semi-supervised learning is\ndetermining what to encode in each situation. Currently, two of the main strategies\nfor dealing with a large number of underlying causes are to use a supervised\nlearning signal at the same time as the unsupervised learning signal so that the\nmodel will choose to capture the most relevant factors of variation, or to use much\nlarger representations if using purely unsupervised learning.\n\nAn emerging strategy for unsupervised learning is to modify the definition of\nwhich underlying causes are most salient. Historically, autoencoders and generative\nmodels have been trained to optimize a fixed criterion, often similar to mean\nsquared error. These fixed criteria determine which causes are considered salient.\nFor example, mean squared error applied to the pixels of an image implicitly\nspecifies that an underlying cause is only salient if it significantly changes the\nbrightness of a large number of pixels. This can be problematic if the task we wish\nto solve involves interacting with small objects. See figure 15.5 for an example\n\nc\n\n543\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nInput Reconstruction\n\n;\n\nFigure 15.5: An autoencoder trained with mean squared error for a robotics task has\nfailed to reconstruct a ping pong ball. The existence of the ping pong ball and all of its\nspatial coordinates are important underlying causal factors that generate the image and\nare relevant to the robotics task. Unfortunately, the autoencoder has limited capacity,\nand the training with mean squared error did not identify the ping pong ball as being\nsalient enough to encode. Images graciously provided by Chelsea Finn.\n\nof a robotics task in which an autoencoder has failed to learn to encode a small\nping pong ball. This same robot is capable of successfully interacting with larger\nobjects, such as baseballs, which are more salient according to mean squared error.\n\nOther definitions of salience are possible. For example, if a group of pixels\nfollow a highly recognizable pattern, even if that pattern does not involve extreme\nbrightness or darkness, then that pattern could be considered extremely salient.\nOne way to implement such a definition of salience is to use a recently developed\napproach called generative adversarial networks (Goodfellow ef al., 2014c).\nIn this approach, a generative model is trained to fool a feedforward classifier.\nThe feedforward classifier attempts to recognize all samples from the generative\nmodel as being fake, and all samples from the training set as being real. In this\nframework, any structured pattern that the feedforward network can recognize is\nhighly salient. The generative adversarial network will be described in more detail\nin section 20.10.4. For the purposes of the present discussion, it is sufficient to\nunderstand that they learn how to determine what is salient. Lotter et al. (2015)\nshowed that models trained to generate images of human heads will often neglect\nto generate the ears when trained with mean squared error, but will successfully\ngenerate the ears when trained with the adversarial framework. Because the\nears are not extremely bright or dark compared to the surrounding skin, they\nare not especially salient according to mean squared error loss, but their highly\n\n544\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nGround Truth MSE Adversarial\n\nFigure 15.6: Predictive generative networks provide an example of the importance of\nlearning which features are salient. In this example, the predictive generative network\nhas been trained to predict the appearance of a 3-D model of a human head at a specific\nviewing angle. (Left)Ground truth. This is the correct image, that the network should\nemit. (Center)/Image produced by a predictive generative network trained with mean\nsquared error alone. Because the ears do not cause an extreme difference in brightness\ncompared to the neighboring skin, they were not sufficiently salient for the model to learn\nto represent them. (Right)/Image produced by a model trained with a combination of\nmean squared error and adversarial loss. Using this learned cost function, the ears are\nsalient because they follow a predictable pattern. Learning which underlying causes are\nimportant and relevant enough to model is an important active area of research. Figures\ngraciously provided by Lotter et al. (2015).\n\nrecognizable shape and consistent position means that a feedforward network\ncan easily learn to detect them, making them highly salient under the generative\nadversarial framework. See figure 15.6 for example images. Generative adversarial\nnetworks are only one step toward determining which factors should be represented.\nWe expect that future research will discover better ways of determining which\nfactors to represent, and develop mechanisms for representing different factors\ndepending on the task.\n\nA benefit of learning the underlying causal factors, as pointed out by Scholkopf\net al. (2012), is that if the true generative process has x as an effect and y as\na cause, then modeling p(x | y) is robust to changes in p(y). If the cause-effect\nrelationship was reversed, this would not be true, since by Bayes\u2019 rule, p(x | y)\nwould be sensitive to changes in p(y). Very often, when we consider changes in\ndistribution due to different domains, temporal non-stationarity, or changes in\nthe nature of the task, the causal mechanisms remain invariant (the laws of the\nuniverse are constant) while the marginal distribution over the underlying causes\ncan change. Hence, better generalization and robustness to all kinds of changes can\n\n545\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nbe expected via learning a generative model that attempts to recover the causal\nfactors h and p(x | h).\n\n15.4 Distributed Representation\n\nDistributed representations of concepts\u2014representations composed of many ele-\nments that can be set separately from each other\u2014are one of the most important\ntools for representation learning. Distributed representations are powerful because\nthey can use n features with k values to describe k\u201d different concepts. As we\nhave seen throughout this book, both neural networks with multiple hidden units\nand probabilistic models with multiple latent variables make use of the strategy of\ndistributed representation. We now introduce an additional observation. Many\ndeep learning algorithms are motivated by the assumption that the hidden units\ncan learn to represent the underlying causal factors that explain the data, as\ndiscussed in section 15.3. Distributed representations are natural for this approach,\nbecause each direction in representation space can correspond to the value of a\ndifferent underlying configuration variable.\n\nAn example of a distributed representation is a vector of n binary features,\nwhich can take 2\u201d configurations, each potentially corresponding to a different\nregion in input space, as illustrated in figure 15.7. This can be compared with\na symbolic representation, where the input is associated with a single symbol or\ncategory. If there are n symbols in the dictionary, one can imagine n feature\ndetectors, each corresponding to the detection of the presence of the associated\ncategory. In that case only n different configurations of the representation space\nare possible, carving n different regions in input space, as illustrated in figure 15.8.\nSuch a symbolic representation is also called a one-hot representation, since it can\nbe captured by a binary vector with n bits that are mutually exclusive (only one\nof them can be active). A symbolic representation is a specific example of the\nbroader class of non-distributed representations, which are representations that\nmay contain many entries but without significant meaningful separate control over\neach entry.\n\nExamples of learning algorithms based on non-distributed representations\ninclude:\n\ne Clustering methods, including the k-means algorithm: each input point is\nassigned to exactly one cluster.\n\ne k-nearest neighbors algorithms: one or a few templates or prototype examples\nare associated with a given input. In the case of k > 1, there are multiple\n\nc\n\n546\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nh Q hg\n\nh= [1,10] h= (1,0,1]\"\n\nhy\n\nh = [0,1,0]\" h = (0,0, 1)\"\n\nFigure 15.7: Illustration of how a learning algorithm based on a distributed representation\nbreaks up the input space into regions. In this example, there are three binary features\nhy, hg, and hg. Each feature is defined by thresholding the output of a learned, linear\ntransformation. Each feature divides R? into two half-planes. Let h7 be the set of input\npoints for which h; = 1 and h; be the set of input points for which h; = 0. In this\nillustration, each line represents the decision boundary for one h;, with the corresponding\narrow pointing to the h} side of the boundary. The representation as a whole takes\non a unique value at each possible intersection of these half-planes. For example, the\nrepresentation value [1,1,1]' corresponds to the region hf NhZ Nhz. Compare this to the\nnon-distributed representations in figure 15.8. In the general case of d input dimensions,\na distributed representation divides R\u00a2 by intersecting half-spaces rather than half-planes.\nThe distributed representation with n features assigns unique codes to O(n\") different\nregions, while the nearest neighbor algorithm with n examples assigns unique codes to only\nn regions. The distributed representation is thus able to distinguish exponentially many\nmore regions than the non-distributed one. Keep in mind that not all h values are feasible\n(there is no h= 0 in this example) and that a linear classifier on top of the distributed\nrepresentation is not able to assign different class identities to every neighboring region;\neven a deep linear-threshold network has a VC dimension of only O(wlogw) where w\nis the number of weights (Sontag, 1998). The combination of a powerful representation\nlayer and a weak classifier layer can be a strong regularizer; a classifier trying to learn\nthe concept of \u201cperson\u201d versus \u201cnot a person\u201d does not need to assign a different class to\nan input represented as \u201cwoman with glasses\u201d than it assigns to an input represented as\n\u201cman without glasses.\u201d This capacity constraint encourages each classifier to focus on few\nh; and encourages h to learn to represent the classes in a linearly separable way.\n\n547\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nvalues describing each input, but they can not be controlled separately from\neach other, so this does not qualify as a true distributed representation.\n\ne Decision trees: only one leaf (and the nodes on the path from root to leaf) is\nactivated when an input is given.\n\ne Gaussian mixtures and mixtures of experts: the templates (cluster centers) or\nexperts are now associated with a degree of activation. As with the k-nearest\nneighbors algorithm, each input is represented with multiple values, but\nthose values cannot readily be controlled separately from each other.\n\ne Kernel machines with a Gaussian kernel (or other similarly local kernel):\nalthough the degree of activation of each \u201csupport vector\u201d or template example\nis now continuous-valued, the same issue arises as with Gaussian mixtures.\n\ne Language or translation models based on n-grams. The set of contexts\n(sequences of symbols) is partitioned according to a tree structure of suffixes.\nA leaf may correspond to the last two words being w 1 and wg, for example.\nSeparate parameters are estimated for each leaf of the tree (with some sharing\nbeing possible).\n\nFor some of these non-distributed algorithms, the output is not constant by\nparts but instead interpolates between neighboring regions. The relationship\nbetween the number of parameters (or examples) and the number of regions they\ncan define remains linear.\n\nAn important related concept that distinguishes a distributed representation\nfrom a symbolic one is that generalization arises due to shared attributes between\ndifferent concepts. As pure symbols, \u201ccat\u201d and \u201cdog\u201d are as far from each other\nas any other two symbols. However, if one associates them with a meaningful\ndistributed representation, then many of the things that can be said about cats\ncan generalize to dogs and vice-versa. For example, our distributed representation\nmay contain entries such as \u201chas_fur\u201d or \u201cnumber_of_legs\u201d that have the same\nvalue for the embedding of both \u201ccat\u201d and \u201cdog.\u201d Neural language models that\noperate on distributed representations of words generalize much better than other\nmodels that operate directly on one-hot representations of words, as discussed in\nsection 12.4. Distributed representations induce a rich similarity space, in which\nsemantically close concepts (or inputs) are close in distance, a property that is\nabsent from purely symbolic representations.\n\nWhen and why can there be a statistical advantage from using a distributed\nrepresentation as part of a learning algorithm? Distributed representations can\n\nc\n\n548\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nFigure 15.8: Illustration of how the nearest neighbor algorithm breaks up the input space\ninto different regions. The nearest neighbor algorithm provides an example of a learning\nalgorithm based on a non-distributed representation. Different non-distributed algorithms\nmay have different geometry, but they typically break the input space into regions,\nwith a separate set of parameters for each region. The advantage of a non-distributed\napproach is that, given enough parameters, it can fit the training set without solving a\ndifficult optimization algorithm, because it is straightforward to choose a different output\nindependently for each region. The disadvantage is that such non-distributed models\ngeneralize only locally via the smoothness prior, making it difficult to learn a complicated\nfunction with more peaks and troughs than the available number of examples. Contrast\nthis with a distributed representation, figure 15.7.\n\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nhave a statistical advantage when an apparently complicated structure can be\ncompactly represented using a small number of parameters. Some traditional non-\ndistributed learning algorithms generalize only due to the smoothness assumption,\nwhich states that if u ~ v, then the target function f to be learned has the\nproperty that f(u) ~ f(v), in general. There are many ways of formalizing such an\nassumption, but the end result is that if we have an example (x,y) for which we\nknow that f(x) & y, then we choose an estimator f that approximately satisfies\nthese constraints while changing as little as possible when we move to a nearby\ninput \u00ab+e. This assumption is clearly very useful, but it suffers from the curse of\ndimensionality: in order to learn a target function that increases and decreases\nmany times in many different regions,! we may need a number of examples that is\nat least as large as the number of distinguishable regions. One can think of each of\nthese regions as a category or symbol: by having a separate degree of freedom for\neach symbol (or region), we can learn an arbitrary decoder mapping from symbol\nto value. However, this does not allow us to generalize to new symbols for new\nregions.\n\nIf we are lucky, there may be some regularity in the target function, besides being\nsmooth. For example, a convolutional network with max-pooling can recognize an\nobject regardless of its location in the image, even though spatial translation of\nthe object may not correspond to smooth transformations in the input space.\n\nLet us examine a special case of a distributed representation learning algorithm,\nthat extracts binary features by thresholding linear functions of the input. Each\nbinary feature in this representation divides R@ into a pair of half-spaces, as\nillustrated in figure 15.7. The exponentially large number of intersections of n\nof the corresponding half-spaces determines how many regions this distributed\nrepresentation learner can distinguish. How many regions are generated by an\narrangement of n hyperplanes in R\u00a2? By applying a general result concerning the\nintersection of hyperplanes (Zaslavsky, 1975), one can show (Pascanu ef al., 2014b)\nthat the number of regions this binary feature representation can distinguish is\n\n\u00bb (\u2018) = O(n\"), (15.4)\n\nTherefore, we see a growth that is exponential in the input size and polynomial in\nthe number of hidden units.\n\nPotentially, we may want to learn a function whose behavior is distinct in exponentially many\nregions: in a d-dimensional space with at least 2 different values to distinguish per dimension, we\nmight want f to differ in 2\u00a2 different regions, requiring O(2%) training examples.\n\n550\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nThis provides a geometric argument to explain the generalization power of\ndistributed representation: with O(nd) parameters (for n linear-threshold features\nin R\u201c) we can distinctly represent O(n*) regions in input space. If instead we made\nno assumption at all about the data, and used a representation with one unique\nsymbol for each region, and separate parameters for each symbol to recognize its\ncorresponding portion of R?, then specifying O(n\u00ae) regions would require O(n\u00ae)\nexamples. More generally, the argument in favor of the distributed representation\ncould be extended to the case where instead of using linear threshold units we\nuse nonlinear, possibly continuous, feature extractors for each of the attributes in\nthe distributed representation. The argument in this case is that if a parametric\ntransformation with k parameters can learn about r regions in input space, with\nk <r, and if obtaining such a representation was useful to the task of interest, then\nwe could potentially generalize much better in this way than in a non-distributed\nsetting where we would need O(r) examples to obtain the same features and\nassociated partitioning of the input space into r regions. Using fewer parameters to\nrepresent the model means that we have fewer parameters to fit, and thus require\nfar fewer training examples to generalize well.\n\nA further part of the argument for why models based on distributed represen-\ntations generalize well is that their capacity remains limited despite being able to\ndistinctly encode so many different regions. For example, the VC dimension of a\nneural network of linear threshold units is only O(w log w), where w is the number\nof weights (Sontag, 1998). This limitation arises because, while we can assign very\nmany unique codes to representation space, we cannot use absolutely all of the code\nspace, nor can we learn arbitrary functions mapping from the representation space\nh to the output y using a linear classifier. The use of a distributed representation\ncombined with a linear classifier thus expresses a prior belief that the classes to\nbe recognized are linearly separable as a function of the underlying causal factors\ncaptured by h. We will typically want to learn categories such as the set of all\nimages of all green objects or the set of all images of cars, but not categories that\nrequire nonlinear, XOR logic. For example, we typically do not want to partition\nthe data into the set of all red cars and green trucks as one class and the set of all\ngreen cars and red trucks as another class.\n\nThe ideas discussed so far have been abstract, but they may be experimentally\nvalidated. Zhou e\u00a2 al. (2015) find that hidden units in a deep convolutional network\ntrained on the ImageNet and Places benchmark datasets learn features that are very\noften interpretable, corresponding to a label that humans would naturally assign.\nIn practice it is certainly not always the case that hidden units learn something\nthat has a simple linguistic name, but it is interesting to see this emerge near the\ntop levels of the best computer vision deep networks. What such features have in\n\n551\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nFigure 15.9: A generative model has learned a distributed representation that disentangles\nthe concept of gender from the concept of wearing glasses. If we begin with the repre-\nsentation of the concept of a man with glasses, then subtract the vector representing the\nconcept of a man without glasses, and finally add the vector representing the concept\nof a woman without glasses, we obtain the vector representing the concept of a woman\nwith glasses. The generative model correctly decodes all of these representation vectors to\nimages that may be recognized as belonging to the correct class. Images reproduced with\npermission from Radford ef al. (2015).\n\ncommon is that one could imagine learning about each of them without having to\nsee all the configurations of all the others. Radford et al. (2015) demonstrated that\na generative model can learn a representation of images of faces, with separate\ndirections in representation space capturing different underlying factors of variation.\nFigure 15.9 demonstrates that one direction in representation space corresponds\nto whether the person is male or female, while another corresponds to whether\nthe person is wearing glasses. These features were discovered automatically, not\nfixed a priori. There is no need to have labels for the hidden unit classifiers:\ngradient descent on an objective function of interest naturally learns semantically\ninteresting features, so long as the task requires such features. We can learn about\nthe distinction between male and female, or about the presence or absence of\nglasses, without having to characterize all of the configurations of the n \u2014 1 other\nfeatures by examples covering all of these combinations of values. This form of\nstatistical separability is what allows one to generalize to new configurations of a\nperson\u2019s features that have never been seen during training.\n\n552\n", "CHAPTER 15. REPRESENTATION LEARNING\n\n15.5 Exponential Gains from Depth\n\nWe have seen in section 6.4.1 that multilayer perceptrons are universal approxima-\ntors, and that some functions can be represented by exponentially smaller deep\nnetworks compared to shallow networks. This decrease in model size leads to\nimproved statistical efficiency. In this section, we describe how similar results apply\nmore generally to other kinds of models with distributed hidden representations.\n\nIn section 15.4, we saw an example of a generative model that learned about\nthe explanatory factors underlying images of faces, including the person\u2019s gender\nand whether they are wearing glasses. The generative model that accomplished\nthis task was based on a deep neural network. It would not be reasonable to expect\na shallow network, such as a linear network, to learn the complicated relationship\nbetween these abstract explanatory factors and the pixels in the image. In this\nand other AI tasks, the factors that can be chosen almost independently from\neach other yet still correspond to meaningful inputs are more likely to be very\nhigh-level and related in highly nonlinear ways to the input. We argue that this\ndemands deep distributed representations, where the higher level features (seen as\nfunctions of the input) or factors (seen as generative causes) are obtained through\nthe composition of many nonlinearities.\n\nIt has been proven in many different settings that organizing computation\nthrough the composition of many nonlinearities and a hierarchy of reused features\ncan give an exponential boost to statistical efficiency, on top of the exponential\nboost given by using a distributed representation. Many kinds of networks (e.g.,\nwith saturating nonlinearities, Boolean gates, sum/products, or RBF units) with\na single hidden layer can be shown to be universal approximators. A model\nfamily that is a universal approximator can approximate a large class of functions\n(including all continuous functions) up to any non-zero tolerance level, given enough\nhidden units. However, the required number of hidden units may be very large.\nTheoretical results concerning the expressive power of deep architectures state that\nthere are families of functions that can be represented efficiently by an architecture\nof depth k, but would require an exponential number of hidden units (with respect\nto the input size) with insufficient depth (depth 2 or depth & \u2014 1).\n\nIn section 6.4.1, we saw that deterministic feedforward networks are universal\napproximators of functions. Many structured probabilistic models with a single\nhidden layer of latent variables, including restricted Boltzmann machines and deep\nbelief networks, are universal approximators of probability distributions (Le Roux\nand Bengio, 2008, 2010; Montifar and Ay, 2011; Monttfar, 2014; Krause et al.,\n2013).\n\nOo\nOo\nw\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nIn section 6.4.1, we saw that a sufficiently deep feedforward network can have\nan exponential advantage over a network that is too shallow. Such results can also\nbe obtained for other models such as probabilistic models. One such probabilistic\nmodel is the sum-product network or SPN (Poon and Domingos, 2011). These\nmodels use polynomial circuits to compute the probability distribution over a\nset of random variables. Delalleau and Bengio (2011) showed that there exist\nprobability distributions for which a minimum depth of SPN is required to avoid\nneeding an exponentially large model. Later, Martens and Medabalimi (2014)\nshowed that there are significant differences between every two finite depths of\nSPN, and that some of the constraints used to make SPNs tractable may limit\ntheir representational power.\n\nAnother interesting development is a set of theoretical results for the expressive\npower of families of deep circuits related to convolutional nets, highlighting an\nexponential advantage for the deep circuit even when the shallow circuit is allowed\nto only approximate the function computed by the deep circuit (Cohen et al.,\n2015). By comparison, previous theoretical work made claims regarding only the\ncase where the shallow circuit must exactly replicate particular functions.\n\n15.6 Providing Clues to Discover Underlying Causes\n\nTo close this chapter, we come back to one of our original questions: what makes one\nrepresentation better than another? One answer, first introduced in section 15.3, is\nthat an ideal representation is one that disentangles the underlying causal factors of\nvariation that generated the data, especially those factors that are relevant to our\napplications. Most strategies for representation learning are based on introducing\nclues that help the learning to find these underlying factors of variations. The clues\ncan help the learner separate these observed factors from the others. Supervised\nlearning provides a very strong clue: a label y, presented with each a, that usually\nspecifies the value of at least one of the factors of variation directly. More generally,\nto make use of abundant unlabeled data, representation learning makes use of\nother, less direct, hints about the underlying factors. These hints take the form of\nimplicit prior beliefs that we, the designers of the learning algorithm, impose in\norder to guide the learner. Results such as the no free lunch theorem show that\nregularization strategies are necessary to obtain good generalization. While it is\nimpossible to find a universally superior regularization strategy, one goal of deep\nlearning is to find a set of fairly generic regularization strategies that are applicable\nto a wide variety of AI tasks, similar to the tasks that people and animals are able\nto solve.\n\nOo\nou\nrs\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nWe provide here a list of these generic regularization strategies. The list is\nclearly not exhaustive, but gives some concrete examples of ways that learning\nalgorithms can be encouraged to discover features that correspond to underlying\nfactors. This list was introduced in section 3.1 of Bengio ei al. (2013d) and has\nbeen partially expanded here.\n\nSmoothness: This is the assumption that f(a + ed) ~ f(a) for unit d and\nsmall \u00ab. This assumption allows the learner to generalize from training\nexamples to nearby points in input space. Many machine learning algorithms\nleverage this idea, but it is insufficient to overcome the curse of dimensionality.\n\nLinearity: Many learning algorithms assume that relationships between some\nvariables are linear. This allows the algorithm to make predictions even\nvery far from the observed data, but can sometimes lead to overly extreme\npredictions. Most simple machine learning algorithms that do not make the\nsmoothness assumption instead make the linearity assumption. These are\nin fact different assumptions\u2014linear functions with large weights applied\nto high-dimensional spaces may not be very smooth. See Goodfellow ef al.\n(2014b) for a further discussion of the limitations of the linearity assumption.\n\nMultiple explanatory factors: Many representation learning algorithms are\nmotivated by the assumption that the data is generated by multiple underlying\nexplanatory factors, and that most tasks can be solved easily given the state\nof each of these factors. Section 15.3 describes how this view motivates semi-\nsupervised learning via representation learning. Learning the structure of p(x)\nrequires learning some of the same features that are useful for modeling p(y |\nx) because both refer to the same underlying explanatory factors. Section 15.4\ndescribes how this view motivates the use of distributed representations, with\nseparate directions in representation space corresponding to separate factors\nof variation.\n\nCausal factors: the model is constructed in such a way that it treats the\nfactors of variation described by the learned representation h as the causes\nof the observed data x, and not vice-versa. As discussed in section 15.3, this\nis advantageous for semi-supervised learning and makes the learned model\nmore robust when the distribution over the underlying causes changes or\nwhen we use the model for a new task.\n\nDepth, or a hierarchical organization of explanatory factors: High-level,\nabstract concepts can be defined in terms of simple concepts, forming a\nhierarchy. From another point of view, the use of a deep architecture\n\n555\n", "CHAPTER 15. REPRESENTATION LEARNING\n\nexpresses our belief that the task should be accomplished via a multi-step\nprogram, with each step referring back to the output of the processing\naccomplished via previous steps.\n\nShared factors across tasks: In the context where we have many tasks,\ncorresponding to different y; variables sharing the same input x or where\neach task is associated with a subset or a function f (x) of a global input\nx, the assumption is that each y; is associated with a different subset from a\ncommon pool of relevant factors h. Because these subsets overlap, learning\nall the P(y; | x) via a shared intermediate representation P(h | x) allows\nsharing of statistical strength between the tasks.\n\nManifolds: Probability mass concentrates, and the regions in which it con-\ncentrates are locally connected and occupy a tiny volume. In the continuous\ncase, these regions can be approximated by low-dimensional manifolds with\na much smaller dimensionality than the original space where the data lives.\nMany machine learning algorithms behave sensibly only on this manifold\n(Goodfellow ef al., 2014b). Some machine learning algorithms, especially\nautoencoders, attempt to explicitly learn the structure of the manifold.\n\nNatural clustering: Many machine learning algorithms assume that each\nconnected manifold in the input space may be assigned to a single class. The\ndata may lie on many disconnected manifolds, but the class remains constant\nwithin each one of these. This assumption motivates a variety of learning\nalgorithms, including tangent propagation, double backprop, the manifold\ntangent classifier and adversarial training.\n\nTemporal and spatial coherence: Slow feature analysis and related algorithms\nmake the assumption that the most important explanatory factors change\nslowly over time, or at least that it is easier to predict the true underlying\nexplanatory factors than to predict raw observations such as pixel values.\nSee section 13.3 for further description of this approach.\n\nSparsity: Most features should presumably not be relevant to describing most\ninputs\u2014there is no need to use a feature that detects elephant trunks when\nrepresenting an image of a cat. It is therefore reasonable to impose a prior\nthat any feature that can be interpreted as \u201cpresent\u201d or \u201cabsent\u201d should be\nabsent most of the time.\n\nSimplicity of Factor Dependencies: In good high-level representations, the\nfactors are related to each other through simple dependencies. The simplest\n\n556\n", "CHAPTER 15. REPRESENTATION LEARNING\n\npossible is marginal independence, P(h) = [],; P(hi), but linear dependencies\nor those captured by a shallow autoencoder are also reasonable assumptions.\nThis can be seen in many laws of physics, and is assumed when plugging a\nlinear predictor or a factorized prior on top of a learned representation.\n\nThe concept of representation learning ties together all of the many forms\nof deep learning. Feedforward and recurrent networks, autoencoders and deep\nprobabilistic models all learn and exploit representations. Learning the best\npossible representation remains an exciting avenue of research.\n\non\na\nas]\n", "Chapter 16\n\nStructured Probabilistic Models\nfor Deep Learning\n\nDeep learning draws upon many modeling formalisms that researchers can use to\nguide their design efforts and describe their algorithms. One of these formalisms\nis the idea of structured probabilistic models. We have already discussed\nstructured probabilistic models briefly in section 3.14. That brief presentation was\nsufficient to understand how to use structured probabilistic models as a language to\ndescribe some of the algorithms in part II. Now, in part III, structured probabilistic\nmodels are a key ingredient of many of the most important research topics in deep\nlearning. In order to prepare to discuss these research ideas, this chapter describes\nstructured probabilistic models in much greater detail. This chapter is intended\nto be self-contained; the reader does not need to review the earlier introduction\nbefore continuing with this chapter.\n\nA structured probabilistic model is a way of describing a probability distribution,\nusing a graph to describe which random variables in the probability distribution\ninteract with each other directly. Here we use \u201cgraph\u201d in the graph theory sense\u2014a\nset of vertices connected to one another by a set of edges. Because the structure\nof the model is defined by a graph, these models are often also referred to as\ngraphical models.\n\nThe graphical models research community is large and has developed many\ndifferent models, training algorithms, and inference algorithms. In this chapter, we\nprovide basic background on some of the most central ideas of graphical models,\nwith an emphasis on the concepts that have proven most useful to the deep learning\nresearch community. If you already have a strong background in graphical models,\nyou may wish to skip most of this chapter. However, even a graphical model expert\n\n558\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nmay benefit from reading the final section of this chapter, section 16.7, in which we\nhighlight some of the unique ways that graphical models are used for deep learning\nalgorithms. Deep learning practitioners tend to use very different model structures,\nlearning algorithms and inference procedures than are commonly used by the rest\nof the graphical models research community. In this chapter, we identify these\ndifferences in preferences and explain the reasons for them.\n\nIn this chapter we first describe the challenges of building large-scale proba-\nbilistic models. Next, we describe how to use a graph to describe the structure\nof a probability distribution. While this approach allows us to overcome many\nchallenges, it is not without its own complications. One of the major difficulties in\ngraphical modeling is understanding which variables need to be able to interact\ndirectly, i.e., which graph structures are most suitable for a given problem. We\noutline two approaches to resolving this difficulty by learning about the dependen-\ncies in section 16.5. Finally, we close with a discussion of the unique emphasis that\ndeep learning practitioners place on specific approaches to graphical modeling in\nsection 16.7.\n\n16.1 The Challenge of Unstructured Modeling\n\nThe goal of deep learning is to scale machine learning to the kinds of challenges\nneeded to solve artificial intelligence. This means being able to understand high-\ndimensional data with rich structure. For example, we would like AI algorithms to\nbe able to understand natural images,\u2019 audio waveforms representing speech, and\ndocuments containing multiple words and punctuation characters.\n\nClassification algorithms can take an input from such a rich high-dimensional\ndistribution and summarize it with a categorical label\u2014what object is in a photo,\nwhat word is spoken in a recording, what topic a document is about. The process\nof classification discards most of the information in the input and produces a\nsingle output (or a probability distribution over values of that single output). The\nclassifier is also often able to ignore many parts of the input. For example, when\nrecognizing an object in a photo, it is usually possible to ignore the background of\nthe photo.\n\nIt is possible to ask probabilistic models to do many other tasks. These tasks are\noften more expensive than classification. Some of them require producing multiple\noutput values. Most require a complete understanding of the entire structure of\n\n' A natural image is an image that might be captured by a camera in a reasonably ordinary\nenvironment, as opposed to a synthetically rendered image, a screenshot of a web page, etc.\n\n559\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nthe input, with no option to ignore sections of it. These tasks include the following:\n\ne Density estimation: given an input x, the machine learning system returns\nan estimate of the true density p(a) under the data generating distribution.\nThis requires only a single output, but it does require a complete understand-\ning of the entire input. If even one element of the vector is unusual, the\nsystem must assign it a low probability.\n\ne Denoising: given a damaged or incorrectly observed input &, the machine\nlearning system returns an estimate of the original or correct x. For example,\nthe machine learning system might be asked to remove dust or scratches\nfrom an old photograph. This requires multiple outputs (every element of the\nestimated clean example a) and an understanding of the entire input (since\neven one damaged area will still reveal the final estimate as being damaged).\n\ne Missing value imputation: given the observations of some elements of 2,\nthe model is asked to return estimates of or a probability distribution over\nsome or all of the unobserved elements of x. This requires multiple outputs.\nBecause the model could be asked to restore any of the elements of x, it\nmust understand the entire input.\n\ne Sampling: the model generates new samples from the distribution p(x).\nApplications include speech synthesis, i.e. producing new waveforms that\nsound like natural human speech. This requires multiple output values and a\ngood model of the entire input. If the samples have even one element drawn\nfrom the wrong distribution, then the sampling process is wrong.\n\nFor an example of a sampling task using small natural images, see figure 16.1.\n\nModeling a rich distribution over thousands or millions of random variables is a\nchallenging task, both computationally and statistically. Suppose we only wanted\nto model binary variables. This is the simplest possible case, and yet already it\nseems overwhelming. For a small, 32 x 32 pixel color (RGB) image, there are 2907?\npossible binary images of this form. This number is over 10\u00b0\u201d times larger than\nthe estimated number of atoms in the universe.\n\nIn general, if we wish to model a distribution over a random vector x containing\nn discrete variables capable of taking on & values each, then the naive approach of\nrepresenting P(x) by storing a lookup table with one probability value per possible\noutcome requires k\u201d parameters!\n\nThis is not feasible for several reasons:\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.1: Probabilistic modeling of natural images. (Top)Example 32 x 32 pixel color\nimages from the CIFAR-10 dataset (Krizhevsky and Hinton, 2009). (Bottom)Samples\ndrawn from a structured probabilistic model trained on this dataset. Each sample appears\nat the same position in the grid as the training example that is closest to it in Euclidean\nspace. This comparison allows us to see that the model is truly synthesizing new images,\nrather than memorizing the training data. Contrast of both sets of images has been\nadjusted for display. Figure reproduced with permission from Courville et al. (2011).\n\n561\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\ne Memory: the cost of storing the representation: For all but very small values\nof n and k, representing the distribution as a table will require too many\nvalues to store.\n\ne Statistical efficiency: As the number of parameters in a model increases,\nso does the amount of training data needed to choose the values of those\nparameters using a statistical estimator. Because the table-based model\nhas an astronomical number of parameters, it will require an astronomically\nlarge training set to fit accurately. Any such model will overfit the training\nset very badly unless additional assumptions are made linking the different\nentries in the table (for example, like in back-off or smoothed n-gram models,\nsection 12.4.1).\n\ne Runtime: the cost of inference: Suppose we want to perform an inference\ntask where we use our model of the joint distribution P(x) to compute some\nother distribution, such as the marginal distribution P(x) or the conditional\ndistribution P(x2 | x1). Computing these distributions will require summing\nacross the entire table, so the runtime of these operations is as high as the\nintractable memory cost of storing the model.\n\ne Runtime: the cost of sampling: Likewise, suppose we want to draw a sample\nfrom the model. The naive way to do this is to sample some value u ~ U(0, 1),\nthen iterate through the table, adding up the probability values until they\nexceed u and return the outcome corresponding to that position in the table.\nThis requires reading through the whole table in the worst case, so it has\nthe same exponential cost as the other operations.\n\nThe problem with the table-based approach is that we are explicitly modeling\nevery possible kind of interaction between every possible subset of variables. The\nprobability distributions we encounter in real tasks are much simpler than this.\nUsually, most variables influence each other only indirectly.\n\nFor example, consider modeling the finishing times of a team in a relay race.\nSuppose the team consists of three runners: Alice, Bob and Carol. At the start of\nthe race, Alice carries a baton and begins running around a track. After completing\nher lap around the track, she hands the baton to Bob. Bob then runs his own\nlap and hands the baton to Carol, who runs the final lap. We can model each of\ntheir finishing times as a continuous random variable. Alice\u2019s finishing time does\nnot depend on anyone else\u2019s, since she goes first. Bob\u2019s finishing time depends\non Alice\u2019s, because Bob does not have the opportunity to start his lap until Alice\nhas completed hers. If Alice finishes faster, Bob will finish faster, all else being\n\nc\n\n562\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nequal. Finally, Carol\u2019s finishing time depends on both her teammates. If Alice is\nslow, Bob will probably finish late too. As a consequence, Carol will have quite a\nlate starting time and thus is likely to have a late finishing time as well. However,\nCarol\u2019s finishing time depends only indirectly on Alice\u2019s finishing time via Bob\u2019s.\nIf we already know Bob\u2019s finishing time, we will not be able to estimate Carol\u2019s\nfinishing time better by finding out what Alice\u2019s finishing time was. This means\nwe can model the relay race using only two interactions: Alice\u2019s effect on Bob and\nBob\u2019s effect on Carol. We can omit the third, indirect interaction between Alice\nand Carol from our model.\n\nStructured probabilistic models provide a formal framework for modeling only\ndirect interactions between random variables. This allows the models to have\nsignificantly fewer parameters and therefore be estimated reliably from less data.\nThese smaller models also have dramatically reduced computational cost in terms\nof storing the model, performing inference in the model, and drawing samples from\nthe model.\n\n16.2 Using Graphs to Describe Model Structure\n\nStructured probabilistic models use graphs (in the graph theory sense of \u201cnodes\u201d or\n\u201cvertices\u201d connected by edges) to represent interactions between random variables.\nEach node represents a random variable. Each edge represents a direct interaction.\nThese direct interactions imply other, indirect interactions, but only the direct\ninteractions need to be explicitly modeled.\n\nThere is more than one way to describe the interactions in a probability\ndistribution using a graph. In the following sections we describe some of the most\npopular and useful approaches. Graphical models can be largely divided into\ntwo categories: models based on directed acyclic graphs, and models based on\nundirected graphs.\n\n16.2.1 Directed Models\n\nOne kind of structured probabilistic model is the directed graphical model,\notherwise known as the belief network or Bayesian network? (Pearl, 1985).\n\nDirected graphical models are called \u201cdirected\u201d because their edges are directed,\n\n? Judea Pearl suggested using the term \u201cBayesian network\u201d when one wishes to \u201cemphasize\nthe judgmental\u2019 nature of the values computed by the network, i.e. to highlight that they usually\nrepresent degrees of belief rather than frequencies of events.\n\nc\n\n563\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nAlice Bob Carol\n\nOrr)\n\nFigure 16.2: A directed graphical model depicting the relay race example. Alice\u2019s finishing\ntime to influences Bob\u2019s finishing time t;, because Bob does not get to start running until\nAlice finishes. Likewise, Carol only gets to start running after Bob finishes, so Bob\u2019s\nfinishing time t directly influences Carol\u2019s finishing time t2.\n\nthat is, they point from one vertex to another. This direction is represented in\nthe drawing with an arrow. The direction of the arrow indicates which variable\u2019s\nprobability distribution is defined in terms of the other\u2019s. Drawing an arrow from\na to b means that we define the probability distribution over b via a conditional\ndistribution, with a as one of the variables on the right side of the conditioning\nbar. In other words, the distribution over b depends on the value of a.\n\nContinuing with the relay race example from section 16.1, suppose we name\nAlice\u2019s finishing time to, Bob\u2019s finishing time t;, and Carol\u2019s finishing time to.\nAs we saw earlier, our estimate of t; depends on ty. Our estimate of tg depends\ndirectly on t; but only indirectly on to. We can draw this relationship in a directed\ngraphical model, illustrated in figure 16.2.\n\nFormally, a directed graphical model defined on variables x is defined by a\ndirected acyclic graph G whose vertices are the random variables in the model,\nand a set of local conditional probability distributions p(x; | Pag(x;)) where\nPag(x;) gives the parents of x; in G. The probability distribution over x is given\nby\n\np(x) = Hips | Pag )). (16.1)\n\nIn our relay race example, this means that, using the graph drawn in figure 16.2,\np(to, t1, t2) = p(to)p(ti | to)p(te | tr). (16.2)\n\nThis is our first time seeing a structured probabilistic model in action. We\ncan examine the cost of using it, in order to observe how structured modeling has\nmany advantages relative to unstructured modeling.\n\nSuppose we represented time by discretizing time ranging from minute 0 to\nminute 10 into 6 second chunks. This would make to, t; and tg each be a discrete\nvariable with 100 possible values. If we attempted to represent p(tg, ty, tg) with a\ntable, it would need to store 999,999 values (100 values of to x 100 values of t1 x\n100 values of t2, minus 1, since the probability of one of the configurations is made\n\nc\n\n564\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nredundant by the constraint that the sum of the probabilities be 1). If instead, we\nonly make a table for each of the conditional probability distributions, then the\ndistribution over to requires 99 values, the table defining t; given to requires 9900\nvalues, and so does the table defining t2 given ti. This comes to a total of 19,899\nvalues. This means that using the directed graphical model reduced our number of\nparameters by a factor of more than 50!\n\nIn general, to model n discrete variables each having k values, the cost of the\nsingle table approach scales like O(k\"), as we have observed before. Now suppose\nwe build a directed graphical model over these variables. If m is the maximum\nnumber of variables appearing (on either side of the conditioning bar) in a single\nconditional probability distribution, then the cost of the tables for the directed\nmodel scales like O( k\u201d). As long as we can design a model such that m << n, we\nget very dramatic savings.\n\nIn other words, so long as each variable has few parents in the graph, the\ndistribution can be represented with very few parameters. Some restrictions on\nthe graph structure, such as requiring it to be a tree, can also guarantee that\noperations like computing marginal or conditional distributions over subsets of\nvariables are efficient.\n\nIt is important to realize what kinds of information can and cannot be encoded in\nthe graph. The graph encodes only simplifying assumptions about which variables\nare conditionally independent from each other. It is also possible to make other\nkinds of simplifying assumptions. For example, suppose we assume Bob always\ntuns the same regardless of how Alice performed. (In reality, Alice\u2019s performance\nprobably influences Bob\u2019s performance\u2014depending on Bob\u2019s personality, if Alice\nruns especially fast in a given race, this might encourage Bob to push hard and\nmatch her exceptional performance, or it might make him overconfident and lazy).\nThen the only effect Alice has on Bob\u2019s finishing time is that we must add Alice\u2019s\nfinishing time to the total amount of time we think Bob needs to run. This\nobservation allows us to define a model with O(k) parameters instead of O(k?).\nHowever, note that tg and t; are still directly dependent with this assumption,\nbecause ti represents the absolute time at which Bob finishes, not the total time\nhe himself spends running. This means our graph must still contain an arrow from\nto to ty. The assumption that Bob\u2019s personal running time is independent from\nall other factors cannot be encoded in a graph over to, ti, and tg. Instead, we\nencode this information in the definition of the conditional distribution itself. The\nconditional distribution is no longer a k x k \u2014 1 element table indexed by to and t1\nbut is now a slightly more complicated formula using only k \u2014 1 parameters. The\ndirected graphical model syntax does not place any constraint on how we define\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nour conditional distributions. It only defines which variables they are allowed to\ntake in as arguments.\n\n16.2.2 Undirected Models\n\nDirected graphical models give us one language for describing structured probabilis-\ntic models. Another popular language is that of undirected models, otherwise\nknown as Markov random fields (MRFs) or Markov networks (Kinder-\nmann, 1980). As their name implies, undirected models use graphs whose edges\nare undirected.\n\nDirected models are most naturally applicable to situations where there is\na clear reason to draw each arrow in one particular direction. Often these are\nsituations where we understand the causality and the causality only flows in one\ndirection. One such situation is the relay race example. Earlier runners affect the\nfinishing times of later runners; later runners do not affect the finishing times of\nearlier runners.\n\nNot all situations we might want to model have such a clear direction to their\ninteractions. When the interactions seem to have no intrinsic direction, or to\noperate in both directions, it may be more appropriate to use an undirected model.\n\nAs an example of such a situation, suppose we want to model a distribution\nover three binary variables: whether or not you are sick, whether or not your\ncoworker is sick, and whether or not your roommate is sick. As in the relay race\nexample, we can make simplifying assumptions about the kinds of interactions that\ntake place. Assuming that your coworker and your roommate do not know each\nother, it is very unlikely that one of them will give the other an infection such as a\ncold directly. This event can be seen as so rare that it is acceptable not to model\nit. However, it is reasonably likely that either of them could give you a cold, and\nthat you could pass it on to the other. We can model the indirect transmission of\na cold from your coworker to your roommate by modeling the transmission of the\ncold from your coworker to you and the transmission of the cold from you to your\nroommate.\n\nIn this case, it is just as easy for you to cause your roommate to get sick as\nit is for your roommate to make you sick, so there is not a clean, uni-directional\nnarrative on which to base the model. This motivates using an undirected model.\nAs with directed models, if two nodes in an undirected model are connected by an\nedge, then the random variables corresponding to those nodes interact with each\nother directly. Unlike directed models, the edge in an undirected model has no\narrow, and is not associated with a conditional probability distribution.\n\nc\n\n566\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nOOO\n\nFigure 16.3: An undirected graph representing how your roommate\u2019s health h,, your\nhealth h,, and your work colleague\u2019s health h, affect each other. You and your roommate\nmight infect each other with a cold, and you and your work colleague might do the same,\nbut assuming that your roommate and your colleague do not know each other, they can\nonly infect each other indirectly via you.\n\nWe denote the random variable representing your health as hy, the random\nvariable representing your roommate\u2019s health as h,, and the random variable\nrepresenting your colleague\u2019s health as he. See figure 16.3 for a drawing of the\ngraph representing this scenario.\n\nFormally, an undirected graphical model is a structured probabilistic model\ndefined on an undirected graph G. For each clique C in the graph, a factor \u00a2(C)\n(also called a clique potential) measures the affinity of the variables in that clique\nfor being in each of their possible joint states. The factors are constrained to be\nnon-negative. Together they define an unnormalized probability distribution\n\nP(x) = Iceg $(C). (16.3)\n\nThe unnormalized probability distribution is efficient to work with so long as\nall the cliques are small. It encodes the idea that states with higher affinity are\nmore likely. However, unlike in a Bayesian network, there is little structure to the\ndefinition of the cliques, so there is nothing to guarantee that multiplying them\ntogether will yield a valid probability distribution. See figure 16.4 for an example\nof reading factorization information from an undirected graph.\n\nOur example of the cold spreading between you, your roommate, and your\ncolleague contains two cliques. One clique contains h, and he. The factor for this\nclique can be defined by a table, and might have values resembling these:\n\nh. =0 2 1\nhe=1 1 10\n\n3A clique of the graph is a subset of nodes that are all connected to each other by an edge of\nthe graph.\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nA state of 1 indicates good health, while a state of 0 indicates poor health\n(having been infected with a cold). Both of you are usually healthy, so the\ncorresponding state has the highest affinity. The state where only one of you is\nsick has the lowest affinity, because this is a rare state. The state where both of\nyou are sick (because one of you has infected the other) is a higher affinity state,\nthough still not as common as the state where both are healthy.\n\nTo complete the model, we would need to also define a similar factor for the\nclique containing h, and h,..\n\n16.2.3. The Partition Function\n\nWhile the unnormalized probability distribution is guaranteed to be non-negative\neverywhere, it is not guaranteed to sum or integrate to 1. To obtain a valid\nprobability distribution, we must use the corresponding normalized probability\n\ndistribution:* 1\n\nplo) = F(x) (16.4\nwhere Z is the value that results in the probability distribution summing or\nintegrating to 1:\n\nZ= [ reax. (16.5)\n\nYou can think of Z as a constant when the \u00a2 functions are held constant. Note\nthat if the \u00a2 functions have parameters, then Z is a function of those parameters.\nIt is common in the literature to write Z with its arguments omitted to save space.\nThe normalizing constant Z is known as the partition function, a term borrowed\nfrom statistical physics.\n\nSince Z is an integral or sum over all possible joint assignments of the state x\nit is often intractable to compute. In order to be able to obtain the normalized\nprobability distribution of an undirected model, the model structure and the\ndefinitions of the \u00a2 functions must be conducive to computing Z efficiently. In\nthe context of deep learning, Z is usually intractable. Due to the intractability\nof computing Z exactly, we must resort to approximations. Such approximate\nalgorithms are the topic of chapter 18.\n\nOne important consideration to keep in mind when designing undirected models\nis that it is possible to specify the factors in such a way that Z does not exist.\nThis happens if some of the variables in the model are continuous and the integral\n\n+A distribution defined by normalizing a product of clique potentials is also called a Gibbs\ndistribution.\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nof p over their domain diverges. For example, suppose we want to model a single\nscalar variable x \u20ac R with a single clique potential d(x) = x?. In this case,\n\nZ= [ee (16.6)\n\nSince this integral diverges, there is no probability distribution corresponding to\nthis choice of \u00a2(z). Sometimes the choice of some parameter of the \u00a2 functions\ndetermines whether the probability distribution is defined. For example, for\n(a; 8) = exp (- Bx\"), the 8 parameter determines whether Z exists. Positive 8\nresults in a Gaussian distribution over x but all other values of @ make \u00a2 impossible\nto normalize.\n\nOne key difference between directed modeling and undirected modeling is that\ndirected models are defined directly in terms of probability distributions from\nthe start, while undirected models are defined more loosely by \u00a2 functions that\nare then converted into probability distributions. This changes the intuitions one\nmust develop in order to work with these models. One key idea to keep in mind\nwhile working with undirected models is that the domain of each of the variables\nhas dramatic effect on the kind of probability distribution that a given set of \u00a2\nfunctions corresponds to. For example, consider an n-dimensional vector-valued\nrandom variable x and an undirected model parametrized by a vector of biases\nb. Suppose we have one clique for each element of x, \u00a2(x;) = exp(bix;). What\nkind of probability distribution does this result in? The answer is that we do\nnot have enough information, because we have not yet specified the domain of x.\nIf x \u20ac R\u201d, then the integral defining Z diverges and no probability distribution\nexists. Ifx \u20ac {0,1}\u201d, then p(x) factorizes into n independent distributions, with\np(x; = 1) =sigmoid (6;). If the domain of x is the set of elementary basis vectors\n({[1, 0,..., 0], [0,1,...,0],...,[0,0,...,1]} ) then p(x) = softmax(b), so a large\nvalue of bj actually reduces p(x; = 1) for j Ai. Often, it is possible to leverage\nthe effect of a carefully chosen domain of a variable in order to obtain complicated\nbehavior from a relatively simple set of \u00a2 functions. We will explore a practical\napplication of this idea later, in section 20.6.\n\n16.2.4 Energy-Based Models\n\nMany interesting theoretical results about undirected models depend on the as-\nsumption that Vx, p(x) >0. A convenient way to enforce this condition is to use\nan energy-based model (EBM) where\n\nB(x) = exp(\u2014E(x)) (16.7)\n\nc\n\n569\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.4: This graph implies that p(a,b,c,d,e,f) can be written as\nF ba, (a, b)bv,c(b, \u00a2)ba,a(a, d)p,e(b, \u20ac) de,e(e, f) for an appropriate choice of the \u00a2 func-\ntions.\n\nand E(x) is known as the energy function. Because exp(z) is positive for all\nz, this guarantees that no energy function will result in a probability of zero\nfor any state x. Being completely free to choose the energy function makes\nlearning simpler. If we learned the clique potentials directly, we would need to use\nconstrained optimization to arbitrarily impose some specific minimal probability\nvalue. By learning the energy function, we can use unconstrained optimization.\u00b0\nThe probabilities in an energy-based model can approach arbitrarily close to zero\nbut never reach it.\n\nAny distribution of the form given by equation 16.7 is an example of a Boltz-\nmann distribution. For this reason, many energy-based models are called\nBoltzmann machines (Fahlman et a/., 1983; Ackley et al., 1985; Hinton et al.,\n1984; Hinton and Sejnowski, 1986). There is no accepted guideline for when to call\na model an energy-based model and when to call it a Boltzmann machine. The\nterm Boltzmann machine was first introduced to describe a model with exclusively\nbinary variables, but today many models such as the mean-covariance restricted\nBoltzmann machine incorporate real-valued variables as well. While Boltzmann\nmachines were originally defined to encompass both models with and without la-\ntent variables, the term Boltzmann machine is today most often used to designate\nmodels with latent variables, while Boltzmann machines without latent variables\nare more often called Markov random fields or log-linear models.\n\nCliques in an undirected graph correspond to factors of the unnormalized\nprobability function. Because exp(a) exp(b) = exp(a+b), this means that different\ncliques in the undirected graph correspond to the different terms of the energy\nfunction. In other words, an energy-based model is just a special kind of Markov\nnetwork: the exponentiation makes each term in the energy function correspond\nto a factor for a different clique. See figure 16.5 for an example of how to read the\n\n>For some models, we may still need to use constrained optimization to make sure Z exists.\n\nc\n\n570\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.5: This graph implies that E(a,b,c,d,e,f) can be written as Fy (a,b) +\nEp,c(b, \u00a2) + Ea,a(a,d) +Ep,(b,e) + Ee s(e, f) for an appropriate choice of the per-clique\n\nenergy functions. Note that we can obtain the \u00a2 functions in figure 16.4 by setting each @\nto the exponential of the corresponding negative energy, e.g., da,p(a, b) = exp (\u2014E(a, b)).\n\nform of the energy function from an undirected graph structure. One can view an\nenergy-based model with multiple terms in its energy function as being a product\nof experts (Hinton, 1999). Each term in the energy function corresponds to\nanother factor in the probability distribution. Each term of the energy function can\nbe thought of as an \u201cexpert\u201d that determines whether a particular soft constraint\nis satisfied. Each expert may enforce only one constraint that concerns only\na low-dimensional projection of the random variables, but when combined by\nmultiplication of probabilities, the experts together enforce a complicated high-\ndimensional constraint.\n\nOne part of the definition of an energy-based model serves no functional purpose\nfrom a machine learning point of view: the \u2014 sign in equation 16.7. This \u2014 sign\ncould be incorporated into the definition of &. For many choices of the function\nEF, the learning algorithm is free to determine the sign of the energy anyway. The\n\u2014 sign is present primarily to preserve compatibility between the machine learning\nliterature and the physics literature. Many advances in probabilistic modeling\nwere originally developed by statistical physicists, for whom F refers to actual,\nphysical energy and does not have arbitrary sign. Terminology such as \u201cenergy\u201d\nand \u201cpartition function\u201d remains associated with these techniques, even though\ntheir mathematical applicability is broader than the physics context in which they\nwere developed. Some machine learning researchers (e.g., Smolensky (1986), who\nreferred to negative energy as harmony) have chosen to emit the negation, but\nthis is not the standard convention.\n\nMany algorithms that operate on probabilistic models do not need to compute\nPmode! (@) but only log Pmoae(#). For energy-based models with latent variables h,\nthese algorithms are sometimes phrased in terms of the negative of this quantity,\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nOOO) O-O-O\n(a)\n\n(b)\n\nFigure 16.6: (a) The path between random variable a and random variable b through s is\nactive, because s is not observed. This means that a and b are not separated. (b) Here s\nis shaded in, to indicate that it is observed. Because the only path between a and b is\nthrough s, and that path is inactive, we can conclude that a and b are separated given s.\n\ncalled the free energy:\n\nF(x) = \u2014log SS exp (\u2014E(a,h)). (16.8)\nh\nIn this book, we usually prefer the more general log Pynodei(@) formulation.\n\n16.2.5 Separation and D-Separation\n\nThe edges in a graphical model tell us which variables directly interact. We often\nneed to know which variables indirectly interact. Some of these indirect interactions\ncan be enabled or disabled by observing other variables. More formally, we would\nlike to know which subsets of variables are conditionally independent from each\nother, given the values of other subsets of variables.\n\nIdentifying the conditional independences in a graph is very simple in the case\nof undirected models. In this case, conditional independence implied by the graph\nis called separation. We say that a set of variables A isseparated from another\nset of variables B given a third set of variables S if the graph structure implies that\nA is independent from B given S. If two variables a and b are connected by a path\ninvolving only unobserved variables, then those variables are not separated. If no\npath exists between them, or all paths contain an observed variable, then they are\nseparated. We refer to paths involving only unobserved variables as \u201cactive\u201d and\npaths including an observed variable as \u201cinactive.\u201d\n\nWhen we draw a graph, we can indicate observed variables by shading them in.\nSee figure 16.6 for a depiction of how active and inactive paths in an undirected\nmodel look when drawn in this way. See figure 16.7 for an example of reading\nseparation from an undirected graph.\n\nSimilar concepts apply to directed models, except that in the context of\ndirected models, these concepts are referred to as d-separation. The \u201cd\u201d stands\nfor \u201cdependence.\u201d D-separation for directed graphs is defined the same as separation\n\nc\n\n572\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.7: An example of reading separation properties from an undirected graph. Here\nb is shaded to indicate that it is observed. Because observing b blocks the only path from\na toc, we say that a and care separated from each other given b. The observation of b\nalso blocks one path between a and d, but there is a second, active path between them.\nTherefore, a and d are not separated given b.\n\nfor undirected graphs: We say that a set of variables A is d-separated from another\nset of variables B given a third set of variables S if the graph structure implies\nthat A is independent from B given S.\n\nAs with undirected models, we can examine the independences implied by the\ngraph by looking at what active paths exist in the graph. As before, two variables\nare dependent if there is an active path between them, and d-separated if no such\npath exists. In directed nets, determining whether a path is active is somewhat\nmore complicated. See figure 16.8 for a guide to identifying active paths in a\ndirected model. See figure 16.9 for an example of reading some properties from a\ngraph.\n\nIt is important to remember that separation and d-separation tell us only\nabout those conditional independences that are implied by the graph. There is no\nrequirement that the graph imply all independences that are present. In particular,\nit is always legitimate to use the complete graph (the graph with all possible edges)\nto represent any distribution. In fact, some distributions contain independences\nthat are not possible to represent with existing graphical notation. Context-\nspecific independences are independences that are present dependent on the\nvalue of some variables in the network. For example, consider a model of three\nbinary variables: a, b and c. Suppose that when a is 0, b and c are independent,\nbut when ais 1, b is deterministically equal to c. Encoding the behavior when\na = 1 requires an edge connecting b and c. The graph then fails to indicate that b\nand c are independent when a = 0.\n\nIn general, a graph will never imply that an independence exists when it does\nnot. However, a graph may fail to encode an independence.\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nOOO ae\nO-O+O 2 ~\n\n\u201cOQ O+0+O\nva\n\n(c) (d)\n\nFigure 16.8: All of the kinds of active paths of length two that can exist between random\nvariables a andb. (a)Any path with arrows proceeding directly froma to b or vice versa.\nThis kind of path becomes blocked if s is observed. We have already seen this kind of\npath in the relay race example. (b)a and b are connected by a common cause s. For\nexample, suppose s is a variable indicating whether or not there is a hurricane and a and\nb measure the wind speed at two different nearby weather monitoring outposts. If we\nobserve very high winds at station a, we might expect to also see high winds at b. This\nkind of path can be blocked by observing s. If we already know there is a hurricane, we\nexpect to see high winds at b, regardless of what is observed at a. A lower than expected\nwind at a (for a hurricane) would not change our expectation of winds at b (knowing\nhere is a hurricane). However, if s is not observed, then a and b are dependent, i.e., the\npath is active. (c)aand b are both parents of s. This is called a V-structure or the\ncollider case. The V-structure causes a and b to be related by the explaining away\neffect. In this case, the path is actually active when s is observed. For example, suppose\ns is a variable indicating that your colleague is not at work. The variable a represents\nher being sick, while b represents her being on vacation. If you observe that she is not\nat work, you can presume she is probably sick or on vacation, but it is not especially\nlikely that both have happened at the same time. If you find out that she is on vacation,\nthis fact is sufficient to explain her absence. You can infer that she is probably not also\nsick. (d)The explaining away effect happens even if any descendant of s is observed! For\nexample, suppose that c is a variable representing whether you have received a report\nfrom your colleague. If you notice that you have not received the report, this increases\nyour estimate of the probability that she is not at work today, which in turn makes it\nmore likely that she is either sick or on vacation. The only way to block a path through a\nV-structure is to observe none of the descendants of the shared child.\n\n574\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nQO \u00a9\n\nFigure 16.9: From this graph, we can read out several d-separation properties. Examples\ninclude:\n\ne aand b are d-separated given the empty set.\n\ne aand e are d-separated given c.\n\ne dand e are d-separated given c.\nWe can also see that some variables are no longer d-separated when we observe some\nvariables:\n\ne aand b are not d-separated given c.\n\ne aand b are not d-separated given d.\n\nOo\na\not\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\n16.2.6 Converting between Undirected and Directed Graphs\n\nWe often refer to a specific machine learning model as being undirected or directed.\nFor example, we typically refer to RBMs as undirected and sparse coding as directed.\nThis choice of wording can be somewhat misleading, because no probabilistic model\nis inherently directed or undirected. Instead, some models are most easily described\nusing a directed graph, or most easily described using an undirected graph.\n\nDirected models and undirected models both have their advantages and disad-\nvantages. Neither approach is clearly superior and universally preferred. Instead,\nwe should choose which language to use for each task. This choice will partially\ndepend on which probability distribution we wish to describe. We may choose to\nuse either directed modeling or undirected modeling based on which approach can\ncapture the most independences in the probability distribution or which approach\nuses the fewest edges to describe the distribution. There are other factors that\ncan affect the decision of which language to use. Even while working with a single\nprobability distribution, we may sometimes switch between different modeling\nlanguages. Sometimes a different language becomes more appropriate if we observe\na certain subset of variables, or if we wish to perform a different computational\ntask. For example, the directed model description often provides a straightforward\napproach to efficiently draw samples from the model (described in section 16.3)\nwhile the undirected model formulation is often useful for deriving approximate\ninference procedures (as we will see in chapter 19, where the role of undirected\nmodels is highlighted in equation 19.56).\n\nEvery probability distribution can be represented by either a directed model\nor by an undirected model. In the worst case, one can always represent any\ndistribution by using a \u201ccomplete graph.\u201d In the case of a directed model, the\ncomplete graph is any directed acyclic graph where we impose some ordering on\nthe random variables, and each variable has all other variables that precede it in\nthe ordering as its ancestors in the graph. For an undirected model, the complete\ngraph is simply a graph containing a single clique encompassing all of the variables.\nSee figure 16.10 for an example.\n\nOf course, the utility of a graphical model is that the graph implies that some\nvariables do not interact directly. The complete graph is not very useful because it\ndoes not imply any independences.\n\nWhen we represent a probability distribution with a graph, we want to choose\na graph that implies as many independences as possible, without implying any\nindependences that do not actually exist.\n\nFrom this point of view, some distributions can be represented more efficiently\n\nc\n\n576\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.10: Examples of complete graphs, which can describe any probability distribution.\nHere we show examples with four random variables. (Left)The complete undirected graph.\nIn the undirected case, the complete graph is unique. (Right)A complete directed graph.\nIn the directed case, there is not a unique complete graph. We choose an ordering of the\nvariables and draw an arc from each variable to every variable that comes after it in the\nordering. There are thus a factorial number of complete graphs for every set of random\nvariables. In this example we order the variables from left to right, top to bottom.\n\nusing directed models, while other distributions can be represented more efficiently\nusing undirected models. In other words, directed models can encode some\nindependences that undirected models cannot encode, and vice versa.\n\nDirected models are able to use one specific kind of substructure that undirected\nmodels cannot represent perfectly. This substructure is called an immorality.\nThe structure occurs when two random variables a and b are both parents of a\nthird random variable c, and there is no edge directly connecting a and b in either\ndirection. (The name \u201cimmorality\u201d may seem strange; it was coined in the graphical\nmodels literature as a joke about unmarried parents.) To convert a directed model\nwith graph D into an undirected model, we need to create a new graph U. For\nevery pair of variables x and y, we add an undirected edge connecting x and y to\nU if there is a directed edge (in either direction) connecting x and y in D or if x\nand y are both parents in D of a third variable z. The resulting / is known as a\nmoralized graph. See figure 16.11 for examples of converting directed models to\nundirected models via moralization.\n\nLikewise, undirected models can include substructures that no directed model\ncan represent perfectly. Specifically, a directed graph D cannot capture all of the\nconditional independences implied by an undirected graph U if U contains a loop\nof length greater than three, unless that loop also contains a chord. A loop is\na sequence of variables connected by undirected edges, with the last variable in\nthe sequence connected back to the first variable in the sequence. A chord is a\nconnection between any two non-consecutive variables in the sequence defining a\nloop. If YU has loops of length four or greater and does not have chords for these\nloops, we must add the chords before we can convert it to a directed model. Adding\n\n577\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nO VOUO\n\nx YE\nO\n\nFigure 16.11: Examples of converting directed models (top row) to undirected models\n\n(bottom row) by constructing moralized graphs. (Left)This simple chain can\n\nbe converted\n\nto a moralized graph merely by replacing its directed edges with undirected edges. The\nresulting undirected model implies exactly the same set of independences and conditional\n\nindependences. (Center)This graph is the simplest directed model that cannot\n\nbe converted\n\nto an undirected model without losing some independences. This graph consists entirely\n\nof a single immorality. Because a and b are parents of c, they are connected\n\nby an active\n\npath when c is observed. To capture this dependence, the undirected model must include\na clique encompassing all three variables. This clique fails to encode the fact that aLb.\n\n(Right)In general, moralization may add many edges to the graph, thus\n\nosing many\n\nimplied independences. For example, this sparse coding graph requires adding moralizing\nedges between every pair of hidden units, thus introducing a quadratic number of new\n\ndirect dependences.\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.12: Converting an undirected model to a directed model. (Left)This undirected\nmodel cannot be converted directed to a directed model because it has a loop of length four\nwith no chords. Specifically, the undirected model encodes two different independences that\nno directed model can capture simultaneously: alc | {b,d} and bLd| {a,c}. (Center)To\nconvert the undirected model to a directed model, we must triangulate the graph, by\nensuring that all loops of greater than length three have a chord. To do so, we can either\nadd an edge connecting a and c or we can add an edge connecting b and d. In this\nexample, we choose to add the edge connecting a and c. (Right)To finish the conversion\nprocess, we must assign a direction to each edge. When doing so, we must not create any\ndirected cycles. One way to avoid directed cycles is to impose an ordering over the nodes,\nand always point each edge from the node that comes earlier in the ordering to the node\nthat comes later in the ordering. In this example, we use the variable names to impose\nalphabetical order.\n\nthese chords discards some of the independence information that was encoded in U.\nThe graph formed by adding chords to UY is known as a chordal or triangulated\ngraph, because all the loops can now be described in terms of smaller, triangular\nloops. To build a directed graph D from the chordal graph, we need to also assign\ndirections to the edges. When doing so, we must not create a directed cycle in\nD, or the result does not define a valid directed probabilistic model. One way\nto assign directions to the edges in D is to impose an ordering on the random\nvariables, then point each edge from the node that comes earlier in the ordering to\nthe node that comes later in the ordering. See figure 16.12 for a demonstration.\n\n16.2.7 Factor Graphs\n\nFactor graphs are another way of drawing undirected models that resolve an\nambiguity in the graphical representation of standard undirected model syntax. In\nan undirected model, the scope of every \u00a2 function must be a subset of some clique\nin the graph. Ambiguity arises because it is not clear if each clique actually has\na corresponding factor whose scope encompasses the entire clique\u2014for example,\na clique containing three nodes may correspond to a factor over all three nodes,\nor may correspond to three factors that each contain only a pair of the nodes.\n\n579\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFactor graphs resolve this ambiguity by explicitly representing the scope of each \u00a2\nfunction. Specifically, a factor graph is a graphical representation of an undirected\nmodel that consists of a bipartite undirected graph. Some of the nodes are drawn\nas circles. These nodes correspond to random variables as in a standard undirected\nmodel. The rest of the nodes are drawn as squares. These nodes correspond to\nthe factors \u00a2 of the unnormalized probability distribution. Variables and factors\nmay be connected with undirected edges. A variable and a factor are connected\nin the graph if and only if the variable is one of the arguments to the factor in\nthe unnormalized probability distribution. No factor may be connected to another\nfactor in the graph, nor can a variable be connected to a variable. See figure 16.13\nfor an example of how factor graphs can resolve ambiguity in the interpretation of\nundirected networks.\n\nFigure 16.13: An example of how a factor graph can resolve ambiguity in the interpretation\nof undirected networks. (Left)An undirected network with a clique involving three variables:\na, band c. (Center)A factor graph corresponding to the same undirected model. This\nfactor graph has one factor over all three variables. (Right)Another valid factor graph\nfor the same undirected model. This factor graph has three factors, each over only two\nvariables. Representation, inference, and learning are all asymptotically cheaper in this\nfactor graph than in the factor graph depicted in the center, even though both require the\nsame undirected graph to represent.\n\n16.3 Sampling from Graphical Models\n\nGraphical models also facilitate the task of drawing samples from a model.\n\nOne advantage of directed graphical models is that a simple and efficient proce-\ndure called ancestral sampling can produce a sample from the joint distribution\nrepresented by the model.\n\nThe basic idea is to sort the variables x; in the graph into a topological ordering,\n\nso that for all i and j, 7 is greater than i if x; is a parent of x;. The variables\n\nc\n\n580\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\ncan then be sampled in this order. In other words, we first sample x; ~ P (x1),\nthen sample P(x | Pag(x2)), and so on, until finally we sample P(xp | Pag(x,)).\nSo long as each conditional distribution p(x; | Pag(x;)) is easy to sample from,\nthen the whole model is easy to sample from. The topological sorting operation\nguarantees that we can read the conditional distributions in equation 16.1 and\nsample from them in order. Without the topological sorting, we might attempt to\nsample a variable before its parents are available.\n\nFor some graphs, more than one topological ordering is possible. Ancestral\nsampling may be used with any of these topological orderings.\n\nAncestral sampling is generally very fast (assuming sampling from each condi-\ntional is easy) and convenient.\n\nOne drawback to ancestral sampling is that it only applies to directed graphical\nmodels. Another drawback is that it does not support every conditional sampling\noperation. When we wish to sample from a subset of the variables in a directed\ngraphical model, given some other variables, we often require that all the condition-\ning variables come earlier than the variables to be sampled in the ordered graph.\nIn this case, we can sample from the local conditional probability distributions\nspecified by the model distribution. Otherwise, the conditional distributions we\nneed to sample from are the posterior distributions given the observed variables.\n\nThese posterior distributions are usually not explicitly specified and parametrized\nin the model. Inferring these posterior distributions can be costly. In models where\nthis is the case, ancestral sampling is no longer efficient.\n\nUnfortunately, ancestral sampling is applicable only to directed models. We\ncan sample from undirected models by converting them to directed models, but this\noften requires solving intractable inference problems (to determine the marginal\ndistribution over the root nodes of the new directed graph) or requires introducing\nso many edges that the resulting directed model becomes intractable. Sampling\nfrom an undirected model without first converting it to a directed model seems to\nrequire resolving cyclical dependencies. Every variable interacts with every other\nvariable, so there is no clear beginning point for the sampling process. Unfortunately,\ndrawing samples from an undirected graphical model is an expensive, multi-pass\nprocess. The conceptually simplest approach is Gibbs sampling. Suppose we\nhave a graphical model over an n-dimensional vector of random variables x. We\niteratively visit each variable x; and draw a sample conditioned on all of the other\nvariables, from p(x; | x_;). Due to the separation properties of the graphical\nmodel, we can equivalently condition on only the neighbors of x;. Unfortunately,\nafter we have made one pass through the graphical model and sampled all n\nvariables, we still do not have a fair sample from p(x). Instead, we must repeat the\n\nc\n\n581\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nprocess and resample all n variables using the updated values of their neighbors.\nAsymptotically, after many repetitions, this process converges to sampling from\nthe correct distribution. It can be difficult to determine when the samples have\nreached a sufficiently accurate approximation of the desired distribution. Sampling\ntechniques for undirected models are an advanced topic, covered in more detail in\nchapter 17.\n\n16.4 Advantages of Structured Modeling\n\nThe primary advantage of using structured probabilistic models is that they allow\nus to dramatically reduce the cost of representing probability distributions as well\nas learning and inference. Sampling is also accelerated in the case of directed\nmodels, while the situation can be complicated with undirected models. The\nprimary mechanism that allows all of these operations to use less runtime and\nmemory is choosing to not model certain interactions. Graphical models convey\ninformation by leaving edges out. Anywhere there is not an edge, the model\nspecifies the assumption that we do not need to model a direct interaction.\n\nA less quantifiable benefit of using structured probabilistic models is that\nthey allow us to explicitly separate representation of knowledge from learning of\nknowledge or inference given existing knowledge. This makes our models easier to\ndevelop and debug. We can design, analyze, and evaluate learning algorithms and\ninference algorithms that are applicable to broad classes of graphs. Independently,\nwe can design models that capture the relationships we believe are important in our\ndata. We can then combine these different algorithms and structures and obtain\na Cartesian product of different possibilities. It would be much more difficult to\ndesign end-to-end algorithms for every possible situation.\n\n16.5 Learning about Dependencies\n\nA good generative model needs to accurately capture the distribution over the\nobserved or \u201cvisible\u201d variables v. Often the different elements of v are highly\ndependent on each other. In the context of deep learning, the approach most\ncommonly used to model these dependencies is to introduce several latent or\n\u201chidden\u201d variables, h. The model can then capture dependencies between any pair\nof variables v; and vj; indirectly, via direct dependencies between v; and h, and\ndirect dependencies between h and vj.\n\nA good model of v which did not contain any latent variables would need to\n\n582\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nhave very large numbers of parents per node in a Bayesian network or very large\ncliques in a Markov network. Just representing these higher order interactions is\ncostly\u2014both in a computational sense, because the number of parameters that\nmust be stored in memory scales exponentially with the number of members in a\nclique, but also in a statistical sense, because this exponential number of parameters\nrequires a wealth of data to estimate accurately.\n\nWhen the model is intended to capture dependencies between visible variables\nwith direct connections, it is usually infeasible to connect all variables, so the\ngraph must be designed to connect those variables that are tightly coupled and\nomit edges between other variables. An entire field of machine learning called\nstructure learning is devoted to this problem For a good reference on structure\nlearning, see (Koller and Friedman, 2009). Most structure learning techniques are\na form of greedy search. A structure is proposed, a model with that structure\nis trained, then given a score. The score rewards high training set accuracy and\npenalizes model complexity. Candidate structures with a small number of edges\nadded or removed are then proposed as the next step of the search. The search\nproceeds to a new structure that is expected to increase the score.\n\nUsing latent variables instead of adaptive structure avoids the need to perform\ndiscrete searches and multiple rounds of training. A fixed structure over visible\nand hidden variables can use direct interactions between visible and hidden units\nto impose indirect interactions between visible units. Using simple parameter\nlearning techniques we can learn a model with a fixed structure that imputes the\nright structure on the marginal p(v).\n\nLatent variables have advantages beyond their role in efficiently capturing p(v).\nThe new variables h also provide an alternative representation for v. For example,\nas discussed in section 3.9.6, the mixture of Gaussians model learns a latent variable\nthat corresponds to which category of examples the input was drawn from. This\nmeans that the latent variable in a mixture of Gaussians model can be used to do\nclassification. In chapter 14 we saw how simple probabilistic models like sparse\ncoding learn latent variables that can be used as input features for a classifier,\nor as coordinates along a manifold. Other models can be used in this same way,\nbut deeper models and models with different kinds of interactions can create even\nricher descriptions of the input. Many approaches accomplish feature learning\nby learning latent variables. Often, given some model of v and h, experimental\nobservations show that E[h | v] or argmax,p(h, v) is a good feature mapping for\nv.\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\n16.6 Inference and Approximate Inference\n\nOne of the main ways we can use a probabilistic model is to ask questions about\nhow variables are related to each other. Given a set of medical tests, we can ask\nwhat disease a patient might have. In a latent variable model, we might want to\nextract features E[h | v] describing the observed variables v. Sometimes we need\nto solve such problems in order to perform other tasks. We often train our models\nusing the principle of maximum likelihood. Because\n\nlog p(v) = Ennpnje) [log p(h, v) \u2014 log p(h | v)], (16.9)\n\nwe often want to compute p(h | v) in order to implement a learning rule. All of\nthese are examples of inference problems in which we must predict the value of\nsome variables given other variables, or predict the probability distribution over\nsome variables given the value of other variables.\n\nUnfortunately, for most interesting deep models, these inference problems are\nintractable, even when we use a structured graphical model to simplify them. The\ngraph structure allows us to represent complicated, high-dimensional distributions\nwith a reasonable number of parameters, but the graphs used for deep learning are\nusually not restrictive enough to also allow efficient inference.\n\nIt is straightforward to see that computing the marginal probability of a general\ngraphical model is #P hard. The complexity class #P is a generalization of the\ncomplexity class NP. Problems in NP require determining only whether a problem\nhas a solution and finding a solution if one exists. Problems in #P require counting\nthe number of solutions. To construct a worst-case graphical model, imagine that\nwe define a graphical model over the binary variables in a 3-SAT problem. We\ncan impose a uniform distribution over these variables. We can then add one\nbinary latent variable per clause that indicates whether each clause is satisfied.\nWe can then add another latent variable indicating whether all of the clauses are\nsatisfied. This can be done without making a large clique, by building a reduction\ntree of latent variables, with each node in the tree reporting whether two other\nvariables are satisfied. The leaves of this tree are the variables for each clause.\nThe root of the tree reports whether the entire problem is satisfied. Due to the\nuniform distribution over the literals, the marginal distribution over the root of the\nreduction tree specifies what fraction of assignments satisfy the problem. While\nthis is a contrived worst-case example, NP hard graphs commonly arise in practical\nreal-world scenarios.\n\nThis motivates the use of approximate inference. In the context of deep\nlearning, this usually refers to variational inference, in which we approximate the\n\nc\n\n584\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\ntrue distribution p(h | v) by seeking an approximate distribution q (h|v) that is as\nclose to the true one as possible. This and other techniques are described in depth\nin chapter 19.\n\n16.7 The Deep Learning Approach to Structured Prob-\nabilistic Models\n\nDeep learning practitioners generally use the same basic computational tools as\nother machine learning practitioners who work with structured probabilistic models.\nHowever, in the context of deep learning, we usually make different design decisions\nabout how to combine these tools, resulting in overall algorithms and models that\nhave a very different flavor from more traditional graphical models.\n\nDeep learning does not always involve especially deep graphical models. In the\ncontext of graphical models, we can define the depth of a model in terms of the\ngraphical model graph rather than the computational graph. We can think of a\nlatent variable h; as being at depth 7 if the shortest path from h; to an observed\nvariable is 7 steps. We usually describe the depth of the model as being the greatest\ndepth of any such h;. This kind of depth is different from the depth induced by\nthe computational graph. Many generative models used for deep learning have no\nlatent variables or only one layer of latent variables, but use deep computational\ngraphs to define the conditional distributions within a model.\n\nDeep learning essentially always makes use of the idea of distributed represen-\ntations. Even shallow models used for deep learning purposes (such as pretraining\nshallow models that will later be composed to form deep ones) nearly always\nhave a single, large layer of latent variables. Deep learning models typically have\nmore latent variables than observed variables. Complicated nonlinear interactions\nbetween variables are accomplished via indirect connections that flow through\nmultiple latent variables.\n\nBy contrast, traditional graphical models usually contain mostly variables that\nare at least occasionally observed, even if many of the variables are missing at\nrandom from some training examples. Traditional models mostly use higher-order\nterms and structure learning to capture complicated nonlinear interactions between\nvariables. If there are latent variables, they are usually few in number.\n\nThe way that latent variables are designed also differs in deep learning. The\ndeep learning practitioner typically does not intend for the latent variables to\ntake on any specific semantics ahead of time\u2014the training algorithm is free to\ninvent the concepts it needs to model a particular dataset. The latent variables are\n\n585\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nusually not very easy for a human to interpret after the fact, though visualization\ntechniques may allow some rough characterization of what they represent. When\nlatent variables are used in the context of traditional graphical models, they are\noften designed with some specific semantics in mind\u2014the topic of a document,\nthe intelligence of a student, the disease causing a patient\u2019s symptoms, etc. These\nmodels are often much more interpretable by human practitioners and often have\nmore theoretical guarantees, yet are less able to scale to complex problems and are\nnot reusable in as many different contexts as deep models.\n\nAnother obvious difference is the kind of connectivity typically used in the\ndeep learning approach. Deep graphical models typically have large groups of units\nthat are all connected to other groups of units, so that the interactions between\ntwo groups may be described by a single matrix. Traditional graphical models\nhave very few connections and the choice of connections for each variable may be\nindividually designed. The design of the model structure is tightly linked with\nthe choice of inference algorithm. Traditional approaches to graphical models\ntypically aim to maintain the tractability of exact inference. When this constraint\nis too limiting, a popular approximate inference algorithm is an algorithm called\nloopy belief propagation. Both of these approaches often work well with very\nsparsely connected graphs. By comparison, models used in deep learning tend to\nconnect each visible unit v; to very many hidden units hj, so that h can provide a\ndistributed representation of v; (and probably several other observed variables too).\nDistributed representations have many advantages, but from the point of view\nof graphical models and computational complexity, distributed representations\nhave the disadvantage of usually yielding graphs that are not sparse enough for\nthe traditional techniques of exact inference and loopy belief propagation to be\nrelevant. As a consequence, one of the most striking differences between the larger\ngraphical models community and the deep graphical models community is that\nloopy belief propagation is almost never used for deep learning. Most deep models\nare instead designed to make Gibbs sampling or variational inference algorithms\nefficient. Another consideration is that deep learning models contain a very large\nnumber of latent variables, making efficient numerical code essential. This provides\nan additional motivation, besides the choice of high-level inference algorithm, for\ngrouping the units into layers with a matrix describing the interaction between\ntwo layers. This allows the individual steps of the algorithm to be implemented\nwith efficient matrix product operations, or sparsely connected generalizations, like\nblock diagonal matrix products or convolutions.\n\nFinally, the deep learning approach to graphical modeling is characterized by\na marked tolerance of the unknown. Rather than simplifying the model until\nall quantities we might want can be computed exactly, we increase the power of\n\nc\n\n586\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nthe model until it is just barely possible to train or use. We often use models\nwhose marginal distributions cannot be computed, and are satisfied simply to draw\napproximate samples from these models. We often train models with an intractable\nobjective function that we cannot even approximate in a reasonable amount of\ntime, but we are still able to approximately train the model if we can efficiently\nobtain an estimate of the gradient of such a function. The deep learning approach\nis often to figure out what the minimum amount of information we absolutely\nneed is, and then to figure out how to get a reasonable approximation of that\ninformation as quickly as possible.\n\n16.7.1 Example: The Restricted Boltzmann Machine\n\nThe restricted Boltzmann machine (RBM) (Smolensky, 1986) or harmonium\nis the quintessential example of how graphical models are used for deep learning.\nThe RBM is not itself a deep model. Instead, it has a single layer of latent variables\nthat may be used to learn a representation for the input. In chapter 20, we will\nsee how RBMs can be used to build many deeper models. Here, we show how the\nRBM exemplifies many of the practices used in a wide variety of deep graphical\nmodels: its units are organized into large groups called layers, the connectivity\nbetween layers is described by a matrix, the connectivity is relatively dense, the\nmodel is designed to allow efficient Gibbs sampling, and the emphasis of the model\ndesign is on freeing the training algorithm to learn latent variables whose semantics\nwere not specified by the designer. Later, in section 20.2, we will revisit the RBM\nin more detail.\n\nThe canonical RBM is an energy-based model with binary visible and hidden\nunits. Its energy function is\n\nE(v,h) =\u2014b'v\u2014cl'h\u2014v'Wh, (16.10)\n\nwhere b, c, and W are unconstrained, real-valued, learnable parameters. We can\nsee that the model is divided into two groups of units: v and h, and the interaction\nbetween them is described by a matrix W. The model is depicted graphically\nin figure 16.14. As this figure makes clear, an important aspect of this model is\nthat there are no direct interactions between any two visible units or between any\ntwo hidden units (hence the \u201crestricted,\u201d a general Boltzmann machine may have\narbitrary connections).\n\nThe restrictions on the RBM structure yield the nice properties\np(h | v) = Tp(hs| v) (16.11)\n\nc\n\n587\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nFigure 16.14: An RBM drawn as a Markov network.\n\nand\np(v | h) = Tjp(v; | h). (16.12)\n\nThe individual conditionals are simple to compute as well. For the binary RBM\nwe obtain:\n\nP(h;=1|v) =o (v'W., + bi) ; (16.13)\nP(h; =0|v)=1-0 (v'W., + bi) , (16.14)\n\nTogether these properties allow for efficient block Gibbs sampling, which alter-\nnates between sampling all of h simultaneously and sampling all of v simultane-\nously. Samples generated by Gibbs sampling from an RBM model are shown in\nfigure 16.15.\n\nSince the energy function itself is just a linear function of the parameters, it is\neasy to take its derivatives. For example,\n\n0\n\u2014\u2014 E(v,h) = \u2014v;h;. 16.15\nOw,.; ( ? ) we7 ( )\n\nThese two properties\u2014efficient Gibbs sampling and efficient derivatives\u2014make\ntraining convenient. In chapter 18, we will see that undirected models may be\ntrained by computing such derivatives applied to samples from the model.\n\nTraining the model induces a representation h of the data v. We can often use\nEn~p(h|v) [A] as a set of features to describe v.\n\nOverall, the RBM demonstrates the typical deep learning approach to graph-\nical models: representation learning accomplished via layers of latent variables,\ncombined with efficient interactions between layers parametrized by matrices.\n\nThe language of graphical models provides an elegant, flexible and clear language\nfor describing probabilistic models. In the chapters ahead, we use this language,\namong other perspectives, to describe a wide variety of deep probabilistic models.\n\n588\n", "CHAPTER 16. STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING\n\nODoyvwIII\ncoececacccsnt\neceecrccencrcec\neCYUULUUUUYL\n\n09 09 09 0 0 09 0 00 0\n\n29 0 00 0 OH 09\n\n89000000 0\"0\n\n00 00 09 09 60 09 00 00 00\n\n943398\nGERCB\nCEZbE\n63RGR\n6EEbs\nGERLE\n6EBb8\nS63E68\n6ERLE\n6%\n\n\u00a9 00 09 oF 0 09 OF 00 00 OD\n09 08 09 00 00 09 09 00 09 09\n\n6\noo\nia\nro)\n\nFigure 16.15: Samples from a trained RBM,\npermission from LISA (2008). (Left)Samples\n\nrepresents the output of another 1,000 steps o\nhighly correlated with one another. (Right)/Th\n\n1ere are much better because the RBM prior p\n\nso the sparse coding model may be better for\no have both a non-factorial p(h) and a non-fa\n\nCCCoCer crores\neon 0O8oecoonovd\n\nand its weights. Image reproduced with\nrom a model trained on MNIST, drawn\n\nusing Gibbs sampling. Each column is a separate Gibbs sampling process. Each row\n\nGibbs sampling. Successive samples are\ne corresponding weight vectors. Compare\n\nhis to the samples and weights of a linear factor model, shown in figure 13.2. The samples\n\nh) is not constrained to be factorial. The\n\nRBM can learn which features should appear together when sampling. On the other hand,\nhe RBM posterior p(h | v) is factorial, while the sparse coding posterior p(h | v) is not,\n\neature extraction. Other models are able\nctorial p(h | v).\n", "Chapter 17\n\nMonte Carlo Methods\n\nRandomized algorithms fall into two rough categories: Las Vegas algorithms and\nMonte Carlo algorithms. Las Vegas algorithms always return precisely the correct\nanswer (or report that they failed). These algorithms consume a random amount\nof resources, usually memory or time. In contrast, Monte Carlo algorithms return\nanswers with a random amount of error. The amount of error can typically be\nreduced by expending more resources (usually running time and memory). For any\nfixed computational budget, a Monte Carlo algorithm can provide an approximate\nanswer.\n\nMany problems in machine learning are so difficult that we can never expect to\nobtain precise answers to them. This excludes precise deterministic algorithms and\nLas Vegas algorithms. Instead, we must use deterministic approximate algorithms\nor Monte Carlo approximations. Both approaches are ubiquitous in machine\nlearning. In this chapter, we focus on Monte Carlo methods.\n\n17.1 Sampling and Monte Carlo Methods\n\nMany important technologies used to accomplish machine learning goals are based\non drawing samples from some probability distribution and using these samples to\nform a Monte Carlo estimate of some desired quantity.\n\n17.1.1 Why Sampling?\n\nThere are many reasons that we may wish to draw samples from a probability\ndistribution. Sampling provides a flexible way to approximate many sums and\n\n590\n", "CHAPTER 17. MONTE CARLO METHODS\n\nintegrals at reduced cost. Sometimes we use this to provide a significant speedup to\na costly but tractable sum, as in the case when we subsample the full training cost\nwith minibatches. In other cases, our learning algorithm requires us to approximate\nan intractable sum or integral, such as the gradient of the log partition function of\nan undirected model. In many other cases, sampling is actually our goal, in the\nsense that we want to train a model that can sample from the training distribution.\n\n17.1.2 Basics of Monte Carlo Sampling\n\nWhen a sum or an integral cannot be computed exactly (for example the sum\nhas an exponential number of terms and no exact simplification is known) it is\noften possible to approximate it using Monte Carlo sampling. The idea is to view\nthe sum or integral as if it was an expectation under some distribution and to\napproximate the expectation by a corresponding average. Let\n\ns=)) p(x) f(a) = Ey[f(s)] (17.1)\n\no= / p(x) f(w)da = Elf (x)] (17.2)\n\nbe the sum or integral to estimate, rewritten as an expectation, with the constraint\nthat p is a probability distribution (for the sum) or a probability density (for the\nintegral) over random variable x.\n\nWe can approximate s by drawing n samples #),..., a from p and then\nforming the empirical average\n\nin == Sse). (17.3)\n\nThis approximation is justified by a few different properties. The first trivial\nobservation is that the estimator \u00a7 is unbiased, since\n\na 1\nE[8p] = n\n\nDEVe)) == yos=s. (17.4)\n\ni=l\n\nBut in addition, the law of large numbers states that if the samples x are\ni.i.d., then the average converges almost surely to the expected value:\njim, fn = 8, (17.5)\n\nc\n\n591\n", "CHAPTER 17. MONTE CARLO METHODS\n\nprovided that the variance of the individual terms, Var[f(a)], is bounded. To see\nthis more clearly, consider the variance of 8, as nincreases. The variance Var|8,|\ndecreases and converges to 0, so long as Var[f (x)] < 00:\n\nVar[s,] = 7\u201d >_ Varl Fo) (17.6)\n_ Varlf@)] (17.7)\n\nThis convenient result also tells us how to estimate the uncertainty in a Monte\nCarlo average or equivalently the amount of expected error of the Monte Carlo\napproximation. We compute both the empirical average of the f (a) and their\nempirical variance,! and then divide the estimated variance by the number of\nsamples n to obtain an estimator of Var[\u00a7n]. The central limit theorem tells\nus that the distribution of the average, \u00a7,, converges to a normal distribution\nwith mean s and variance Marl foe) This allows us to estimate confidence intervals\naround the estimate \u00a7,, using the cumulative distribution of the normal density.\n\nHowever, all this relies on our ability to easily sample from the base distribution\np(x), but doing so is not always possible. When it is not feasible to sample from\np, an alternative is to use importance sampling, presented in section 17.2. A\nmore general approach is to form a sequence of estimators that converge towards\nthe distribution of interest. That is the approach of Monte Carlo Markov chains\n(section 17.3).\n\n17.2. Importance Sampling\n\nAn important step in the decomposition of the integrand (or summand) used by the\n\nMonte Carlo method in equation 17.2 is deciding which part of the integrand should\n\nplay the role the probability p(w) and which part of the integrand should play the\n\nrole of the quantity f(a) whose expected value (under that probability distribution)\n\nis to be estimated. There is no unique decomposition because p(x) f(a) can always\nbe rewritten as (\u00a9) f(@)\npla) f (a\n\np(x) f(x) = q(a)-\u2014\u2014\u2014 17.8\n\n(x) f(x) (2) @) (17.8)\n\nwhere we now sample from q and average BL Ip many cases, we wish to compute\n\nan expectation for a given p and an f, and the fact that the problem is specified\n\n\u2018The unbiased estimator of the variance is often preferred, in which the sum of squared\ndifferences is divided by n \u2014 1 instead of n.\n\nc\n\n592\n", "CHAPTER 17. MONTE CARLO METHODS\n\nfrom the start as an expectation suggests that this p and f would be a natural\nchoice of decomposition. However, the original specification of the problem may\nnot be the the optimal choice in terms of the number of samples required to obtain\na given level of accuracy. Fortunately, the form of the optimal choice q* can be\nderived easily. The optimal g* corresponds to what is called optimal importance\nsampling.\n\nBecause of the identity shown in equation 17.8, any Monte Carlo estimator\n\n. 1\n\u00a7=\u2014 YP fa) (17.9)\ni=1,xOnp\n\ncan be transformed into an importance sampling estimator\n\n4 2 2) Fae\u00ae\n=> pla) f(a)\n\nCO) (17.10)\n\ni=1,x) wq\n\nWe see readily that the expected value of the estimator does not depend on q:\n\nE,[8q] = Eq[%] = s. (17.11)\n\nHowever, the variance of an importance sampling estimator can be greatly sensitive\nto the choice of g. The variance is given by\nx) f (x\nVar[8q] = Var2e2 LOD) in, (17.12)\nq(x)\n\nThe minimum variance occurs when q is\n\nq(x) = mei) (17.13)\nwhere Z is the normalization constant, chosen so that q* (a) sums or integrates to\n1 as appropriate. Better importance sampling distributions put more weight where\nthe integrand is larger. In fact, when f(a) does not change sign, Var [8+] = 0,\nmeaning that a single sample is sufficient when the optimal distribution is used.\nOf course, this is only because the computation of q* has essentially solved the\noriginal problem, so it is usually not practical to use this approach of drawing a\nsingle sample from the optimal distribution.\n\nAny choice of sampling distribution q is valid (in the sense of yielding the\ncorrect expected value) and q* is the optimal one (in the sense of yielding minimum\nvariance). Sampling from q* is usually infeasible, but other choices of q can be\nfeasible while still reducing the variance somewhat.\n\n593\n", "CHAPTER 17. MONTE CARLO METHODS\n\nAnother approach is to use biased importance sampling, which has the\nadvantage of not requiring normalized p or q. In the case of discrete variables, the\nbiased importance sampling estimator is given by\n\n() ;\nre EH F(a\n3H p(a\u00ae)\n\n11 q(e)\n\n8prg = (17.14\n\n(17.15\n\n(17.16\n\nwhere p and g are the unnormalized forms of p and q and the a are the samples\nfrom qg. This estimator is biased because E[\u00a7 p75] 4 8, except asymptotically when\nn \u2014 oo and the denominator of equation 17.14 converges to 1. Hence this estimator\nis called asymptotically unbiased.\n\nAlthough a good choice of q can greatly improve the efficiency of Monte Carlo\nestimation, a poor choice of g can make the efficiency much worse. Going back to\nequation 17.12, we see that if there are samples of q for which Pa) fe)} is large,\nthen the variance of the estimator can get very large. This may happen when\nq(x) is tiny while neither p(a) nor f(x) are small enough to cancel it. The q\ndistribution is usually chosen to be a very simple distribution so that it is easy\nto sample from. When @ is high-dimensional, this simplicity in g causes it to\nmatch p or p|f| poorly. When g(a ) >> p(a)| f (a)|, importance sampling\ncollects useless samples (summing tiny numbers or zeros). On the other hand, when\ng(a) < p(#)|f(e@)|, which will happen more rarely, the ratio can be huge.\nBecause these latter events are rare, they may not show up in a typical sample,\nyielding typical underestimation of s, compensated rarely by gross overestimation.\nSuch very large or very small numbers are typical when @& is high dimensional,\nbecause in high dimension the dynamic range of joint probabilities can be very\nlarge.\n\nIn spite of this danger, importance sampling and its variants have been found\nvery useful in many machine learning algorithms, including deep learning algorithms.\nFor example, see the use of importance sampling to accelerate training in neural\nlanguage models with a large vocabulary (section 12.4.3.3) or other neural nets\nwith a large number of outputs. See also how importance sampling has been\nused to estimate a partition function (the normalization constant of a probability\n\nc\n\n594\n", "CHAPTER 17. MONTE CARLO METHODS\n\ndistribution) in section 18.7, and to estimate the log-likelihood in deep directed\nmodels such as the variational autoencoder, in section 20.10.3. Importance sampling\nmay also be used to improve the estimate of the gradient of the cost function used\nto train model parameters with stochastic gradient descent, particularly for models\nsuch as classifiers where most of the total value of the cost function comes from a\nsmall number of misclassified examples. Sampling more difficult examples more\nfrequently can reduce the variance of the gradient in such cases (Hinton, 2006).\n\n17.3. Markov Chain Monte Carlo Methods\n\nIn many cases, we wish to use a Monte Carlo technique but there is no tractable\nmethod for drawing exact samples from the distribution Pmodel (x) or from a good\n(low variance) importance sampling distribution q(x). In the context of deep\nlearning, this most often happens when pmodei(X) is represented by an undirected\nmodel. In these cases, we introduce a mathematical tool called a Markov chain\nto approximately sample from pyodei (x). The family of algorithms that use Markov\nchains to perform Monte Carlo estimates is called Markov chain Monte Carlo\nmethods (MCMC). Markov chain Monte Carlo methods for machine learning are\ndescribed at greater length in Koller and Friedman (2009). The most standard,\ngeneric guarantees for MCMC techniques are only applicable when the model\ndoes not assign zero probability to any state. Therefore, it is most convenient\nto present these techniques as sampling from an energy-based model (EBM)\np(x) \u00ab exp (\u2014E(2)) as described in section 16.2.4. In the EBM formulation, every\nstate is guaranteed to have non-zero probability. MCMC methods are in fact\nmore broadly applicable and can be used with many probability distributions that\ncontain zero probability states. However, the theoretical guarantees concerning the\nbehavior of MCMC methods must be proven on a case-by-case basis for different\nfamilies of such distributions. In the context of deep learning, it is most common\nto rely on the most general theoretical guarantees that naturally apply to all\nenergy-based models.\n\nTo understand why drawing samples from an energy-based model is difficult,\nconsider an EBM over just two variables, defining a distribution p(a, b). In order\nto sample a, we must draw a from p(a| b), and in order to sample b, we must\ndraw it from p(b | a). It seems to be an intractable chicken-and-egg problem.\nDirected models avoid this because their graph is directed and acyclic. To perform\nancestral sampling one simply samples each of the variables in topological order,\nconditioning on each variable\u2019s parents, which are guaranteed to have already been\nsampled (section 16.3). Ancestral sampling defines an efficient, single-pass method\n\n595\n", "CHAPTER 17. MONTE CARLO METHODS\n\nof obtaining a sample.\n\nIn an EBM, we can avoid this chicken and egg problem by sampling using a\nMarkov chain. The core idea of a Markov chain is to have a state x that begins\nas an arbitrary value. Over time, we randomly update a repeatedly. Eventually\nx becomes (very nearly) a fair sample from p(a). Formally, a Markov chain is\ndefined by a random state # and a transition distribution T(a\u2019 | x) specifying\nthe probability that a random update will go to state x\u2019 if it starts in state a.\nRunning the Markov chain means repeatedly updating the state x to a value a\u2019\nsampled from T(x\u2019 | x).\n\nTo gain some theoretical understanding of how MCMC methods work, it is\nuseful to reparametrize the problem. First, we restrict our attention to the case\nwhere the random variable x has countably many states. We can then represent\nthe state as just a positive integer x. Different integer values of \u00ab map back to\ndifferent states x in the original problem.\n\nConsider what happens when we run infinitely many Markov chains in parallel.\nAll of the states of the different Markov chains are drawn from some distribution\nq(x), where t indicates the number of time steps that have elapsed. At the\nbeginning, g) is some distribution that we used to arbitrarily initialize x for each\nMarkov chain. Later, g\u2122 is influenced by all of the Markov chain steps that have\nrun so far. Our goal is for g(a) to converge to p(x).\n\nBecause we have reparametrized the problem in terms of positive integer x, we\ncan describe the probability distribution q using a vector v, with\n\nq(x = 1) = wi. (17.17)\n\nConsider what happens when we update a single Markov chain\u2019s state x to a\nnew state 2\u2019. The probability of a single state landing in state x\u2019 is given by\n\ndD (0\") => g (\u00ab)T (a! | 2). (17.18)\n\nUsing our integer parametrization, we can represent the effect of the transition\noperator T using a matrix A. We define A so that\n\nAij = T(x\u2019 =i| x=). (17.19)\n\nUsing this definition, we can now rewrite equation 17.18. Rather than writing it in\nterms of gq and T to understand how a single state is updated, we may now use v\nand A to describe how the entire distribution over all the different Markov chains\n(running in parallel) shifts as we apply an update:\n\nv) = Av), (17.20)\n\nc\n\n596\n", "CHAPTER 17. MONTE CARLO METHODS\n\nApplying the Markov chain update repeatedly corresponds to multiplying by the\nmatrix A repeatedly. In other words, we can think of the process as exponentiating\nthe matrix A:\n\nv) = Aly, (17.21)\n\nThe matrix A has special structure because each of its columns represents a\nprobability distribution. Such matrices are called stochastic matrices. If there\nis a non-zero probability of transitioning from any state x to any other state 2\u2019 for\nsome power t, then the Perron-Frobenius theorem (Perron, 1907; Frobenius, 1908)\nguarantees that the largest eigenvalue is real and equal to 1. Over time, we can\nsee that all of the eigenvalues are exponentiated:\n\nv) = (Vdiag(A)V~!)\u2018 o = Vadiag(A)tV 10. (17.22)\n\nThis process causes all of the eigenvalues that are not equal to 1 to decay to zero.\nUnder some additional mild conditions, A is guaranteed to have only one eigenvector\nwith eigenvalue 1. The process thus converges to a stationary distribution,\nsometimes also called the equilibrium distribution. At convergence,\n\nv = Av=v, (17.23)\n\nand this same condition holds for every additional step. This is an eigenvector\nequation. To be a stationary point, v must be an eigenvector with corresponding\neigenvalue 1. This condition guarantees that once we have reached the stationary\ndistribution, repeated applications of the transition sampling procedure do not\nchange the distribution over the states of all the various Markov chains (although\ntransition operator does change each individual state, of course).\n\nIf we have chosen T correctly, then the stationary distribution q will be equal\nto the distribution p we wish to sample from. We will describe how to choose T\nshortly, in section 17.4.\n\nMost properties of Markov Chains with countable states can be generalized\nto continuous variables. In this situation, some authors call the Markov Chain\na Harris chain but we use the term Markov Chain to describe both conditions.\nIn general, a Markov chain with transition operator T\u2019 will converge, under mild\nconditions, to a fixed point described by the equation\n\nq'(x') = ExngI(x\u2019| x), (17.24)\n\nwhich in the discrete case is just rewriting equation 17.23. When x is discrete,\nthe expectation corresponds to a sum, and when x is continuous, the expectation\ncorresponds to an integral.\n\nc\n\n597\n", "CHAPTER 17. MONTE CARLO METHODS\n\nRegardless of whether the state is continuous or discrete, all Markov chain\nmethods consist of repeatedly applying stochastic updates until eventually the\nstate begins to yield samples from the equilibrium distribution. Running the\nMarkov chain until it reaches its equilibrium distribution is called \u201cburning in\u201d\nthe Markov chain. After the chain has reached equilibrium, a sequence of infinitely\nmany samples may be drawn from from the equilibrium distribution. They are\nidentically distributed but any two successive samples will be highly correlated\nwith each other. A finite sequence of samples may thus not be very representative\nof the equilibrium distribution. One way to mitigate this problem is to return\nonly every n successive samples, so that our estimate of the statistics of the\nequilibrium distribution is not as biased by the correlation between an MCMC\nsample and the next several samples. Markov chains are thus expensive to use\nbecause of the time required to burn in to the equilibrium distribution and the time\nrequired to transition from one sample to another reasonably decorrelated sample\nafter reaching equilibrium. If one desires truly independent samples, one can run\nmultiple Markov chains in parallel. This approach uses extra parallel computation\nto eliminate latency. The strategy of using only a single Markov chain to generate\nall samples and the strategy of using one Markov chain for each desired sample are\ntwo extremes; deep learning practitioners usually use a number of chains that is\nsimilar to the number of examples in a minibatch and then draw as many samples\nas are needed from this fixed set of Markov chains. A commonly used number of\nMarkov chains is 100.\n\nAnother difficulty is that we do not know in advance how many steps the\nMarkov chain must run before reaching its equilibrium distribution. This length of\ntime is called the mixing time. It is also very difficult to test whether a Markov\nchain has reached equilibrium. We do not have a precise enough theory for guiding\nus in answering this question. Theory tells us that the chain will converge, but not\nmuch more. If we analyze the Markov chain from the point of view of a matrix A\nacting on a vector of probabilities v, then we know that the chain mixes when A\u2019\nhas effectively lost all of the eigenvalues from A besides the unique eigenvalue of 1.\nThis means that the magnitude of the second largest eigenvalue will determine the\nmixing time. However, in practice, we cannot actually represent our Markov chain\nin terms of a matrix. The number of states that our probabilistic model can visit\nis exponentially large in the number of variables, so it is infeasible to represent\nv, A, or the eigenvalues of A. Due to these and other obstacles, we usually do\nnot know whether a Markov chain has mixed. Instead, we simply run the Markov\nchain for an amount of time that we roughly estimate to be sufficient, and use\nheuristic methods to determine whether the chain has mixed. These heuristic\nmethods include manually inspecting samples or measuring correlations between\n\nc\n\n598\n", "CHAPTER 17. MONTE CARLO METHODS\n\nsuccessive samples.\n\n17.4 Gibbs Sampling\n\nSo far we have described how to draw samples from a distribution g(a) by repeatedly\nupdating a + a\u2019 ~ T(a\u2019 | a). However, we have not described how to ensure that\nq(a) is a useful distribution. Two basic approaches are considered in this book.\nThe first one is to derive T from a given learned Pnodel , described below with the\ncase of sampling from EBMs. The second one is to directly parametrize T and\nlearn it, so that its stationary distribution implicitly defines the Puodel of interest.\nExamples of this second approach are discussed in sections 20.12 and 20.13.\n\nIn the context of deep learning, we commonly use Markov chains to draw\nsamples from an energy-based model defining a distribution Pmodei(#). In this case,\nwe want the q(x) for the Markov chain to be pmodel(x). To obtain the desired\nq(a), we must choose an appropriate T(a\u2019 | x).\n\nA conceptually simple and effective approach to building a Markov chain\nthat samples from Pymoael(Z) is to use Gibbs sampling, in which sampling from\nT(x\u2019 | x) is accomplished by selecting one variable x; and sampling it from pmodel\nconditioned on its neighbors in the undirected graph G defining the structure of\nthe energy-based model. It is also possible to sample several variables at the same\ntime so long as they are conditionally independent given all of their neighbors.\nAs shown in the RBM example in section 16.7.1, all of the hidden units of an\nRBM may be sampled simultaneously because they are conditionally independent\nfrom each other given all of the visible units. Likewise, all of the visible units may\nbe sampled simultaneously because they are conditionally independent from each\nother given all of the hidden units. Gibbs sampling approaches that update many\nvariables simultaneously in this way are called block Gibbs sampling.\n\nAlternate approaches to designing Markov chains to sample from pmodel are\npossible. For example, the Metropolis-Hastings algorithm is widely used in other\ndisciplines. In the context of the deep learning approach to undirected modeling,\nit is rare to use any approach other than Gibbs sampling. Improved sampling\ntechniques are one possible research frontier.\n\n17.5 The Challenge of Mixing between Separated Modes\n\nThe primary difficulty involved with MCMC methods is that they have a tendency\nto mix poorly. Ideally, successive samples from a Markov chain designed to sample\n\n599\n", "CHAPTER 17. MONTE CARLO METHODS\n\nfrom p(a#) would be completely independent from each other and would visit many\ndifferent regions in x space proportional to their probability. Instead, especially\nin high dimensional cases, MCMC samples become very correlated. We refer\nto such behavior as slow mixing or even failure to mix. MCMC methods with\nslow mixing can be seen as inadvertently performing something resembling noisy\ngradient descent on the energy function, or equivalently noisy hill climbing on the\nprobability, with respect to the state of the chain (the random variables being\nsampled). The chain tends to take small steps (in the space of the state of the\nMarkov chain), from a configuration a\u2019) toa configuration a), with the energy\nE(a@) generally lower or approximately equal to the energy E(at-)), with a\npreference for moves that yield lower energy configurations. When starting from a\nrather improbable configuration (higher energy than the typical ones from p(x)),\nthe chain tends to gradually reduce the energy of the state and only occasionally\nmove to another mode. Once the chain has found a region of low energy (for\nexample, if the variables are pixels in an image, a region of low energy might be\na connected manifold of images of the same object), which we call a mode, the\nchain will tend to walk around that mode (following a kind of random walk). Once\nin a while it will step out of that mode and generally return to it or (if it finds\nan escape route) move towards another mode. The problem is that successful\nescape routes are rare for many interesting distributions, so the Markov chain will\ncontinue to sample the same mode longer than it should.\n\nThis is very clear when we consider the Gibbs sampling algorithm (section 17.4).\nIn this context, consider the probability of going from one mode to a nearby mode\nwithin a given number of steps. What will determine that probability is the shape\nof the \u201cenergy barrier\u201d between these modes. Transitions between two modes\nthat are separated by a high energy barrier (a region of low probability) are\nexponentially less likely (in terms of the height of the energy barrier). This is\nillustrated in figure 17.1. The problem arises when there are multiple modes with\nhigh probability that are separated by regions of low probability, especially when\neach Gibbs sampling step must update only a small subset of variables whose\nvalues are largely determined by the other variables.\n\nAs a simple example, consider an energy-based model over two variables a and\nb, which are both binary with a sign, taking on values \u20141 and 1. If E(a,b) = \u2014wab\nfor some large positive number w, then the model expresses a strong belief that a\nand b have the same sign. Consider updating b using a Gibbs sampling step with\na= 1. The conditional distribution over b is given by P(b=1|a=1) = o(w).\nIf w is large, the sigmoid saturates, and the probability of also assigning b to be\n1 is close to 1. Likewise, if a = \u20141, the probability of assigning b to be \u20141 is\nclose to 1. According to Pyodei(a, b), both signs of both variables are equally likely.\n\n600\n", "CHAPTER 17. MONTE CARLO METHODS\n\nFigure 17.1: Paths followed by Gibbs sampling for three distributions, with the Markov\nchain initialized at the mode in both cases. (Left)A multivariate normal distribution\nwith two independent variables. Gibbs sampling mixes well because the variables are\nindependent. (Center)A multivariate normal distribution with highly correlated variables.\nThe correlation between variables makes it difficult for the Markov chain to mix. Because\nthe update for each variable must be conditioned on the other variable, the correlation\nreduces the rate at which the Markov chain can move away from the starting point.\n(Right)A mixture of Gaussians with widely separated modes that are not axis-aligned.\nGibbs sampling mixes very slowly because it is difficult to change modes while altering\nonly one variable at a time.\n\nAccording to Pmode(a | b), both variables should have the same sign. This means\nthat Gibbs sampling will only very rarely flip the signs of these variables.\n\nIn more practical scenarios, the challenge is even greater because we care not\nonly about making transitions between two modes but more generally between\nall the many modes that a real model might contain. If several such transitions\nare difficult because of the difficulty of mixing between modes, then it becomes\nvery expensive to obtain a reliable set of samples covering most of the modes, and\nconvergence of the chain to its stationary distribution is very slow.\n\nSometimes this problem can be resolved by finding groups of highly dependent\nunits and updating all of them simultaneously in a block. Unfortunately, when\nthe dependencies are complicated, it can be computationally intractable to draw a\nsample from the group. After all, the problem that the Markov chain was originally\nintroduced to solve is this problem of sampling from a large group of variables.\n\nIn the context of models with latent variables, which define a joint distribution\nPmodel(&, h), we often draw samples of x by alternating between sampling from\nPmode(x | h) and sampling from Pyoae(h | x). From the point of view of mixing\n\n601\n", "CHAPTER 17. MONTE CARLO METHODS\n\nSEN\n\n\u2014NY IST &\n\nnh os|\u2014lsqhe/o}e/ | 4 1\n\nS aod heed Bod esd bad A)\n\u2014~S\n\nS)9/-O | -- J | Hoo]\na\n)\n\n~~\n\nSm ARE Ae le\nSS Pg rg rg rg re re es\nA>) i) Ae)\nRS gS a ra a ry ra ee ee\nNin Ale ALR AL+A +S\n\n3\na\ni}\ni]\n4\n2\n2\n2\na\nra\n\nDIA] P/N [oo /\u2014 | Bs) ~]eo\n\nx\naor lw) r/Olojrlol\u00a2\n\n0) GF} Oo\n\nq 3\\{\n4 1|7\n4 113\n+ 3/2\n+ 4) 7\n+ ti?\n4 0) 7\n4 FIO\n4 117\n4 ? |++\n\nPIOILN IN\n\nFigure 17.2: An illustration of the slow mixing problem in deep probabilistic models.\nEach panel should be read left to right, top to bottom. (Left)Consecutive samples from\nGibbs sampling applied to a deep Boltzmann machine trained on the MNIST dataset.\nConsecutive samples are similar to each other. Because the Gibbs sampling is performed\nin a deep graphical model, this similarity is based more on semantic rather than raw visual\nfeatures, but it is still difficult for the Gibbs chain to transition from one mode of the\ndistribution to another, for example by changing the digit identity. (Right)Consecutive\nancestral samples from a generative adversarial network. Because ancestral sampling\ngenerates each sample independently from the others, there is no mixing problem.\n\nrapidly, we would like Pmoael(h | 2) to have very high entropy. However, from the\npoint of view of learning a useful representation of h, we would like h to encode\nenough information about \u00abx to reconstruct it well, which implies that h and \u00abx\nshould have very high mutual information. These two goals are at odds with each\nother. We often learn generative models that very precisely encode x into h but\nare not able to mix very well. This situation arises frequently with Boltzmann\nmachines\u2014the sharper the distribution a Boltzmann machine learns, the harder\nit is for a Markov chain sampling from the model distribution to mix well. This\nproblem is illustrated in figure 17.2.\n\nAll this could make MCMC methods less useful when the distribution of interest\nhas a manifold structure with a separate manifold for each class: the distribution\nis concentrated around many modes and these modes are separated by vast regions\nof high energy. This type of distribution is what we expect in many classification\nproblems and would make MCMC methods converge very slowly because of poor\nmixing between modes.\n\n602\n", "CHAPTER 17. MONTE CARLO METHODS\n\n17.5.1 Tempering to Mix between Modes\n\nWhen a distribution has sharp peaks of high probability surrounded by regions of\nlow probability, it is difficult to mix between the different modes of the distribution.\nSeveral techniques for faster mixing are based on constructing alternative versions\nof the target distribution in which the peaks are not as high and the surrounding\nvalleys are not as low. Energy-based models provide a particularly simple way to\ndo so. So far, we have described an energy-based model as defining a probability\ndistribution\n\np(x) x exp (\u2014E(a)). (17.25)\nEnergy-based models may be augmented with an extra parameter (6 controlling\nhow sharply peaked the distribution is:\n\npo(@) \u00ab exp (\u2014BE(a)). (17.26)\n\nThe 8 parameter is often described as being the reciprocal of the temperature,\nreflecting the origin of energy-based models in statistical physics. When the\ntemperature falls to zero and / rises to infinity, the energy-based model becomes\ndeterministic. When the temperature rises to infinity and ( falls to zero, the\ndistribution (for discrete x) becomes uniform.\n\nTypically, a model is trained to be evaluated at G = 1. However, we can make\nuse of other temperatures, particularly those where 8 < 1. Tempering is a general\nstrategy of mixing between modes of p; rapidly by drawing samples with 8 < 1.\n\nMarkov chains based on tempered transitions (Neal, 1994) temporarily\nsample from higher-temperature distributions in order to mix to different modes,\nthen resume sampling from the unit temperature distribution. These techniques\nhave been applied to models such as RBMs (Salakhutdinov, 2010). Another\napproach is to use parallel tempering ([ba, 2001), in which the Markov chain\nsimulates many different states in parallel, at different temperatures. The highest\ntemperature states mix slowly, while the lowest temperature states, at temperature\n1, provide accurate samples from the model. The transition operator includes\nstochastically swapping states between two different temperature levels, so that a\nsufficiently high-probability sample from a high-temperature slot can jump into a\nlower temperature slot. This approach has also been applied to RBMs (Desjardins\net al., 2010; Cho et al., 2010). Although tempering is a promising approach, at\nthis point it has not allowed researchers to make a strong advance in solving the\nchallenge of sampling from complex EBMs. One possible reason is that there\nare critical temperatures around which the temperature transition must be\nvery slow (as the temperature is gradually reduced) in order for tempering to be\neffective.\n\n603\n", "CHAPTER 17. MONTE CARLO METHODS\n\n17.5.2 Depth May Help Mixing\n\nWhen drawing samples from a latent variable model p(h, x), we have seen that if\np(h| x) encodes zx too well, then sampling from p(a# | h) will not change x very\nmuch and mixing will be poor. One way to resolve this problem is to make h be a\ndeep representation, that encodes a into h in such a way that a Markov chain in\nthe space of h can mix more easily. Many representation learning algorithms, such\nas autoencoders and RBMs, tend to yield a marginal distribution over h that is\nmore uniform and more unimodal than the original data distribution over x. It can\nbe argued that this arises from trying to minimize reconstruction error while using\nall of the available representation space, because minimizing reconstruction error\nover the training examples will be better achieved when different training examples\nare easily distinguishable from each other in h-space, and thus well separated.\nBengio et al. (2013a) observed that deeper stacks of regularized autoencoders or\nRBMs yield marginal distributions in the top-level h-space that appeared more\nspread out and more uniform, with less of a gap between the regions corresponding\nto different modes (categories, in the experiments). Training an RBM in that\nhigher-level space allowed Gibbs sampling to mix faster between modes. It remains\nhowever unclear how to exploit this observation to help better train and sample\nfrom deep generative models.\n\nDespite the difficulty of mixing, Monte Carlo techniques are useful and are\noften the best tool available. Indeed, they are the primary tool used to confront\nthe intractable partition function of undirected models, discussed next.\n\n604\n", "Chapter 18\n\nConfronting the Partition\nFunction\n\nIn section 16.2.2 we saw that many probabilistic models (commonly known as undi-\nrected graphical models) are defined by an unnormalized probability distribution\np(x; 6). We must normalize p by dividing by a partition function Z(@) in order to\nobtain a valid probability distribution:\n\np(x; @) = Twi 6). (18.1)\n\nThe partition function is an integral (for continuous variables) or sum (for discrete\nvariables) over the unnormalized probability of all states:\n\nro (18.2)\n\nor\n\nSpa). (18.3)\n\nThis operation is intractable for many interesting models.\n\nAs we will see in chapter 20, several deep learning models are designed to\nhave a tractable normalizing constant, or are designed to be used in ways that do\nnot involve computing p(x) at all. However, other models directly confront the\nchallenge of intractable partition functions. In this chapter, we describe techniques\nused for training and evaluating models that have intractable partition functions.\n\n605\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\n18.1 The Log-Likelihood Gradient\n\nWhat makes learning undirected models by maximum likelihood particularly\ndifficult is that the partition function depends on the parameters. The gradient of\nthe log-likelihood with respect to the parameters has a term corresponding to the\ngradient of the partition function:\n\nVo log p(x; 8) = Vo log p(x; 8) \u2014 Ve log Z(8). (18.4)\n\nThis is a well-known decomposition into the positive phase and negative\nphase of learning.\n\nFor most undirected models of interest, the negative phase is difficult. Models\nwith no latent variables or with few interactions between latent variables typically\nhave a tractable positive phase. The quintessential example of a model with a\nstraightforward positive phase and difficult negative phase is the RBM, which has\nhidden units that are conditionally independent from each other given the visible\nunits. The case where the positive phase is difficult, with complicated interactions\nbetween latent variables, is primarily covered in chapter 19. This chapter focuses\non the difficulties of the negative phase.\n\nLet us look more closely at the gradient of log Z:\n\nVo logZ 18.5)\nVoZ\n= Yo% 18.\n3 8.6)\n_ Vo dix P(x)\n= Vets 18.7)\n_ Ux Vob(x)\n\u2014_\u2014 Ae 18.8)\n\nFor models that guarantee p(x) > 0 for all x, we can substitute exp (log p(x))\nfor p(x):\n\nyo, Vo oP (log P(x) (18.9)\n_ Dex exP Hes P0) Vo log p(x) (18.10)\n_ Xa POW sleeps (18.11)\n= Spe )V glog p(x) (18.12)\n\n606\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\n= Exnp(x) Vo log p(x). (18.13)\n\nThis derivation made use of summation over discrete x, but a similar result\napplies using integration over continuous x. In the continuous version of the\nderivation, we use Leibniz\u2019s rule for differentiation under the integral sign to obtain\nthe identity\n\nVo [va0 = [ Yor(xae. (18.14)\n\nThis identity is applicable only under certain regularity conditions on p and V@p(x).\nIn measure theoretic terms, the conditions are: (i) The unnormalized distribution p\nmust be a Lebesgue-integrable function of a for every value of 6; (ii) The gradient\nVop(x) must exist for all @ and almost all a; (iii) There must exist an integrable\nfunction R(x) that bounds V (x) in the sense that max; |z?- p(x)| < R(a) for all\n6 and almost all x. Fortunately, most machine learning models of interest have\nthese properties.\n\nThis identity\nVo log Z = Exv p(x) Volog p(x) (18.15)\n\nis the basis for a variety of Monte Carlo methods for approximately maximizing\nthe likelihood of models with intractable partition functions.\n\nThe Monte Carlo approach to learning undirected models provides an intuitive\nframework in which we can think of both the positive phase and the negative\nphase. In the positive phase, we increase log p(x) for @ drawn from the data. In\nthe negative phase, we decrease the partition function by decreasing log p(x) drawn\nfrom the model distribution.\n\nIn the deep learning literature, it is common to parametrize log p in terms of\nan energy function (equation 16.7). In this case, we can interpret the positive\nphase as pushing down on the energy of training examples and the negative phase\nas pushing up on the energy of samples drawn from the model, as illustrated in\nfigure 18.1.\n\n18.2 Stochastic Maximum Likelihood and Contrastive\nDivergence\n\nThe naive way of implementing equation 18.15 is to compute it by burning in\na set of Markov chains from a random initialization every time the gradient is\nneeded. When learning is performed using stochastic gradient descent, this means\nthe chains must be burned in once per gradient step. This approach leads to the\n\n607\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\ntraining procedure presented in algorithm 18.1. The high cost of burning in the\nMarkov chains in the inner loop makes this procedure computationally infeasible,\nbut this procedure is the starting point that other more practical algorithms aim\nto approximate.\n\nAlgorithm 18.1 A naive MCMC algorithm for maximizing the log-likelihood\nwith an intractable partition function using gradient ascent.\n\nSet \u00a2, the step size, to a small positive number.\n\nSet k, the number of Gibbs steps, high enough to allow burn in. Perhaps 100 to\ntrain an RBM on a small image patch.\n\nwhile not converged do\n\nSample a minibatch of m examples {x Lee  x\u2122)} from the training set.\ngc = 2, Vo log p(x; 8).\nInitialize a set of m samples {xM), eng xO to random values (e.g., from\n\na uniform or normal distribution, or possibly a distribution with marginals\nmatched to the model\u2019s marginals).\nfor i=1tokdo\n\nfor 7 = 1 to mdo\n\nx) < gibbs_update(x\u00a5)).\n\nend for\nend for\nBH 8 ~ 5 1 Volog p(x\": 8).\nOc O+ eg.\n\nend while\n\nWe can view the MCMC approach to maximum likelihood as trying to achieve\nbalance between two forces, one pushing up on the model distribution where the\ndata occurs, and another pushing down on the model distribution where the model\nsamples occur. Figure 18.1 illustrates this process. The two forces correspond to\nmaximizing log p and minimizing log Z. Several approximations to the negative\nphase are possible. Each of these approximations can be understood as making\nthe negative phase computationally cheaper but also making it push down in the\nwrong locations.\n\nBecause the negative phase involves drawing samples from the model\u2019s distri-\nbution, we can think of it as finding points that the model believes in strongly.\nBecause the negative phase acts to reduce the probability of those points, they\nare generally considered to represent the model\u2019s incorrect beliefs about the world.\nThey are frequently referred to in the literature as \u201challucinations\u201d or \u201cfantasy\nparticles.\u201d In fact, the negative phase has been proposed as a possible explanation\n\n608\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nThe positive phase The negative phase\n\n\u2014\u2014 = Pmodel (a)\n\nFigure 18.1: The view of algorithm 18.1 as having a \u201cpositive phase\u201d and \u201cnegative phase.\u201d\n(Left)In the positive phase, we sample points from the data distribution, and push up on\ntheir unnormalized probability. This means points that are likely in the data get pushed\nup on more. (Right)In the negative phase, we sample points from the model distribution,\nand push down on their unnormalized probability. This counteracts the positive phase\u2019s\ntendency to just add a large constant to the unnormalized probability everywhere. When\nthe data distribution and the model distribution are equal, the positive phase has the\nsame chance to push up at a point as the negative phase has to push down. When this\noccurs, there is no longer any gradient (in expectation) and training must terminate.\n\nfor dreaming in humans and other animals (Crick and Mitchison, 1983), the idea\nbeing that the brain maintains a probabilistic model of the world and follows\nthe gradient of log p while experiencing real events while awake and follows the\nnegative gradient of log p to minimize log Z while sleeping and experiencing events\nsampled from the current model. This view explains much of the language used to\ndescribe algorithms with a positive and negative phase, but it has not been proven\nto be correct with neuroscientific experiments. In machine learning models, it is\nusually necessary to use the positive and negative phase simultaneously, rather\nthan in separate time periods of wakefulness and REM sleep. As we will see in\nsection 19.5, other machine learning algorithms draw samples from the model\ndistribution for other purposes and such algorithms could also provide an account\nfor the function of dream sleep.\n\nGiven this understanding of the role of the positive and negative phase of\nlearning, we can attempt to design a less expensive alternative to algorithm 18.1.\nThe main cost of the naive MCMC algorithm is the cost of burning in the Markov\nchains from a random initialization at each step. A natural solution is to initialize\nthe Markov chains from a distribution that is very close to the model distribution,\n\n609\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nso that the burn in operation does not take as many steps.\n\nThe contrastive divergence (CD, or CD-k to indicate CD with k Gibbs steps)\nalgorithm initializes the Markov chain at each step with samples from the data\ndistribution (Hinton, 2000, 2010). This approach is presented as algorithm 18.2.\nObtaining samples from the data distribution is free, because they are already\navailable in the data set. Initially, the data distribution is not close to the model\ndistribution, so the negative phase is not very accurate. Fortunately, the positive\nphase can still accurately increase the model\u2019s probability of the data. After the\npositive phase has had some time to act, the model distribution is closer to the\ndata distribution, and the negative phase starts to become accurate.\n\nAlgorithm 18.2 The contrastive divergence algorithm, using gradient ascent as\nthe optimization procedure.\n\nSet \u00a2, the step size, to a small positive number.\nSet &, the number of Gibbs steps, high enough to allow a Markov chain sampling\nfrom p(x;@) to mix when initialized from paata. Perhaps 1-20 to train an RBM\non a small image patch.\nwhile not converged do\nSample a minibatch of m examples {x,...,x(\u2122} from the training set.\nBH Fy Vo log p(x; 6).\nfor i= 1 to mdo\nxO Hx,\nend for\nfor i=1tokdo\nfor 7 = 1 to mdo\nx) < gibbs_update(x)),\nend for\nend for\n8-8-1 Volog p(x\"; 6).\nOc O+ eg.\nend while\n\nOf course, CD is still an approximation to the correct negative phase. The\nmain way that CD qualitatively fails to implement the correct negative phase\nis that it fails to suppress regions of high probability that are far from actual\ntraining examples. These regions that have high probability under the model but\nlow probability under the data generating distribution are called spurious modes.\nFigure 18.2 illustrates why this happens. Essentially, it is because modes in the\nmodel distribution that are far from the data distribution will not be visited by\n\n610\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nPmodel ()\nPaata(\u00a3)\n\nFigure 18.2: An illustration of how the negative phase of contrastive divergence (algo-\nrithm 18.2) can fail to suppress spurious modes. A spurious mode is a mode that is\npresent in the model distribution but absent in the data distribution. Because contrastive\ndivergence initializes its Markov chains from data points and runs the Markov chain for\nonly a few steps, it is unlikely to visit modes in the model that are far from the data\npoints. This means that when sampling from the model, we will sometimes get samples\nhat do not resemble the data. It also means that due to wasting some of its probability\nmass on these modes, the model will struggle to place high probability mass on the correct\nmodes. For the purpose of visualization, this figure uses a somewhat simplified concept\nof distance\u2014the spurious mode is far from the correct mode along the number line in\nR. This corresponds to a Markov chain based on making local moves with a single x\nvariable in IR. For most deep probabilistic models, the Markov chains are based on Gibbs\nsampling and can make non-local moves of individual variables but cannot move all of\nhe variables simultaneously. For these problems, it is usually better to consider the edit\ndistance between modes, rather than the Euclidean distance. However, edit distance in a\nhigh dimensional space is difficult to depict in a 2-D plot.\n\nMarkov chains initialized at training points, unless k is very large.\n\nCarreira-Perpinan and Hinton (2005) showed experimentally that the CD\nestimator is biased for RBMs and fully visible Boltzmann machines, in that it\nconverges to different points than the maximum likelihood estimator. They argue\nthat because the bias is small, CD could be used as an inexpensive way to initialize\na model that could later be fine-tuned via more expensive MCMC methods. Bengio\nand Delalleau (2009) showed that CD can be interpreted as discarding the smallest\nterms of the correct MCMC update gradient, which explains the bias.\n\nCD is useful for training shallow models like RBMs. These can in turn be\nstacked to initialize deeper models like DBNs or DBMs. However, CD does not\nprovide much help for training deeper models directly. This is because it is difficult\n\n611\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nto obtain samples of the hidden units given samples of the visible units. Since the\nhidden units are not included in the data, initializing from training points cannot\nsolve the problem. Even if we initialize the visible units from the data, we will still\nneed to burn in a Markov chain sampling from the distribution over the hidden\nunits conditioned on those visible samples.\n\nThe CD algorithm can be thought of as penalizing the model for having a\nMarkov chain that changes the input rapidly when the input comes from the data.\nThis means training with CD somewhat resembles autoencoder training. Even\nthough CD is more biased than some of the other training methods, it can be\nuseful for pretraining shallow models that will later be stacked. This is because\nthe earliest models in the stack are encouraged to copy more information up to\ntheir latent variables, thereby making it available to the later models. This should\nbe thought of more of as an often-exploitable side effect of CD training rather than\na principled design advantage.\n\nSutskever and Tieleman (2010) showed that the CD update direction is not the\ngradient of any function. This allows for situations where CD could cycle forever,\nbut in practice this is not a serious problem.\n\nA different strategy that resolves many of the problems with CD is to initial-\nize the Markov chains at each gradient step with their states from the previous\ngradient step. This approach was first discovered under the name stochastic max-\nimum likelihood (SML) in the applied mathematics and statistics community\n(Younes, 1998) and later independently rediscovered under the name persistent\ncontrastive divergence (PCD, or PCD-k to indicate the use of k Gibbs steps\nper update) in the deep learning community (Tieleman, 2008). See algorithm 18.3.\nThe basic idea of this approach is that, so long as the steps taken by the stochastic\ngradient algorithm are small, then the model from the previous step will be similar\nto the model from the current step. It follows that the samples from the previous\nmodel\u2019s distribution will be very close to being fair samples from the current\nmodel\u2019s distribution, so a Markov chain initialized with these samples will not\nrequire much time to mix.\n\nBecause each Markov chain is continually updated throughout the learning\nprocess, rather than restarted at each gradient step, the chains are free to wander\nfar enough to find all of the model\u2019s modes. SML is thus considerably more\nresistant to forming models with spurious modes than CD is. Moreover, because\nit is possible to store the state of all of the sampled variables, whether visible or\nlatent, SML provides an initialization point for both the hidden and visible units.\nCD is only able to provide an initialization for the visible units, and therefore\nrequires burn-in for deep models. SML is able to train deep models efficiently.\n\n612\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nMarlin et al. (2010) compared SML to many of the other criteria presented in\nthis chapter. They found that SML results in the best test set log-likelihood for\nan RBM, and that if the RBM\u2019s hidden units are used as features for an SVM\nclassifier, SML results in the best classification accuracy.\n\nSML is vulnerable to becoming inaccurate if the stochastic gradient algorithm\ncan move the model faster than the Markov chain can mix between steps. This\ncan happen if k is too small or \u20ac is too large. The permissible range of values is\nunfortunately highly problem-dependent. There is no known way to test formally\nwhether the chain is successfully mixing between steps. Subjectively, if the learning\nrate is too high for the number of Gibbs steps, the human operator will be able\nto observe that there is much more variance in the negative phase samples across\ngradient steps rather than across different Markov chains. For example, a model\ntrained on MNIST might sample exclusively 7s on one step. The learning process\nwill then push down strongly on the mode corresponding to 7s, and the model\nmight sample exclusively 9s on the next step.\n\nAlgorithm 18.3 The stochastic maximum likelihood / persistent contrastive\ndivergence algorithm using gradient ascent as the optimization procedure.\n\nSet \u00a2, the step size, to a small positive number.\nSet &, the number of Gibbs steps, high enough to allow a Markov chain sampling\nfrom p(x;@ + eg) to burn in, starting from samples from p(x;@). Perhaps 1 for\nRBM on a small image patch, or 5-50 for a more complicated model like a DBM.\nInitialize a set of m samples {x),... xm) to random values (e.g., from a\nuniform or normal distribution, or possibly a distribution with marginals matched\nto the model\u2019s marginals).\nwhile not converged do\nSample a minibatch of m examples {x, ee xl) from the training set.\ngH 4 2, Vo log p(x; 6).\nfor i=1tokdo\nfor 7 = 1 to mdo\nx) < gibbs_update(x)),\nend for\nend for\n\u2014~tyn (3 (i).\ngHgs\u2014 =i Volog p(x; 6).\n00+ \u00abeg.\nend while\n\nCare must be taken when evaluating the samples from a model trained with\nSML. It is necessary to draw the samples starting from a fresh Markov chain\n\n613\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\ninitialized from a random starting point after the model is done training. The\nsamples present in the persistent negative chains used for training have been\ninfluenced by several recent versions of the model, and thus can make the model\nappear to have greater capacity than it actually does.\n\nBerglund and Raiko (2013) performed experiments to examine the bias and\nvariance in the estimate of the gradient provided by CD and SML. CD proves to\nhave lower variance than the estimator based on exact sampling. SML has higher\nvariance. The cause of CD\u2019s low variance is its use of the same training points\nin both the positive and negative phase. If the negative phase is initialized from\ndifferent training points, the variance rises above that of the estimator based on\nexact sampling.\n\nAll of these methods based on using MCMC to draw samples from the model\ncan in principle be used with almost any variant of MCMC. This means that\ntechniques such as SML can be improved by using any of the enhanced MCMC\ntechniques described in chapter 17, such as parallel tempering (Desjardins et al.,\n2010; Cho et al., 2010).\n\nOne approach to accelerating mixing during learning relies not on changing\nthe Monte Carlo sampling technology but rather on changing the parametrization\nof the model and the cost function. Fast PCD or FPCD (Ticleman and Hinton,\n2009) involves replacing the parameters @ of a traditional model with an expression\n\no- g(slow) + (fast). (18.16)\n\nThere are now twice as many parameters as before, and they are added together\nelement-wise to provide the parameters used by the original model definition. The\nfast copy of the parameters is trained with a much larger learning rate, allowing\nit to adapt rapidly in response to the negative phase of learning and push the\nMarkov chain to new territory. This forces the Markov chain to mix rapidly, though\nthis effect only occurs during learning while the fast weights are free to change.\nTypically one also applies significant weight decay to the fast weights, encouraging\nthem to converge to small values, after only transiently taking on large values long\nenough to encourage the Markov chain to change modes.\n\nOne key benefit to the MCMC-based methods described in this section is that\nthey provide an estimate of the gradient of log Z, and thus we can essentially\ndecompose the problem into the log p contribution and the log Z contribution.\nWe can then use any other method to tackle log p(x), and just add our negative\nphase gradient onto the other method\u2019s gradient. In particular, this means that\nour positive phase can make use of methods that provide only a lower bound on\np. Most of the other methods of dealing with log Z presented in this chapter are\n\n614\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nincompatible with bound-based positive phase methods.\n\n18.3. Pseudolikelihood\n\nMonte Carlo approximations to the partition function and its gradient directly\n\nconfront the partition function. Other approaches sidestep the issue, by training\n\nthe model without computing the partition function. Most of these approaches are\n\nbased on the observation that it is easy to compute ratios of probabilities in an\n\nundirected probabilistic model. This is because the partition function appears in\n\nboth the numerator and the denominator of the ratio and cancels out:\np(x) _ P(X) _ p(x)\n\np(y) yply) Bly)\u201d\n\n(18.17)\n\nThe pseudolikelihood is based on the observation that conditional probabilities\ntake this ratio-based form, and thus can be computed without knowledge of the\npartition function. Suppose that we partition x into a, b and c, where a contains\nthe variables we want to find the conditional distribution over, b contains the\nvariables we want to condition on, and c contains the variables that are not part\nof our query.\n\npla] b) =P) _ _ Pad) _\u2014 _ Pla) _ (18.18)\np(b) dase p(a, b,c) Vac Pla, b,c)\nThis quantity requires marginalizing out a, which can be a very efficient operation\nprovided that a and c do not contain very many variables. In the extreme case, a\ncan be a single variable and c can be empty, making this operation require only as\nmany evaluations of p as there are values of a single random variable.\n\nUnfortunately, in order to compute the log-likelihood, we need to marginalize\nout large sets of variables. If there are n variables total, we must marginalize a set\nof size n \u2014 1. By the chain rule of probability,\n\nlog p(x) = log p(a1) + log p(w2 | #1) +--+ plan | X1n-1). (18.19)\n\nIn this case, we have made a maximally small, but ccan be as large as x9.,,. What\nif we simply move c into b to reduce the computational cost? This yields the\npseudolikelihood (Besag, 1975) objective function, based on predicting the value\nof feature x; given all of the other features x _;:\n\nn\nSS log p(x: | w_,). (18.20)\ni=1\n\n615\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nIf each random variable has k different values, this requires only k xn evaluations\nof p to compute, as opposed to the k\u201d evaluations needed to compute the partition\nfunction.\n\nThis may look like an unprincipled hack, but it can be proven that estimation\nby maximizing the pseudolikelihood is asymptotically consistent (Mase, 1995).\nOf course, in the case of datasets that do not approach the large sample limit,\npseudolikelihood may display different behavior from the maximum likelihood\nestimator.\n\nIt is possible to trade computational complexity for deviation from maximum\nlikelihood behavior by using the generalized pseudolikelihood estimator (Huang\nand Ogata, 2002). The generalized pseudolikelihood estimator uses m different sets\nso ,2=1,...,m of indices of variables that appear together on the left side of the\nconditioning bar. In the extreme case of m = 1 and S$\u201c) = 1,...,n the generalized\npseudolikelihood recovers the log-likelihood. In the extreme case of m = n and\nsO = {i}, the generalized pseudolikelihood recovers the pseudolikelihood. The\ngeneralized pseudolikelihood objective function is given by\n\nm\nSF log p(x gw | Xs). (18.21)\ni=1\n\nThe performance of pseudolikelihood-based approaches depends largely on how\nthe model will be used. Pseudolikelihood tends to perform poorly on tasks that\nrequire a good model of the full joint p(x), such as density estimation and sampling.\nHowever, it can perform better than maximum likelihood for tasks that require only\nthe conditional distributions used during training, such as filling in small amounts\nof missing values. Generalized pseudolikelihood techniques are especially powerful if\nthe data has regular structure that allows the S index sets to be designed to capture\nthe most important correlations while leaving out groups of variables that only\nhave negligible correlation. For example, in natural images, pixels that are widely\nseparated in space also have weak correlation, so the generalized pseudolikelihood\ncan be applied with each S set being a small, spatially localized window.\n\nOne weakness of the pseudolikelihood estimator is that it cannot be used with\nother approximations that provide only a lower bound on f(x), such as variational\ninference, which will be covered in chapter 19. This is because p appears in the\ndenominator. A lower bound on the denominator provides only an upper bound on\nthe expression as a whole, and there is no benefit to maximizing an upper bound.\nThis makes it difficult to apply pseudolikelihood approaches to deep models such\nas deep Boltzmann machines, since variational methods are one of the dominant\napproaches to approximately marginalizing out the many layers of hidden variables\n\n616\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nthat interact with each other. However, pseudolikelihood is still useful for deep\nlearning, because it can be used to train single layer models, or deep models using\napproximate inference methods that are not based on lower bounds.\n\nPseudolikelihood has a much greater cost per gradient step than SML, due to\nits explicit computation of all of the conditionals. However, generalized pseudo-\nlikelihood and similar criteria can still perform well if only one randomly selected\nconditional is computed per example (Goodfellow ez al., 2013b), thereby bringing\nthe computational cost down to match that of SML.\n\nThough the pseudolikelihood estimator does not explicitly minimize log Z, it\ncan still be thought of as having something resembling a negative phase. The\ndenominators of each conditional distribution result in the learning algorithm\nsuppressing the probability of all states that have only one variable differing from\na training example.\n\nSee Marlin and de Freitas (2011) for a theoretical analysis of the asymptotic\nefficiency of pseudolikelihood.\n\n18.4 Score Matching and Ratio Matching\n\nScore matching (Hyvarinen, 2005) provides another consistent means of training a\nmodel without estimating Z or its derivatives. The name score matching comes\nfrom terminology in which the derivatives of a log density with respect to its\nargument, Vz log p(x), are called its score. The strategy used by score matching\nis to minimize the expected squared difference between the derivatives of the\nmodel\u2019s log density with respect to the input and the derivatives of the data\u2019s log\ndensity with respect to the input:\n\n1\nL(a, 6) = gllVe log Pmodel (@; 0) \u2014 Ve log paata(x)||5 (18.22)\n1\nJ(6) = FE maata(e) L(@, 9) (18.23)\n* = min J(0) (18.24)\n\nThis objective function avoids the difficulties associated with differentiating\nthe partition function Z because Z is not a function of # and therefore VxZ = 0.\nInitially, score matching appears to have a new difficulty: computing the score\nof the data distribution requires knowledge of the true distribution generating\nthe training data, pdata. Fortunately, minimizing the expected value of L(a, @) is\n\n617\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nequivalent to minimizing the expected value of\n\n~ \"( & 1/90 \u00b0\nL(x, 0) = \u00bb (% log Pmodel (@; 8) + 3 (2 log pmodel (@; 0)) (18.25)\n\nwhere n is the dimensionality of x.\n\nBecause score matching requires taking derivatives with respect to x, it is not\napplicable to models of discrete data. However, the latent variables in the model\nmay be discrete.\n\nLike the pseudolikelihood, score matching only works when we are able to\nevaluate log (x) and its derivatives directly. It is not compatible with methods\nthat only provide a lower bound on log f(x), because score matching requires\nthe derivatives and second derivatives of log p(x) and a lower bound conveys no\ninformation about its derivatives. This means that score matching cannot be\napplied to estimating models with complicated interactions between the hidden\nunits, such as sparse coding models or deep Boltzmann machines. While score\nmatching can be used to pretrain the first hidden layer of a larger model, it has\nnot been applied as a pretraining strategy for the deeper layers of a larger model.\nThis is probably because the hidden layers of such models usually contain some\ndiscrete variables.\n\nWhile score matching does not explicitly have a negative phase, it can be\nviewed as a version of contrastive divergence using a specific kind of Markov chain\n(Hyvarinen, 2007a). The Markov chain in this case is not Gibbs sampling, but\nrather a different approach that makes local moves guided by the gradient. Score\nmatching is equivalent to CD with this type of Markov chain when the size of the\nlocal moves approaches zero.\n\nLyu (2009) generalized score matching to the discrete case (but made an error\nin their derivation that was corrected by Marlin et al. (2010)). Marlin et ail.\n(2010) found that generalized score matching (GSM) does not work in high\ndimensional discrete spaces where the observed probability of many events is 0.\n\nA more successful approach to extending the basic ideas of score matching\nto discrete data is ratio matching (Hyvarinen, 2007b). Ratio matching applies\nspecifically to binary data. Ratio matching consists of minimizing the average over\nexamples of the following objective function:\n\n2\n\n1\n1) (@,6) =~ ew) ; (18.26)\n\nj=l Pmodel J (\u00ae),3)3\n\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nwhere f(x, 7) returns x with the bit at position 7 flipped. Ratio matching avoids\nthe partition function using the same trick as the pseudolikelihood estimator: in a\nratio of two probabilities, the partition function cancels out. Marlin et al. (2010)\nfound that ratio matching outperforms SML, pseudolikelihood and GSM in terms\nof the ability of models trained with ratio matching to denoise test set images.\n\nLike the pseudolikelihood estimator, ratio matching requires n evaluations of p\n\nper data point, making its computational cost per update roughly n times higher\nthan that of SML.\n\nAs with the pseudolikelihood estimator, ratio matching can be thought of as\npushing down on all fantasy states that have only one variable different from a\ntraining example. Since ratio matching applies specifically to binary data, this\nmeans that it acts on all fantasy states within Hamming distance 1 of the data.\n\nRatio matching can also be useful as the basis for dealing with high-dimensional\nsparse data, such as word count vectors. This kind of data poses a challenge for\nMCMC-based methods because the data is extremely expensive to represent in\ndense format, yet the MCMC sampler does not yield sparse values until the model\nhas learned to represent the sparsity in the data distribution. Dauphin and Bengio\n(2013) overcame this issue by designing an unbiased stochastic approximation to\nratio matching. The approximation evaluates only a randomly selected subset of\nthe terms of the objective, and does not require the model to generate complete\nfantasy samples.\n\nSee Marlin and de Freitas (2011) for a theoretical analysis of the asymptotic\nefficiency of ratio matching.\n\n18.5 Denoising Score Matching\n\nIn some cases we may wish to regularize score matching, by fitting a distribution\n\nPsmoothed(%) = [ vassta)ate | y)dy (18.27)\n\nrather than the true Pgata. The distribution g(a | y) is a corruption process, usually\none that forms a by adding a small amount of noise to y.\n\nDenoising score matching is especially useful because in practice we usually do\nnot have access to the true pgata but rather only an empirical distribution defined\nby samples from it. Any consistent estimator will, given enough capacity, make\nPmodel into a set of Dirac distributions centered on the training points. Smoothing\nby q helps to reduce this problem, at the loss of the asymptotic consistency property\n\n619\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\ndescribed in section 5.4.5. Kingma and LeCun (2010) introduced a procedure for\nperforming regularized score matching with the smoothing distribution q being\nnormally distributed noise.\n\nRecall from section 14.5.1 that several autoencoder training algorithms are\nequivalent to score matching or denoising score matching. These autoencoder\ntraining algorithms are therefore a way of overcoming the partition function\nproblem.\n\n18.6 Noise-Contrastive Estimation\n\nMost techniques for estimating models with intractable partition functions do not\nprovide an estimate of the partition function. SML and CD estimate only the\ngradient of the log partition function, rather than the partition function itself.\nScore matching and pseudolikelihood avoid computing quantities related to the\npartition function altogether.\n\nNoise-contrastive estimation (NCE) (Gutmann and Hyvarinen, 2010)\ntakes a different strategy. In this approach, the probability distribution estimated\nby the model is represented explicitly as\n\nlog Pmodel (x) = log Pmodel (x; 0) +c, (18.28)\n\nwhere c is explicitly introduced as an approximation of \u2014 log Z(@). Rather than\nestimating only 6, the noise contrastive estimation procedure treats c as just\nanother parameter and estimates @ and c simultaneously, using the same algorithm\nfor both. The resulting log pmodei(x) thus may not correspond exactly to a valid\nprobability distribution, but will become closer and closer to being valid as the\nestimate of c improves.!\n\nSuch an approach would not be possible using maximum likelihood as the\ncriterion for the estimator. The maximum likelihood criterion would choose to set\nc arbitrarily high, rather than setting c to create a valid probability distribution.\n\nNCE works by reducing the unsupervised learning problem of estimating p(x)\nto that of learning a probabilistic binary classifier in which one of the categories\ncorresponds to the data generated by the model. This supervised learning problem\nis constructed in such a way that maximum likelihood estimation in this supervised\n\n'NCE is also applicable to problems with a tractable partition function, where there is no\nneed to introduce the extra parameter c. However, it has generated the most interest as a means\nof estimating models with difficult partition functions.\n\n620\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nlearning problem defines an asymptotically consistent estimator of the original\nproblem.\n\nSpecifically, we introduce a second distribution, the noise distribution pnoise(X).\nThe noise distribution should be tractable to evaluate and to sample from. We\ncan now construct a model over both x and a new, binary class variable y. In the\nnew joint model, we specify that\n\n1\njoint (Y = 1) = oy (18.29)\nPjoint(X | y= 1) = Pmodel (X); (18.30)\nand\nDjoint(X | y= 0) = Pnoise(X). (18.31)\n\nIn other words, y is a switch variable that determines whether we will generate x\nfrom the model or from the noise distribution.\n\nWe can construct a similar joint model of training data. In this case, the\nswitch variable determines whether we draw x from the data or from the noise\ndistribution. Formally, Pirain(y = 1) = 3: Pirain(X | y = 1) = Paata(X), and\nPtrain (X | Y= 0) = Pnoise(X)-\n\nWe can now just use standard maximum likelihood learning on the supervised\nlearning problem of fitting pjoint tO Ptrain:\n\n6,c= arg max Ex,y~Preain log pjoint (y | x). (18.32)\nsc\n\nThe distribution pjoint is essentially a logistic regression model applied to the\ndifference in log probabilities of the model and the noise distribution:\n\nPmodel (x)\n- =1|x)= 1888\njoint (Y | ) P model(X) + Pnoise(X)\n\n_ ee ee 18.34\n\n1 Pnoise(X)\n\nPmodel (x)\n\n1\n_ \u2014 18.35\n1+ exp (loz ea) )\n_o ( log Dnoise(X) ) 18.36\nPmodel(X)\n\n=o (log Pmodel(*) _ log Pnoise(X)) : (18.37\n\n621\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nNCE is thus simple to apply so long as log Pmodel is easy to back-propagate\nthrough, and, as specified above, Pnoise is easy to evaluate (in order to evaluate\nPjoint) and sample from (in order to generate the training data).\n\nNCE is most successful when applied to problems with few random variables,\nbut can work well even if those random variables can take on a high number of\nvalues. For example, it has been successfully applied to modeling the conditional\ndistribution over a word given the context of the word (Mnih and Kavukcuoglu,\n2013). Though the word may be drawn from a large vocabulary, there is only one\nword.\n\nWhen NCE is applied to problems with many random variables, it becomes less\nefficient. The logistic regression classifier can reject a noise sample by identifying\nany one variable whose value is unlikely. This means that learning slows down\ngreatly after Pmodel has learned the basic marginal statistics. Imagine learning a\nmodel of images of faces, using unstructured Gaussian noise as Pyoise- If Pmodel\nlearns about eyes, it can reject almost all unstructured noise samples without\nhaving learned anything about other facial features, such as mouths.\n\nThe constraint that pyoise must be easy to evaluate and easy to sample from\ncan be overly restrictive. When pyoise is simple, most samples are likely to be too\nobviously distinct from the data to force Pmodel to improve noticeably.\n\nLike score matching and pseudolikelihood, NCE does not work if only a lower\nbound on p is available. Such a lower bound could be used to construct a lower\nbound on pjoint(y = 1 | x), but it can only be used to construct an upper bound on\nPjoint(y = 0| x), which appears in half the terms of the NCE objective. Likewise,\na lower bound on Ppoise is not useful, because it provides only an upper bound on\nPjoint(Y = 1 | x).\n\nWhen the model distribution is copied to define a new noise distribution before\neach gradient step, NCE defines a procedure called self-contrastive estimation,\nwhose expected gradient is equivalent to the expected gradient of maximum\nlikelihood (Goodfellow, 2014). The special case of NCE where the noise samples\nare those generated by the model suggests that maximum likelihood can be\ninterpreted as a procedure that forces a model to constantly learn to distinguish\nreality from its own evolving beliefs, while noise contrastive estimation achieves\nsome reduced computational cost by only forcing the model to distinguish reality\nfrom a fixed baseline (the noise model).\n\nUsing the supervised task of classifying between training samples and generated\nsamples (with the model energy function used in defining the classifier) to provide\na gradient on the model was introduced earlier in various forms (Welling et al.,\n2003b; Bengio, 2009).\n\n622\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nNoise contrastive estimation is based on the idea that a good generative\nmodel should be able to distinguish data from noise. A closely related idea\nis that a good generative model should be able to generate samples that no\nclassifier can distinguish from data. This idea yields generative adversarial networks\n(section 20.10.4).\n\n18.7 Estimating the Partition Function\n\nWhile much of this chapter is dedicated to describing methods that avoid needing\nto compute the intractable partition function Z(@) associated with an undirected\ngraphical model, in this section we discuss several methods for directly estimating\nthe partition function.\n\nEstimating the partition function can be important because we require it if\nwe wish to compute the normalized likelihood of data. This is often important in\nevaluating the model, monitoring training performance, and comparing models to\neach other.\n\nFor example, imagine we have two models: model M, defining a probabil-\nity distribution p 4(x;04) = TBA (x;04) and model Mz defining a probability\ndistribution pp(x;0B) = Z, Pp(x;OB). A common way to compare the models\nis to evaluate and compare the likelihood that both models assign to an i.i.d.\ntest dataset. Suppose the test set consists of m examples fa) yee 2 el}, If\nTi; pax; 6.4) > T], pa(x ; 6g) or equivalently i\n\nYo logpa (x; 04) \u2014 S> log pa (x; Op) > 0, (18.38)\n\nthen we say that M4, is a better model than Mg (or, at least, it is a better model\nof the test set), in the sense that it has a better test log-likelihood. Unfortunately,\ntesting whether this condition holds requires knowledge of the partition function.\nUnfortunately, equation 18.38 seems to require evaluating the log probability that\nthe model assigns to each point, which in turn requires evaluating the partition\nfunction. We can simplify the situation slightly by re-arranging equation 18.38\ninto a form where we need to know only the ratio of the two model\u2019s partition\nfunctions:\n\n04) ; Se (tog 22:84) 2(0.)\n(i). _ (i), _ Pax); 04 il A\n\n= Toe ra 8a)\u201d 2 toga\u2019 0n) =) (ee 87 (8p)\n(18.39)\n\n623\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nWe can thus determine whether M y is a better model than M g without knowing\nthe partition function of either model but only their ratio. As we will see shortly,\nwe can estimate this ratio using importance sampling, provided that the two models\nare similar.\n\nIf, however, we wanted to compute the actual probability of the test data under\n\neither M4 or Mp, we would need to compute the actual value of the partition\nfunctions. That said, if we knew the ratio of two partition functions, r = 7544 ;\n\nand we knew the actual value of just one of the two, say Z@.4), we could compute\nthe value of the other:\n\nZ(OB)\nZ(04)\n\nZ(0B) =7rZ(Oa) = Z(O4a). (18.40)\n\nA simple way to estimate the partition function is to use a Monte Carlo\nmethod such as simple importance sampling. We present the approach in terms\nof continuous variables using integrals, but it can be readily applied to discrete\nvariables by replacing the integrals with summation. We use a proposal distribution\nPo(X) = 7, Po(x) which supports tractable sampling and tractable evaluation of\nboth the partition function Z and the unnormalized distribution po(x).\n\nZi = [nm (x) dx (18.41)\n\n= a p(x) dx (18.42)\n\n= Zo / polo et dx (18.43)\nx(\"))\n\ns.t.: x) ~ po (18.44)\n\nIn the last line, we make a Monte Carlo estimator, Zi , of the integral using samples\ndrawn from po(x) and then weight each sample with the ratio of the unnormalized\npi and the proposal po.\n\nWe see also that this approach allows us to estimate the ratio between the\npartition functions as\n\nKp x(k\n\nRy Pal 2x) ~ po. (18.45)\n(x(h\n\nKo\n\nThis value can then be used directly to compare two models as described in\nequation 18.39.\n\n624\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nIf the distribution jo is close to pi, equation 18.44 can be an effective way of\nestimating the partition function (Minka, 2005). Unfortunately, most of the time\npi is both complicated (usually multimodal) and defined over a high dimensional\nspace. It is difficult to find a tractable pp that is simple enough to evaluate while\nstill being close enough to p; to result in a high quality approximation. If pp and\np, are not close, most samples from pg will have low probability under p; and\ntherefore make (relatively) negligible contribution to the sum in equation 18.44.\n\nHaving few samples with significant weights in this sum will result in an\nestimator that is of poor quality due to high variance. This can be understood\nquantitatively through an estimate of the variance of our estimate Z:\n\n- f2 Z Co (r(x) \u00b0\nVar (A) = Ay (Bee a) ; (18.46)\n\nThis quantity is largest when there is significant deviation in the values of the\n\n= (a(ke\nimportance weights bee.\n\nWe now turn to two related strategies developed to cope with the challeng-\ning task of estimating partition functions for complex distributions over high-\ndimensional spaces: annealed importance sampling and bridge sampling. Both\nstart with the simple importance sampling strategy introduced above and both\nattempt to overcome the problem of the proposal po being too far from p; by\nintroducing intermediate distributions that attempt to bridge the gap between\nand p1.\n\n18.7.1 Annealed Importance Sampling\n\nIn situations where Dx 1(po||p1) is large (i.e., where there is little overlap between\npo and pj), a strategy called annealed importance sampling (AIS) attempts\nto bridge the gap by introducing intermediate distributions (Jarzynski, 1997; Neal,\n2001). Consider a sequence of distributions py, ...,Dm, with 0 =o <m <---<\nn-1 <n = 1 so that the first and last distributions in the sequence are po and p1\nrespectively.\n\nThis approach allows us to estimate the partition function of a multimodal\ndistribution defined over a high-dimensional space (such as the distribution defined\nby a trained RBM). We begin with a simpler model with a known partition function\n(such as an RBM with zeroes for weights) and estimate the ratio between the two\nmodel\u2019s partition functions. The estimate of this ratio is based on the estimate\nof the ratios of a sequence of many similar distributions, such as the sequence of\nRBMs with weights interpolating between zero and the learned weights.\n\n625\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nWe can now write the ratio 3 as\n4 42, Zin \u20141\n_ cee 18.47\n4 LLZy, Zin \u20141 ( )\nZm 2Zn2_\u2014 Zm\u20141 21\n_ ae 18.48\nZ0 Zn Znn\u20142 Zim 1 ( )\n-1\n= ll ayes (18.49)\nj=0 Ln\n\nProvided the distributions p,, and p,,+41, for all 0 < 7 <n \u20141, are sufficiently\n\nclose, we can reliably estimate each of the factors = +* using simple importance\nJ\n\nsampling and then use these to obtain an estimate of B.\n\nWhere do these intermediate distributions come from? Just as the original\nproposal distribution pp is a design choice, so is the sequence of distributions\nPm \u00ab++Pnn\u20141 That is, it can be specifically constructed to suit the problem domain.\nOne general-purpose and popular choice for the intermediate distributions is to\nuse the weighted geometric average of the target distribution p; and the starting\nproposal distribution (for which the partition function is known) po:\n\nPhy XPT\u201d (18.50)\n\nIn order to sample from these intermediate distributions, we define a series of\nMarkov chain transition functions T; ,(a\u2019 | a) that define the conditional probability\ndistribution of transitioning to x\u2019 given we are currently at x. The transition\noperator T),(a\u2019 | a) is defined to leave py, (a) invariant:\n\nDn; (@) = [rnke ty (@ | x\u2019) da\u2019 (18.51)\n\nThese transitions may be constructed as any Markov chain Monte Carlo method\n(e.g., Metropolis-Hastings, Gibbs), including methods involving multiple passes\nthrough all of the random variables or other kinds of iterations.\n\nThe AIS sampling strategy is then to generate samples from pp and then use\nthe transition operators to sequentially generate samples from the intermediate\ndistributions until we arrive at samples from the target distribution p1:\n\nefork=1...K\n\n\u2014 Sample ai\") ~ po(x)\n\n626\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nk k k\n\u2014 Sample ayy) ~ Ty, (29) | ah?)\n\nk k k\n\u2014 Sample al), ~ Tn 2(Xsp- avi.)\nk k k\n\u2014 Sample why) ~ Ty, (x | @ip1)\ne end\n\nFor sample k, we can derive the importance weight by chaining together the\nimportance weights for the jumps between the intermediate distributions given in\nequation 18.49:\n\n~ k)y\\ ~ k ~ 7 (k\n\n(k) _ Pm (x!) Byo(wl) Aral ) (18 52)\n~ ky ~ k)\\ oe ky\" .\npola?) Pnilay?) Bm s(@h)\n\nTo avoid numerical issues such as overflow, it is probably best to compute log w) by\n\nadding and subtracting log probabilities, rather than computing w\u2122) by multiplying\nand dividing probabilities.\n\nWwW\n\nWith the sampling procedure thus defined and the importance weights given\nin equation 18.52, the estimate of the ratio of partition functions is given by:\n\nLZ\n\n1 K\nAL 18.53\nZK > w (18.53)\n\nIn order to verify that this procedure defines a valid importance sampling\nscheme, we can show (Neal, 2001) that the AIS procedure corresponds to simple\nimportance sampling on an extended state space with points sampled over the\nproduct space [a,,,...,@n,_1, #1]. To do this, we define the distribution over the\nextended space as:\n\nD(Bny 5 > : By 1) \u00a31) (18.54)\nSP 1 (@1) Tina (Bim | \u00a31) Tn \u2014o(Lrn\u20142 Lyn) on Thy (21 Ln), (18.55)\n\nwhere T, is the reverse of the transition operator defined by Tq (via an application\nof Bayes\u2019 rule):\n\nPa(ax\") Nn Da (z\u2019)\nAC) eC)\n\nPlugging the above into the expression for the joint distribution on the extended\nstate space given in equation 18.55, we get:\n\nP(@m p++, Lm\u20141,\u20ac1) (18.57)\n627\n\nT, (a! | x) = T,(a | a\u2019). (18.56)\n\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nn\u2014-2\n\n~ Pyn\u20141(\u00aerm\u20141) Py (&n)\n= pi(a1)\u2014 Trn\u20141(@1 | \u00aemn\u2014a) | | ST (Riga | Pri)\nPras wa) ON get Pru encza)\n(18.58)\n- -2 ~\n_ Pi(a1) 7 Priv (na)\n\nPima (wt | Lrn\u20141) Pm (Ln) Thil@nizs | Bn )-\n\n7 Pon \u20141 (21 j=l Pni (@ni41)\n\n(18.59)\nWe now have means of generating samples from the joint proposal distribution\n\nq over the extended sample via a sampling scheme given above, with the joint\ndistribution given by:\n\n(Bq yy +++) Vyn1yB1) = Po(Lm) Ty (Lye | Vy.) +--+ Tr (#1 | Lm\u2014r)- (18.60)\n\nWe have a joint distribution on the extended space given by equation 18.59. Taking\nQ(@m 5 +++, Ln, 1,1) as the proposal distribution on the extended state space from\nwhich we will draw samples, it remains to determine the importance weights:\n\n~ ~ k ~ k)\\ ~ k\nsph) Pm mr @) PY?) Pm (whe) Bunn\u2019)\n\nLe (18.61)\nUns Fnnr\u00ae1) \u2014 Py, (eh) pall) po(a\\!)\n\nThese weights are the same as proposed for AIS. Thus we can interpret AIS as\nsimple importance sampling applied to an extended state and its validity follows\nimmediately from the validity of importance sampling.\n\nAnnealed importance sampling (AIS) was first discovered by Jarzynski (1997)\nand then again, independently, by Neal (2001). It is currently the most common\nway of estimating the partition function for undirected probabilistic models. The\nreasons for this may have more to do with the publication of an influential paper\n(Salakhutdinov and Murray, 2008) describing its application to estimating the\npartition function of restricted Boltzmann machines and deep belief networks than\nwith any inherent advantage the method has over the other method described\nbelow.\n\nA discussion of the properties of the AIS estimator (e.g.. its variance and\nefficiency) can be found in Neal (2001).\n\n18.7.2 Bridge Sampling\n\nBridge sampling Bennett (1976) is another method that, like AIS, addresses the\nshortcomings of importance sampling. Rather than chaining together a series of\n\n628\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nintermediate distributions, bridge sampling relies on a single distribution p,, known\nas the bridge, to interpolate between a distribution with known partition function,\npo, and a distribution p; for which we are trying to estimate the partition function\nZi.\n\nBridge sampling estimates the ratio Z,/Z as the ratio of the expected impor-\ntance weights between pp and p, and between p; and p,:\n\nK . 7 (k) K . 7 (k)\nZ1 ~ Dx (x6 ) Dx (xy )\nZo > Fo ( (k) > ~ 7 (k) (18.62)\n\na1 Do(ag-)\n\nIf the bridge distribution p, is chosen carefully to have a large overlap of support\nwith both po and p;, then bridge sampling can allow the distance between two\ndistributions (or more formally, Dx (po||p1)) to be much larger than with standard\nimportance sampling.\n\nIt can be shown that the optimal bridging distribution is given by pe? \u00a2) (x) \u00ab\n\nBo(x)pi (w)\nrpo(@)+p1 (x)\nas it would seem to require the very quantity we are trying to estimate, Z1/Zo.\n\nHowever, it is possible to start with a coarse estimate of r and use the resulting\nbridge distribution to refine our estimate iteratively (Neal, 2005). That is, we\niteratively re-estimate the ratio and use each iteration to update the value of r.\n\nwhere r = Z,/Zo. At first, this appears to be an unworkable solution\n\nLinked importance sampling Both AIS and bridge sampling have their ad-\nvantages. If Dkr (pol|pi) is not too large (because 7 and pj, are sufficiently close)\nbridge sampling can be a more effective means of estimating the ratio of partition\nfunctions than AIS. If, however, the two distributions are too far apart for a single\ndistribution p. to bridge the gap then one can at least use AIS with potentially\nmany intermediate distributions to span the distance between po and pi. Neal\n(2005) showed how his linked importance sampling method leveraged the power of\nthe bridge sampling strategy to bridge the intermediate distributions used in AIS\nto significantly improve the overall partition function estimates.\n\nEstimating the partition function while training While AIS has become\naccepted as the standard method for estimating the partition function for many\nundirected models, it is sufficiently computationally intensive that it remains\ninfeasible to use during training. However, alternative strategies that have been\nexplored to maintain an estimate of the partition function throughout training\n\nUsing a combination of bridge sampling, short-chain AIS and parallel tempering,\nDesjardins et al. (2011) devised a scheme to track the partition function of an\n\n629\n", "CHAPTER 18. CONFRONTING THE PARTITION FUNCTION\n\nRBM throughout the training process. The strategy is based on the maintenance of\nindependent estimates of the partition functions of the RBM at every temperature\noperating in the parallel tempering scheme. The authors combined bridge sampling\nestimates of the ratios of partition functions of neighboring chains (i.e. from\nparallel tempering) with AIS estimates across time to come up with a low variance\nestimate of the partition functions at every iteration of learning.\n\nThe tools described in this chapter provide many different ways of overcoming\nthe problem of intractable partition functions, but there can be several other\ndifficulties involved in training and using generative models. Foremost among these\nis the problem of intractable inference, which we confront next.\n\n630\n", "Chapter 19\n\nApproximate Inference\n\nMany probabilistic models are difficult to train because it is difficult to perform\ninference in them. In the context of deep learning, we usually have a set of visible\nvariables v and a set of latent variables h. The challenge of inference usually\nrefers to the difficult problem of computing p(h | v) or taking expectations with\nrespect to it. Such operations are often necessary for tasks like maximum likelihood\nlearning.\n\nMany simple graphical models with only one hidden layer, such as restricted\nBoltzmann machines and probabilistic PCA, are defined in a way that makes\ninference operations like computing p(h | v), or taking expectations with respect\nto it, simple. Unfortunately, most graphical models with multiple layers of hidden\nvariables have intractable posterior distributions. Exact inference requires an\nexponential amount of time in these models. Even some models with only a single\nlayer, such as sparse coding, have this problem.\n\nIn this chapter, we introduce several of the techniques for confronting these\nintractable inference problems. Later, in chapter 20, we will describe how to use\nthese techniques to train probabilistic models that would otherwise be intractable,\nsuch as deep belief networks and deep Boltzmann machines.\n\nIntractable inference problems in deep learning usually arise from interactions\nbetween latent variables in a structured graphical model. See figure 19.1 for some\nexamples. These interactions may be due to direct interactions in undirected\nmodels or \u201cexplaining away\u201d interactions between mutual ancestors of the same\nvisible unit in directed models.\n\n631\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nCVO\n\nFigure 19.1: Intractable inference problems in deep learning are usually the result of\ninteractions between latent variables in a structured graphical model. These can be\ndue to edges directly connecting one latent variable to another, or due to longer paths\nthat are activated when the child of a V-structure is observed. (Left)A semi-restricted\nBoltzmann machine (Osindero and Hinton, 2008) with connections between hidden\nunits. These direct connections between latent variables make the posterior distribution\nintractable due to large cliques of latent variables. (Center)A deep Boltzmann machine,\norganized into layers of variables without intra-layer connections, still has an intractable\nposterior distribution due to the connections between layers. (Right)This directed model\nhas interactions between latent variables when the visible variables are observed, because\nevery two latent variables are co-parents. Some probabilistic models are able to provide\ntractable inference over the latent variables despite having one of the graph structures\ndepicted above. This is possible if the conditional probability distributions are chosen to\nintroduce additional independences beyond those described by the graph. For example,\nprobabilistic PCA has the graph structure shown in the right, yet still has simple inference\ndue to special properties of the specific conditional distributions it uses (linear-Gaussian\n\nconditionals with mutually orthogonal basis vectors).\n\n632\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\n19.1 Inference as Optimization\n\nMany approaches to confronting the problem of difficult inference make use of\nthe observation that exact inference can be described as an optimization problem.\nApproximate inference algorithms may then be derived by approximating the\nunderlying optimization problem.\n\nTo construct the optimization problem, assume we have a probabilistic model\nconsisting of observed variables v and latent variables h. We would like to compute\nthe log probability of the observed data, log p(v; 0). Sometimes it is too difficult\nto compute log p(v; @) if it is costly to marginalize out h. Instead, we can compute\na lower bound L(v, 8, q) on log p(v; 8). This bound is called the evidence lower\nbound (ELBO). Another commonly used name for this lower bound is the negative\nvariational free energy. Specifically, the evidence lower bound is defined to be\n\nL(v, 0, q) = log p(v; @) \u2014 Dx (q(h | v)||p(h | v; 8) (19.1)\n\nwhere q is an arbitrary probability distribution over h.\n\nBecause the difference between log p(v) and L(v,6,q) is given by the KL\ndivergence and because the KL divergence is always non-negative, we can see that\n\u00a3 always has at most the same value as the desired log probability. The two are\nequal if and only if q is the same distribution as p(h | v).\n\nSurprisingly, \u00a3 can be considerably easier to compute for some distributions q.\nSimple algebra shows that we can rearrange \u00a3 into a much more convenient form:\n\nL(v, 6, q) =log p(v; 8) \u2014 Dxx(q(h | v)||p(h | v; 8) 19.2)\nq(h | v)\n= log p(v; 8) \u2014 Epn~, lo 19.3\ng p(v; 8) h~q So(h |v) )\nqh | v\n= log p(v; 8) \u2014 Eyn, log Uh |e) 19.4)\nP(v;0)\n= log p(v; 8) \u2014 Ey, [log g(h | v) \u2014 log p(h, v; 8) + log p(v; @)] (19.5)\n= \u2014 Ep.g[logg(h | v) \u2014 log p(h, v; @)]. 19.6)\nThis yields the more canonical definition of the evidence lower bound,\nL(v, 8, q) = h~g [log p(h, v)| + H(q). 19.7)\n\nFor an appropriate choice of qg, L is tractable to compute. For any choice\nof g, \u00a3 provides a lower bound on the likelihood. For q(h | v) that are better\n\n633\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\napproximations of p(h | v), the lower bound \u00a3 will be tighter, in other words,\ncloser to log p(v). When q(h | v) = p(h | v), the approximation is perfect, and\nL(v, 6, q) = log p(v; 8).\n\nWe can thus think of inference as the procedure for finding the g that maximizes\nL. Exact inference maximizes \u00a3 perfectly by searching over a family of functions\nq that includes p(h | v). Throughout this chapter, we will show how to derive\ndifferent forms of approximate inference by using approximate optimization to\nfind g. We can make the optimization procedure less expensive but approximate\nby restricting the family of distributions q the optimization is allowed to search\nover or by using an imperfect optimization procedure that may not completely\nmaximize \u00a3 but merely increase it by a significant amount.\n\nNo matter what choice of q we use, \u00a3 is a lower bound. We can get tighter\nor looser bounds that are cheaper or more expensive to compute depending on\nhow we choose to approach this optimization problem. We can obtain a poorly\nmatched q but reduce the computational cost by using an imperfect optimization\nprocedure, or by using a perfect optimization procedure over a restricted family of\nq distributions.\n\n19.2 Expectation Maximization\n\nThe first algorithm we introduce based on maximizing a lower bound CL is the\nexpectation maximization (EM) algorithm, a popular training algorithm for\nmodels with latent variables. We describe here a view on the EM algorithm\ndeveloped by Neal and Hinton (1999). Unlike most of the other algorithms we\ndescribe in this chapter, EM is not an approach to approximate inference, but\nrather an approach to learning with an approximate posterior.\n\nThe EM algorithm consists of alternating between two steps until convergence:\n\nThe E-step (Expectation step): Let @\u00a9 denote the value of the parameters\nat the beginning of the step. Set q(h\u00ae | v) = p(h\u00ae | v;@) for all\nindices \u00e9 of the training examples v\u201c) we want to train on (both batch and\nminibatch variants are valid). By this we mean q is defined in terms of the\ncurrent parameter value of 6\u00b0): if we vary @ then p(h | v;@) will change but\nq(h | v) will remain equal to p(h | v; 0).\n\ne The M-step (Maximization step): Completely or partially maximize\n\nDF! ,6,q) (19.8)\n\n634\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nwith respect to @ using your optimization algorithm of choice.\n\nThis can be viewed as a coordinate ascent algorithm to maximize \u00a3. On one\nstep, we maximize \u00a3 with respect to q, and on the other, we maximize \u00a3 with\nrespect to 0.\n\nStochastic gradient ascent on latent variable models can be seen as a special\ncase of the EM algorithm where the M step consists of taking a single gradient\nstep. Other variants of the EM algorithm can make much larger steps. For some\nmodel families, the M step can even be performed analytically, jumping all the\nway to the optimal solution for @ given the current q.\n\nEven though the E-step involves exact inference, we can think of the EM\nalgorithm as using approximate inference in some sense. Specifically, the M-step\nassumes that the same value of q can be used for all values of 8. This will introduce\na gap between \u00a3 and the true log p(v) as the M-step moves further and further\naway from the value 9 used in the E-step. Fortunately, the E-step reduces the\ngap to zero again as we enter the loop for the next time.\n\nThe EM algorithm contains a few different insights. First, there is the basic\nstructure of the learning process, in which we update the model parameters to\nimprove the likelihood of a completed dataset, where all missing variables have\ntheir values provided by an estimate of the posterior distribution. This particular\ninsight is not unique to the EM algorithm. For example, using gradient descent to\nmaximize the log-likelihood also has this same property; the log-likelihood gradient\ncomputations require taking expectations with respect to the posterior distribution\nover the hidden units. Another key insight in the EM algorithm is that we can\ncontinue to use one value of q even after we have moved to a different value of 0.\nThis particular insight is used throughout classical machine learning to derive large\nM-step updates. In the context of deep learning, most models are too complex\nto admit a tractable solution for an optimal large M-step update, so this second\ninsight which is more unique to the EM algorithm is rarely used.\n\n19.3. MAP Inference and Sparse Coding\n\nWe usually use the term inference to refer to computing the probability distribution\nover one set of variables given another. When training probabilistic models with\nlatent variables, we are usually interested in computing p(h | v). An alternative\nform of inference is to compute the single most likely value of the missing variables,\nrather than to infer the entire distribution over their possible values. In the context\n\n635\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nof latent variable models, this means computing\n\nh* = argmax p(h | v). (19.9)\nh\n\nThis is known as maximum a posteriori inference, abbreviated MAP inference.\n\nMAP inference is usually not thought of as approximate inference\u2014it does\ncompute the exact most likely value of h*. However, if we wish to develop a\nlearning process based on maximizing L(v,h,q), then it is helpful to think of MAP\ninference as a procedure that provides a value of q In this sense, we can think of\nMAP inference as approximate inference, because it does not provide the optimal\nq.\n\nRecall from section 19.1 that exact inference consists of maximizing\n\nL(v,8, q) = Envg [log p(h, v)| + H(q) (19.10)\n\nwith respect to q over an unrestricted family of probability distributions, using\nan exact optimization algorithm. We can derive MAP inference as a form of\napproximate inference by restricting the family of distributions gq may be drawn\nfrom. Specifically, we require q to take on a Dirac distribution:\n\ng(h| v) =4(h\u2014 pw). (19.11)\n\nThis means that we can now control q entirely via w. Dropping terms of \u00a3 that\ndo not vary with p, we are left with the optimization problem\n\np* = arg max log p(h = p, v), (19.12)\nbw\n\nwhich is equivalent to the MAP inference problem\n\nh* = arg maxp(h | v). (19.13)\nh\n\nWe can thus justify a learning procedure similar to EM, in which we alternate\nbetween performing MAP inference to infer h* and then update @ to increase\nlog p(h*,v). As with EM, this is a form of coordinate ascent on \u00a3, where we\nalternate between using inference to optimize \u00a3 with respect to q and using\nparameter updates to optimize \u00a3 with respect to 8. The procedure as a whole can\nbe justified by the fact that L is a lower bound on log p(v). In the case of MAP\ninference, this justification is rather vacuous, because the bound is infinitely loose,\ndue to the Dirac distribution\u2019s differential entropy of negative infinity. However,\nadding noise to would make the bound meaningful again.\n\n636\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nMAP inference is commonly used in deep learning as both a feature extractor\nand a learning mechanism. It is primarily used for sparse coding models.\n\nRecall from section 13.4 that sparse coding is a linear factor model that imposes\na sparsity-inducing prior on its hidden units. A common choice is a factorial Laplace\nprior, with\n\np(ha) = AeA, (19.14)\n\nThe visible units are then generated by performing a linear transformation and\nadding noise:\n\np(a | h) =N(v; Wh + 6, -'D). (19.15)\n\nComputing or even representing p(h | v) is difficult. Every pair of variables h;\nand hj are both parents of v. This means that when v is observed, the graphical\nmodel contains an active path connecting h; and hj. All of the hidden units thus\nparticipate in one massive clique in p(h | v). If the model were Gaussian then\nthese interactions could be modeled efficiently via the covariance matrix, but the\nsparse prior makes these interactions non-Gaussian.\n\nBecause p(h | v) is intractable, so is the computation of the log-likelihood and\nits gradient. We thus cannot use exact maximum likelihood learning. Instead, we\nuse MAP inference and learn the parameters by maximizing the ELBO defined by\nthe Dirac distribution around the MAP estimate of h.\n\nIf we concatenate all of the h vectors in the training set into a matrix H, and\nconcatenate all of the v vectors into a matrix V, then the sparse coding learning\nprocess consists of minimizing\n\n2\n\nt\n\nIHW) = 37 \\His| +0 (V\u2014 HW )., (19.16)\nij ij\n\nMost applications of sparse coding also involve weight decay or a constraint on\n\nthe norms of the columns of W, in order to prevent the pathological solution with\n\nextremely small H and large W.\n\nWe can minimize J by alternating between minimization with respect to H\nand minimization with respect to W. Both sub-problems are convex. In fact,\nthe minimization with respect to W is just a linear regression problem. However,\nminimization of J with respect to both arguments is usually not a convex problem.\n\nMinimization with respect to H requires specialized algorithms such as the\nfeature-sign search algorithm (Lee et al., 2007).\n\n637\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\n19.4 Variational Inference and Learning\n\nWe have seen how the evidence lower bound L(v,6,q) is a lower bound on\nlog p(v;@), how inference can be viewed as maximizing L with respect to q, and\nhow learning can be viewed as maximizing \u00a3 with respect to 8. We have seen\nthat the EM algorithm allows us to make large learning steps with a fixed q and\nthat learning algorithms based on MAP inference allow us to learn using a point\nestimate of p(h | v) rather than inferring the entire distribution. Now we develop\nthe more general approach to variational learning.\n\nThe core idea behind variational learning is that we can maximize \u00a3 over a\nrestricted family of distributions g. This family should be chosen so that it is easy\nto compute E, log p(h,v). A typical way to do this is to introduce assumptions\nabout how q factorizes.\n\nA common approach to variational learning is to impose the restriction that q\nis a factorial distribution:\n\ng(h |v) = TT] ahi |\u00bb). (19.17)\n\nThis is called the mean field approach. More generally, we can impose any graphi-\ncal model structure we choose on q, to flexibly determine how many interactions we\nwant our approximation to capture. This fully general graphical model approach\nis called structured variational inference (Saul and Jordan, 1996).\n\nThe beauty of the variational approach is that we do not need to specify a\nspecific parametric form for g. We specify how it should factorize, but then the\noptimization problem determines the optimal probability distribution within those\nfactorization constraints. For discrete latent variables, this just means that we\nuse traditional optimization techniques to optimize a finite number of variables\ndescribing the q distribution. For continuous latent variables, this means that we\nuse a branch of mathematics called calculus of variations to perform optimization\nover a space of functions, and actually determine which function should be used\nto represent g. Calculus of variations is the origin of the names \u201cvariational\nlearning\u201d and \u201cvariational inference,\u201d though these names apply even when the\nlatent variables are discrete and calculus of variations is not needed. In the case\nof continuous latent variables, calculus of variations is a powerful technique that\nremoves much of the responsibility from the human designer of the model, who\nnow must specify only how q factorizes, rather than needing to guess how to design\na specific q that can accurately approximate the posterior.\n\nBecause L(v,0,q) is defined to be log p(v;6) \u2014 Dx @(h | v)||p(h | v;)), we\ncan think of maximizing \u00a3 with respect to g as minimizing Dx, (q(h | v)||p(h | v)).\n\n638\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nIn this sense, we are fitting q to p. However, we are doing so with the opposite\ndirection of the KL divergence than we are used to using for fitting an approximation.\nWhen we use maximum likelihood learning to fit a model to data, we minimize\nDx (Paata||Pmodel). As illustrated in figure 3.6, this means that maximum likelihood\nencourages the model to have high probability everywhere that the data has high\nprobability, while our optimization-based inference procedure encourages q to\nhave low probability everywhere the true posterior has low probability. Both\ndirections of the KL divergence can have desirable and undesirable properties. The\nchoice of which to use depends on which properties are the highest priority for\neach application. In the case of the inference optimization problem, we choose\nto use Dxi(q(h | v)||p(h | v)) for computational reasons. Specifically, computing\nDxx(q(h | v) ||p(h | v)) involves evaluating expectations with respect to g, so by\ndesigning q to be simple, we can simplify the required expectations. The opposite\ndirection of the KL divergence would require computing expectations with respect\nto the true posterior. Because the form of the true posterior is determined by\nthe choice of model, we cannot design a reduced-cost approach to computing\nD(p(h | v)|lq(h | v)) exactly.\n\n19.4.1 Discrete Latent Variables\n\nVariational inference with discrete latent variables is relatively straightforward.\nWe define a distribution g, typically one where each factor of q\u00a2 is just defined\nby a lookup table over discrete states. In the simplest case, h is binary and we\nmake the mean field assumption that q factorizes over each individual h;. In this\ncase we can parametrize q with a vector h whose entries are probabilities. Then\nq(hi =1 |v) = hi.\n\nAfter determining how to represent q, we simply optimize its parameters. In\nthe case of discrete latent variables, this is just a standard optimization problem.\nIn principle the selection of g could be done with any optimization algorithm, such\nas gradient descent.\n\nBecause this optimization must occur in the inner loop of a learning algorithm,\nit must be very fast. To achieve this speed, we typically use special optimization\nalgorithms that are designed to solve comparatively small and simple problems in\nvery few iterations. A popular choice is to iterate fixed point equations, in other\nwords, to solve\n\nfa)\nOh;\n\nL=0 (19.18)\nfor hi. We repeatedly update different elements of A until we satisfy a convergence\n\n639\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\ncriterion.\n\nTo make this more concrete, we show how to apply variational inference to the\nbinary sparse coding model (we present here the model developed by Henniges\net al. (2010) but demonstrate traditional, generic mean field applied to the model,\nwhile they introduce a specialized algorithm). This derivation goes into considerable\nmathematical detail and is intended for the reader who wishes to fully resolve\nany ambiguity in the high-level conceptual description of variational inference and\nlearning we have presented so far. Readers who do not plan to derive or implement\nvariational learning algorithms may safely skip to the next section without missing\nany new high-level concepts. Readers who proceed with the binary sparse coding\nexample are encouraged to review the list of useful properties of functions that\ncommonly arise in probabilistic models in section 3.10. We use these properties\nliberally throughout the following derivations without highlighting exactly where\nwe use each one.\n\nIn the binary sparse coding model, the input v \u20ac R\u201d is generated from the\nmodel by adding Gaussian noise to the sum of m different components which\ncan each be present or absent. Each component is switched on or off by the\ncorresponding hidden unit in h \u20ac {0, 1}\u2122:\n\np(h, = 1) = o(bi) (19.19)\n\np(v | h) = N(v; Wh, 8\") (19.20)\n\nwhere b is a learnable set of biases, W is a learnable weight matrix, and Bis a\nlearnable, diagonal precision matrix.\n\nTraining this model with maximum likelihood requires taking the derivative\n\nwith respect to the parameters. Consider the derivative with respect to one of the\nbiases:\n\n2 log pte) 19.21\nart) 19.22\n_ cre 19.23\n\n_ ae Vaplh)pl | h) 19.24\n\np(v)\n\n640\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nFigure 19.2: The graph structure of a binary sparse coding model with four hidden units.\n(Left)The graph structure of p(h, v). Note that the edges are directed, and that every two\nhidden units are co-parents of every visible unit. (Right)/The graph structure of p(h | v).\nIn order to account for the active paths between co-parents, the posterior distribution\nneeds an edge between all of the hidden units.\n\nDave | b) gp, ph)\n\nrv) : (19.25)\n2)\n_ op, P(R)\n= Daplh | hy (19.26)\n=Byyniey zy log p(h). (19.27)\n\nThis requires computing expectations with respect to p(h | v). Unfortunately,\np(h | v) is a complicated distribution. See figure 19.2 for the graph structure of\np(h,v) and p(h | v). The posterior distribution corresponds to the complete graph\nover the hidden units, so variable elimination algorithms do not help us to compute\nthe required expectations any faster than brute force.\n\nWe can resolve this difficulty by using variational inference and variational\nlearning instead.\n\nWe can make a mean field approximation:\n\nq(h|v) = II q(hi | v). (19.28)\n\nThe latent variables of the binary sparse coding model are binary, so to represent\na factorial q we simply need to model m Bernoulli distributions q(h; | v). A natural\nway to represent the means of the Bernoulli distributions is with a vector h of\nprobabilities, with g(hi = 1 | v) = hy. We impose a restriction that h; is never\nequal to 0 or to 1, in order to avoid errors when computing, for example, log hy.\n\nWe will see that the variational inference equations never assign 0 or 1 to hi\n\n641\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nanalytically. However, in a software implementation, machine rounding error could\nresult in 0 or 1 values. In software, we may wish to implement binary sparse\ncoding using an unrestricted vector of variational parameters z and obtain h via\nthe relation h = a(z). We can thus safely compute log hy ona computer by using\nthe identity log o(a%) = \u2014\u00a2(\u2014z) relating the sigmoid and the softplus.\n\nTo begin our derivation of variational learning in the binary sparse coding\nmodel, we show that the use of this mean field approximation makes learning\ntractable.\n\nThe evidence lower bound is given by\n\nL(v, 6,q) 19.29)\n=By [log p(h,v)] + H(a) 19.30\n=En~qllog p(h) + log p(v | h) \u2014 log q(h | v)| 19.31\n=En~q I log p(hi) + S> log p(vi| kh) \u2014 SS log q(hi | \u00bb| 19.32\n\ni=l i=l i=l\n=\" [Fi(log o(b;) \u2014 log h;) + (1 \u2014 hy) (log o(\u2014b,) \u2014 log(1 \u2014 h)| 19.33\n\n+ Enng > logy exp (Fe - w.n?)] 19.34\n=\" [Fi(log o(b;) \u2014 log hi) + (1 \u2014 hy) (log o(\u2014b,) \u2014 log(1 \u2014 h ))| 19.35\n\ni=l\n\n\u2014 B . . _\n+5 DE floss Bi | of 20Wisk + DT | Wihj + D | Wig Wiwhjhe\ni=1 j kAj\n(19.36)\n\nWhile these equations are somewhat unappealing aesthetically, they show that \u00a3\ncan be expressed in a small number of simple arithmetic operations. The evidence\nlower bound C is therefore tractable. We can use \u00a3 as a replacement for the\nintractable log-likelihood.\n\nIn principle, we could simply run gradient ascent on both v and h and this\nwould make a perfectly acceptable combined inference and training algorithm.\nUsually, however, we do not do this, for two reasons. First, this would require\nstoring h for each v. We typically prefer algorithms that do not require per-\nexample memory. It is difficult to scale learning algorithms to billions of examples\nif we must remember a dynamically updated vector associated with each example.\n\n642\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nSecond, we would like to be able to extract the features h very quickly, in order to\nrecognize the content of v. In a realistic deployed setting, we would need to be\nable to compute A in real time.\n\nFor both these reasons, we typically do not use gradient descent to compute\nthe mean field parameters h. Instead, we rapidly estimate them with fixed point\nequations.\n\nThe idea behind fixed point equations is that we are seeking a local maximum\nwith respect to h, where Vanl(v, 0, h) = 0. We cannot efficiently solve this\nequation with respect to all of A simultaneously. However, we can solve for a single\nvariable:\n\nfa) ~\n\u2014\u2014L(v,0,h) = 0. 19.37\nah (v, 8, h) (19.37)\n\nWe can then iteratively apply the solution to the equation for 7 = 1,...,m,\nand repeat the cycle until we satisfy a converge criterion. Common convergence\ncriteria include stopping when a full cycle of updates does not improve \u00a3 by more\nthan some tolerance amount, or when the cycle does not change h by more than\nsome amount.\n\nIterating mean field fixed point equations is a general technique that can\nprovide fast variational inference in a broad variety of models. To make this more\nconcrete, we show how to derive the updates for the binary sparse coding model in\nparticular.\n\nFirst, we must write an expression for the derivatives with respect to hy. To\ndo so, we substitute equation 19.36 into the left side of equation 19.37:\n\n0 ~\n\u2014= Lv, 6,h 19.38\nFy Meaainiie (19.38)\n\n1\n1S 5\n43 fad -a v5 \u2014 20jWih+S > | Weehe + S Wi aWy hehe |\nk\n)\n)\n\nj=l Ifk\n(19.40\n=log o(bi) \u2014 log hi \u2014 1 + log(1 \u2014 hi) + 1 \u2014 log o(\u2014b:) (19.41\n. 1 ;\n+ S> By | Wie \u2014 3 Wii - S> Wi Wily (19.42)\nj=l ki\n\n643\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nA ~ 1 nN\n=b; \u2014 log hj + log(1 \u2014 hy) + v 'BW.; \u20145W.i6W., \u2014S2 W5 BW. jhj. (19.43)\ni#i\n\nTo apply the fixed point update inference rule, we solve for the h; that sets\nequation 19.43 to 0:\n\nhy =o} b+ vu! BW. - 5W.laW.; \u2014 S> W)|,BW.h; . (19.44)\njft\n\nAt this point, we can see that there is a close connection between recurrent\nneural networks and inference in graphical models. Specifically, the mean field\nfixed point equations defined a recurrent neural network. The task of this network\nis to perform inference. We have described how to derive this network from a\nmodel description, but it is also possible to train the inference network directly.\n\nSeveral ideas based on this theme are described in chapter 20.\n\nIn the case of binary sparse coding, we can see that the recurrent network\nconnection specified by equation 19.44 consists of repeatedly updating the hidden\nunits based on the changing values of the neighboring hidden units. The input\nalways sends a fixed message of v' 8W to the hidden units, but the hidden units\nconstantly update the message they send to each other. Specifically, two units hi\nand hj inhibit each other when their weight vectors are aligned. This is a form of\ncompetition\u2014between two hidden units that both explain the input, only the one\nthat explains the input best will be allowed to remain active. This competition is\nthe mean field approximation\u2019s attempt to capture the explaining away interactions\nin the binary sparse coding posterior. The explaining away effect actually should\ncause a multi-modal posterior, so that if we draw samples from the posterior,\nsome samples will have one unit active, other samples will have the other unit\nactive, but very few samples have both active. Unfortunately, explaining away\ninteractions cannot be modeled by the factorial q used for mean field, so the mean\nfield approximation is forced to choose one mode to model. This is an instance of\nthe behavior illustrated in figure 3.6.\n\nWe can rewrite equation 19.44 into an equivalent form that reveals some further\ninsights:\nt\n- * 1\nhy=o | bit | v\u2014S Waghy | BW. 5 Wi BW. ; (19.45)\ni#i\n\na\nrather than v. We can thus think of unit 7 as attempting to encode the residual\n\nIn this reformulation, we see the input at each step as consisting of v\u2014)> j#i W., ih;\n\n644\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nerror in v given the code of the other units. We can thus think of sparse coding as\nan iterative autoencoder, that repeatedly encodes and decodes its input, attempting\nto fix mistakes in the reconstruction after each iteration.\n\nIn this example, we have derived an update rule that updates a single unit at\na time. It would be advantageous to be able to update more units simultaneously.\nSome graphical models, such as deep Boltzmann machines, are structured in such a\nway that we can solve for many entries of A simultancously. Unfortunately, binary\nsparse coding does not admit such block updates. Instead, we can use a heuristic\ntechnique called damping to perform block updates. In the damping approach,\nwe solve for the individually optimal values of every element of h, then move all of\nthe values in a small step in that direction. This approach is no longer guaranteed\nto increase \u00a3 at each step, but works well in practice for many models. See Koller\nand Friedman (2009) for more information about choosing the degree of synchrony\nand damping strategies in message passing algorithms.\n\n19.4.2 Calculus of Variations\n\nBefore continuing with our presentation of variational learning, we must briefly\nintroduce an important set of mathematical tools used in variational learning:\ncalculus of variations.\n\nMany machine learning techniques are based on minimizing a function J(0) by\nfinding the input vector 8 \u20ac R\u201d for which it takes on its minimal value. This can\nbe accomplished with multivariate calculus and linear algebra, by solving for the\ncritical points where VgJ(8) = 0. In some cases, we actually want to solve for a\nfunction f(a), such as when we want to find the probability density function over\nsome random variable. This is what calculus of variations enables us to do.\n\nA function of a function f is known as a functional J[f]. Much as we\ncan take partial derivatives of a function with respect to elements of its vector-\nvalued argument, we can take functional derivatives, also known as variational\nderivatives, of a functional J[ f] with respect to individual values of the function\nf(x) at any specific value of x. The functional derivative of the functional J with\nrespect to the value of the function f at point x is denoted soy .\n\nA complete formal development of functional derivatives is beyond the scope of\nthis book. For our purposes, it is sufficient to state that for differentiable functions\nf(x) and differentiable functions g(y, #) with continuous derivatives, that\n\niil | / a (F(a), \u00ab) dae = False) w). (19.46)\n\n645\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nTo gain some intuition for this identity, one can think of f(a) as being a vector\nwith uncountably many elements, indexed by a real vector x. In this (somewhat\nincomplete view), the identity providing the functional derivatives is the same as\nwe would obtain for a vector 8 \u20ac R\u201d indexed by positive integers:\n\n0 a)\na0; >. 9085.3) = 5 9(6%:,%)- (19.47)\nj a\n\nMany results in other machine learning publications are presented using the more\ngeneral Euler-Lagrange equation which allows g to depend on the derivatives\nof f as well as the value of f, but we do not need this fully general form for the\nresults presented in this book.\n\nTo optimize a function with respect to a vector, we take the gradient of the\nfunction with respect to the vector and solve for the point where every element of\nthe gradient is equal to zero. Likewise, we can optimize a functional by solving for\nthe function where the functional derivative at every point is equal to zero.\n\nAs an example of how this process works, consider the problem of finding the\nprobability distribution function over x \u20ac R that has maximal differential entropy.\nRecall that the entropy of a probability distribution p(x) is defined as\n\nHp] = \u2014E, log p(z). (19.48)\n\nFor continuous values, the expectation is an integral:\nH{p| =- [ o) log p(x)dx. (19.49)\n\nWe cannot simply maximize H[p] with respect to the function p(x), because the\nresult might not be a probability distribution. Instead, we need to use Lagrange\nmultipliers to add a constraint that p(x) integrates to 1. Also, the entropy\nincreases without bound as the variance increases. This makes the question of\nwhich distribution has the greatest entropy uninteresting. Instead, we ask which\ndistribution has maximal entropy for fixed variance o?. Finally, the problem\nis underdetermined because the distribution can be shifted arbitrarily without\nchanging the entropy. To impose a unique solution, we add a constraint that the\nmean of the distribution be yz The Lagrangian functional for this optimization\nproblem is\n\ncin) =m ( f v(a)ae\u2014 1) +22 (Bla ~ 2) +a (El(e ~ 1)*]~ ) +H} (19.50)\n\n646\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\n= / Q1p(2) + A2p(x)x + Asp(#)(a \u2014 pt)? \u2014 p(x) log p(\u00ab)) da \u2014  \u2014 pA2 \u2014 o7A3.\n, (19.51)\n\nTo minimize the Lagrangian with respect to p, we set the functional derivatives\nequal to 0:\n\n6\n\nVa,\ndp(x)\n\nL= dy + ra + A3(a \u2014 pw)? \u2014 1 \u2014 log p(x) = 0. (19.52)\n\nThis condition now tells us the functional form of p(a). By algebraically\nre-arranging the equation, we obtain\n\np(x) = exp(Ar + Agr + A3(a \u2014 ps)? \u2014 1). (19.53)\n\nWe never assumed directly that p(x) would take this functional form; we\nobtained the expression itself by analytically minimizing a functional. To finish\nthe minimization problem, we must choose the A values to ensure that all of our\nconstraints are satisfied. We are free to choose any X values, because the gradient\nof the Lagrangian with respect to the X variables is zero so long as the constraints\nare satisfied. To satisfy all of the constraints, we may set \\; = 1 \u2014 logoV2r,\nA2 = 0, and A3 = \u20145h to obtain\n\np(x) =N (a; 1,07). (19.54)\n\nThis is one reason for using the normal distribution when we do not know the\ntrue distribution. Because the normal distribution has the maximum entropy, we\nimpose the least possible amount of structure by making this assumption.\n\nWhile examining the critical points of the Lagrangian functional for the entropy,\nwe found only one critical point, corresponding to maximizing the entropy for\nfixed variance. What about the probability distribution function that minimizes\nthe entropy? Why did we not find a second critical point corresponding to the\nminimum? The reason is that there is no specific function that achieves minimal\nentropy. As functions place more probability density on the two points \u00a9 = 4+oa\nand x = 4 \u2014o, and place less probability density on all other values of \u00ab, they lose\nentropy while maintaining the desired variance. However, any function placing\nexactly zero mass on all but two points does not integrate to one, and is not a\nvalid probability distribution. There thus is no single minimal entropy probability\ndistribution function, much as there is no single minimal positive real number.\nInstead, we can say that there is a sequence of probability distributions converging\ntoward putting mass only on these two points. This degenerate scenario may be\n\n647\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\ndescribed as a mixture of Dirac distributions. Because Dirac distributions are\nnot described by a single probability distribution function, no Dirac or mixture of\nDirac distribution corresponds to a single specific point in function space. These\ndistributions are thus invisible to our method of solving for a specific point where\nthe functional derivatives are zero. This is a limitation of the method. Distributions\nsuch as the Dirac must be found by other methods, such as guessing the solution\nand then proving that it is correct.\n\n19.4.3 Continuous Latent Variables\n\nWhen our graphical model contains continuous latent variables, we may still\nperform variational inference and learning by maximizing \u00a3. However, we must\nnow use calculus of variations when maximizing \u00a3 with respect to q(h | v).\n\nIn most cases, practitioners need not solve any calculus of variations problems\nthemselves. Instead, there is a general equation for the mean field fixed point\nupdates. If we make the mean field approximation\n\nqh |v) = II q(hi | v), (19.55)\n\nand fix q(h; | v) for all 7 A i, then the optimal gq(h; | v) may be obtained by\nnormalizing the unnormalized distribution\n\nG(hi | v) = exp (En_,~q(h_;|v) log p(v, h)) (19.56)\n\nso long as p does not assign 0 probability to any joint configuration of variables.\nCarrying out the expectation inside the equation will yield the correct functional\nform of q(h; | v). It is only necessary to derive functional forms of q directly using\ncalculus of variations if one wishes to develop a new form of variational learning;\nequation 19.56 yields the mean field approximation for any probabilistic model.\n\nEquation 19.56 is a fixed point equation, designed to be iteratively applied for\neach value of 7 repeatedly until convergence. However, it also tells us more than\nthat. It tells us the functional form that the optimal solution will take, whether\nwe arrive there by fixed point equations or not. This means we can take the\nfunctional form from that equation but regard some of the values that appear in it\nas parameters, that we can optimize with any optimization algorithm we like.\n\nAs an example, consider a very simple probabilistic model, with latent variables\nh \u20ac R& and just one visible variable, v. Suppose that p(h) = N(h;0,D) and\np(v | h) = N(v;w'h;1). We could actually simplify this model by integrating\nout h; the result is just a Gaussian distribution over v. The model itself is not\n\n648\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\ninteresting; we have constructed it only to provide a simple demonstration of how\ncalculus of variations may be applied to probabilistic modeling.\n\nThe true posterior is given, up to a normalizing constant, by\n\np(h | v) (19.57)\nxp(h, v) (19.58)\n=p(hy )p(h2)p(v | h) (19.59)\n\n1 2 2 2\nxexp ( 5 [hy + ha + (vu \u2014 hyw1 \u2014 hawe) i) (19.60)\n\n1\nexp ( 5 (N34 B+ 0? + nw? + hBuk \u2014 Qo \u2014 Qvhow, - 2h un hate)\n(19.61)\n\nDue to the presence of the terms multiplying h, and hg together, we can see that\nthe true posterior does not factorize over hi and ho.\n\nApplying equation 19.56, we find that\n\nahi | v) (19.62)\n\n=exp (Ey,~\u00a2(ho|v) log A(v, h)) (19.63)\n1\n\nexp (\u2014JErowgtnyy [ME HIE Ho? + Aft + Bug (19.64)\n\n2vhyw \u2014 2vhowe4 2hrwihaw J . (19.65)\n\nFrom this, we can see that there are effectively only two values we need to obtain\nfrom q(h2 |v): Enyaq(njv)[h2] and Ey,.q(njv)[h5]. Writing these as (h2) and (h3),\nwe obtain\n\nG(n |v) = exp (\u20145 [d+ (2) +0? + nda? + (HB) (19.66)\n\n\u20142vhw1 \u2014 2u(h2)we + 2hywi (ha) . (19.67)\n\nFrom this, we can see that \u00a2 has the functional form of a Gaussian. We can\nthus conclude q(h | v) = .N(h; uw, 8+) where p and diagonal @ are variational\nparameters that we can optimize using any technique we choose. It is important\nto recall that we did not ever assume that q would be Gaussian; its Gaussian\nform was derived automatically by using calculus of variations to maximize q with\n\n649\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nrespect to \u00a3. Using the same approach on a different model could yield a different\nfunctional form of q.\n\nThis was of course, just a small case constructed for demonstration purposes.\nFor examples of real applications of variational learning with continuous variables\nin the context of deep learning, see Goodfellow ef al. (2013d).\n\n19.4.4 Interactions between Learning and Inference\n\nUsing approximate inference as part of a learning algorithm affects the learning\nprocess, and this in turn affects the accuracy of the inference algorithm.\n\nSpecifically, the training algorithm tends to adapt the model in a way that makes\nthe approximating assumptions underlying the approximate inference algorithm\nbecome more true. When training the parameters, variational learning increases\n\nEnxg log p(v, h). (19.68)\n\nFor a specific v, this increases p(h | v) for values of h that have high probability\nunder g(h | v) and decreases p(h | v) for values of h that have low probability\nunder q(h | v).\n\nThis behavior causes our approximating assumptions to become self-fulfilling\nprophecies. If we train the model with a unimodal approximate posterior, we will\nobtain a model with a true posterior that is far closer to unimodal than we would\nhave obtained by training the model with exact inference.\n\nComputing the true amount of harm imposed on a model by a variational\napproximation is thus very difficult. There exist several methods for estimating\nlog p(v). We often estimate log p(v; @) after training the model, and find that\nthe gap with \u00a3(v,6,q) is small. From this, we can conclude that our variational\napproximation is accurate for the specific value of 8 that we obtained from the\nlearning process. We should not conclude that our variational approximation is\naccurate in general or that the variational approximation did little harm to the\nlearning process. To measure the true amount of harm induced by the variational\napproximation, we would need to know 6* = maxg log p(v; 6). It is possible for\nL(v,0,q) \u00a9 log p(v;@) and logp(v;0) < log p(v; 6) to hold simultaneously. If\nmax,Ll(v, 6*,q) < log p(v;@*), because 6* induces too complicated of a posterior\ndistribution for our q family to capture, then the learning process will never\napproach 6*. Such a problem is very difficult to detect, because we can only know\nfor sure that it happened if we have a superior learning algorithm that can find 0*\nfor comparison.\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\n19.5 Learned Approximate Inference\n\nWe have seen that inference can be thought of as an optimization procedure\nthat increases the value of a function \u00a3. Explicitly performing optimization via\niterative procedures such as fixed point equations or gradient-based optimization\nis often very expensive and time-consuming. Many approaches to inference avoid\nthis expense by learning to perform approximate inference. Specifically, we can\nthink of the optimization process as a function f that maps an input v to an\napproximate distribution q* = arg max, \u00a3(v,q). Once we think of the multi-step\niterative optimization process as just being a function, we can approximate it with\n\na neural network that implements an approximation f(v; 9).\n\n19.5.1 Wake-Sleep\n\nOne of the main difficulties with training a model to infer h from v is that we\ndo not have a supervised training set with which to train the model. Given av,\nwe do not know the appropriate h. The mapping from v to h depends on the\nchoice of model family, and evolves throughout the learning process as 0 changes.\nThe wake-sleep algorithm (Hinton ef al., 1995b; Frey et al., 1996) resolves this\nproblem by drawing samples of both h and v from the model distribution. For\nexample, in a directed model, this can be done cheaply by performing ancestral\nsampling beginning at h and ending at v. The inference network can then be\ntrained to perform the reverse mapping: predicting which h caused the present\nv. The main drawback to this approach is that we will only be able to train the\ninference network on values of v that have high probability under the model. Early\nin learning, the model distribution will not resemble the data distribution, so the\ninference network will not have an opportunity to learn on samples that resemble\ndata.\n\nIn section 18.2 we saw that one possible explanation for the role of dream sleep\nin human beings and animals is that dreams could provide the negative phase\nsamples that Monte Carlo training algorithms use to approximate the negative\ngradient of the log partition function of undirected models. Another possible\nexplanation for biological dreaming is that it is providing samples from p(h, v)\nwhich can be used to train an inference network to predict h given v. In some\nsenses, this explanation is more satisfying than the partition function explanation.\nMonte Carlo algorithms generally do not perform well if they are run using only\nthe positive phase of the gradient for several steps then with only the negative\nphase of the gradient for several steps. Human beings and animals are usually\nawake for several consecutive hours then asleep for several consecutive hours. It is\n\n651\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nnot readily apparent how this schedule could support Monte Carlo training of an\nundirected model. Learning algorithms based on maximizing \u00a3 can be run with\nprolonged periods of improving q and prolonged periods of improving 0, however.\nIf the role of biological dreaming is to train networks for predicting q, then this\nexplains how animals are able to remain awake for several hours (the longer they\nare awake, the greater the gap between \u00a3 and log p(v), but \u00a3 will remain a lower\nbound) and to remain asleep for several hours (the generative model itself is not\nmodified during sleep) without damaging their internal models. Of course, these\nideas are purely speculative, and there is no hard evidence to suggest that dreaming\naccomplishes either of these goals. Dreaming may also serve reinforcement learning\nrather than probabilistic modeling, by sampling synthetic experiences from the\nanimal\u2019s transition model, on which to train the animal\u2019s policy. Or sleep may\nserve some other purpose not yet anticipated by the machine learning community.\n\n19.5.2 Other Forms of Learned Inference\n\nThis strategy of learned approximate inference has also been applied to other\nmodels. Salakhutdinov and Larochelle (2010) showed that a single pass in a\nlearned inference network could yield faster inference than iterating the mean field\nfixed point equations in a DBM. The training procedure is based on running the\ninference network, then applying one step of mean field to improve its estimates,\nand training the inference network to output this refined estimate instead of its\noriginal estimate.\n\nWe have already seen in section 14.8 that the predictive sparse decomposition\nmodel trains a shallow encoder network to predict a sparse code for the input.\nThis can be seen as a hybrid between an autoencoder and sparse coding. It is\npossible to devise probabilistic semantics for the model, under which the encoder\nmay be viewed as performing learned approximate MAP inference. Due to its\nshallow encoder, PSD is not able to implement the kind of competition between\nunits that we have seen in mean field inference. However, that problem can be\nremedied by training a deep encoder to perform learned approximate inference, as\nin the ISTA technique (Gregor and LeCun, 2010b).\n\nLearned approximate inference has recently become one of the dominant\napproaches to generative modeling, in the form of the variational autoencoder\n(Kingma, 2013; Rezende et al., 2014). In this elegant approach, there is no need to\nconstruct explicit targets for the inference network. Instead, the inference network\nis simply used to define \u00a3, and then the parameters of the inference network are\nadapted to increase \u00a3. This model is described in depth later, in section 20.10.3.\n", "CHAPTER 19. APPROXIMATE INFERENCE\n\nUsing approximate inference, it is possible to train and use a wide variety of\nmodels. Many of these models are described in the next chapter.\n", "Chapter 20\n\nDeep Generative Models\n\nIn this chapter, we present several of the specific kinds of generative models that\ncan be built and trained using the techniques presented in chapters16-19. All of\nthese models represent probability distributions over multiple variables in some\nway. Some allow the probability distribution function to be evaluated explicitly.\nOthers do not allow the evaluation of the probability distribution function, but\nsupport operations that implicitly require knowledge of it, such as drawing samples\nfrom the distribution. Some of these models are structured probabilistic models\ndescribed in terms of graphs and factors, using the language of graphical models\npresented in chapter 16. Others can not easily be described in terms of factors,\nbut represent probability distributions nonetheless.\n\n20.1 Boltzmann Machines\n\nBoltzmann machines were originally introduced as a general \u201cconnectionist\u201d ap-\nproach to learning arbitrary probability distributions over binary vectors (Fahlman\net al., 1983; Ackley et al., 1985; Hinton et al., 1984; Hinton and Sejnowski, 1986).\nVariants of the Boltzmann machine that include other kinds of variables have long\nago surpassed the popularity of the original. In this section we briefly introduce\nthe binary Boltzmann machine and discuss the issues that come up when trying to\ntrain and perform inference in the model.\n\nWe define the Boltzmann machine over a d-dimensional binary random vector\nx \u20ac {0,1}\u00a2. The Boltzmann machine is an energy-based model (section 16.2.4),\n\n654\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nmeaning we define the joint probability distribution using an energy function:\n\nP(x) = ep (Fe) (20.1)\n\nwhere (ax) is the energy function and Z is the partition function that ensures\nthat )>,, P(a) = 1. The energy function of the Boltzmann machine is given by\n\nE(x) =\u2014-a2'Uz \u2014 b'a, (20.2)\n\nwhere U is the \u201cweight\u201d matrix of model parameters and b is the vector of bias\nparameters.\n\nIn the general setting of the Boltzmann machine, we are given a set of training\nexamples, each of which are n-dimensional. Equation 20.1 describes the joint\nprobability distribution over the observed variables. While this scenario is certainly\nviable, it does limit the kinds of interactions between the observed variables to\nthose described by the weight matrix. Specifically, it means that the probability of\none unit being on is given by a linear model (logistic regression) from the values of\nthe other units.\n\nThe Boltzmann machine becomes more powerful when not all the variables are\nobserved. In this case, the latent variables, can act similarly to hidden units in a\nmulti-layer perceptron and model higher-order interactions among the visible units.\nJust as the addition of hidden units to convert logistic regression into an MLP results\nin the MLP being a universal approximator of functions, a Boltzmann machine\nwith hidden units is no longer limited to modeling linear relationships between\nvariables. Instead, the Boltzmann machine becomes a universal approximator of\nprobability mass functions over discrete variables (Le Roux and Bengio, 2008).\n\nFormally, we decompose the units x into two subsets: the visible units v and\nthe latent (or hidden) units h. The energy function becomes\n\nE(v,h) =\u2014-v' Rvu-v'Wh-h'Sh\u2014-blv\u2014cth. (20.3)\n\nBoltzmann Machine Learning Learning algorithms for Boltzmann machines\nare usually based on maximum likelihood. All Boltzmann machines have an\nintractable partition function, so the maximum likelihood gradient must be ap-\nproximated using the techniques described in chapter 18.\n\nOne interesting property of Boltzmann machines when trained with learning\nrules based on maximum likelihood is that the update for a particular weight\nconnecting two units depends only the statistics of those two units, collected\nunder different distributions: Pmode(v) and Prata(v) Pnoae(h | v). The rest of the\n\n655\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nnetwork participates in shaping those statistics, but the weight can be updated\nwithout knowing anything about the rest of the network or how those statistics were\nproduced. This means that the learning rule is \u201clocal,\u201d which makes Boltzmann\nmachine learning somewhat biologically plausible. It is conceivable that if each\nneuron were a random variable in a Boltzmann machine, then the axons and\ndendrites connecting two random variables could learn only by observing the firing\npattern of the cells that they actually physically touch. In particular, in the\npositive phase, two units that frequently activate together have their connection\nstrengthened. This is an example of a Hebbian learning rule (Hebb, 1949) often\nsummarized with the mnemonic \u201cfire together, wire together.\u201d Hebbian learning\nrules are among the oldest hypothesized explanations for learning in biological\nsystems and remain relevant today (Giudice et al., 2009).\n\nOther learning algorithms that use more information than local statistics seem\nto require us to hypothesize the existence of more machinery than this. For\nexample, for the brain to implement back-propagation in a multilayer perceptron,\nit seems necessary for the brain to maintain a secondary communication network for\ntransmitting gradient information backwards through the network. Proposals for\nbiologically plausible implementations (and approximations) of back-propagation\nhave been made (Hinton, 2007a; Bengio, 2015) but remain to be validated, and\nBengio (2015) links back-propagation of gradients to inference in energy-based\nmodels similar to the Boltzmann machine (but with continuous latent variables).\n\nThe negative phase of Boltzmann machine learning is somewhat harder to\nexplain from a biological point of view. As argued in section 18.2, dream sleep\nmay be a form of negative phase sampling. This idea is more speculative though.\n\n20.2 Restricted Boltzmann Machines\n\nInvented under the name harmonium (Smolensky, 1986), restricted Boltzmann\nmachines are some of the most common building blocks of deep probabilistic models.\nWe have briefly described RBMs previously, in section 16.7.1. Here we review the\nprevious information and go into more detail. RBMs are undirected probabilistic\ngraphical models containing a layer of observable variables and a single layer of\nlatent variables. RBMs may be stacked (one on top of the other) to form deeper\nmodels. See figure 20.1 for some examples. In particular, figure 20.1a shows the\ngraph structure of the RBM itself. It is a bipartite graph, with no connections\npermitted between any variables in the observed layer or between any units in the\nlatent layer.\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.1: Examples of models that may be built with restricted Boltzmann machines.\n(a)The restricted Boltzmann machine itself is an undirected graphical model based on\na bipartite graph, with visible units in one part of the graph and hidden units in the\nother part. There are no connections among the visible units, nor any connections among\nthe hidden units. Typically every visible unit is connected to every hidden unit but it\nis possible to construct sparsely connected RBMs such as convolutional RBMs. (b)A\ndeep belief network is a hybrid graphical model involving both directed and undirected\nconnections. Like an RBM, it has no intralayer connections. However, a DBN has multiple\nhidden layers, and thus there are connections between hidden units that are in separate\nlayers. All of the local conditional probability distributions needed by the deep belief\nnetwork are copied directly from the local conditional probability distributions of its\nconstituent RBMs. Alternatively, we could also represent the deep belief network with\na completely undirected graph, but it would need intralayer connections to capture the\ndependencies between parents. (c)A deep Boltzmann machine is an undirected graphical\nmodel with several layers of latent variables. Like RBMs and DBNs, DBMs lack intralayer\nconnections. DBMs are less closely tied to RBMs than DBNs are. When initializing a\nDBM from a stack of RBMs, it is necessary to modify the RBM parameters slightly. Some\nkinds of DBMs may be trained without first training a set of RBMs.\n\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nWe begin with the binary version of the restricted Boltzmann machine, but as\nwe see later there are extensions to other types of visible and hidden units.\n\nMore formally, let the observed layer consist of a set of n, binary random\nvariables which we refer to collectively with the vector v. We refer to the latent or\nhidden layer of np; binary random variables as h.\n\nLike the general Boltzmann machine, the restricted Boltzmann machine is an\nenergy-based model with the joint probability distribution specified by its energy\nfunction:\n\n7 exp (\u2014E(v,h)). (20.4)\n\nThe energy function for an RBM is given by\n\nP(v=v,h=h)\n\nE(v,h) =\u2014b'v\u2014c'h\u2014v' Wh, (20.5)\nand Z is the normalizing constant known as the partition function:\n\nZ=S-SCexp{-E(v,h)}. (20.6)\nv oh\n\nIt is apparent from the definition of the partition function Z that the naive method\nof computing Z (exhaustively summing over all states) could be computationally\nintractable, unless a cleverly designed algorithm could exploit regularities in the\nprobability distribution to compute Z faster. In the case of restricted Boltzmann\nmachines, Long and Servedio (2010) formally proved that the partition function Z\nis intractable. The intractable partition function Z implies that the normalized\njoint probability distribution P(v) is also intractable to evaluate.\n\n20.2.1 Conditional Distributions\n\nThough P(v) is intractable, the bipartite graph structure of the RBM has the\nvery special property that its conditional distributions P(h | v) and P(v | h) are\nfactorial and relatively simple to compute and to sample from.\n\nDeriving the conditional distributions from the joint distribution is straightfor-\nward:\n\nP(h,v)\n\nP(h|v)= P(w) (20.7)\niil T T T\n= payzor {8 vteh+v wh} (20.8)\n= = exp {eth + v'wh} (20.9)\n\n658\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n1 nh nh\n\n= Fi EXP S> cjhy + S> vt W. jh; (20.10\n7 Les {er +\u00bb Wists}\n\n=\u2014 exp cghj +u W. jh; (20.11\nZ! jal\n\nSince we are conditioning on the visible units v, we can treat these as constant\nwith respect to the distribution P(h |v). The factorial nature of the conditiona\nP(h| v) follows immediately from our ability to write the joint probability over\nthe vector h as the product of (unnormalized) distributions over the individua\nelements, h;. It is now a simple matter of normalizing the distributions over the\nindividual binary h,;.\n\nP(hj =1| v)\n\nP(h; =1|v)=\u2014 - (20.12)\nP(hj =0| v) + P(h; =1|v)\nZ exp {g + v' W.,;} (20.13)\nexp {0} + exp {cj + vu! W.;} ,\n=o (cj +0\" W,y). (20.14)\n\nWe can now express the full conditional over the hidden layer as the factorial\ndistribution:\n\nP(h|v) = To(en-ne (c+W'e)) . (20.15)\n\nA similar derivation will show that the other condition of interest to us, P(v | h),\nis also a factorial distribution:\n\nP(v|h) = To ((20- 1)\u00a9 (b+ Wh)),. (20.16)\n\ni=l\n\n20.2.2 Training Restricted Boltzmann Machines\n\nBecause the RBM admits efficient evaluation and differentiation of P(v) and\nefficient MCMC sampling in the form of block Gibbs sampling, it can readily be\ntrained with any of the techniques described in chapter 18 for training models\nthat have intractable partition functions. This includes CD, SML (PCD), ratio\nmatching and so on. Compared to other undirected models used in deep learning,\nthe RBM is relatively straightforward to train because we can compute P(h | v)\n\n659\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nexactly in closed form. Some other deep models, such as the deep Boltzmann\nmachine, combine both the difficulty of an intractable partition function and the\ndifficulty of intractable inference.\n\n20.3 Deep Belief Networks\n\nDeep belief networks (DBNs) were one of the first non-convolutional models\nto successfully admit training of deep architectures (Hinton ef al., 2006; Hinton,\n2007b). The introduction of deep belief networks in 2006 began the current deep\nlearning renaissance. Prior to the introduction of deep belief networks, deep models\nwere considered too difficult to optimize. Kernel machines with convex objective\nfunctions dominated the research landscape. Deep belief networks demonstrated\nthat deep architectures can be successful, by outperforming kernelized support\nvector machines on the MNIST dataset (Hinton ef al., 2006). Today, deep belief\nnetworks have mostly fallen out of favor and are rarely used, even compared to\nother unsupervised or generative learning algorithms, but they are still deservedly\nrecognized for their important role in deep learning history.\n\nDeep belief networks are generative models with several layers of latent variables.\nThe latent variables are typically binary, while the visible units may be binary\nor real. There are no intralayer connections. Usually, every unit in each layer is\nconnected to every unit in each neighboring layer, though it is possible to construct\nmore sparsely connected DBNs. The connections between the top two layers are\nundirected. The connections between all other layers are directed, with the arrows\npointed toward the layer that is closest to the data. See figure 20.1b for an example.\n\nA DBN with I hidden layers contains / weight matrices: wi), beey Ww, It\nalso contains 1+ 1 bias vectors: b,..., 6, with B\u00a9) providing the biases for the\nvisible layer. The probability distribution represented by the DBN is given by\n\nPRY AEM) oc exp (BOA 4 BE VTAED 4 DTW ORM), (20.17\nP(r? =1| niet) = o (u ue) 4 wi! (R+AYT p (i-+1) \\ Vi, VkEL,...,1\u20142, (20.18\n\nPi = 1) hb) = 9 (1 WY TR) vi. (20.19\n\nIn the case of real-valued visible units, substitute\n\nVON (0; BO 4 WT pw 3\") (20.20\n\n660\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nwith 6 diagonal for tractability. Generalizations to other exponential family visible\nunits are straightforward, at least in theory. A DBN with only one hidden layer is\njust an RBM.\n\nTo generate a sample from a DBN, we first run several steps of Gibbs sampling\non the top two hidden layers. This stage is essentially drawing a sample from\nthe RBM defined by the top two hidden layers. We can then use a single pass of\nancestral sampling through the rest of the model to draw a sample from the visible\nunits.\n\nDeep belief networks incur many of the problems associated with both directed\nmodels and undirected models.\n\nInference in a deep belief network is intractable due to the explaining away\neffect within each directed layer, and due to the interaction between the two hidden\nlayers that have undirected connections. Evaluating or maximizing the standard\nevidence lower bound on the log-likelihood is also intractable, because the evidence\nlower bound takes the expectation of cliques whose size is equal to the network\nwidth.\n\nEvaluating or maximizing the log-likelihood requires not just confronting the\nproblem of intractable inference to marginalize out the latent variables, but also\nthe problem of an intractable partition function within the undirected model of\nthe top two layers.\n\nTo train a deep belief network, one begins by training an RBM to maximize\nEv ~paata log p(v) using contrastive divergence or stochastic maximum likelihood.\nThe parameters of the RBM then define the parameters of the first layer of the\nDBN. Next, a second RBM is trained to approximately maximize\n\nEva paar A) vp)(n\\|y) log p)(h\\) (20.21)\n\nwhere p) is the probability distribution represented by the first RBM and p@)\nis the probability distribution represented by the second RBM. In other words,\nthe second RBM is trained to model the distribution defined by sampling the\nhidden units of the first RBM, when the first RBM is driven by the data. This\nprocedure can be repeated indefinitely, to add as many layers to the DBN as\ndesired, with each new RBM modeling the samples of the previous one. Each RBM\ndefines another layer of the DBN. This procedure can be justified as increasing a\nvariational lower bound on the log-likelihood of the data under the DBN (Hinton\net al., 2006).\n\nIn most applications, no effort is made to jointly train the DBN after the greedy\nlayer-wise procedure is complete. However, it is possible to perform generative\nfine-tuning using the wake-sleep algorithm.\n\n661\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nThe trained DBN may be used directly as a generative model, but most of the\ninterest in DBNs arose from their ability to improve classification models. We can\ntake the weights from the DBN and use them to define an MLP:\n\nh\u00aeD =o (0) 4 vw) (20.22)\n\nnO =o (0 + nid we) VIE 2,...,m, (20.23)\n\nAfter initializing this MLP with the weights and biases learned via generative\ntraining of the DBN, we may train the MLP to perform a classification task. This\nadditional training of the MLP is an example of discriminative fine-tuning.\n\nThis specific choice of MLP is somewhat arbitrary, compared to many of the\ninference equations in chapter 19 that are derived from first principles. This MLP\nis a heuristic choice that seems to work well in practice and is used consistently\nin the literature. Many approximate inference techniques are motivated by their\nability to find a maximally tight variational lower bound on the log-likelihood\nunder some set of constraints. One can construct a variational lower bound on the\nlog-likelihood using the hidden unit expectations defined by the DBN\u2019s MLP, but\nthis is true of any probability distribution over the hidden units, and there is no\nreason to believe that this MLP provides a particularly tight bound. In particular,\nthe MLP ignores many important interactions in the DBN graphical model. The\n\nMLP propagates information upward from the visible units to the deepest hidden\nunits, but does not propagate any information downward or sideways. The DBN\ngraphical model has explaining away interactions between all of the hidden units\nwithin the same layer as well as top-down interactions between layers.\n\nWhile the log-likelihood of a DBN is intractable, it may be approximated with\nAIS (Salakhutdinov and Murray, 2008). This permits evaluating its quality as a\ngenerative model.\n\nThe term \u201cdeep belief network\u201d is commonly used incorrectly to refer to any\nkind of deep neural network, even networks without latent variable semantics.\nThe term \u201cdeep belief network\u201d should refer specifically to models with undirected\nconnections in the deepest layer and directed connections pointing downward\nbetween all other pairs of consecutive layers.\n\nThe term \u201cdeep belief network\u201d may also cause some confusion because the\nterm \u201cbelief network\u201d is sometimes used to refer to purely directed models, while\ndeep belief networks contain an undirected layer. Deep belief networks also share\nthe acronym DBN with dynamic Bayesian networks (Dean and Kanazawa, 1989),\nwhich are Bayesian networks for representing Markov chains.\n\n662\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.2: The graphical model for a deep Boltzmann machine with one visible layer\n(bottom) and two hidden layers. Connections are only between units in neighboring layers.\nThere are no intralayer layer connections.\n\n20.4 Deep Boltzmann Machines\n\nA deep Boltzmann machine or DBM (Salakhutdinov and Hinton, 2009a) is\nanother kind of deep, generative model. Unlike the deep belief network (DBN),\nit is an entirely undirected model. Unlike the RBM, the DBM has several layers\nof latent variables (RBMs have just one). But like the RBM, within each layer,\neach of the variables are mutually independent, conditioned on the variables in\nthe neighboring layers. See figure 20.2 for the graph structure. Deep Boltzmann\nmachines have been applied to a variety of tasks including document modeling\n(Srivastava et al., 2013).\n\nLike RBMs and DBNs, DBMs typically contain only binary units\u2014as we\nassume for simplicity of our presentation of the model\u2014but it is straightforward\nto include real-valued visible units.\n\nA DBM is an energy-based model, meaning that the the joint probability\ndistribution over the model variables is parametrized by an energy function E. In\nthe case of a deep Boltzmann machine with one visible layer, v, and three hidden\nlayers, A , A) and h\u00ae), the joint probability is given by:\n\nP (vn nn) = exp (Gace A, n,n) ;6)) , (20.24)\n\n1\nZ(0)\nTo simplify our presentation, we omit the bias parameters below. The DBM energy\nfunction is then defined as follows:\n\nE(w, AO A?) A&); 6) = \u2014y WORD \u2014 AOTwen\u00ae \u2014 pA wpe),\n(20.25)\n\n663\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.3: A deep Boltzmann machine, re-arranged to reveal its bipartite graph structure.\n\nIn comparison to the RBM energy function (equation 20.5), the DBM energy\nfunction includes connections between the hidden units (latent variables) in the\nform of the weight matrices (W) and W@)). As we will see, these connections\nhave significant consequences for both the model behavior as well as how we go\nabout performing inference in the model.\n\nIn comparison to fully connected Boltzmann machines (with every unit con-\nnected to every other unit), the DBM offers some advantages that are similar\nto those offered by the RBM. Specifically, as illustrated in figure 20.3, the DBM\nlayers can be organized into a bipartite graph, with odd layers on one side and\neven layers on the other. This immediately implies that when we condition on the\nvariables in the even layer, the variables in the odd layers become conditionally\nindependent. Of course, when we condition on the variables in the odd layers, the\nvariables in the even layers also become conditionally independent.\n\nThe bipartite structure of the DBM means that we can apply the same equa-\ntions we have previously used for the conditional distributions of an RBM to\ndetermine the conditional distributions in a DBM. The units within a layer are\nconditionally independent from each other given the values of the neighboring\nlayers, so the distributions over binary variables can be fully described by the\nBernoulli parameters giving the probability of each unit being active. In our\nexample with two hidden layers, the activation probabilities are given by:\n\nP(x; =1| kh) =o (wir) (20.26)\n664\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nP(h\\) =1|v,R@) =o (ow? + Wn) (20.27)\n\nand\n\nP(hy =1/ bh) =o(nOTW.?). (20.28)\n\nThe bipartite structure makes Gibbs sampling in a deep Boltzmann machine\nefficient. The naive approach to Gibbs sampling is to update only one variable\nat a time. RBMs allow all of the visible units to be updated in one block and all\nof the hidden units to be updated in a second block. One might naively assume\nthat a DBM with / layers requires | + 1 updates, with each iteration updating a\nblock consisting of one layer of units. Instead, it is possible to update all of the\nunits in only two iterations. Gibbs sampling can be divided into two blocks of\nupdates, one including all even layers (including the visible layer) and the other\nincluding all odd layers. Due to the bipartite DBM connection pattern, given\nthe even layers, the distribution over the odd layers is factorial and thus can be\nsampled simultaneously and independently as a block. Likewise, given the odd\nlayers, the even layers can be sampled simultaneously and independently as a\nblock. Efficient sampling is especially important for training with the stochastic\nmaximum likelihood algorithm.\n\n20.4.1 Interesting Properties\n\nDeep Boltzmann machines have many interesting properties.\n\nDBMs were developed after DBNs. Compared to DBNs, the posterior distribu-\ntion P(h | v) is simpler for DBMs. Somewhat counterintuitively, the simplicity of\nthis posterior distribution allows richer approximations of the posterior. In the case\nof the DBN, we perform classification using a heuristically motivated approximate\ninference procedure, in which we guess that a reasonable value for the mean field\nexpectation of the hidden units can be provided by an upward pass through the\nnetwork in an MLP that uses sigmoid activation functions and the same weights as\nthe original DBN. Any distribution Q(h) may be used to obtain a variational lower\nbound on the log-likelihood. This heuristic procedure therefore allows us to obtain\nsuch a bound. However, the bound is not explicitly optimized in any way, so the\nbound may be far from tight. In particular, the heuristic estimate of Q ignores\ninteractions between hidden units within the same layer as well as the top-down\nfeedback influence of hidden units in deeper layers on hidden units that are closer\nto the input. Because the heuristic MLP-based inference procedure in the DBN\nis not able to account for these interactions, the resulting Q is presumably far\n\n665\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nfrom optimal. In DBMs, all of the hidden units within a layer are conditionally\nindependent given the other layers. This lack of intralayer interaction makes it\npossible to use fixed point equations to actually optimize the variational lower\nbound and find the true optimal mean field expectations (to within some numerical\ntolerance).\n\nThe use of proper mean field allows the approximate inference procedure for\nDBMs to capture the influence of top-down feedback interactions. This makes\nDBMs interesting from the point of view of neuroscience, because the human brain\nis known to use many top-down feedback connections. Because of this property,\nDBMs have been used as computational models of real neuroscientific phenomena\n(Series et al., 2010; Reichert et al., 2011).\n\nOne unfortunate property of DBMs is that sampling from them is relatively\ndifficult. DBNs only need to use MCMC sampling in their top pair of layers. The\nother layers are used only at the end of the sampling process, in one efficient\nancestral sampling pass. To generate a sample from a DBM, it is necessary to\nuse MCMC across all layers, with every layer of the model participating in every\nMarkov chain transition.\n\n20.4.2) DBM Mean Field Inference\n\nThe conditional distribution over one DBM layer given the neighboring layers is\nfactorial. In the example of the DBM with two hidden layers, these distributions\nare P(v | RY), P(A | vk) and P(h?) | hY). The distribution over all\nhidden layers generally does not factorize because of interactions between layers.\nIn the example with two hidden layers, P(h\u2122,h\u00ae) | v) does not factorize due due\nto the interaction weights W\u00a9) between A and kh) which render these variables\nmutually dependent.\n\nAs was the case with the DBN, we are left to seek out methods to approximate\nthe DBM posterior distribution. However, unlike the DBN, the DBM posterior\ndistribution over their hidden units\u2014while complicated\u2014is easy to approximate\nwith a variational approximation (as discussed in section 19.4), specifically a\nmean field approximation. The mean field approximation is a simple form of\nvariational inference, where we restrict the approximating distribution to fully\nfactorial distributions. In the context of DBMs, the mean field equations capture\nthe bidirectional interactions between layers. In this section we derive the iterative\napproximate inference procedure originally introduced in Salakhutdinov and Hinton\n(2009a).\n\nIn variational approximations to inference, we approach the task of approxi-\n\n666\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nmating a particular target distribution\u2014in our case, the posterior distribution over\nthe hidden units given the visible units\u2014by some reasonably simple family of dis-\ntributions. In the case of the mean field approximation, the approximating family\nis the set of distributions where the hidden units are conditionally independent.\n\nWe now develop the mean field approach for the example with two hidden\nlayers. Let Q(hY, hn?) | v) be the approximation of P(AY , A\u2019) | v). The mean\nfield assumption implies that\n\nQ(AnD), A? |v) =T] Qn |v) TP a(n? | v). (20.29)\nj k\n\nThe mean field approximation attempts to find a member of this family of\ndistributions that best fits the true posterior P(A\u201d, hn?) | v). Importantly, the\ninference process must be run again to find a different distribution Q every time\nwe use a new value of v.\n\nOne can conceive of many ways of measuring how well Q(h | v) fits P(h | v).\nThe mean field approach is to minimize\n\n(2) Qh), A | v)\nL(Q||P) = dain hb) | v) log Geoeones . (20.30)\n\nIn general, we do not have to provide a parametric form of the approximating\ndistribution beyond enforcing the independence assumptions. The variational\napproximation procedure is generally able to recover a functional form of the\napproximate distribution. However, in the case of a mean field assumption on\nbinary hidden units (the case we are developing here) there is no loss of generality\nresulting from fixing a parametrization of the model in advance.\n\nWe parametrize @ as a product of Bernoulli distributions, that is we associate\nthe probability of each element of Ah) with a parameter. Specifically, for each j,\nA\u00ae = Qin? = 1| wv), where A \u20ac [0,1] and for each k, Ae _ = Qn?) =1| v),\n(2)\n\nwhere h k\n\nQin), hn |v) = Ifa ni |v) Tew (20.31)\n\n) * @) - ) - (\n= rye (- yn x TPP HP a AP yam,\nj\n\nk\n\n\u20ac [0,1]. Thus we have the following approximation to the posterior:\n\n(20.32)\n\nOf course, for DBMs with more layers the approximate posterior parametrization\ncan be extended in the obvious way, exploiting the bipartite structure of the graph\n\n667\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nto update all of the even layers simultaneously and then to update all of the odd\nlayers simultaneously, following the same schedule as Gibbs sampling.\n\nNow that we have specified our family of approximating distributions Q, it\nremains to specify a procedure for choosing the member of this family that best\nfits P. The most straightforward way to do this is to use the mean field equations\nspecified by equation 19.56. These equations were derived by solving for where the\nderivatives of the variational lower bound are zero. They describe in an abstract\nmanner how to optimize the variational lower bound for any model, simply by\ntaking expectations with respect to Q.\n\nApplying these general equations, we obtain the update rules (again, ignoring\nbias terms):\n\nA =o (x oW +> winnie , Vi (20.33)\na k!\n\nA =o (Sowa). ve. (20.34)\ngj\u2019\n\nAt a fixed point of this system of equations, we have a local maximum of the\nvariational lower bound L(Q). Thus these fixed point update equations define an\n\niterative algorithm where we alternate updates of A\u201d (using equation 20.33) and\n\nupdates of A?) (using equation 20.34). On small problems such as MNIST, as few\n\nas ten iterations can be sufficient to find an approximate positive phase gradient\nfor learning, and fifty usually suffice to obtain a high quality representation of\na single specific example to be used for high-accuracy classification. Extending\napproximate variational inference to deeper DBMs is straightforward.\n\n20.4.3 DBM Parameter Learning\n\nLearning in the DBM must confront both the challenge of an intractable partition\nfunction, using the techniques from chapter 18, and the challenge of an intractable\nposterior distribution, using the techniques from chapter 19.\n\nAs described in section 20.4.2, variational inference allows the construction of\na distribution Q(h | v) that approximates the intractable P(h | v). Learning then\n\nproceeds by maximizing L(v, Q, 6), the variational lower bound on the intractable\nlog-likelihood, log P(v; 4).\n\n668\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFor a deep Boltzmann machine with two hidden layers, \u00a3 is given by\n\n\u00a3(Q,0) = S070 wy Wi a> Sal WPL AW \u2014 log Z(0) +H(Q). (20.35)\n\nThis expression still contains the log partition function, log Z(@). Because a deep\nBoltzmann machine contains restricted Boltzmann machines as components, the\nhardness results for computing the partition function and sampling that apply to\nrestricted Boltzmann machines also apply to deep Boltzmann machines. This means\nthat evaluating the probability mass function of a Boltzmann machine requires\napproximate methods such as annealed importance sampling. Likewise, training\nthe model requires approximations to the gradient of the log partition function. See\nchapter 18 for a general description of these methods. DBMs are typically trained\nusing stochastic maximum likelihood. Many of the other techniques described in\nchapter 18 are not applicable. Techniques such as pseudolikelihood require the\nability to evaluate the unnormalized probabilities, rather than merely obtain a\nvariational lower bound on them. Contrastive divergence is slow for deep Boltzmann\nmachines because they do not allow efficient sampling of the hidden units given the\nvisible units\u2014instead, contrastive divergence would require burning in a Markov\nchain every time a new negative phase sample is needed.\n\nThe non-variational version of stochastic maximum likelihood algorithm was\ndiscussed earlier, in section 18.2. Variational stochastic maximum likelihood as\napplied to the DBM is given in algorithm 20.1. Recall that we describe a simplified\nvarient of the DBM that lacks bias parameters; including them is trivial.\n\n20.4.4 Layer-Wise Pretraining\n\nUnfortunately, training a DBM using stochastic maximum likelihood (as described\nabove) from a random initialization usually results in failure. In some cases, the\nmodel fails to learn to represent the distribution adequately. In other cases, the\nDBM may represent the distribution well, but with no higher likelihood than could\nbe obtained with just an RBM. A DBM with very small weights in all but the first\nlayer represents approximately the same distribution as an RBM.\n\nVarious techniques that permit joint training have been developed and are\ndescribed in section 20.4.5. However, the original and most popular method for\novercoming the joint training problem of DBMs is greedy layer-wise pretraining.\nIn this method, each layer of the DBM is trained in isolation as an RBM. The\nfirst layer is trained to model the input data. Each subsequent RBM is trained to\nmodel samples from the previous RBM\u2019s posterior distribution. After all of the\n\n669\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nAlgorithm 20.1 The variational stochastic maximum likelihood algorithm for\ntraining a DBM with two hidden layers.\n\nSet \u20ac, the step size, to a small positive number\nSet k, the number of Gibbs steps, high enough to allow a Markov chain of\nAv, AO pn: o+ Ag) to burn in, starting from samples from p(v, h, bh) ;8).\nInitialize three matrices, V, H \u00a9 and H\u00ae) each with m rows set to random\nvalues (e.g., from Bernoulli distributions, possibly with marginals matched to\nthe model\u2019s marginals).\nwhile not converged (learning loop) do\n\nSample a minibatch of m examples from the training data and arrange them\n\nas the rows of a design matrix V.\n\nInitialize matrices H and Hi (2) possibly to the model\u2019s marginals.\n\nwhile not converged (mean field inference loop) do\n\nHYeo (vw) +4 Hew\"),\nHeo (Ow?) .\n\nend while\n\nAwa) \u2014 ivi A\n\nAwe) \u2014 1A) T A)\n\nfor | = 1 to k (Gibbs sampling) do\nGibbs block 1:\n\n~ ~ ~(4)\\T\nVi,j, Vi sampled from P(Vi,; = 1) =o (ww? (i) ) .\n\ni,j, 1 sampled from P(A) = 1) =o (Hw).\nGibbs block 2:\nVi, Jj, At sampled from P(A) =l)=o0 (Vi.w. + Hew! ).\n\nend for\n\nAwa \u2014 Awa -4V' HY\n\nAwe) \u2014 Awe) _\u2014 AAO He)\n\nwh Ww +eAya) (this is a cartoon illustration, in practice use a more\n\neffective algorithm, such as momentum with a decaying learning rate)\n\nW? \u2014 W?) + Awe\n\nend while\n\n670\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nRBMs have been trained in this way, they can be combined to form a DBM. The\nDBM may then be trained with PCD. Typically PCD training will make only a\nsmall change in the model\u2019s parameters and its performance as measured by the\nlog-likelihood it assigns to the data, or its ability to classify inputs. See figure 20.4\nfor an illustration of the training procedure.\n\nThis greedy layer-wise training procedure is not just coordinate ascent. It bears\nsome passing resemblance to coordinate ascent because we optimize one subset of\nthe parameters at each step. The two methods differ because the greedy layer-wise\ntraining procedure uses a different objective function at each step.\n\nGreedy layer-wise pretraining of a DBM differs from greedy layer-wise pre-\ntraining of a DBN. The parameters of each individual RBM may be copied to\nthe corresponding DBN directly. In the case of the DBM, the RBM parameters\nmust be modified before inclusion in the DBM. A layer in the middle of the stack\nof RBMs is trained with only bottom-up input, but after the stack is combined\nto form the DBM, the layer will have both bottom-up and top-down input. To\naccount for this effect, Salakhutdinov and Hinton (2009a) advocate dividing the\nweights of all but the top and bottom RBM in half before inserting them into the\nDBM. Additionally, the bottom RBM must be trained using two \u201ccopies\u201d of each\nvisible unit and the weights tied to be equal between the two copies. This means\nthat the weights are effectively doubled during the upward pass. Similarly, the top\nRBM should be trained with two copies of the topmost layer.\n\nObtaining the state of the art results with the deep Boltzmann machine requires\na modification of the standard SML algorithm, which is to use a small amount of\nmean field during the negative phase of the joint PCD training step (Salakhutdinov\nand Hinton, 2009a). Specifically, the expectation of the energy gradient should\nbe computed with respect to the mean field distribution in which all of the units\nare independent from each other. The parameters of this mean field distribution\nshould be obtained by running the mean field fixed point equations for just one\nstep. See Goodfellow et al. (2013b) for a comparison of the performance of centered\nDBMs with and without the use of partial mean field in the negative phase.\n\n20.4.5 Jointly Training Deep Boltzmann Machines\n\nClassic DBMs require greedy unsupervised pretraining, and to perform classification\nwell, require a separate MLP-based classifier on top of the hidden features they\nextract. This has some undesirable properties. It is hard to track performance\nduring training because we cannot evaluate properties of the full DBM while\ntraining the first RBM. Thus, it is hard to tell how well our hyperparameters\n\n671\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\noe ?\n\nFigure 20.4: The deep Boltzmann machine training procedure used to classify the MNIST\ndataset (Salakhutdinov and Hinton, 2009a; Srivastava et al., 2014). (a/Train an RBM\nby using CD to approximately maximize log P(v). (b)/Train a second RBM that models\nh\u00ae and target class y by using CD-k to approximately maximize log P(h\u201c ,y) where\nAh) is drawn from the first RBM\u2019s posterior conditioned on the data. Increase k from 1\no 20 during learning. (c)Combine the two RBMs into a DBM. Train it to approximately\nmaximize log P(v, y) using stochastic maximum likelihood with k = 5. (d)Delete y from\nhe model. Define a new set of features h@) and h@) that are obtained by running mean\nfield inference in the model lacking y. Use these features as input to an MLP whose\nstructure is the same as an additional pass of mean field, with an additional output layer\nor the estimate of y. Initialize the MLP\u2019s weights to be the same as the DBM\u2019s weights.\nTrain the MLP to approximately maximize log P(y | v) using stochastic gradient descent\nand dropout. Figure reprinted from (Goodfellow ef al., 2013b).\n\n672\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nare working until quite late in the training process. Software implementations\nof DBMs need to have many different components for CD training of individual\nRBMs, PCD training of the full DBM, and training based on back-propagation\nthrough the MLP. Finally, the MLP on top of the Boltzmann machine loses many\nof the advantages of the Boltzmann machine probabilistic model, such as being\nable to perform inference when some input values are missing.\n\nThere are two main ways to resolve the joint training problem of the deep\nBoltzmann machine. The first is the centered deep Boltzmann machine\n(Montavon and Muller, 2012), which reparametrizes the model in order to make\nthe Hessian of the cost function better-conditioned at the beginning of the learning\nprocess. This yields a model that can be trained without a greedy layer-wise\npretraining stage. The resulting model obtains excellent test set log-likelihood\nand produces high quality samples. Unfortunately, it remains unable to compete\nwith appropriately regularized MLPs as a classifier. The second way to jointly\ntrain a deep Boltzmann machine is to use a multi-prediction deep Boltzmann\nmachine (Goodfellow e\u00e9 al., 2013b). This model uses an alternative training\ncriterion that allows the use of the back-propagation algorithm in order to avoid\nthe problems with MCMC estimates of the gradient. Unfortunately, the new\ncriterion does not lead to good likelihood or samples, but, compared to the MCMC\napproach, it does lead to superior classification performance and ability to reason\nwell about missing inputs.\n\nThe centering trick for the Boltzmann machine is easiest to describe if we\nreturn to the general view of a Boltzmann machine as consisting of a set of units\nx with a weight matrix U and biases b. Recall from equation 20.2 that he energy\n\nfunction is given by\nE(a) =-a'Ua\u2014b'a. (20.36)\n\nUsing different sparsity patterns in the weight matrix U, we can implement\nstructures of Boltzmann machines, such as RBMs, or DBMs with different numbers\nof layers. This is accomplished by partitioning x into visible and hidden units and\nzeroing out elements of U for units that do not interact. The centered Boltzmann\nmachine introduces a vector ps that is subtracted from all of the states:\n\nE'(a;U,b) = \u2014(@ \u2014 p)'U(@\u2014 p) \u2014 (a \u2014 p)'b. (20.37)\n\nTypically yw is a hyperparameter fixed at the beginning of training. It is usu-\nally chosen to make sure that x \u2014 uw * O when the model is initialized. This\nreparametrization does not change the set of probability distributions that the\nmodel can represent, but it does change the dynamics of stochastic gradient descent\napplied to the likelihood. Specifically, in many cases, this reparametrization results\n\n673\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nin a Hessian matrix that is better conditioned. Melchior ef al. (2013) experimentally\nconfirmed that the conditioning of the Hessian matrix improves, and observed that\nthe centering trick is equivalent to another Boltzmann machine learning technique,\nthe enhanced gradient (Cho e\u00a2 al., 2011). The improved conditioning of the\nHessian matrix allows learning to succeed, even in difficult cases like training a\ndeep Boltzmann machine with multiple layers.\n\nThe other approach to jointly training deep Boltzmann machines is the multi-\nprediction deep Boltzmann machine (MP-DBM) which works by viewing the mean\nfield equations as defining a family of recurrent networks for approximately solving\nevery possible inference problem (Goodfellow ef al., 2013b). Rather than training\nthe model to maximize the likelihood, the model is trained to make each recurrent\nnetwork obtain an accurate answer to the corresponding inference problem. The\ntraining process is illustrated in figure 20.5. It consists of randomly sampling a\ntraining example, randomly sampling a subset of inputs to the inference network,\nand then training the inference network to predict the values of the remaining\nunits.\n\nThis general principle of back-propagating through the computational graph\nfor approximate inference has been applied to other models (Stoyanov et al., 2011;\nBrakel et al., 2013). In these models and in the MP-DBM, the final loss is not\nthe lower bound on the likelihood. Instead, the final loss is typically based on\nthe approximate conditional distribution that the approximate inference network\nimposes over the missing values. This means that the training of these models\nis somewhat heuristically motivated. If we inspect the p(v) represented by the\nBoltzmann machine learned by the MP-DBM, it tends to be somewhat defective,\nin the sense that Gibbs sampling yields poor samples.\n\nBack-propagation through the inference graph has two main advantages. First,\nit trains the model as it is really used\u2014with approximate inference. This means\nthat approximate inference, for example, to fill in missing inputs, or to perform\nclassification despite the presence of missing inputs, is more accurate in the MP-\nDBM than in the original DBM. The original DBM does not make an accurate\nclassifier on its own; the best classification results with the original DBM were\nbased on training a separate classifier to use features extracted by the DBM,\nrather than by using inference in the DBM to compute the distribution over the\nclass labels. Mean field inference in the MP-DBM performs well as a classifier\nwithout special modifications. The other advantage of back-propagating through\napproximate inference is that back-propagation computes the exact gradient of\nthe loss. This is better for optimization than the approximate gradients of SML\ntraining, which suffer from both bias and variance. This probably explains why MP-\n\n674\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.5: An illustration of the multi-prediction training process for a deep Boltzmann\nmachine. Each row indicates a different example within a minibatch for the same training\nstep. Each column represents a time step within the mean field inference process. For\neach example, we sample a subset of the data variables to serve as inputs to the inference\nprocess. These variables are shaded black to indicate conditioning. We then run the\nmean field inference process, with arrows indicating which variables influence which other\nvariables in the process. In practical applications, we unroll mean field for several steps.\nIn this illustration, we unroll for only two steps. Dashed arrows indicate how the process\ncould be unrolled for more steps. The data variables that were not used as inputs to the\ninference process become targets, shaded in gray. We can view the inference process for\neach example as a recurrent network. We use gradient descent and back-propagation to\ntrain these recurrent networks to produce the correct targets given their inputs. This\ntrains the mean field process for the MP-DBM to produce accurate estimates. Figure\nadapted from Goodfellow et al. (2013b).\n\n675\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nDBMs may be trained jointly while DBMs require a greedy layer-wise pretraining.\nThe disadvantage of back-propagating through the approximate inference graph is\nthat it does not provide a way to optimize the log-likelihood, but rather a heuristic\napproximation of the generalized pseudolikelihood.\n\nThe MP-DBM inspired the NADE-k (Raiko ef al., 2014) extension to the\nNADE framework, which is described in section 20.10.10.\n\nThe MP-DBM has some connections to dropout. Dropout shares the same pa-\nrameters among many different computational graphs, with the difference between\neach graph being whether it includes or excludes each unit. The MP-DBM also\nshares parameters across many computational graphs. In the case of the MP-DBM,\nthe difference between the graphs is whether each input unit is observed or not.\nWhen a unit is not observed, the MP-DBM does not delete it entirely as dropout\ndoes. Instead, the MP-DBM treats it as a latent variable to be inferred. One could\nimagine applying dropout to the MP-DBM by additionally removing some units\nrather than making them latent.\n\n20.5 Boltzmann Machines for Real-Valued Data\n\nWhile Boltzmann machines were originally developed for use with binary data,\nmany applications such as image and audio modeling seem to require the ability\nto represent probability distributions over real values. In some cases, it is possible\nto treat real-valued data in the interval [0, 1] as representing the expectation of a\nbinary variable. For example, Hinton (2000) treats grayscale images in the training\nset as defining [0,1] probability values. Each pixel defines the probability of a\nbinary value being 1, and the binary pixels are all sampled independently from\neach other. This is a common procedure for evaluating binary models on grayscale\nimage datasets. However, it is not a particularly theoretically satisfying approach,\nand binary images sampled independently in this way have a noisy appearance. In\nthis section, we present Boltzmann machines that define a probability density over\nreal-valued data.\n\n20.5.1 Gaussian-Bernoulli RBMs\n\nRestricted Boltzmann machines may be developed for many exponential family\nconditional distributions (Welling et al., 2005). Of these, the most common is the\nRBM with binary hidden units and real-valued visible units, with the conditional\ndistribution over the visible units being a Gaussian distribution whose mean is a\nfunction of the hidden units.\n\n676\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nThere are many ways of parametrizing Gaussian-Bernoulli RBMs. One choice\nis whether to use a covariance matrix or a precision matrix for the Gaussian\ndistribution. Here we present the precision formulation. The modification to obtain\nthe covariance formulation is straightforward. We wish to have the conditional\ndistribution\n\np(v | h) = N(v; Wh, 87\"). (20.38)\n\nWe can find the terms we need to add to the energy function by expanding the\nunnormalized log conditional distribution:\n\nlog N(v; Wh, 37!) = -5 (v \u2014 Wh)! B(v \u2014 Wh) + f (8). (20.39)\n\nHere f encapsulates all the terms that are a function only of the parameters\nand not the random variables in the model. We can discard f because its only\nrole is to normalize the distribution, and the partition function of whatever energy\nfunction we choose will carry out that role.\n\nIf we include all of the terms (with their sign flipped) involving v from equa-\ntion 20.39 in our energy function and do not add any other terms involving v, then\nour energy function will represent the desired conditional p(v | h).\n\nWe have some freedom regarding the other conditional distribution, p(h | v).\nNote that equation 20.39 contains a term\n\nsh W' BWh. (20.40)\n\nThis term cannot be included in its entirety because it includes hjh; terms. These\ncorrespond to edges between the hidden units. If we included these terms, we\nwould have a linear factor model instead of a restricted Boltzmann machine. When\ndesigning our Boltzmann machine, we simply omit these hih; cross terms. Omitting\nthem does not change the conditional p(v | kh) so equation 20.39 is still respected.\nHowever, we still have a choice about whether to include the terms involving only\na single h;. If we assume a diagonal precision matrix, we find that for each hidden\nunit h; we have a term\n\n1\n5h S> BW3i- (20.41)\nj\n\nIn the above, we used the fact that h? = h;, because h; \u20ac {0, 1}. If we include this\nterm (with its sign flipped) in the energy function, then it will naturally bias h;\nto be turned off when the weights for that unit are large and connected to visible\nunits with high precision. The choice of whether or not to include this bias term\ndoes not affect the family of distributions the model can represent (assuming that\n\n677\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nwe include bias parameters for the hidden units) but it does affect the learning\ndynamics of the model. Including the term may help the hidden unit activations\nremain reasonable even when the weights rapidly increase in magnitude.\n\nOne way to define the energy function on a Gaussian-Bernoulli RBM is thus\n1\nE(v,h) = 5\u00a5 (BO) \u2014(v@B)'Wh-b'h (20.42)\n\nbut we may also add extra terms or parametrize the energy in terms of the variance\nrather than precision if we choose.\n\nIn this derivation, we have not included a bias term on the visible units, but one\ncould easily be added. One final source of variability in the parametrization of a\nGaussian-Bernoulli RBM is the choice of how to treat the precision matrix. It may\neither be fixed to a constant (perhaps estimated based on the marginal precision\nof the data) or learned. It may also be a scalar times the identity matrix, or it\nmay be a diagonal matrix. Typically we do not allow the precision matrix to be\nnon-diagonal in this context, because some operations on the Gaussian distribution\nrequire inverting the matrix, and a diagonal matrix can be inverted trivially. In\nthe sections ahead, we will see that other forms of Boltzmann machines permit\nmodeling the covariance structure, using various techniques to avoid inverting the\nprecision matrix.\n\n20.5.2 Undirected Models of Conditional Covariance\n\nWhile the Gaussian RBM has been the canonical energy model for real-valued\ndata, Ranzato et al. (2010a) argue that the Gaussian RBM inductive bias is not\nwell suited to the statistical variations present in some types of real-valued data,\nespecially natural images. The problem is that much of the information content\npresent in natural images is embedded in the covariance between pixels rather than\nin the raw pixel values. In other words, it is the relationships between pixels and\nnot their absolute values where most of the useful information in images resides.\nSince the Gaussian RBM only models the conditional mean of the input given the\nhidden units, it cannot capture conditional covariance information. In response\nto these criticisms, alternative models have been proposed that attempt to better\naccount for the covariance of real-valued data. These models include the mean and\ncovariance RBM (mcRBM?), the mean-product of t-distribution (mPoT) model\nand the spike and slab RBM (ssRBM).\n\n'The term \u201cmcRBM\u201d is pronounced by saying the name of the letters M-C-R-B-M; the \u201cmc\u201d\nis not pronounced like the \u201cMc\u201d in \u201cMcDonald\u2019s.\u201d\n\n678\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nMean and Covariance RBM The mcRBM uses its hidden units to indepen-\ndently encode the conditional mean and covariance of all observed units. The\nmcRBM hidden layer is divided into two groups of units: mean units and covariance\nunits. The group that models the conditional mean is simply a Gaussian RBM.\nThe other half is a covariance RBM (Ranzato ef al., 2010a), also called a cRBM,\nwhose components model the conditional covariance structure, as described below.\n\nSpecifically, with binary mean units kh\u201d) and binary covariance units h\u00a9, the\nmcRBM model is defined as the combination of two energy functions:\n\nEnc (ax, h( (m) bh) = En (x, ni\u201d) ) + E,(a,h\u00ae), (20.43)\n\nwhere EF, is the standard Gaussian-Bernoulli RBM energy function:?\n\nEn (a, hi) = see \u2014 Sorat wi gh \u2014S vera\u201d, (20.44)\n; :\n\nand E, is the cRBM energy function that models the conditional covariance\ninformation:\n\nEten = SOA\" HN) SEWN a\n\nThe parameter J) corresponds to the covariance weight vector associated with\nno and b) is a vector of covariance offsets. The combined energy function defines\na joint distribution:\n\n1\nPrne(@, RM, WO) = = exp{ \u2014Eine(a, h\u2122,W) b, (20.46)\n\nand a corresponding conditional distribution over the observations given h\u201d and\nnh as a multivariate Gaussian distribution:\n\nPne(@ | WO) =N fas ore | S>w.ghl\u201d ] ome |. (20.47)\nj\n\n-1\nNote that the covariance matrix lh = (5 1)\" 5 OT 47 is non-diagonal\n\nand that W is the weight matrix associated with the Ganssian RBM modeling the\n\n?This version of the Gaussian-Bernoulli RBM energy function assumes the image data has\nzero mean, per pixel. Pixel offsets can easily be added to the model to account for nonzero pixel\nmeans.\n\n679\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nconditional means. It is difficult to train the mcRBM via contrastive divergence or\npersistent contrastive divergence because of its non-diagonal conditional covariance\nstructure. CD and PCD require sampling from the joint distribution of \u00ab, kh\u201d, h\u00a9\nwhich, in a standard RBM, is accomplished by Gibbs sampling over the conditionals.\nHowever, in the mcRBM, sampling from pmc(ax | A), ni) requires computing\n(C\u2122)-! at every iteration of learning. This can be an impractical computational\nburden for larger observations. Ranzato and Hinton (2010) avoid direct sampling\nfrom the conditional pyc (\u00ab | h\u2122), n\u00a9) by sampling directly from the marginal\np(a) using Hamiltonian (hybrid) Monte Carlo (Neal, 1993) on the mcRBM free\nenergy.\n\nMean-Product of Student\u2019s t-distributions The mean-product of Student\u2019s\nt-distribution (mPoT) model (Ranzato ef al., 2010b) extends the PoT model (Welling\net al., 2003a) in a manner similar to how the mcRBM extends the cRBM. This\nis achieved by including nonzero Gaussian means by the addition of Gaussian\nRBM-like hidden units. Like the mcRBM, the PoT conditional distribution over the\nobservation is a multivariate Gaussian (with non-diagonal covariance) distribution;\nhowever, unlike the mcRBM, the complementary conditional distribution over the\nhidden variables is given by conditionally independent Gamma distributions. The\nGamma distribution G(k, 9) is a probability distribution over positive real numbers,\nwith mean k\u00e9@. It is not necessary to have a more detailed understanding of the\nGamma distribution to understand the basic ideas underlying the mPoT model.\n\nThe mPoT energy function is:\n\nEmpor(a, h'\u2122 , no) (20.48)\n_ (\u00a9) lL\u2019 wt)? (\u00a9)\n= En (eh) +> (\" (245 ( *) ) += ay)logn, )\n\n(20.49)\n\nwhere r) is the covariance weight vector associated with unit no? and Em (a, hi\u201d)\nis as defined in equation 20.44.\n\nJust as with the mcRBM, the mPoT model energy function specifies a mul-\ntivariate Gaussian, with a conditional distribution over a that has non-diagonal\ncovariance. Learning in the mPoT model\u2014again, like the mcRBM\u2014is compli-\ncated by the inability to sample from the non-diagonal Gaussian conditional\nPmPot (x | rer), hn), so Ranzato et al. (2010b) also advocate direct sampling of\np(a) via Hamiltonian (hybrid) Monte Carlo.\n\n680\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nSpike and Slab Restricted Boltzmann Machines Spike and slab restricted\nBoltzmann machines (Courville ef al., 2011) or ssRBMs provide another means\nof modeling the covariance structure of real-valued data. Compared to mcRBMs,\nssRBMs have the advantage of requiring neither matrix inversion nor Hamiltonian\nMonte Carlo methods. Like the mcRBM and the mPoT model, the ssRBM\u2019s binary\nhidden units encode the conditional covariance across pixels through the use of\nauxiliary real-valued variables.\n\nThe spike and slab RBM has two sets of hidden units: binary spike units h,\nand real-valued slab units s. The mean of the visible units conditioned on the\nhidden units is given by (h \u00a9 s)W'. In other words, each column W, ; defines a\ncomponent that can appear in the input when h; = 1. The corresponding spike\nvariable h; determines whether that component is present at all. The corresponding\nslab variable s; determines the intensity of that component, if it is present. When\na spike variable is active, the corresponding slab variable adds variance to the\ninput along the axis defined by W.,;. This allows us to model the covariance of the\ninputs. Fortunately, contrastive divergence and persistent contrastive divergence\nwith Gibbs sampling are still applicable. There is no need to invert any matrix.\n\nFormally, the ssRBM model is defined via its energy function:\nE(x, 8,h) = \u201cde W.isihi += 3\u00b0 (sedan) (20.50)\n7\n\nwhere 0; is the offset of the spike h; and A is a diagonal precision matrix on the\nobservations a. The parameter a; > 0 is a scalar precision parameter for the\nreal-valued slab variable s;. The parameter \u00ae; is a non-negative diagonal matrix\nthat defines an h-modulated quadratic penalty on w. Each pz; is a mean parameter\nfor the slab variable s;.\n\nWith the joint distribution defined via the energy function, it is relatively\nstraightforward to derive the ssRBM conditional distributions. For example,\nby marginalizing out the slab variables s, the conditional distribution over the\nobservations given the binary spike variables h is given by:\n\n11\nple lh) = Bayz / exp {\u2014E(a,8,h)} ds (20.52)\n= WN (sez DW cs) (20.53)\n\n681\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nwhere Coin = (A +0, Bhi - Dd; a; *hy W.,;W.\";) | The last equality holds only if\nthe covariance matrix Coin is positive definite.\n\nGating by the spike variables means that the true marginal distribution over\nh\u00a9s is sparse. This is different from sparse coding, where samples from the model\n\u201calmost never\u201d (in the measure theoretic sense) contain zeros in the code, and MAP\ninference is required to impose sparsity.\n\nComparing the ssRBM to the mcRBM and the mPoT models, the ssRBM\nparametrizes the conditional covariance of the observation in a significantly different\nway. The mcRBM and mPoT both model the covariance structure of the observation\n\nor. -1\nas (d; no I) ADT 4 1) , using the activation of the hidden units h; > 0 to\n\nenforce constraints on the conditional covariance in the direction r\u201c. In contrast,\nthe ssRBM specifies the conditional covariance of the observations using the hidden\nspike activations h; = 1 to pinch the precision matrix along the direction specified\nby the corresponding weight vector. The ssRBM conditional covariance is very\nsimilar to that given by a different model: the product of probabilistic principal\ncomponents analysis (PoPPCA) (Williams and Agakov, 2002). In the overcomplete\nsetting, sparse activations with the ssRBM parametrization permit significant\nvariance (above the nominal variance given by A) only in the selected directions\nof the sparsely activated h;. In the mcRBM or mPoT models, an overcomplete\nrepresentation would mean that to capture variation in a particular direction in\nthe observation space requires removing potentially all constraints with positive\nprojection in that direction. This would suggest that these models are less well\nsuited to the overcomplete setting.\n\nThe primary disadvantage of the spike and slab restricted Boltzmann machine\nis that some settings of the parameters can correspond to a covariance matrix\nthat is not positive definite. Such a covariance matrix places more unnormalized\nprobability on values that are farther from the mean, causing the integral over\nall possible outcomes to diverge. Generally this issue can be avoided with simple\nheuristic tricks. There is not yet any theoretically satisfying solution. Using\nconstrained optimization to explicitly avoid the regions where the probability is\nundefined is difficult to do without being overly conservative and also preventing\nthe model from accessing high-performing regions of parameter space.\n\nQualitatively, convolutional variants of the ssRBM produce excellent samples\nof natural images. Some examples are shown in figure 16.1.\n\nThe ssRBM allows for several extensions. Including higher-order interactions\nand average-pooling of the slab variables (Courville ef al., 2014) enables the model\nto learn excellent features for a classifier when labeled data is scarce. Adding a\n\n682\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nterm to the energy function that prevents the partition function from becoming\nundefined results in a sparse coding model, spike and slab sparse coding (Goodfellow\net al., 2013d), also known as S3C.\n\n20.6 Convolutional Boltzmann Machines\n\nAs seen in chapter 9, extremely high dimensional inputs such as images place\ngreat strain on the computation, memory and statistical requirements of machine\nlearning models. Replacing matrix multiplication by discrete convolution with a\nsmall kernel is the standard way of solving these problems for inputs that have\ntranslation invariant spatial or temporal structure. Desjardins and Bengio (2008)\nshowed that this approach works well when applied to RBMs.\n\nDeep convolutional networks usually require a pooling operation so that the\nspatial size of each successive layer decreases. Feedforward convolutional networks\noften use a pooling function such as the maximum of the elements to be pooled.\nIt is unclear how to generalize this to the setting of energy-based models. We\ncould introduce a binary pooling unit p over n binary detector units d and enforce\np = max; d; by setting the energy function to be oo whenever that constraint is\nviolated. This does not scale well though, as it requires evaluating 2\u201d different\nenergy configurations to compute the normalization constant. For a small 3 x 3\npooling region this requires 2\u00b0 = 512 energy function evaluations per pooling unit!\n\nLee et al. (2009) developed a solution to this problem called probabilistic\nmax pooling (not to be confused with \u201cstochastic pooling,\u201d which is a technique\nfor implicitly constructing ensembles of convolutional feedforward networks). The\nstrategy behind probabilistic max pooling is to constrain the detector units so\nat most one may be active at a time. This means there are only n+ 1 total\nstates (one state for each of the n detector units being on, and an additional state\ncorresponding to all of the detector units being off). The pooling unit is on if\nand only if one of the detector units is on. The state with all units off is assigned\nenergy zero. We can think of this as describing a model with a single variable that\n\nhas n+ 1 states, or equivalently as a model that has n + 1 variables that assigns\nenergy oo to all but n+ 1 joint assignments of variables.\n\nWhile efficient, probabilistic max pooling does force the detector units to be\nmutually exclusive, which may be a useful regularizing constraint in some contexts\nor a harmful limit on model capacity in other contexts. It also does not support\noverlapping pooling regions. Overlapping pooling regions are usually required\nto obtain the best performance from feedforward convolutional networks, so this\nconstraint probably greatly reduces the performance of convolutional Boltzmann\n\n683\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nmachines.\n\nLee et al. (2009) demonstrated that probabilistic max pooling could be used\nto build convolutional deep Boltzmann machines.? This model is able to perform\noperations such as filling in missing portions of its input. While intellectually\nappealing, this model is challenging to make work in practice, and usually does\nnot perform as well as a classifier as traditional convolutional networks trained\nwith supervised learning.\n\nMany convolutional models work equally well with inputs of many different\nspatial sizes. For Boltzmann machines, it is difficult to change the input size\nfor a variety of reasons. The partition function changes as the size of the input\nchanges. Moreover, many convolutional networks achieve size invariance by scaling\nup the size of their pooling regions proportional to the size of the input, but scaling\nBoltzmann machine pooling regions is awkward. Traditional convolutional neural\nnetworks can use a fixed number of pooling units and dynamically increase the\nsize of their pooling regions in order to obtain a fixed-size representation of a\nvariable-sized input. For Boltzmann machines, large pooling regions become too\nexpensive for the naive approach. The approach of Lee et al. (2009) of making\neach of the detector units in the same pooling region mutually exclusive solves\nthe computational problems, but still does not allow variable-size pooling regions.\nFor example, suppose we learn a model with 2 x 2 probabilistic max pooling over\ndetector units that learn edge detectors. This enforces the constraint that only\none of these edges may appear in each 2 x 2 region. If we then increase the size of\nthe input image by 50% in each direction, we would expect the number of edges to\nincrease correspondingly. Instead, if we increase the size of the pooling regions by\n50% in each direction to 3 x 3, then the mutual exclusivity constraint now specifies\nthat each of these edges may only appear once in a 3 x 3 region. As we grow\na model\u2019s input image in this way, the model generates edges with less density.\nOf course, these issues only arise when the model must use variable amounts of\npooling in order to emit a fixed-size output vector. Models that use probabilistic\nmax pooling may still accept variable-sized input images so long as the output of\nthe model is a feature map that can scale in size proportional to the input image.\n\nPixels at the boundary of the image also pose some difficulty, which is exac-\nerbated by the fact that connections in a Boltzmann machine are symmetric. If\nwe do not implicitly zero-pad the input, then there are fewer hidden units than\nvisible units, and the visible units at the boundary of the image are not modeled\n\n\u00b0The publication describes the model as a \u201cdeep belief network\u201d but because it can be described\nas a purely undirected model with tractable layer-wise mean field fixed point updates, it best fits\nthe definition of a deep Boltzmann machine.\n\n684\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nwell because they lie in the receptive field of fewer hidden units. However, if we do\nimplicitly zero-pad the input, then the hidden units at the boundary are driven by\nfewer input pixels, and may fail to activate when needed.\n\n20.7 Boltzmann Machines for Structured or Sequential\nOutputs\n\nIn the structured output scenario, we wish to train a model that can map from\nsome input x to some output y, and the different entries of y are related to each\nother and must obey some constraints. For example, in the speech synthesis task,\ny is a waveform, and the entire waveform must sound like a coherent utterance.\n\nA natural way to represent the relationships between the entries in y is to\nuse a probability distribution p(y | z). Boltzmann machines, extended to model\nconditional distributions, can supply this probabilistic model.\n\nThe same tool of conditional modeling with a Boltzmann machine can be used\nnot just for structured output tasks, but also for sequence modeling. In the latter\ncase, rather than mapping an input x to an output y, the model must estimate a\nprobability distribution over a sequence of variables, p(x, tee x), Conditional\nBoltzmann machines can represent factors of the form p(x | x), xi) in\norder to accomplish this task.\n\nAn important sequence modeling task for the video game and film industry\nis modeling sequences of joint angles of skeletons used to render 3-D characters.\nThese sequences are often collected using motion capture systems to record the\nmovements of actors. A probabilistic model of a character\u2019s movement allows\nthe generation of new, previously unseen, but realistic animations. To solve\nthis sequence modeling task, Taylor et al. (2007) introduced a conditional RBM\nmodeling p(w | #@\u2014),...,2\u00a2-\u2122) for small m. The model is an RBM over\np(a) whose bias parameters are a linear function of the preceding m values of a.\nWhen we condition on different values of #\u2014!) and earlier variables, we get a new\nRBM over x. The weights in the RBM over x never change, but by conditioning on\ndifferent past values, we can change the probability of different hidden units in the\nRBM being active. By activating and deactivating different subsets of hidden units,\nwe can make large changes to the probability distribution induced on x. Other\nvariants of conditional RBM (Munih ez al., 2011) and other variants of sequence\nmodeling using conditional RBMs are possible (Taylor and Hinton, 2009; Sutskever\net al., 2009; Boulanger-Lewandowski et al., 2012).\n\nAnother sequence modeling task is to model the distribution over sequences\n\n685\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nof musical notes used to compose songs. Boulanger-Lewandowski ef al. (2012)\nintroduced the RNN-RBM sequence model and applied it to this task. The\nRNN-RBM is a generative model of a sequence of frames x\u201c) consisting of an RNN\nthat emits the RBM parameters for each time step. Unlike previous approaches\nin which only the bias parameters of the RBM varied from one time step to the\nnext, the RNN-RBM uses the RNN to emit all of the parameters of the RBM,\nincluding the weights. To train the model, we need to be able to back-propagate\nthe gradient of the loss function through the RNN. The loss function is not applied\ndirectly to the RNN outputs. Instead, it is applied to the RBM. This means that\nwe must approximately differentiate the loss with respect to the RBM parameters\nusing contrastive divergence or a related algorithm. This approximate gradient\nmay then be back-propagated through the RNN using the usual back-propagation\nthrough time algorithm.\n\n20.8 Other Boltzmann Machines\n\nMany other variants of Boltzmann machines are possible.\n\nBoltzmann machines may be extended with different training criteria. We have\nfocused on Boltzmann machines trained to approximately maximize the generative\ncriterion log p(v). It is also possible to train discriminative RBMs that aim to\nmaximize log p(y | v) instead (Larochelle and Bengio, 2008). This approach often\nperforms the best when using a linear combination of both the generative and\nthe discriminative criteria. Unfortunately, RBMs do not seem to be as powerful\nsupervised learners as MLPs, at least using existing methodology.\n\nMost Boltzmann machines used in practice have only second-order interactions\nin their energy functions, meaning that their energy functions are the sum of many\nterms and each individual term only includes the product between two random\nvariables. An example of such a term is vjWj,jh;. It is also possible to train\nhigher-order Boltzmann machines (Sejnowski, 1987) whose energy function terms\ninvolve the products between many variables. Three-way interactions between a\nhidden unit and two different images can model spatial transformations from one\nframe of video to the next (Memisevic and Hinton, 2007, 2010). Multiplication by a\none-hot class variable can change the relationship between visible and hidden units\ndepending on which class is present (Nair and Hinton, 2009). One recent example\nof the use of higher-order interactions is a Boltzmann machine with two groups of\nhidden units, with one group of hidden units that interact with both the visible\nunits v and the class label y, and another group of hidden units that interact only\nwith the v input values (Luo ef al., 2011). This can be interpreted as encouraging\n\n686\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nsome hidden units to learn to model the input using features that are relevant to\nthe class but also to learn extra hidden units that explain nuisance details that\nare necessary for the samples of v to be realistic but do not determine the class\nof the example. Another use of higher-order interactions is to gate some features.\nSohn e\u00e9 al. (2013) introduced a Boltzmann machine with third-order interactions\nwith binary mask variables associated with each visible unit. When these masking\nvariables are set to zero, they remove the influence of a visible unit on the hidden\nunits. This allows visible units that are not relevant to the classification problem\nto be removed from the inference pathway that estimates the class.\n\nMore generally, the Boltzmann machine framework is a rich space of models\npermitting many more model structures than have been explored so far. Developing\na new form of Boltzmann machine requires some more care and creativity than\ndeveloping a new neural network layer, because it is often difficult to find an energy\nfunction that maintains tractability of all of the different conditional distributions\nneeded to use the Boltzmann machine, but despite this required effort the field\nremains open to innovation.\n\n20.9 Back-Propagation through Random Operations\n\nTraditional neural networks implement a deterministic transformation of some\ninput variables 2. When developing generative models, we often wish to extend\nneural networks to implement stochastic transformations of a. One straightforward\nway to do this is to augment the neural network with extra inputs z that are\nsampled from some simple probability distribution, such as a uniform or Gaussian\ndistribution. The neural network can then continue to perform deterministic\ncomputation internally, but the function f(x, z) will appear stochastic to an\nobserver who does not have access to z. Provided that f is continuous and\ndifferentiable, we can then compute the gradients necessary for training using\nback-propagation as usual.\n\nAs an example, let us consider the operation consisting of drawing samples y\n\nfrom a Gaussian distribution with mean py and variance 0\u201d:\n\ny ~N(p,07). (20.54)\n\nBecause an individual sample of y is not produced by a function, but rather by\na sampling process whose output changes every time we query it, it may seem\ncounterintuitive to take the derivatives of y with respect to the parameters of\nits distribution, 4 and o*. However, we can rewrite the sampling process as\n\n687\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\ntransforming an underlying random value z ~ N\u2019(z;0, 1) to obtain a sample from\nthe desired distribution:\ny=ptoz (20.55)\n\nWe are now able to back-propagate through the sampling operation, by regard-\ning it as a deterministic operation with an extra input z. Crucially, the extra input\nis arandom variable whose distribution is not a function of any of the variables\nwhose derivatives we want to calculate. The result tells us how an infinitesimal\nchange in 4 or 0 would change the output if we could repeat the sampling operation\nagain with the same value of z.\n\nBeing able to back-propagate through this sampling operation allows us to\nincorporate it into a larger graph. We can build elements of the graph on top of the\noutput of the sampling distribution. For example, we can compute the derivatives\nof some loss function J(y). We can also build elements of the graph whose outputs\nare the inputs or the parameters of the sampling operation. For example, we could\nbuild a larger graph with \u00bb = f(a;0) and o = g(#;@). In this augmented graph,\nwe can use back-propagation through these functions to derive VoJ(y).\n\nThe principle used in this Gaussian sampling example is more generally appli-\ncable. We can express any probability distribution of the form p(y; 8) or p(y | a; 0)\nas p(y | w), where w is a variable containing both parameters 0, and if applicable,\nthe inputs 2. Given a value y sampled from distribution p(y | w), where w may in\nturn be a function of other variables, we can rewrite\n\ny ~ ply | w) (20.56)\n\nas\ny = f(z), (20.57)\n\nwhere Zz is a source of randomness. We may then compute the derivatives of y with\nrespect to w using traditional tools such as the back-propagation algorithm applied\nto f, so long as f is continuous and differentiable almost everywhere. Crucially, w\nmust not be a function of z, and z must not be a function of w. This technique\nis often called the reparametrization trick, stochastic back-propagation or\nperturbation analysis.\n\nThe requirement that f be continuous and differentiable of course requires y\nto be continuous. If we wish to back-propagate through a sampling process that\nproduces discrete-valued samples, it may still be possible to estimate a gradient on\nw, using reinforcement learning algorithms such as variants of the REINFORCE\nalgorithm (Williams, 1992), discussed in section 20.9.1.\n\n688\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nIn neural network applications, we typically choose z to be drawn from some\nsimple distribution, such as a unit uniform or unit Gaussian distribution, and\nachieve more complex distributions by allowing the deterministic portion of the\nnetwork to reshape its input.\n\nThe idea of propagating gradients or optimizing through stochastic operations\ndates back to the mid-twentieth century (Price, 1958; Bonnet, 1964) and was\nfirst used for machine learning in the context of reinforcement learning (Williams,\n1992). More recently, it has been applied to variational approximations (Opper\nand Archambeau, 2009) and stochastic or generative neural networks (Bengio\net al., 2013b; Kingma, 2013; Kingma and Welling, 2014b,a; Rezende et al., 2014;\nGoodfellow et al., 2014c). Many networks, such as denoising autoencoders or\nnetworks regularized with dropout, are also naturally designed to take noise\nas an input without requiring any special reparametrization to make the noise\nindependent from the model.\n\n20.9.1 Back-Propagating through Discrete Stochastic Operations\n\nWhen a model emits a discrete variable y, the reparametrization trick is not\napplicable. Suppose that the model takes inputs \u00ab and parameters 6, both\nencapsulated in the vector w, and combines them with random noise z to produce\ny:\n\ny= f(zw). (20.58)\n\nBecause y is discrete, f must be a step function. The derivatives of a step function\nare not useful at any point. Right at each step boundary, the derivatives are\nundefined, but that is a small problem. The large problem is that the derivatives\nare zero almost everywhere, on the regions between step boundaries. The derivatives\nof any cost function J(y) therefore do not give any information for how to update\nthe model parameters 6.\n\nThe REINFORCE algorithm (REward Increment = Non-negative Factor x\nOffset Reinforcement x Characteristic Eligibility) provides a framework defining a\nfamily of simple but powerful solutions (Williams, 1992). The core idea is that\neven though J(f(z;w)) is a step function with useless derivatives, the expected\ncost E,vp(z) J (f(2;w)) is often a smooth function amenable to gradient descent.\nAlthough that expectation is typically not tractable when y is high-dimensional\n(or is the result of the composition of many discrete stochastic decisions), it can be\nestimated without bias using a Monte Carlo average. The stochastic estimate of\nthe gradient can be used with SGD or other stochastic gradient-based optimization\ntechniques.\n\n689\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nThe simplest version of REINFORCE can be derived by simply differentiating\nthe expected cost:\n\nlJ (y)] = 5 J(y)p(y) 20.59)\n\nPlt) ty) o> (y) Pw) 20.60)\n_ O log p(y)\n\n= ye J(y)p(y)\u2014 20.61)\n\nx - 3 J(y Plogr(y) 20.62)\n\n; Ow\nyOnp(y), i=1\nEquation 20.60 relies on the assumption that J does not reference w directly. It is\ntrivial to extend the approach to relax this assumption. Equation 20.61 exploits\nthe derivative rule for the logarithm, Glog ply) \u2014 1 opty) | Equation 20.62 gives\nPy) Iw\n\nan unbiased Monte Carlo estimator of the gradient.\n\nAnywhere we write p(y) in this section, one could equally write p(y | x). This\nis because p(y) is parametrized by w, and w contains both @ and \u00ab, if x is present.\n\nOne issue with the above simple REINFORCE estimator is that it has a very\nhigh variance, so that many samples of y need to be drawn to obtain a good\nestimator of the gradient, or equivalently, if only one sample is drawn, SGD will\nconverge very slowly and will require a smaller learning rate. It is possible to\nconsiderably reduce the variance of that estimator by using variance reduction\nmethods (Wilson, 1984; L\u2019Ecuyer, 1994). The idea is to modify the estimator so\nthat its expected value remains unchanged but its variance get reduced. In the\ncontext of REINFORCE, the proposed variance reduction methods involve the\ncomputation of a baseline that is used to offset J(y). Note that any offset b(w)\nthat does not depend on y would not change the expectation of the estimated\ngradient because\n\nOlo Olo\nEny) | egetu)) = aera (20.63)\n= yo) (20.64)\n=2 Yow) =21=0, (20.65)\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nwhich means that\n\nBa [a Wa 2 = oy REE] \u2014 i [\n(20.66)\n= Enty) (yee), (20.67)\n\nFurthermore, we can obtain the optimal b(w) by computing the variance of (J(y) \u2014\n\nb(w)) Hoge) under p(y) and minimizing with respect to b(w). What we find is\n\nthat this optimal baseline b*(w); is different for each element w; of the vector w:\n\nOlo; 2\n. Ey [Jy |\nb'(w)i = AI ae (20.68)\nE og p(y)\nPy) a\n\nWi,\n\nThe gradient estimator with respect to w; then becomes\nOlo\n(J(y) \u2014 b(w);) eee) (20.69)\n\nwhere b(w); estimates the above b*(w);. The estimate } is usually obtained by\nadding extra outputs to the neural network and training the new outputs to estimate\n\nEnvy) [J(y) 2g\u201d) and Envy) [zope] for each element of w. These extra\n\noutputs can be trained with the mean squared error objective, using respectively\n2\nJ(y) Hegel \u00a5)* ond dlegpty)?\n\nas targets when y is sampled from p(y), for a given\nw. The estimate b may then be recovered by substituting these estimates into\nequation 20.68. Mnih and Gregor (2014) preferred to use a single shared output\n(across all elements i of w) trained with the target J(y), using as baseline b(w) =\n\nEgy [F(y)]-\n\nVariance reduction methods have been introduced in the reinforcement learning\ncontext (Sutton et al., 2000; Weaver and Tao, 2001), generalizing previous work\non the case of binary reward by Dayan (1990). See Bengio et al. (2013b), Mnih\nand Gregor (2014), Ba et al. (2014), Mnih et al. (2014), or Xu et al. (2015) for\nexamples of modern uses of the REINFORCE algorithm with reduced variance in\nthe context of deep learning. In addition to the use of an input-dependent baseline\nb@), Mnih and Gregor (2014) found that the scale of (J(y) \u2014 b(w)) could be\nadjusted during training by dividing it by its standard deviation estimated by a\nmoving average during training, as a kind of adaptive learning rate, to counter\nthe effect of important variations that occur during the course of training in the\n\n691\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nmagnitude of this quantity. Mnih and Gregor (2014) called this heuristic variance\nnormalization.\n\nREINFORCE-based estimators can be understood as estimating the gradient\nby correlating choices of y with corresponding values of J(y). If a good value of y\nis unlikely under the current parametrization, it might take a long time to obtain it\nby chance, and get the required signal that this configuration should be reinforced.\n\n20.10 Directed Generative Nets\n\nAs discussed in chapter 16, directed graphical models make up a prominent class\nof graphical models. While directed graphical models have been very popular\nwithin the greater machine learning community, within the smaller deep learning\ncommunity they have until roughly 2013 been overshadowed by undirected models\nsuch as the RBM.\n\nIn this section we review some of the standard directed graphical models that\nhave traditionally been associated with the deep learning community.\n\nWe have already described deep belief networks, which are a partially directed\nmodel. We have also already described sparse coding models, which can be thought\nof as shallow directed generative models. They are often used as feature learners\nin the context of deep learning, though they tend to perform poorly at sample\ngeneration and density estimation. We now describe a variety of deep, fully directed\nmodels.\n\n20.10.1 Sigmoid Belief Nets\n\nSigmoid belief networks (Neal, 1990) are a simple form of directed graphical model\nwith a specific kind of conditional probability distribution. In general, we can\nthink of a sigmoid belief network as having a vector of binary states s, with each\nelement of the state influenced by its ancestors:\n\np(si) =o | > Wyasytdi | - (20.70)\n\nj<i\n\nThe most common structure of sigmoid belief network is one that is divided\ninto many layers, with ancestral sampling proceeding through a series of many\nhidden layers and then ultimately generating the visible layer. This structure is\nvery similar to the deep belief network, except that the units at the beginning of\n\n692\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nthe sampling process are independent from each other, rather than sampled from\na restricted Boltzmann machine. Such a structure is interesting for a variety of\nreasons. One reason is that the structure is a universal approximator of probability\ndistributions over the visible units, in the sense that it can approximate any\nprobability distribution over binary variables arbitrarily well, given enough depth,\neven if the width of the individual layers is restricted to the dimensionality of the\nvisible layer (Sutskever and Hinton, 2008).\n\nWhile generating a sample of the visible units is very efficient in a sigmoid\nbelief network, most other operations are not. Inference over the hidden units given\nthe visible units is intractable. Mean field inference is also intractable because the\nvariational lower bound involves taking expectations of cliques that encompass\nentire layers. This problem has remained difficult enough to restrict the popularity\nof directed discrete networks.\n\nOne approach for performing inference in a sigmoid belief network is to construct\na different lower bound that is specialized for sigmoid belief networks (Saul et al.,\n1996). This approach has only been applied to very small networks. Another\napproach is to use learned inference mechanisms as described in section 19.5. The\nHelmholtz machine (Dayan ef al., 1995; Dayan and Hinton, 1996) is a sigmoid belief\nnetwork combined with an inference network that predicts the parameters of the\nmean field distribution over the hidden units. Modern approaches (Gregor ef al.,\n2014; Mnih and Gregor, 2014) to sigmoid belief networks still use this inference\nnetwork approach. These techniques remain difficult due to the discrete nature of\nthe latent variables. One cannot simply back-propagate through the output of the\ninference network, but instead must use the relatively unreliable machinery for back-\npropagating through discrete sampling processes, described in section 20.9.1. Recent\napproaches based on importance sampling, reweighted wake-sleep (Bornschein and\nBengio, 2015) and bidirectional Helmholtz machines (Bornschein ef al., 2015)\nmake it possible to quickly train sigmoid belief networks and reach state-of-the-art\nperformance on benchmark tasks.\n\nA special case of sigmoid belief networks is the case where there are no latent\nvariables. Learning in this case is efficient, because there is no need to marginalize\nlatent variables out of the likelihood. A family of models called auto-regressive\nnetworks generalize this fully visible belief network to other kinds of variables\nbesides binary variables and other structures of conditional distributions besides log-\nlinear relationships. Auto-regressive networks are described later, in section 20.10.7.\n\n693\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n20.10.2 Differentiable Generator Nets\n\nMany generative models are based on the idea of using a differentiable generator\nnetwork. The model transforms samples of latent variables z to samples x or\nto distributions over samples x using a differentiable function g(z; 99) which is\ntypically represented by a neural network. This model class includes variational\nautoencoders, which pair the generator net with an inference net, generative\nadversarial networks, which pair the generator network with a discriminator\nnetwork, and techniques that train generator networks in isolation.\n\nGenerator networks are essentially just parametrized computational procedures\nfor generating samples, where the architecture provides the family of possible\ndistributions to sample from and the parameters select a distribution from within\nthat family.\n\nAs an example, the standard procedure for drawing samples from a normal\ndistribution with mean yw and covariance 4 is to feed samples z from a normal\ndistribution with zero mean and identity covariance into a very simple generator\nnetwork. This generator network contains just one affine layer:\n\nw=g(z)=put+Lz (20.71)\n\nwhere L is given by the Cholesky decomposition of \u00a5.\n\nPseudorandom number generators can also use nonlinear transformations of\nsimple distributions. For example, inverse transform sampling (Devroye, 2013)\ndraws a scalar z from U(0,1) and applies a nonlinear transformation to a scalar\nx. In this case g(z) is given by the inverse of the cumulative distribution function\nF(a) =f oe p(v)dv. If we are able to specify p(x), integrate over x, and invert the\nresulting function, we can sample from p(#) without using machine learning.\n\nTo generate samples from more complicated distributions that are difficult\nto specify directly, difficult to integrate over, or whose resulting integrals are\ndifficult to invert, we use a feedforward network to represent a parametric family\nof nonlinear functions g, and use training data to infer the parameters selecting\nthe desired function.\n\nWe can think of g as providing a nonlinear change of variables that transforms\nthe distribution over z into the desired distribution over x.\n\nRecall from equation 3.47 that, for invertible, differentiable, continuous g,\n\npz(Z) = px(g(z))\n\naer( 2) ; (20.72)\n\n694\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nThis implicitly imposes a probability distribution over x:\n\nPa (x ae (20.73)\nCULag\n\nOf course, this formula may be difficult to evaluate, depending on the choice of\ng, so we often use indirect means of learning g, rather than trying to maximize\nlog p(x) directly.\n\nIn some cases, rather than using g to provide a sample of x directly, we use g\nto define a conditional distribution over xz. For example, we could use a generator\nnet whose final layer consists of sigmoid outputs to provide the mean parameters\nof Bernoulli distributions:\n\np(xi=1| z) = g(2)i- (20.74)\n\nIn this case, when we use g to define p(x | z), we impose a distribution over x by\nmarginalizing z:\np(a) = E,p(a | z). (20.75)\n\nBoth approaches define a distribution p,(a) and allow us to train various\ncriteria of pg using the reparametrization trick of section 20.9.\n\nThe two different approaches to formulating generator nets\u2014emitting the\nparameters of a conditional distribution versus directly emitting samples\u2014have\ncomplementary strengths and weaknesses. When the generator net defines a\nconditional distribution over a, it is capable of generating discrete data as well as\ncontinuous data. When the generator net provides samples directly, it is capable of\ngenerating only continuous data (we could introduce discretization in the forward\npropagation, but doing so would mean the model could no longer be trained using\nback-propagation). The advantage to direct sampling is that we are no longer\nforced to use conditional distributions whose form can be easily written down and\nalgebraically manipulated by a human designer.\n\nApproaches based on differentiable generator networks are motivated by the\nsuccess of gradient descent applied to differentiable feedforward networks for\nclassification. In the context of supervised learning, deep feedforward networks\ntrained with gradient-based learning seem practically guaranteed to succeed given\nenough hidden units and enough training data. Can this same recipe for success\ntransfer to generative modeling?\n\nGenerative modeling seems to be more difficult than classification or regression\nbecause the learning process requires optimizing intractable criteria. In the context\n\n695\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nof differentiable generator nets, the criteria are intractable because the data does\nnot specify both the inputs z and the outputs ax of the generator net. In the case\nof supervised learning, both the inputs a and the outputs y were given, and the\noptimization procedure needs only to learn how to produce the specified mapping.\nIn the case of generative modeling, the learning procedure needs to determine how\nto arrange z space in a useful way and additionally how to map from z to a.\n\nDosovitskiy et al. (2015) studied a simplified problem, where the correspondence\nbetween z and z@ is given. Specifically, the training data is computer-rendered\nimagery of chairs. The latent variables z are parameters given to the rendering\nengine describing the choice of which chair model to use, the position of the chair,\nand other configuration details that affect the rendering of the image. Using this\nsynthetically generated data, a convolutional network is able to learn to map z\ndescriptions of the content of an image to x approximations of rendered images.\nThis suggests that contemporary differentiable generator networks have sufficient\nmodel capacity to be good generative models, and that contemporary optimization\nalgorithms have the ability to fit them. The difficulty lies in determining how to\ntrain generator networks when the value of z for each a is not fixed and known\nahead of each time.\n\nThe following sections describe several approaches to training differentiable\ngenerator nets given only training samples of a.\n\n20.10.3. Variational Autoencoders\n\nThe variational autoencoder or VAE (Kingma, 2013; Rezende et al., 2014) is a\ndirected model that uses learned approximate inference and can be trained purely\nwith gradient-based methods.\n\nTo generate a sample from the model, the VAE first draws a sample z from\nthe code distribution pmode (z). The sample is then run through a differentiable\ngenerator network g(z). Finally, x is sampled from a distribution Pmodel(%; g(2)) =\nPmodel(% | Z). However, during training, the approximate inference network (or\nencoder) \u00a2(z | z) is used to obtain z and pmodel(# | Z) is then viewed as a decoder\nnetwork.\n\nThe key insight behind variational autoencoders is that they may be trained\nby maximizing the variational lower bound L\u00a3(q) associated with data point x:\n\nL\u00a3(q) = E 2~g(z|2) log Pmodel (2; \u00a9) + H(q(z | x)) (20.76)\n= Ey g(z}a) 108 Pmode(# | 2) \u2014 Dk (9(2 | #)||Pmodei(Z)) (20.77)\n< log Pmodei(#). (20.78)\n\n696\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nIn equation 20.76, we recognize the first term as the joint log-likelihood of the visible\nand hidden variables under the approximate posterior over the latent variables\n(just like with EM, except that we use an approximate rather than the exact\nposterior). We recognize also a second term, the entropy of the approximate\nposterior. When q is chosen to be a Gaussian distribution, with noise added to\na predicted mean value, maximizing this entropy term encourages increasing the\nstandard deviation of this noise. More generally, this entropy term encourages the\nvariational posterior to place high probability mass on many z values that could\nhave generated x, rather than collapsing to a single point estimate of the most\nlikely value. In equation 20.77, we recognize the first term as the reconstruction\nlog-likelihood found in other autoencoders. The second term tries to make the\napproximate posterior distribution g(z | x) and the model prior pmodel(z) approach\neach other.\n\nTraditional approaches to variational inference and learning infer q via an opti-\nmization algorithm, typically iterated fixed point equations (section 19.4). These\napproaches are slow and often require the ability to compute E,.g log p modei(Z, @)\nin closed form. The main idea behind the variational autoencoder is to train a\nparametric encoder (also sometimes called an inference network or recognition\nmodel) that produces the parameters of g. So long as z is a continuous variable, we\ncan then back-propagate through samples of z drawn from q(z | x) = q(z; f(a; 0))\nin order to obtain a gradient with respect to 8. Learning then consists solely of\nmaximizing \u00a3 with respect to the parameters of the encoder and decoder. All of\nthe expectations in \u00a3 may be approximated by Monte Carlo sampling.\n\nThe variational autoencoder approach is elegant, theoretically pleasing, and\nsimple to implement. It also obtains excellent results and is among the state of the\nart approaches to generative modeling. Its main drawback is that samples from\nvariational autoencoders trained on images tend to be somewhat blurry. The causes\nof this phenomenon are not yet known. One possibility is that the blurriness is\nan intrinsic effect of maximum likelihood, which minimizes Dxzy(Pqata||Pmoael)- AS\nillustrated in figure 3.6, this means that the model will assign high probability to\npoints that occur in the training set, but may also assign high probability to other\npoints. These other points may include blurry images. Part of the reason that the\nmodel would choose to put probability mass on blurry images rather than some\nother part of the space is that the variational autoencoders used in practice usually\nhave a Gaussian distribution for pmodel(x; g(z)). Maximizing a lower bound on\nthe likelihood of such a distribution is similar to training a traditional autoencoder\nwith mean squared error, in the sense that it has a tendency to ignore features\nof the input that occupy few pixels or that cause only a small change in the\nbrightness of the pixels that they occupy. This issue is not specific to VAEs and\n\n697\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nis shared with generative models that optimize a log-likelihood, or equivalently,\nDx (Paatal|Pmodel), aS argued by Theis ef al. (2015) and by Huszar (2015). Another\ntroubling issue with contemporary VAE models is that they tend to use only a small\nsubset of the dimensions of z, as if the encoder was not able to transform enough\nof the local directions in input space to a space where the marginal distribution\nmatches the factorized prior.\n\nThe VAE framework is very straightforward to extend to a wide range of model\narchitectures. This is a key advantage over Boltzmann machines, which require\nextremely careful model design to maintain tractability. VAEs work very well with\na diverse family of differentiable operators. One particularly sophisticated VAE\nis the deep recurrent attention writer or DRAW model (Gregor ef al., 2015).\nDRAW uses a recurrent encoder and recurrent decoder combined with an attention\nmechanism. The generation process for the DRAW model consists of sequentially\nvisiting different small image patches and drawing the values of the pixels at those\npoints. VAEs can also be extended to generate sequences by defining variational\nRNNs (Chung ef al., 2015b) by using a recurrent encoder and decoder within\nthe VAE framework. Generating a sample from a traditional RNN involves only\nnon-deterministic operations at the output space. Variational RNNs also have\nrandom variability at the potentially more abstract level captured by the VAE\nlatent variables.\n\nThe VAE framework has been extended to maximize not just the traditional\n\nvariational lower bound, but instead the importance weighted autoencoder\n(Burda et al., 2015) objective:\n\nk .\nye dei(a, 2 )\nL(x, q) = (1) 2) wq(z|a) log k Wa) l Fs) : (20.79)\ni=l\n\nThis new objective is equivalent to the traditional lower bound \u00a3 whenk = 1.\nHowever, it may also be interpreted as forming an estimate of the true log pmodei(X)\nusing importance sampling of z from proposal distribution q(z | x). The importance\nweighted autoencoder objective is also a lower bound on log pmodei (a@) and becomes\ntighter as k increases.\n\nVariational autoencoders have some interesting connections to the MP-DBM\nand other approaches that involve back-propagation through the approximate\ninference graph (Goodfellow et al., 2013b; Stoyanov et al., 2011; Brakel et al., 2013).\nThese previous approaches required an inference procedure such as mean field fixed\npoint equations to provide the computational graph. The variational autoencoder\nis defined for arbitrary computational graphs, which makes it applicable to a wider\nrange of probabilistic model families because there is no need to restrict the choice\n\n698\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nof models to those with tractable mean field fixed point equations. The variational\nautoencoder also has the advantage that it increases a bound on the log-likelihood\nof the model, while the criteria for the MP-DBM and related models are more\nheuristic and have little probabilistic interpretation beyond making the results of\napproximate inference accurate. One disadvantage of the variational autoencoder\nis that it learns an inference network for only one problem, inferring z given a.\nThe older methods are able to perform approximate inference over any subset of\nvariables given any other subset of variables, because the mean field fixed point\nequations specify how to share parameters between the computational graphs for\nall of these different problems.\n\nOne very nice property of the variational autoencoder is that simultaneously\ntraining a parametric encoder in combination with the generator network forces the\nmodel to learn a predictable coordinate system that the encoder can capture. This\nmakes it an excellent manifold learning algorithm. See figure 20.6 for examples of\nlow-dimensional manifolds learned by the variational autoencoder. In one of the\ncases demonstrated in the figure, the algorithm discovered two independent factors\nof variation present in images of faces: angle of rotation and emotional expression.\n\n20.10.4 Generative Adversarial Networks\n\nGenerative adversarial networks or GANs (Goodfellow et al., 2014c) are another\ngenerative modeling approach based on differentiable generator networks.\n\nGenerative adversarial networks are based on a game theoretic scenario in\nwhich the generator network must compete against an adversary. The generator\nnetwork directly produces samples \u00ab\u00a9 = g(z; 99) ). Its adversary, the discriminator\nnetwork, attempts to distinguish between samples drawn from the training data\nand samples drawn from the generator. The discriminator emits a probability value\ngiven by d(x; A), indicating the probability that x is a real training example\nrather than a fake sample drawn from the model.\n\nThe simplest way to formulate learning in generative adversarial networks is\nas a zero-sum game, in which a function v(9 ; g) determines the payoff of the\ndiscriminator. The generator receives \u2014v(09), 9) as its own payoff. During\nlearning, each player attempts to maximize its own payoff, so that at convergence\n\ng* =argmin max v(g, d). (20.80)\ng\n\nThe default choice for v is\n\nv(9, 0) = Exrpaata log d(@) + Eaxpnoac log (1 \u2014 d(x). (20.81)\n699\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n~~ 44S S22 QQKDDAAPPNPNPPLD\n\u2014S4 swe 2eQQgndd MPN NNNHO\n\u2014\u2014~Hweennnnvvwwwowvoo\nKKK Ke eee nnnuvVVWW\u201doOo\nKKK KK eS POnwwuNWNUDvod\nKKK Ke ee oonwwwwwwaaod\nKKK KK OO GowwWwWwwWODood\nKKK KROHN HHKHSHWHWWHOOBOODO\nSK KK KRHHHHGHHHHHGBBOO\n~TFFKFKWHAHHHHHHHHHHQADOO\n~~FKFBAHAHH HHHHHHHRQOWOO\n~~ FAAKAHH | HHHHHHHRHRWOG\n~~SVAAHH 4 4 HHHHHESESOHOHO\nSAANSNSSSLRSSNVNVNSSEEEKH\n\nNNN VII VIVID HNL |\nNVVAVNVN NVQ ODDO DOD Do HP pee\nNVA ALKHNOO\u00aeLD. o.oo DP PP EH\nNWA A ADDO B\u00ae\u00ae LS oOo PP PP HH\nNS VDDM DDD SOAPS PP PKL HH\nSNS SDM QBQDIAADPPPPHHH\n\nFigure 20.6: Examples of two-dimensional coordinate systems for high-dimensional mani-\nfolds, learned by a variational autoencoder (Kingma and Welling, 2014a). Two dimensions\nmay be plotted directly on the page for visualization, so we can gain an understanding of\nhow the model works by training a model with a 2-D latent code, even if we believe the\nintrinsic dimensionality of the data manifold is much higher. The images shown are not\nexamples from the training set but images @ actually generated by the model p(a | z),\nsimply by changing the 2-D \u201ccode\u201d z (each image corresponds to a different choice of \u201ccode\u201d\nz ona 2-D uniform grid). (Left)The two-dimensional map of the Frey faces manifold.\nOne dimension that has been discovered (horizontal) mostly corresponds to a rotation of\nthe face, while the other (vertical) corresponds to the emotional expression. (Right)/The\ntwo-dimensional map of the MNIST manifold.\n\nThis drives the discriminator to attempt to learn to correctly classify samples as real\nor fake. Simultaneously, the generator attempts to fool the classifier into believing\nits samples are real. At convergence, the generator\u2019s samples are indistinguishable\nfrom real data, and the discriminator outputs 3 everywhere. The discriminator\nmay then be discarded.\n\nThe main motivation for the design of GANs is that the learning process\nrequires neither approximate inference nor approximation of a partition function\ngradient. In the case where max, v(g, d) is convex in 04 ) (such as the case where\noptimization is performed directly in the space of probability density functions)\nthe procedure is guaranteed to converge and is asymptotically consistent.\n\nUnfortunately, learning in GANs can be difficult in practice when g and d\nare represented by neural networks and maxqv(g,d) is not convex. Goodfellow\n\n700\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n(2014) identified non-convergence as an issue that may cause GANs to underfit.\nIn general, simultaneous gradient descent on two players\u2019 costs is not guaranteed\nto reach an equilibrium. Consider for example the value function v(a, b) = ab,\nwhere one player controls a and incurs cost ab, while the other player controls b\nand receives a cost \u2014ab. If we model each player as making infinitesimally small\ngradient steps, each player reducing their own cost at the expense of the other\nplayer, then a and b go into a stable, circular orbit, rather than arriving at the\nequilibrium point at the origin. Note that the equilibria for a minimax game are\nnot local minima of v. Instead, they are points that are simultaneously minima\nfor both players\u2019 costs. This means that they are saddle points of v that are local\nminima with respect to the first player\u2019s parameters and local maxima with respect\nto the second player\u2019s parameters. It is possible for the two players to take turns\nincreasing then decreasing v forever, rather than landing exactly on the saddle\npoint where neither player is capable of reducing its cost. It is not known to what\nextent this non-convergence problem affects GANs.\n\nGoodfellow (2014) identified an alternative formulation of the payoffs, in which\nthe game is no longer zero-sum, that has the same expected gradient as maximum\nlikelihood learning whenever the discriminator is optimal. Because maximum\nlikelihood training converges, this reformulation of the GAN game should also\nconverge, given enough samples. Unfortunately, this alternative formulation does\nnot seem to improve convergence in practice, possibly due to suboptimality of the\ndiscriminator, or possibly due to high variance around the expected gradient.\n\nIn realistic experiments, the best-performing formulation of the GAN game\nis a different formulation that is neither zero-sum nor equivalent to maximum\nlikelihood, introduced by Goodfellow et al. (2014c) with a heuristic motivation. In\nthis best-performing formulation, the generator aims to increase the log probability\nthat the discriminator makes a mistake, rather than aiming to decrease the log\nprobability that the discriminator makes the correct prediction. This reformulation\nis motivated solely by the observation that it causes the derivative of the generator\u2019s\ncost function with respect to the discriminator\u2019s logits to remain large even in the\nsituation where the discriminator confidently rejects all generator samples.\n\nStabilization of GAN learning remains an open problem. Fortunately, GAN\nlearning performs well when the model architecture and hyperparameters are care-\nfully selected. Radford et al. (2015) crafted a deep convolutional GAN (DCGAN)\nthat performs very well for image synthesis tasks, and showed that its latent repre-\nsentation space captures important factors of variation, as shown in figure 15.9.\nSee figure 20.7 for examples of images generated by a DCGAN generator.\n\nThe GAN learning problem can also be simplified by breaking the generation\n\n701\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.7: Images generated by GANSs trained on the LSUN dataset. (Left)/Images\nof bedrooms generated by a DCGAN model, reproduced with permission from Radford\net al. (2015). (Right)Images of churches generated by a LAPGAN model, reproduced with\npermission from Denton et al. (2015).\n\nprocess into many levels of detail. It is possible to train conditional GANs (Mirza\nand Osindero, 2014) that learn to sample from a distribution p(x | y) rather\nthan simply sampling from a marginal distribution p(a). Denton ef al. (2015)\nshowed that a series of conditional GANs can be trained to first generate a very\nlow-resolution version of an image, then incrementally add details to the image.\nThis technique is called the LAPGAN model, due to the use of a Laplacian pyramid\nto generate the images containing varying levels of detail. LAPGAN generators\nare able to fool not only discriminator networks but also human observers, with\nexperimental subjects identifying up to 40% of the outputs of the network as\nbeing real data. See figure 20.7 for examples of images generated by a LAPGAN\ngenerator.\n\nOne unusual capability of the GAN training procedure is that it can fit proba-\nbility distributions that assign zero probability to the training points. Rather than\nmaximizing the log probability of specific points, the generator net learns to trace\nout a manifold whose points resemble training points in some way. Somewhat para-\ndoxically, this means that the model may assign a log-likelihood of negative infinity\nto the test set, while still representing a manifold that a human observer judges\nto capture the essence of the generation task. This is not clearly an advantage or\na disadvantage, and one may also guarantee that the generator network assigns\nnon-zero probability to all points simply by making the last layer of the generator\nnetwork add Gaussian noise to all of the generated values. Generator networks\nthat add Gaussian noise in this manner sample from the same distribution that one\nobtains by using the generator network to parametrize the mean of a conditional\n\n702\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nGaussian distribution.\n\nDropout seems to be important in the discriminator network. In particular,\nunits should be stochastically dropped while computing the gradient for the\ngenerator network to follow. Following the gradient of the deterministic version of\nthe discriminator with its weights divided by two does not seem to be as effective.\nLikewise, never using dropout seems to yield poor results.\n\nWhile the GAN framework is designed for differentiable generator networks,\nsimilar principles can be used to train other kinds of models. For example, self-\nsupervised boosting can be used to train an RBM generator to fool a logistic\nregression discriminator (Welling et al., 2002).\n\n20.10.5 Generative Moment Matching Networks\n\nGenerative moment matching networks (Li ef al., 2015; Dziugaite et al.,\n2015) are another form of generative model based on differentiable generator\nnetworks. Unlike VAEs and GANs, they do not need to pair the generator network\nwith any other network\u2014neither an inference network as used with VAEs nor a\ndiscriminator network as used with GANs.\n\nThese networks are trained with a technique called moment matching. The\nbasic idea behind moment matching is to train the generator in such a way that\nmany of the statistics of samples generated by the model are as similar as possible\nto those of the statistics of the examples in the training set. In this context, a\nmoment is an expectation of different powers of a random variable. For example,\nthe first moment is the mean, the second moment is the mean of the squared\nvalues, and so on. In multiple dimensions, each element of the random vector may\nbe raised to different powers, so that a moment may be any quantity of the form\n\nExT; \u00ab;\" (20.82)\n\nT\n\nwhere n = [ny,n2,...,ng]' is a vector of non-negative integers.\n\nUpon first examination, this approach seems to be computationally infeasible.\nFor example, if we want to match all the moments of the form ajxj;, then we need\nto minimize the difference between a number of values that is quadratic in the\ndimension of x. Moreover, even matching all of the first and second moments\nwould only be sufficient to fit a multivariate Gaussian distribution, which captures\nonly linear relationships between values. Our ambitions for neural networks are to\ncapture complex nonlinear relationships, which would require far more moments.\nGANs avoid this problem of exhaustively enumerating all moments by using a\n\n703\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\ndynamically updated discriminator that automatically focuses its attention on\nwhichever statistic the generator network is matching the least effectively.\n\nInstead, generative moment matching networks can be trained by minimizing\na cost function called maximum mean discrepancy (Schdlkopf and Smola,\n2002; Gretton et al., 2012) or MMD. This cost function measures the error in\nthe first moments in an infinite-dimensional space, using an implicit mapping\nto feature space defined by a kernel function in order to make computations on\ninfinite-dimensional vectors tractable. The MMD cost is zero if and only if the two\ndistributions being compared are equal.\n\nVisually, the samples from generative moment matching networks are somewhat\ndisappointing. Fortunately, they can be improved by combining the generator\nnetwork with an autoencoder. First, an autoencoder is trained to reconstruct the\ntraining set. Next, the encoder of the autoencoder is used to transform the entire\ntraining set into code space. The generator network is then trained to generate\ncode samples, which may be mapped to visually pleasing samples via the decoder.\n\nUnlike GANs, the cost function is defined only with respect to a batch of\nexamples from both the training set and the generator network. It is not possible\nto make a training update as a function of only one training example or only\none sample from the generator network. This is because the moments must be\ncomputed as an empirical average across many samples. When the batch size is too\nsmall, MMD can underestimate the true amount of variation in the distributions\nbeing sampled. No finite batch size is sufficiently large to eliminate this problem\nentirely, but larger batches reduce the amount of underestimation. When the batch\nsize is too large, the training procedure becomes infeasibly slow, because many\nexamples must be processed in order to compute a single small gradient step.\n\nAs with GANs, it is possible to train a generator net using MMD even if that\ngenerator net assigns zero probability to the training points.\n\n20.10.6 Convolutional Generative Networks\n\nWhen generating images, it is often useful to use a generator network that includes\na convolutional structure (see for example Goodfellow et al. (2014c) or Dosovitskiy\net al. (2015)). To do so, we use the \u201ctranspose\u201d of the convolution operator,\ndescribed in section 9.5. This approach often yields more realistic images and does\nso using fewer parameters than using fully connected layers without parameter\nsharing.\n\nConvolutional networks for recognition tasks have information flow from the\nimage to some summarization layer at the top of the network, often a class label.\n\n704\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nAs this image flows upward through the network, information is discarded as the\nrepresentation of the image becomes more invariant to nuisance transformations.\nIn a generator network, the opposite is true. Rich details must be added as\nthe representation of the image to be generated propagates through the network,\nculminating in the final representation of the image, which is of course the image\nitself, in all of its detailed glory, with object positions and poses and textures and\nlighting. The primary mechanism for discarding information in a convolutional\nrecognition network is the pooling layer. The generator network seems to need to\nadd information. We cannot put the inverse of a pooling layer into the generator\nnetwork because most pooling functions are not invertible. A simpler operation is\nto merely increase the spatial size of the representation. An approach that seems\nto perform acceptably is to use an \u201cun-pooling\u201d as introduced by Dosovitskiy ef al.\n(2015). This layer corresponds to the inverse of the max-pooling operation under\ncertain simplifying conditions. First, the stride of the max-pooling operation is\nconstrained to be equal to the width of the pooling region. Second, the maximum\ninput within each pooling region is assumed to be the input in the upper-left\ncorner. Finally, all non-maximal inputs within each pooling region are assumed to\nbe zero. These are very strong and unrealistic assumptions, but they do allow the\nmax-pooling operator to be inverted. The inverse un-pooling operation allocates\na tensor of zeros, then copies each value from spatial coordinate 7 of the input\nto spatial coordinate i x k of the output. The integer value k defines the size\nof the pooling region. Even though the assumptions motivating the definition of\nthe un-pooling operator are unrealistic, the subsequent layers are able to learn to\ncompensate for its unusual output, so the samples generated by the model as a\nwhole are visually pleasing.\n\n20.10.7 Auto-Regressive Networks\n\nAuto-regressive networks are directed probabilistic models with no latent random\nvariables. The conditional probability distributions in these models are represented\nby neural networks (sometimes extremely simple neural networks such as logistic\nregression). The graph structure of these models is the complete graph. They\ndecompose a joint probability over the observed variables using the chain rule of\nprobability to obtain a product of conditionals of the form P(xa | t_1,...,21).\nSuch models have been called fully-visible Bayes networks (FVBNs) and used\nsuccessfully in many forms, first with logistic regression for each conditional\ndistribution (Frey, 1998) and then with neural networks with hidden units (Bengio\nand Bengio, 2000b; Larochelle and Murray, 2011). In some forms of auto-\nregressive networks, such as NADE (Larochelle and Murray, 2011), described\n\n705\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nin section 20.10.10 below, we can introduce a form of parameter sharing that\nbrings both a statistical advantage (fewer unique parameters) and a computational\nadvantage (less computation). This is one more instance of the recurring deep\nlearning motif of reuse of features.\n\nFigure 20.8: A fully visible belief network predicts the i-th variable from the i \u2014 1\nprevious ones. (Top)The directed graphical model for an FVBN. (Bottom)Corresponding\ncomputational graph, in the case of the logistic FVBN, where each prediction is made by\na linear predictor.\n\n20.10.8 Linear Auto-Regressive Networks\n\nThe simplest form of auto-regressive network has no hidden units and no sharing\nof parameters or features. Each P(2; | \u00a3;_1,...,21) is parametrized as a linear\nmodel (linear regression for real-valued data, logistic regression for binary data,\nsoftmax regression for discrete data). This model was introduced by Frey (1998)\nand has O(d?) parameters when there are d variables to model. It is illustrated in\nfigure 20.8.\n\nIf the variables are continuous, a linear auto-regressive model is merely another\nway to formulate a multivariate Gaussian distribution, capturing linear pairwise\ninteractions between the observed variables.\n\nLinear auto-regressive networks are essentially the generalization of linear\nclassification methods to generative modeling. They therefore have the same\n\n706\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nadvantages and disadvantages as linear classifiers. Like linear classifiers, they may\nbe trained with convex loss functions, and sometimes admit closed form solutions\n(as in the Gaussian case). Like linear classifiers, the model itself does not offer\na way of increasing its capacity, so capacity must be raised using techniques like\nbasis expansions of the input or the kernel trick.\n\nFigure 20.9: A neural auto-regressive network predicts the i-th variable x; from the i \u2014 1\nprevious ones, but is parametrized so that features (groups of hidden units denoted h;)\nthat are functions of 71,..., x; can be reused in predicting all of the subsequent variables\n\nLips Vi42) +++ 5 Ud\n\n20.10.9 Neural Auto-Regressive Networks\n\nNeural auto-regressive networks (Bengio and Bengio, 2000a,b) have the same\nleft-to-right graphical model as logistic auto-regressive networks (figure 20.8) but\nemploy a different parametrization of the conditional distributions within that\ngraphical model structure. The new parametrization is more powerful in the sense\nthat its capacity can be increased as much as needed, allowing approximation of\nany joint distribution. The new parametrization can also improve generalization\nby introducing a parameter sharing and feature sharing principle common to deep\nlearning in general. The models were motivated by the objective of avoiding the\ncurse of dimensionality arising out of traditional tabular graphical models, sharing\nthe same structure as figure 20.8. In tabular discrete probabilistic models, each\nconditional distribution is represented by a table of probabilities, with one entry\nand one parameter for each possible configuration of the variables involved. By\nusing a neural network instead, two advantages are obtained:\n\n707\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n1. The parametrization of each P(a; | #;_1,...,21) by a neural network with\n(i \u2014 1) x k inputs and k outputs (if the variables are discrete and take k\nvalues, encoded one-hot) allows one to estimate the conditional probability\nwithout requiring an exponential number of parameters (and examples), yet\nstill is able to capture high-order dependencies between the random variables.\n\n2. Instead of having a different neural network for the prediction of each 2;,\na left-to-right connectivity illustrated in figure 20.9 allows one to merge all\nthe neural networks into one. Equivalently, it means that the hidden layer\nfeatures computed for predicting a; can be reused for predicting \u00abi+ (k > 0).\nThe hidden units are thus organized in groups that have the particularity\nthat all the units in the 7-th group only depend on the input values 71,..., 7;.\nThe parameters used to compute these hidden units are jointly optimized\nto improve the prediction of all the variables in the sequence. This is\nan instance of the reuse principle that recurs throughout deep learning in\nscenarios ranging from recurrent and convolutional network architectures to\nmulti-task and transfer learning.\n\nEach P(2; | %;-1,...,2%1) can represent a conditional distribution by having\noutputs of the neural network predict parameters of the conditional distribution\nof a, as discussed in section 6.2.1.1. Although the original neural auto-regressive\nnetworks were initially evaluated in the context of purely discrete multivariate\ndata (with a sigmoid output for a Bernoulli variable or softmax output for a\nmultinoulli variable) it is natural to extend such models to continuous variables or\njoint distributions involving both discrete and continuous variables.\n\n20.10.10 NADE\n\nThe neural autoregressive density estimator (NADE) is a very successful\nrecent form of neural auto-regressive network (Larochelle and Murray, 2011). The\nconnectivity is the same as for the original neural auto-regressive network of Bengio\nand Bengio (2000b) but NADE introduces an additional parameter sharing scheme,\nas illustrated in figure 20.10. The parameters of the hidden units of different groups\nj are shared.\n\nThe weights Wi x; from the i-th input a; to the k-th element of the j-th group\n\nof hidden unit nv ) (j > 4) are shared among the groups:\nWind = Wii. (20.83)\n\nThe remaining weights, where j < 7, are zero.\n\n708\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.10: An illustration of the neural autoregressive density estimator (NADE). The\nhidden units are organized in groups h\u201c) so that only the inputs 1,...,\u00a3; participate\nin computing h\u2122\u00ae and predicting P(a; | vj-1,...,a1), for j > i. NADE is differentiated\nfrom earlier neural auto-regressive networks by the use of a particular weight sharing\npattern: W/),; = W;,i is shared (indicated in the figure by the use of the same line pattern\nfor every instance of a replicated weight) for all the weights going out from x; to the k-th\nunit of any group j > 7%. Recall that the vector (Wi, W2,,.--, Wri) is denoted W, ;.\n\nLarochelle and Murray (2011) chose this sharing scheme so that forward\npropagation in a NADE model loosely resembles the computations performed in\nmean field inference to fill in missing inputs in an RBM. This mean field inference\ncorresponds to running a recurrent network with shared weights and the first step\nof that inference is the same as in NADE. The only difference is that with NADE,\nthe output weights connecting the hidden units to the output are parametrized\nindependently from the weights connecting the input units to the hidden units. In\nthe RBM, the hidden-to-output weights are the transpose of the input-to-hidden\nweights. The NADE architecture can be extended to mimic not just one time step\nof the mean field recurrent inference but to mimic k steps. This approach is called\nNADE-k (Raiko et al., 2014).\n\nAs mentioned previously, auto-regressive networks may be extend to process\ncontinuous-valued data. A particularly powerful and generic way of parametrizing\na continuous density is as a Gaussian mixture (introduced in section 3.9.6) with\nmixture weights a; (the coefficient or prior probability for component 7), per-\ncomponent conditional mean ju; and per-component conditional variance oP. A\nmodel called RNADE (Uria e\u00e9 al., 2013) uses this parametrization to extend NADE\nto real values. As with other mixture density networks, the parameters of this\n\n709\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\ndistribution are outputs of the network, with the mixture weight probabilities\nproduced by a softmax unit, and the variances parametrized so that they are\npositive. Stochastic gradient descent can be numerically ill-behaved due to the\ninteractions between the conditional means ju; and the conditional variances oF.\nTo reduce this difficulty, Uria et al. (2013) use a pseudo-gradient that replaces the\ngradient on the mean, in the back-propagation phase.\n\nAnother very interesting extension of the neural auto-regressive architectures\ngets rid of the need to choose an arbitrary order for the observed variables (Murray\nand Larochelle, 2014). In auto-regressive networks, the idea is to train the network\nto be able to cope with any order by randomly sampling orders and providing the\ninformation to hidden units specifying which of the inputs are observed (on the\nright side of the conditioning bar) and which are to be predicted and are thus\nconsidered missing (on the left side of the conditioning bar). This is nice because\nit allows one to use a trained auto-regressive network to perform any inference\nproblem (i.e. predict or sample from the probability distribution over any subset\nof variables given any subset) extremely efficiently. Finally, since many orders of\nvariables are possible (n! for n variables) and each order o of variables yields a\ndifferent p(x | 0), we can form an ensemble of models for many values of o:\n\nPensemble (x) =\n\nk\nSo p(x | of), (20.84)\ni=1\n\nTle\n\nThis ensemble model usually generalizes better and assigns higher probability to\nthe test set than does an individual model defined by a single ordering.\n\nIn the same paper, the authors propose deep versions of the architecture, but\nunfortunately that immediately makes computation as expensive as in the original\nneural auto-regressive neural network (Bengio and Bengio, 2000b). The first layer\nand the output layer can still be computed in O(nh) multiply-add operations,\nas in the regular NADE, where hf is the number of hidden units (the size of the\ngroups h;, in figures 20.10 and 20.9), whereas it is O(n7h) in Bengio and Bengio\n(2000b). However, for the other hidden layers, the computation is O(n7h?) if every\n\u201cprevious\u201d group at layer | participates in predicting the \u201cnext\u201d group at layer /+1,\nassuming n groups of h hidden units at each layer. Making the i-th group at layer\n1+ 1 only depend on the i-th group, as in Murray and Larochelle (2014) at layer 1\nreduces it to O(nh?), which is still h times worse than the regular NADE.\n\n710\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n20.11 Drawing Samples from Autoencoders\n\nIn chapter 14, we saw that many kinds of autoencoders learn the data distribution.\nThere are close connections between score matching, denoising autoencoders, and\ncontractive autoencoders. These connections demonstrate that some kinds of\nautoencoders learn the data distribution in some way. We have not yet seen how\nto draw samples from such models.\n\nSome kinds of autoencoders, such as the variational autoencoder, explicitly\nrepresent a probability distribution and admit straightforward ancestral sampling.\nMost other kinds of autoencoders require MCMC sampling.\n\nContractive autoencoders are designed to recover an estimate of the tangent\nplane of the data manifold. This means that repeated encoding and decoding with\ninjected noise will induce a random walk along the surface of the manifold (Rifai\net al., 2012; Mesnil ef al., 2012). This manifold diffusion technique is a kind of\nMarkov chain.\n\nThere is also a more general Markov chain that can sample from any denoising\nautoencoder.\n\n20.11.1 Markov Chain Associated with any Denoising Autoen-\ncoder\n\nThe above discussion left open the question of what noise to inject and where,\nin order to obtain a Markov chain that would generate from the distribution\nestimated by the autoencoder. Bengio et al. (2013c) showed how to construct\nsuch a Markov chain for generalized denoising autoencoders. Generalized\ndenoising autoencoders are specified by a denoising distribution for sampling an\nestimate of the clean input given the corrupted input.\n\nEach step of the Markov chain that generates from the estimated distribution\nconsists of the following sub-steps, illustrated in figure 20.11:\n\n1. Starting from the previous state ax, inject corruption noise, sampling x from\n\n2. Encode & into h = f(x).\n3. Decode h to obtain the parameters w = g(h) of p(x | w = g(h)) = p(x| 2).\n\n4. Sample the next state # from p(x | w = g(h)) = p(x| 2).\n\n711\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nFigure 20.11: Each step of the Markov chain associated with a trained denoising autoen-\ncoder, that generates the samples from the probabilistic model implicitly trained by the\ndenoising log-likelihood criterion. Each step consists in (a) injecting noise via corruption\nprocess C' in state x, yielding , (b) encoding it with function f, yielding h = f(x),\n(c) decoding the result with function g, yielding parameters w for the reconstruction\ndistribution, and (d) given w, sampling a new state from the reconstruction distribution\np(x | w =9(f(#))). In the typical squared reconstruction error case, g(h) = \u00a3, which\nestimates E[a | &], corruption consists in adding Gaussian noise and sampling from\np(x | w) consists in adding Gaussian noise, a second time, to the reconstruction &. The\nlatter noise level should correspond to the mean squared error of reconstructions, whereas\nthe injected noise is a hyperparameter that controls the mixing speed as well as the\nextent to which the estimator smooths the empirical distribution (Vincent, 2011). In the\nexample illustrated here, only the C and p conditionals are stochastic steps (f and g are\ndeterministic computations), although noise can also be injected inside the autoencoder,\nas in generative stochastic networks (Bengio et al., 2014).\n\n712\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nBengio et al. (2014) showed that if the autoencoder p(x | X) forms a consistent\nestimator of the corresponding true conditional distribution, then the stationary\ndistribution of the above Markov chain forms a consistent estimator (albeit an\nimplicit one) of the data generating distribution of x.\n\n20.11.2 Clamping and Conditional Sampling\n\nSimilarly to Boltzmann machines, denoising autoencoders and their generalizations\n(such as GSNs, described below) can be used to sample from a conditional distri-\nbution p(xy | Xo), simply by clamping the observed units xf and only resampling\nthe free units x\u00bb given xf and the sampled latent variables (if any). For example,\nMP-DBMs can be interpreted as a form of denoising autoencoder, and are able\nto sample missing inputs. GSNs later generalized some of the ideas present in\nMP-DBMs to perform the same operation (Bengio et al., 2014). Alain et al. (2015)\nidentified a missing condition from Proposition 1 of Bengio ef al. (2014), which is\nthat the transition operator (defined by the stochastic mapping going from one\nstate of the chain to the next) should satisfy a property called detailed balance,\nwhich specifies that a Markov Chain at equilibrium will remain in equilibrium\nwhether the transition operator is run in forward or reverse.\n\nAn experiment in clamping half of the pixels (the right part of the image) and\nrunning the Markov chain on the other half is shown in figure 20.12.\n\n713\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\noO\n/\n2\n3\n\"4\n5\nss\n7\n4\n\nAI SQakKwWKs CO\nPI SoagqarkK wWwKn 0\nCI SOKWLKN ODO\nMA SQR WLS |\nMa SouxWens dO\nAI SGKWLNS O\nPIEYYLWLN DO\nANI EGKWLENS QO\n\nWA STORXWPEN OO\n\n4 9 9 9 9 9 4 7 413\n\nFigure 20.12: Hlustration of clamping the right half of the image and running the Markov\nChain by resampling only the left half at each step. These samples come from a GSN\ntrained to reconstruct MNIST digits at each time step using the walkback procedure.\n\n20.11.3  Walk-Back Training Procedure\n\nThe walk-back training procedure was proposed by Bengio ef al. (2013c) as a way\nto accelerate the convergence of generative training of denoising autoencoders.\nInstead of performing a one-step encode-decode reconstruction, this procedure\nconsists in alternative multiple stochastic encode-decode steps (as in the generative\nMarkov chain) initialized at a training example (just like with the contrastive\ndivergence algorithm, described in section 18.2) and penalizing the last probabilistic\nreconstructions (or all of the reconstructions along the way).\n\nTraining with k steps is equivalent (in the sense of achieving the same stationary\ndistribution) as training with one step, but practically has the advantage that\nspurious modes further from the data can be removed more efficiently.\n\n20.12 Generative Stochastic Networks\n\nGenerative stochastic networks or GSNs (Bengio ef al., 2014) are generaliza-\ntions of denoising autoencoders that include latent variables h in the generative\n\n714\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nMarkov chain, in addition to the visible variables (usually denoted x).\n\nA GSN is parametrized by two conditional probability distributions which\nspecify one step of the Markov chain:\n\n1. p(x(*) | h() ) tells how to generate the next visible variable given the current\nlatent state. Such a \u201creconstruction distribution\u201d is also found in denoising\nautoencoders, RBMs, DBNs and DBMs.\n\n2. p(hi*) | h&*1), xD) ) tells how to update the latent state variable, given\nthe previous latent state and visible variable.\n\nDenoising autoencoders and GSNs differ from classical probabilistic models\n(directed or undirected) in that they parametrize the generative process itself rather\nthan the mathematical specification of the joint distribution of visible and latent\nvariables. Instead, the latter is defined implicitly, if it exists, as the stationary\ndistribution of the generative Markov chain. The conditions for existence of the\nstationary distribution are mild and are the same conditions required by standard\nMCMC methods (see section 17.3). These conditions are necessary to guarantee\nthat the chain mixes, but they can be violated by some choices of the transition\ndistributions (for example, if they were deterministic).\n\nOne could imagine different training criteria for GSNs. The one proposed and\nevaluated by Bengio et al. (2014) is simply reconstruction log-probability on the\nvisible units, just like for denoising autoencoders. This is achieved by clamping\nx) = & to the observed example and maximizing the probability of generating x\nat some subsequent time steps, i.e., maximizing log p(x\\*) =a | h)), where h*)\nis sampled from the chain, given x) = a. In order to estimate the gradient of\nlog p(x) =a | h)) with respect to the other pieces of the model, Bengio et al.\n(2014) use the reparametrization trick, introduced in section 20.9.\n\nThe walk-back training protocol (described in section 20.11.3) was used (Ben-\ngio et al., 2014) to improve training convergence of GSNs.\n\n20.12.1 Discriminant GSNs\n\nThe original formulation of GSNs (Bengio et al., 2014) was meant for unsupervised\nlearning and implicitly modeling p(x) for observed data x, but it is possible to\nmodify the framework to optimize p(y | x).\n\nFor example, Zhou and Troyanskaya (2014) generalize GSNs in this way, by\nonly back-propagating the reconstruction log-probability over the output variables,\nkeeping the input variables fixed. They applied this successfully to model sequences\n\n715\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n(protein secondary structure) and introduced a (one-dimensional) convolutional\nstructure in the transition operator of the Markov chain. It is important to\nremember that, for each step of the Markov chain, one generates a new sequence\nfor each layer, and that sequence is the input for computing other layer values (say\nthe one below and the one above) at the next time step.\n\nHence the Markov chain is really over the output variable (and associated higher-\nlevel hidden layers), and the input sequence only serves to condition that chain,\nwith back-propagation allowing to learn how the input sequence can condition the\noutput distribution implicitly represented by the Markov chain. It is therefore a\ncase of using the GSN in the context of structured outputs.\n\nZohrer and Pernkopf (2014) introduced a hybrid model that combines a super-\nvised objective (as in the above work) and an unsupervised objective (as in the\noriginal GSN work), by simply adding (with a different weight) the supervised and\nunsupervised costs i.e., the reconstruction log-probabilities of y and x respectively.\nSuch a hybrid criterion had previously been introduced for RBMs by Larochelle\nand Bengio (2008). They show improved classification performance using this\nscheme.\n\n20.13. Other Generation Schemes\n\nThe methods we have described so far use either MCMC sampling, ancestral\nsampling, or some mixture of the two to generate samples. While these are the\nmost popular approaches to generative modeling, they are by no means the only\napproaches.\n\nSohl-Dickstein et al. (2015) developed a diffusion inversion training scheme\nfor learning a generative model, based on non-equilibrium thermodynamics. The\napproach is based on the idea that the probability distributions we wish to sample\nfrom have structure. This structure can gradually be destroyed by a diffusion\nprocess that incrementally changes the probability distribution to have more\nentropy. To form a generative model, we can run the process in reverse, by training\na model that gradually restores the structure to an unstructured distribution.\nBy iteratively applying a process that brings a distribution closer to the target\none, we can gradually approach that target distribution. This approach resembles\nMCMC methods in the sense that it involves many iterations to produce a sample.\nHowever, the model is defined to be the probability distribution produced by\nthe final step of the chain. In this sense, there is no approximation induced by\nthe iterative procedure. The approach introduced by Solil-Dickstein et al. (2015)\nis also very close to the generative interpretation of the denoising autoencoder\n\n716\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\n(section 20.11.1). As with the denoising autoencoder, diffusion inversion trains a\ntransition operator that attempts to probabilistically undo the effect of adding\nsome noise. The difference is that diffusion inversion requres undoing only one step\nof the diffusion process, rather than traveling all the way back to a clean data point.\nThis addresses the following dilemma present with the ordinary reconstruction\nlog-likelihood objective of denoising autoencoders: with small levels of noise the\nlearner only sees configurations near the data points, while with large levels of\nnoise it is asked to do an almost impossible job (because the denoising distribution\nis highly complex and multi-modal). With the diffusion inversion objective, the\nlearner can learn the shape of the density around the data points more precisely\nas well as remove spurious modes that could show up far from the data points.\n\nAnother approach to sample generation is the approximate Bayesian com-\nputation (ABC) framework (Rubin et al., 1984). In this approach, samples are\nrejected or modified in order to make the moments of selected functions of the\nsamples match those of the desired distribution. While this idea uses the moments\nof the samples like in moment matching, it is different from moment matching\nbecause it modifies the samples themselves, rather than training the model to\nautomatically emit samples with the correct moments. Bachman and Precup (2015)\nshowed how to use ideas from ABC in the context of deep learning, by using ABC\nto shape the MCMC trajectories of GSNs.\n\nWe expect that many other possible approaches to generative modeling await\ndiscovery.\n\n20.14 Evaluating Generative Models\n\nResearchers studying generative models often need to compare one generative\nmodel to another, usually in order to demonstrate that a newly invented generative\nmodel is better at capturing some distribution than the pre-existing models.\n\nThis can be a difficult and subtle task. In many cases, we can not actually\nevaluate the log probability of the data under the model, but only an approximation.\nIn these cases, it is important to think and communicate clearly about exactly what\nis being measured. For example, suppose we can evaluate a stochastic estimate of\nthe log-likelihood for model A, and a deterministic lower bound on the log-likelihood\nfor model B. If model A gets a higher score than model B, which is better? If we\ncare about determining which model has a better internal representation of the\ndistribution, we actually cannot tell, unless we have some way of determining how\nloose the bound for model B is. However, if we care about how well we can use\nthe model in practice, for example to perform anomaly detection, then it is fair to\n\n717\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nsay that a model is preferable based on a criterion specific to the practical task of\ninterest, e.g., based on ranking test examples and ranking criteria such as precision\nand recall.\n\nAnother subtlety of evaluating generative models is that the evaluation metrics\nare often hard research problems in and of themselves. It can be very difficult\nto establish that models are being compared fairly. For example, suppose we use\nAIS to estimate log Z in order to compute log p(a) \u2014 log Z for a new model we\nhave just invented. A computationally economical implementation of AIS may fail\nto find several modes of the model distribution and underestimate Z, which will\nresult in us overestimating log p(a). It can thus be difficult to tell whether a high\nlikelihood estimate is due to a good model or a bad AIS implementation.\n\nOther fields of machine learning usually allow for some variation in the pre-\nprocessing of the data. For example, when comparing the accuracy of object\nrecognition algorithms, it is usually acceptable to preprocess the input images\nslightly differently for each algorithm based on what kind of input requirements\nit has. Generative modeling is different because changes in preprocessing, even\nvery small and subtle ones, are completely unacceptable. Any change to the input\ndata changes the distribution to be captured and fundamentally alters the task.\nFor example, multiplying the input by 0.1 will artificially increase likelihood by a\nfactor of 10.\n\nIssues with preprocessing commonly arise when benchmarking generative models\non the MNIST dataset, one of the more popular generative modeling benchmarks.\nMNIST consists of grayscale images. Some models treat MNIST images as points\nin a real vector space, while others treat them as binary. Yet others treat the\ngrayscale values as probabilities for a binary samples. It is essential to compare\nreal-valued models only to other real-valued models and binary-valued models only\nto other binary-valued models. Otherwise the likelihoods measured are not on the\nsame space. For binary-valued models, the log-likelihood can be at most zero, while\nfor real-valued models it can be arbitrarily high, since it is the measurement of a\ndensity. Among binary models, it is important to compare models using exactly\nthe same kind of binarization. For example, we might binarize a gray pixel to 0 or 1\nby thresholding at 0.5, or by drawing a random sample whose probability of being\n1 is given by the gray pixel intensity. If we use the random binarization, we might\nbinarize the whole dataset once, or we might draw a different random example for\neach step of training and then draw multiple samples for evaluation. Each of these\nthree schemes yields wildly different likelihood numbers, and when comparing\ndifferent models it is important that both models use the same binarization scheme\nfor training and for evaluation. In fact, researchers who apply a single random\n\n718\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nbinarization step share a file containing the results of the random binarization, so\nthat there is no difference in results based on different outcomes of the binarization\nstep.\n\nBecause being able to generate realistic samples from the data distribution\nis one of the goals of a generative model, practitioners often evaluate generative\nmodels by visually inspecting the samples. In the best case, this is done not by the\nresearchers themselves, but by experimental subjects who do not know the source\nof the samples (Denton ef al., 2015). Unfortunately, it is possible for a very poor\nprobabilistic model to produce very good samples. A common practice to verify if\nthe model only copies some of the training examples is illustrated in figure 16.1.\nThe idea is to show for some of the generated samples their nearest neighbor in\nthe training set, according to Euclidean distance in the space of a. This test is\nintended to detect the case where the model overfits the training set and just\nreproduces training instances. It is even possible to simultaneously underfit and\noverfit yet still produce samples that individually look good. Imagine a generative\nmodel trained on images of dogs and cats that simply learns to reproduce the\ntraining images of dogs. Such a model has clearly overfit, because it does not\nproduces images that were not in the training set, but it has also underfit, because\nit assigns no probability to the training images of cats. Yet a human observer\nwould judge each individual image of a dog to be high quality. In this simple\nexample, it would be easy for a human observer who can inspect many samples to\ndetermine that the cats are absent. In more realistic settings, a generative model\ntrained on data with tens of thousands of modes may ignore a small number of\nmodes, and a human observer would not easily be able to inspect or remember\nenough images to detect the missing variation.\n\nSince the visual quality of samples is not a reliable guide, we often also\nevaluate the log-likelihood that the model assigns to the test data, when this is\ncomputationally feasible. Unfortunately, in some cases the likelihood seems not\nto measure any attribute of the model that we really care about. For example,\nreal-valued models of MNIST can obtain arbitrarily high likelihood by assigning\narbitrarily low variance to background pixels that never change. Models and\nalgorithms that detect these constant features can reap unlimited rewards, even\nthough this is not a very useful thing to do. The potential to achieve a cost\napproaching negative infinity is present for any kind of maximum likelihood\nproblem with real values, but it is especially problematic for generative models of\nMNIST because so many of the output values are trivial to predict. This strongly\nsuggests a need for developing other ways of evaluating generative models.\n\nTheis et al. (2015) review many of the issues involved in evaluating generative\n\n719\n", "CHAPTER 20. DEEP GENERATIVE MODELS\n\nmodels, including many of the ideas described above. They highlight the fact\nthat there are many different uses of generative models and that the choice of\nmetric must match the intended use of the model. For example, some generative\nmodels are better at assigning high probability to most realistic points while other\ngenerative models are better at rarely assigning high probability to unrealistic\npoints. These differences can result from whether a generative model is designed\nto minimize Dxp(Paatal|Pmodel) OC DKL(Pmodel ||Paata), a8 illustrated in figure 3.6.\nUnfortunately, even when we restrict the use of each metric to the task it is most\nsuited for, all of the metrics currently in use continue to have serious weaknesses.\nOne of the most important research topics in generative modeling is therefore not\njust how to improve generative models, but in fact, designing new techniques to\nmeasure our progress.\n\n20.15 Conclusion\n\nTraining generative models with hidden units is a powerful way to make models\nunderstand the world represented in the given training data. By learning a model\nPmodel(@) and a representation Pmode(h | x), a generative model can provide\nanswers to many inference problems about the relationships between input variables\nin z and can provide many different ways of representing x by taking expectations\nof h at different layers of the hierarchy. Generative models hold the promise to\nprovide AI systems with a framework for all of the many different intuitive concepts\nthey need to understand, and the ability to reason about these concepts in the\nface of uncertainty. We hope that our readers will find new ways to make these\napproaches more powerful and continue the journey to understanding the principles\nthat underlie learning and intelligence.\n\n720\n", "Bibliography\n\nAbadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., Corrado, G. 5., Davis,\nA., Dean, J., Devin, M., Ghemawat, S., Goodfellow, I., Harp, A., Irving, G., Isard, M.,\nJia, Y., Jozefowicz, R., Kaiser, L., Kudlur, M., Levenberg, J., Man\u00e9, D., Monga, R..,\nMoore, S., Murray, D., Olah, C., Schuster, M., Shlens, J., Steiner, B., Sutskever, I,\nTalwar, K., Tucker, P., Vanhoucke, V., Vasudevan, V., Vi\u00e9gas, F., Vinyals, O., Warden,\nP., Wattenberg, M., Wicke, M., Yu, Y., and Zheng, X. (2015). TensorFlow: Large-scale\nmachine learning on heterogeneous systems. Software available from tensorflow.org. 25,\n214, 446\n\nAckley, D. H., Hinton, G. E., and Sejnowski, T. J. (1985). A learning algorithm for\nBoltzmann machines. Cognitive Science, 9, 147-169. 570, 654\n\nAlain, G. and Bengio, Y. (2013). What regularized auto-encoders learn from the data\ngenerating distribution. In ICLR\u20192013, arXiv:1211.4246. 507, 513, 514, 521\n\nAlain, G., Bengio, Y., Yao, L., Eric Thibodeau-Laufer, Yosinski, J., and Vincent, P. (2015).\nGSNs: Generative stochastic networks. arXiv:1503.05571. 510, 713\n\nAnderson, E. (1935). The Irises of the Gasp\u00e9 Peninsula. Bulletin of the American Iris\nSociety, 59, 2-5. 21\n\nBa, J., Mnih, V., and Kavukcuoglu, K. (2014). Multiple object recognition with visual\nattention. arXiv:1412.7755. 691\n\nBachman, P. and Precup, D. (2015). Variational generative stochastic networks with\ncollaborative shaping. In Proceedings of the 32nd International Conference on Machine\nLearning, ICML 2015, Lille, France, 6-11 July 2015, pages 1964-1972. 717\n\nBacon, P.-L., Bengio, E., Pineau, J., and Precup, D. (2015). Conditional computation in\nneural networks using a decision-theoretic approach. In 2nd Multidisciplinary Conference\non Reinforcement Learning and Decision Making (RLDM 2015). 450\n\nBagnell, J. A. and Bradley, D. M. (2009). Differentiable sparse coding. In D. Koller,\nD. Schuurmans, Y. Bengio, and L. Bottou, editors, Advances in Neural Information\nProcessing Systems 21 (NIPS\u201908), pages 113-120. 498\n\n721\n", "BIBLIOGRAPHY\n\nBahdanau, D., Cho, K., and Bengio, Y. (2015). Neural machine translation by jointly\nlearning to align and translate. In JCLR\u20192015, arXiv:1409.0478. 25, 101, 397, 418, 420,\n465, 475, 476\n\nBahl, L. R., Brown, P., de Souza, P. V., and Mercer, R. L. (1987). Speech recognition\nwith continuous-parameter hidden Markov models. Computer, Speech and Language, 2,\n219-234. 458\n\nBaldi, P. and Hornik, K. (1989). Neural networks and principal component analysis:\nLearning from examples without local minima. Neural Networks, 2, 53-58. 286\n\nBaldi, P., Brunak, S., Frasconi, P., Soda, G., and Pollastri, G. (1999). Exploiting the\npast and the future in protein secondary structure prediction. Bioinformatics, 15(11),\n937-946. 395\n\nBaldi, P., Sadowski, P., and Whiteson, D. (2014). Searching for exotic particles in\nhigh-energy physics with deep learning. Nature communications, 5. 26\n\nBallard, D. H., Hinton, G. E., and Sejnowski, T. J. (1983). Parallel vision computation.\nNature. 452\n\nBarlow, H. B. (1989). Unsupervised learning. Neural Computation, 1, 295-311. 147\n\nBarron, A. E. (1993). Universal approximation bounds for superpositions of a sigmoidal\nfunction. IEEE Trans. on Information Theory, 39, 930-945. 199\n\nBartholomew, D. J. (1987). Latent variable models and factor analysis. Oxford University\nPress. 490\n\nBasilevsky, A. (1994). Statistical Factor Analysis and Related Methods: Theory and\nApplications. Wiley. 490\n\nBastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I. J., Bergeron, A.,\nBouchard, N., and Bengio, Y. (2012). Theano: new features and speed improvements.\nDeep Learning and Unsupervised Feature Learning NIPS 2012 Workshop. 25, 82, 214,\n222, 446\n\nBasu, S. and Christensen, J. (2013). Teaching classification boundaries to humans. In\nAAATI\u20192018. 329\n\nBaxter, J. (1995). Learning internal representations. In Proceedings of the 8th International\nConference on Computational Learning Theory (COLT\u201995), pages 311-320, Santa Cruz,\nCalifornia. ACM Press. 245\n\nBayer, J. and Osendorfer, C. (2014). Learning stochastic recurrent networks. ArXiv\ne-prints. 265\n\nBecker, S. and Hinton, G. (1992). A self-organizing neural network that discovers surfaces\nin random-dot stereograms. Nature, 355, 161-163. 541\n\n722\n", "BIBLIOGRAPHY\n\nBehnke, S. (2001). Learning iterative image reconstruction in the neural abstraction\npyramid. Int. J. Computational Intelligence and Applications, 1(4), 427-438. 515\n\nBeiu, V., Quintana, J. M., and Avedillo, M. J. (2003). VLSI implementations of threshold\nlogic-a comprehensive survey. Neural Networks, IEEE Transactions on, 14(5), 1217-\n1243. 451\n\nBelkin, M. and Niyogi, P. (2002). Laplacian eigenmaps and spectral techniques for\nembedding and clustering. In T. Dietterich, S. Becker, and Z. Ghahramani, editors,\nAdvances in Neural Information Processing Systems 14 (NIPS\u201901), Cambridge, MA.\nMIT Press. 244\n\nBelkin, M. and Niyogi, P. (2003). Laplacian eigenmaps for dimensionality reduction and\ndata representation. Neural Computation, 15(6), 1373-1396. 164, 518\n\nBengio, E., Bacon, P.-L., Pineau, J., and Precup, D. (2015a). Conditional computation in\nneural networks for faster models. arXiv:1511.06297. 450\n\nBengio, S. and Bengio, Y. (2000a). Taking on the curse of dimensionality in joint\ndistributions using neural networks. [EEE Transactions on Neural Networks, special\nissue on Data Mining and Knowledge Discovery, 11(3), 550-557. 707\n\nBengio, S., Vinyals, O., Jaitly, N., and Shazeer, N. (2015b). Scheduled sampling for\nsequence prediction with recurrent neural networks. Technical report, arXiv:1506.03099.\n384\n\nBengio, Y. (1991). Artificial Neural Networks and their Application to Sequence Recognition.\nPh.D. thesis, McGill University, (Computer Science), Montreal, Canada. 407\n\nBengio, Y. (2000). Gradient-based optimization of hyperparameters. Neural Computation,\n12(8), 1889-1900. 435\n\nBengio, Y. (2002). New distributed probabilistic language models. Technical Report 1215,\nDept. IRO, Universit\u00e9 de Montr\u00e9al. 467\n\nBengio, Y. (2009). Learning deep architectures for AI. Now Publishers. 201, 622\n\nBengio, Y. (2013). Deep learning of representations: looking forward. In Statistical\nLanguage and Speech Processing, volume 7978 of Lecture Notes in Computer Science,\npages 1-37. Springer, also in arXiv at http://arxiv.org/abs/1305.0445. 448\n\nBengio, Y. (2015). Early inference in energy-based models approximates back-propagation.\nTechnical Report arXiv:1510.02777, Universite de Montreal. 656\n\nBengio, Y. and Bengio, S. (2000b). Modeling high-dimensional discrete data with multi-\nlayer neural networks. In NIPS 12, pages 400-406. MIT Press. 705, 707, 708, 710\n\nBengio, Y. and Delalleau, O. (2009). Justifying and generalizing contrastive divergence.\nNeural Computation, 21(6), 1601-1621. 513, 611\n\n723\n", "BIBLIOGRAPHY\n\nBengio, Y. and Grandvalet, Y. (2004). No unbiased estimator of the variance of k-fold\ncross-validation. In S. Thrun, L. Saul, and B. Sch\u00e9lkopf, editors, Advances in Neural\nInformation Processing Systems 16 (NIPS\u201903), Cambridge, MA. MIT Press, Cambridge.\n122\n\nBengio, Y. and LeCun, Y. (2007). Scaling learning algorithms towards AI. In Large Scale\nKernel Machines. 19\n\nBengio, Y. and Monperrus, M. (2005). Non-local manifold tangent learning. In L. Saul,\nY. Weiss, and L. Bottou, editors, Advances in Neural Information Processing Systems\n17 (NIPS\u201904), pages 129-136. MIT Press. 160, 519\n\nBengio, Y. and S\u00e9n\u00e9cal, J.-S. (2003). Quick training of probabilistic neural nets by\nimportance sampling. In Proceedings of AISTATS 2003. 470\n\nBengio, Y. and S\u00e9n\u00e9cal, J.-S. (2008). Adaptive importance sampling to accelerate training\nof a neural probabilistic language model. [EEE Trans. Neural Networks, 19(4), 713-722.\n470\n\nBengio, Y., De Mori, R., Flammia, G., and Kompe, R. (1991). Phonetically motivated\nacoustic parameters for continuous speech recognition using artificial neural networks.\nIn Proceedings of EuroSpeech\u201991. 27, 459\n\nBengio, Y., De Mori, R., Flammia, G., and Kompe, R. (1992). Neural network-Gaussian\nmixture hybrid for speech recognition or density estimation. In NIPS 4, pages 175-182.\nMorgan Kaufmann. 459\n\nBengio, Y., Frasconi, P., and Simard, P. (1993). The problem of learning long-term\ndependencies in recurrent networks. In [EEE International Conference on Neural\nNetworks, pages 1183-1195, San Francisco. IEEE Press. (invited paper). 403\n\nBengio, Y., Simard, P., and Frasconi, P. (1994). Learning long-term dependencies with\ngradient descent is difficult. IEEE Tr. Neural Nets. 18, 401, 403, 411\n\nBengio, Y., Latendresse, $., and Dugas, C. (1999). Gradient-based learning of hyper-\nparameters. Learning Conference, Snowbird. 435\n\nBengio, Y., Ducharme, R., and Vincent, P. (2001). A neural probabilistic language model.\nIn T. K. Leen, T. G. Dietterich, and V. Tresp, editors, NIPS\u20192000, pages 932-938. MIT\nPress. 18, 447, 464, 466, 472, 477, 482\n\nBengio, Y., Ducharme, R., Vincent, P., and Jauvin, C. (2003). A neural probabilistic\nlanguage model. JMLDR, 3, 1137-1155. 466, 472\n\nBengio, Y., Le Roux, N., Vincent, P., Delalleau, O., and Marcotte, P. (2006a). Convex\nneural networks. In NIPS\u20192005, pages 123-130. 258\n\nBengio, Y., Delalleau, O., and Le Roux, N. (2006b). The curse of highly variable functions\nfor local kernel machines. In NIPS\u20192005. 158\n\n724\n", "BIBLIOGRAPHY\n\nBengio, Y., Larochelle, H., and Vincent, P. (2006c). Non-local manifold Parzen windows.\nIn NIPS\u20192005. MIT Press. 160, 520\n\nBengio, Y., Lamblin, P., Popovici, D., and Larochelle, H. (2007). Greedy layer-wise\ntraining of deep networks. In NIPS\u20192006. 14, 19, 201, 323, 324, 528, 530\n\nBengio, Y., Louradour, J., Collobert, R., and Weston, J. (2009). Curriculum learning. In\nICML\u201909. 328\n\nBengio, Y., Mesnil, G., Dauphin, Y., and Rifai, S. (2013a). Better mixing via deep\nrepresentations. In ICML\u20192018. 604\n\nBengio, Y., L\u00e9onard, N., and Courville, A. (2013b). Estimating or propagating gradients\nthrough stochastic neurons for conditional computation. arXiv:1308.3432. 448, 450,\n689, 691\n\nBengio, Y., Yao, L., Alain, G., and Vincent, P. (2013c). Generalized denoising auto-\nencoders as generative models. In NIPS\u20192018. 507, 711, 714\n\nBengio, Y., Courville, A., and Vincent, P. (2013d). Representation learning: A review and\nnew perspectives. JEEE Trans. Pattern Analysis and Machine Intelligence (PAMI),\n35(8), 1798-1828. 555\n\nBengio, Y., Thibodeau-Laufer, E., Alain, G., and Yosinski, J. (2014). Deep generative\nstochastic networks trainable by backprop. In ICML\u20192014. 711, 712, 713, 714, 715\n\nBennett, C. (1976). Efficient estimation of free energy differences from Monte Carlo data.\nJournal of Computational Physics, 22(2), 245-268. 628\n\nBennett, J. and Lanning, S. (2007). The Netflix prize. 479\n\nBerger, A. L., Della Pietra, V. J., and Della Pietra, S. A. (1996). A maximum entropy\napproach to natural language processing. Computational Linguistics, 22, 39-71. 473\n\nBerglund, M. and Raiko, T. (2013). Stochastic gradient estimate variance in contrastive\ndivergence and persistent contrastive divergence. CoRR, abs/1312.6002. 614\n\nBergstra, J. (2011). Incorporating Complex Cells into Neural Networks for Pattern\nClassification. Ph.D. thesis, Universit\u00e9 de Montr\u00e9al. 255\n\nBergstra, J. and Bengio, Y. (2009). Slow, decorrelated features for pretraining complex\ncell-like networks. In NIPS\u20192009. 494\n\nBergstra, J. and Bengio, Y. (2012). Random search for hyper-parameter optimization. J.\nMachine Learning Res., 13, 281-305. 433, 434, 435\n\nBergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins, G., Turian,\nJ., Warde-Farley, D., and Bengio, Y. (2010). Theano: a CPU and GPU math expression\ncompiler. In Proc. SciPy. 25, 82, 214, 222, 446\n\n725\n", "BIBLIOGRAPHY\n\nBergstra, J., Bardenet, R., Bengio, Y., and K\u00e9gl, B. (2011). Algorithms for hyper-parameter\noptimization. In NIPS\u20192011. 436\n\nBerkes, P. and Wiskott, L. (2005). Slow feature analysis yields a rich repertoire of complex\ncell properties. Journal of Vision, 5(6), 579-602. 495\n\nBertsekas, D. P. and Tsitsiklis, J. (1996). Neuwro-Dynamic Programming. Athena Scientific.\n106\n\nBesag, J. (1975). Statistical analysis of non-lattice data. The Statistician, 24(3), 179-195.\n615\n\nBishop, C. M. (1994). Mixture density networks. 189\n\nBishop, C. M. (1995a). Regularization and complexity control in feed-forward networks.\nIn Proceedings International Conference on Artificial Neural Networks ICANN\u201995,\nvolume 1, page 141-148. 242, 250\n\nBishop, C. M. (1995b). Training with noise is equivalent to Tikhonov regularization.\nNeural Computation, 7(1), 108-116. 242\n\nBishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer. 98, 146\n\nBlum, A. L. and Rivest, R. L. (1992). Training a 3-node neural network is NP-complete.\n293\n\nBlumer, A., Ehrenfeucht, A., Haussler, D., and Warmuth, M. K. (1989). Learnability and\nthe Vapnik\u2014Chervonenkis dimension. Journal of the ACM, 36(4), 929\u2014865. 114\n\nBonnet, G. (1964). Transformations des signaux al\u00e9atoires 4 travers les syst\u00e9mes non\nlin\u00e9aires sans m\u00e9moire. Annales des T\u00e9l\u00e9communications, 19(9-10), 203-220. 689\n\nBordes, A., Weston, J., Collobert, R., and Bengio, Y. (2011). Learning structured\nembeddings of knowledge bases. In AAAI 2011. 484\n\nBordes, A., Glorot, X., Weston, J., and Bengio, Y. (2012). Joint learning of words and\nmeaning representations for open-text semantic parsing. AISTATS\u20192012. 401, 484, 485\n\nBordes, A., Glorot, X., Weston, J., and Bengio, Y. (2013a). A semantic matching energy\nfunction for learning with multi-relational data. Machine Learning: Special Issue on\nLearning Semantics. 483\n\nBordes, A., Usunier, N., Garcia-Duran, A., Weston, J., and Yakhnenko, O. (2013b).\nTranslating embeddings for modeling multi-relational data. In C. Burges, L. Bottou,\nM. Welling, Z. Ghahramani, and K. Weinberger, editors, Advances in Neural Information\nProcessing Systems 26, pages 2787-2795. Curran Associates, Inc. 484\n\nBornschein, J. and Bengio, Y. (2015). Reweighted wake-sleep. In ICLR\u20192015,\narXiv:1406.2751. 693\n\n726\n", "BIBLIOGRAPHY\n\nBornschein, J., Shabanian, S., Fischer, A., and Bengio, Y. (2015). Training bidirectional\nHelmholtz machines. Technical report, arXiv:1506.03877. 693\n\nBoser, B. E., Guyon, I. M., and Vapnik, V. N. (1992). A training algorithm for opti-\nmal margin classifiers. In COLT \u201992: Proceedings of the fifth annual workshop on\nComputational learning theory, pages 144-152, New York, NY, USA. ACM. 18, 141\n\nBottou, L. (1998). Online algorithms and stochastic approximations. In D. Saad, editor,\nOnline Learning in Neural Networks. Cambridge University Press, Cambridge, UK. 296\n\nBottou, L. (2011). From machine learning to machine reasoning. Technical report,\narXiv.1102.1808. 401\n\nBottou, L. (2015). Multilayer neural networks. Deep Learning Summer School. 440\n\nBottou, L. and Bousquet, O. (2008). The tradeoffs of large scale learning. In NJPS\u20192008.\n282, 295\n\nBoulanger-Lewandowski, N., Bengio, Y., and Vincent, P. (2012). Modeling temporal\ndependencies in high-dimensional sequences: Application to polyphonic music generation\nand transcription. In ICML\u201912. 685, 686\n\nBoureau, Y., Ponce, J., and LeCun, Y. (2010). A theoretical analysis of feature pooling in\nvision algorithms. In Proc. International Conference on Machine learning (ICML\u201910).\n345\n\nBoureau, Y., Le Roux, N., Bach, F., Ponce, J., and LeCun, Y. (2011). Ask the locals:\nmulti-way local pooling for image recognition. In Proc. International Conference on\nComputer Vision (ICCV\u201911). IEEE. 345\n\nBourlard, H. and Kamp, Y. (1988). Auto-association by multilayer perceptrons and\nsingular value decomposition. Biological Cybernetics, 59, 291-294. 502\n\nBourlard, H. and Wellekens, C. (1989). Speech pattern discrimination and multi-layered\nperceptrons. Computer Speech and Language, 3, 1-19. 459\n\nBoyd, S. and Vandenberghe, L. (2004). Convex Optimization. Cambridge University\nPress, New York, NY, USA. 93\n\nBrady, M. L., Raghavan, R., and Slawny, J. (1989). Back-propagation fails to separate\nwhere perceptrons succeed. IEEE Transactions on Circuits and Systems, 36, 665-674.\n284\n\nBrakel, P., Stroobandt, D., and Schrauwen, B. (2013). Training energy-based models for\ntime-series imputation. Journal of Machine Learning Research, 14, 2771-2797. 674,\n698\n\nBrand, M. (2003). Charting a manifold. In NIPS\u20192002, pages 961-968. MIT Press. 164,\n518\n\n727\n", "BIBLIOGRAPHY\n\nBreiman, L. (1994). Bagging predictors. Machine Learning, 24(2), 123-140. 256\n\nBreiman, L., Friedman, J. H., Olshen, R. A., and Stone, C. J. (1984). Classification and\nRegression Trees. Wadsworth International Group, Belmont, CA. 146\n\nBridle, J. \u00a7. (1990). Alphanets: a recurrent \u2018neural\u2019 network architecture with a hidden\nMarkov model interpretation. Speech Communication, 9(1), 83-92. 186\n\nBriggman, K., Denk, W., Seung, S., Helmstaedter, M. N., and Turaga, S. C. (2009).\nMaximin affinity learning of image segmentation. In NIPS\u20192009, pages 1865-1873. 360\n\nBrown, P. F., Cocke, J., Pietra, S. A. D., Pietra, V. J. D., Jelinek, F., Lafferty, J. D.,\nMercer, R. L., and Roossin, P. S. (1990). A statistical approach to machine translation.\nComputational linguistics, 16(2), 79-85. 21\n\nBrown, P. F., Pietra, V. J. D., DeSouza, P. V., Lai, J. C., and Mercer, R. L. (1992). Class-\nbased n-gram models of natural language. Computational Linguistics, 18, 467-479.\n463\n\nBryson, A. and Ho, Y. (1969). Applied optimal control: optimization, estimation, and\ncontrol. Blaisdell Pub. Co. 225\n\nBryson, Jr., A. E. and Denham, W. F. (1961). A steepest-ascent method for solving\noptimum programming problems. Technical Report BR-1303, Raytheon Company,\nMissle and Space Division. 225\n\nBucilua, C., Caruana, R., and Niculescu-Mizil, A. (2006). Model compression. In\nProceedings of the 12th ACM SIGKDD international conference on Knowledge discovery\nand data mining, pages 535-541. ACM. 448\n\nBurda, Y., Grosse, R., and Salakhutdinov, R. (2015). Importance weighted autoencoders.\narXiv preprint arXiv:1509.00519. 698\n\nCai, M., Shi, Y., and Liu, J. (2013). Deep maxout neural networks for speech recognition.\nIn Automatic Speech Recognition and Understanding (ASRU), 2013 IEEE Workshop\non, pages 291-296. IEEE. 194\n\nCarreira-Perpinan, M. A. and Hinton, G. E. (2005). On contrastive divergence learning.\nIn R. G. Cowell and Z. Ghahramani, editors, Proceedings of the Tenth International\nWorkshop on Artificial Intelligence and Statistics (AISTATS\u201905), pages 33-40. Society\nfor Artificial Intelligence and Statistics. 611\n\nCaruana, R. (1993). Multitask connectionist learning. In Proc. 1993 Connectionist Models\nSummer School, pages 372-379. 244\n\nCauchy, A. (1847). M\u00e9thode g\u00e9n\u00e9rale pour la r\u00e9solution de syst\u00e9mes d\u2019\u00e9quations simul-\ntan\u00e9es. In Compte rendu des s\u00e9ances de l\u2019acad\u00e9mie des sciences, pages 536-538. 83,\n225\n\n728\n", "BIBLIOGRAPHY\n\nCayton, L. (2005). Algorithms for manifold learning. Technical Report CS2008-0923,\nUCSD. 164\n\nChandola, V., Banerjee, A., and Kumar, V. (2009). Anomaly detection: A survey. ACM\ncomputing surveys (CSUR), 41(3), 15. 102\n\nChapelle, O., Weston, J., and Sch\u00e9lkopf, B. (2003). Cluster kernels for semi-supervised\nlearning. In S. Becker, S. Thrun, and K. Obermayer, editors, Advances in Neural\nInformation Processing Systems 15 (NIPS\u201902), pages 585-592, Cambridge, MA. MIT\nPress. 244\n\nChapelle, O., Sch\u00e9lkopf, B., and Zien, A., editors (2006). Semi-Supervised Learning. MIT\nPress, Cambridge, MA. 244, 541\n\nChellapilla, K., Puri, S., and Simard, P. (2006). High Performance Convolutional Neural\nNetworks for Document Processing. In Guy Lorette, editor, Tenth International\nWorkshop on Frontiers in Handwriting Recognition, La Baule (France). Universit\u00e9 de\nRennes 1, Suvisoft. http://www.suvisoft.com. 24, 27, 445\n\nChen, B., Ting, J.-A., Marlin, B. M., and de Freitas, N. (2010). Deep learning of invariant\nspatio-temporal features from video. NIPS*2010 Deep Learning and Unsupervised\nFeature Learning Workshop. 360\n\nChen, S. F. and Goodman, J. T. (1999). An empirical study of smoothing techniques for\nlanguage modeling. Computer, Speech and Language, 13(4), 359-393. 462, 463, 473\n\nChen, T., Du, Z., Sun, N., Wang, J., Wu, C., Chen, Y., and Temam, O. (2014a). DianNao:\nA small-footprint high-throughput accelerator for ubiquitous machine-learning. In Pro-\nceedings of the 19th international conference on Architectural support for programming\nlanguages and operating systems, pages 269-284. ACM. 451\n\nChen, T., Li, M., Li, Y., Lin, M., Wang, N., Wang, M., Xiao, T., Xu, B., Zhang, C.,\nand Zhang, Z. (2015). MXNet: A flexible and efficient machine learning library for\nheterogeneous distributed systems. arXiv preprint arXiv:1512.01274. 25\n\nChen, Y., Luo, T., Liu, $., Zhang, S., He, L., Wang, J., Li, L., Chen, T., Xu, Z., Sun, N.,\net al. (2014b). DaDianNao: A machine-learning supercomputer. In Microarchitecture\n(MICRO), 2014 47th Annual IEEE/ACM International Symposium on, pages 609-622.\nIEEE. 451\n\nChilimbi, T., Suzue, Y., Apacible, J., and Kalyanaraman, K. (2014). Project Adam:\nBuilding an efficient and scalable deep learning training system. In 11th USENIX\nSymposium on Operating Systems Design and Implementation (OSDI\u201914). 447\n\nCho, K., Raiko, T., and Ilin, A. (2010). Parallel tempering is efficient for learning restricted\nBoltzmann machines. In IJCNN\u20192010. 603, 614\n\n729\n", "BIBLIOGRAPHY\n\nCho, K., Raiko, T., and Ilin, A. (2011). Enhanced gradient and adaptive learning rate for\ntraining restricted Boltzmann machines. In IC'ML\u20192011, pages 105-112. 674\n\nCho, K., van Merri\u00e9nboer, B., Gulcehre, C., Bougares, F., Schwenk, H., and Bengio, Y.\n(2014a). Learning phrase representations using RNN encoder-decoder for statistical\nmachine translation. In Proceedings of the Empiricial Methods in Natural Language\nProcessing (EMNLIP 2014). 397, 474, 475\n\nCho, K., Van Merri\u00e9nboer, B., Bahdanau, D., and Bengio, Y. (2014b). On the prop-\nerties of neural machine translation: Encoder-decoder approaches. ArXiv e-prints,\nabs /1409.1259. 412\n\nChoromanska, A., Henaff, M., Mathieu, M., Arous, G. B., and LeCun, Y. (2014). The\nloss surface of multilayer networks. 285, 286\n\nChorowski, J., Bahdanau, D., Cho, K., and Bengio, Y. (2014). End-to-end continuous\nspeech recognition using attention-based recurrent NN: First results. arXiv:1412.1602.\n461\n\nChristianson, B. (1992). Automatic Hessians by reverse accumulation. IMA Journal of\nNumerical Analysis, 12(2), 135-150. 224\n\nChrupala, G., Kadar, A., and Alishahi, A. (2015). Learning language through pictures.\narXiv 1506.03694. 412\n\nChung, J., Gulcehre, C., Cho, K., and Bengio, Y. (2014). Empirical evaluation of gated\nrecurrent neural networks on sequence modeling. NIPS\u20192014 Deep Learning workshop,\narXiv 1412.3555. 412, 460\n\nChung, J., Gtilgehre, \u00a2., Cho, K., and Bengio, Y. (2015a). Gated feedback recurrent\nneural networks. In ICML\u201915. 412\n\nChung, J., Kastner, K., Dinh, L., Goel, K., Courville, A., and Bengio, Y. (2015b). A\nrecurrent latent variable model for sequential data. In NIPS\u20192015. 698\n\nCiresan, D., Meier, U., Masci, J., and Schmidhuber, J. (2012). Multi-column deep neural\nnetwork for traffic sign classification. Neural Networks, 32, 333-338. 23, 201\n\nCiresan, D. C., Meier, U., Gambardella, L. M., and Schmidhuber, J. (2010). Deep big\nsimple neural nets for handwritten digit recognition. Neural Computation, 22, 1-14.\n24, 27, 446\n\nCoates, A. and Ng, A. Y. (2011). The importance of encoding versus training with sparse\ncoding and vector quantization. In ICML\u20192011. 27, 256, 498\n\nCoates, A., Lee, H., and Ng, A. Y. (2011). An analysis of single-layer networks in\nunsupervised feature learning. In Proceedings of the Thirteenth International Conference\non Artificial Intelligence and Statistics (AISTATS 2011). 363, 364, 455\n\n730\n", "BIBLIOGRAPHY\n\nCoates, A., Huval, B., Wang, T., Wu, D., Catanzaro, B., and Andrew, N. (2013).\nDeep learning with COTS HPC systems. In S. Dasgupta and D. McAllester, editors,\nProceedings of the 30th International Conference on Machine Learning (ICML-13),\nvolume 28 (3), pages 1337-1345. JMLR Workshop and Conference Proceedings. 24, 27,\n364, 447\n\nCohen, N., Sharir, O., and Shashua, A. (2015). On the expressive power of deep learning:\nA tensor analysis. arXiv:1509.05009. 554\n\nCollobert, R. (2004). Large Scale Machine Learning. Ph.D. thesis, Universit\u00e9 de Paris VI,\nLIP6. 197\n\nCollobert, R. (2011). Deep learning for efficient discriminative parsing. In AISTATS\u20192011.\n101, 477\n\nCollobert, R. and Weston, J. (2008a). A unified architecture for natural language processing:\nDeep neural networks with multitask learning. In ICML\u20192008. 471, 477\n\nCollobert, R. and Weston, J. (2008b). A unified architecture for natural language\nprocessing: Deep neural networks with multitask learning. In ICML\u20192008. 535\n\nCollobert, R., Bengio, S., and Bengio, Y. (2001). A parallel mixture of SVMs for very\nlarge scale problems. Technical Report IDIAP-RR-01-12, IDIAP. 450\n\nCollobert, R., Bengio, S., and Bengio, Y. (2002). Parallel mixture of SVMs for very large\nscale problems. Neural Computation, 14(5), 1105-1114. 450\n\nCollobert, R., Weston, J., Bottou, L., Karlen, M., Kavukcuoglu, K., and Kuksa, P. (2011a).\nNatural language processing (almost) from scratch. The Journal of Machine Learning\nResearch, 12, 2493-2537. 328, 477, 535, 536\n\nCollobert, R., Kavukcuoglu, K., and Farabet, C. (2011b). Torch7: A Matlab-like environ-\nment for machine learning. In BigLearn, NIPS Workshop. 25, 214, 446\n\nComon, P. (1994). Independent component analysis - a new concept? Signal Processing,\n36, 287-314. 491\n\nCortes, C. and Vapnik, V. (1995). Support vector networks. Machine Learning, 20,\n273-297. 18, 141\n\nCouprie, C., Farabet, C., Najman, L., and LeCun, Y. (2013). Indoor semantic segmentation\nusing depth information. In International Conference on Learning Representations\n(ICLR2013). 23, 201\n\nCourbariaux, M., Bengio, Y., and David, J.-P. (2015). Low precision arithmetic for deep\nlearning. In Arziv:1412.7024, ICLR\u20192015 Workshop. 452\n\nCourville, A., Bergstra, J., and Bengio, Y. (2011). Unsupervised models of images by\nspike-and-slab RBMs. In [CML \u201911. 561, 681\n\n731\n", "BIBLIOGRAPHY\n\nCourville, A., Desjardins, G., Bergstra, J., and Bengio, Y. (2014). The spike-and-slab\nRBM and extensions to discrete and sparse data distributions. Pattern Analysis and\nMachine Intelligence, IEEE Transactions on, 36(9), 1874-1887. 682\n\nCover, T. M. and Thomas, J. A. (2006). Elements of Information Theory, 2nd Edition.\nWiley-Interscience. 73\n\nCox, D. and Pinto, N. (2011). Beyond simple features: A large-scale feature search\napproach to unconstrained face recognition. In Automatic Face & Gesture Recognition\nand Workshops (FG 2011), 2011 IEEE International Conference on, pages 8-15. IEEE.\n363\n\nCram\u00e9r, H. (1946). Mathematical methods of statistics. Princeton University Press. 135,\n295\n\nCrick, F. H. C. and Mitchison, G. (1983). The function of dream sleep. Nature, 304,\n111-114. 609\n\nCybenko, G. (1989). Approximation by superpositions of a sigmoidal function. Mathematics\nof Control, Signals, and Systems, 2, 303-314. 198\n\nDahl, G. E., Ranzato, M., Mohamed, A., and Hinton, G. E. (2010). Phone recognition\nwith the mean-covariance restricted Boltzmann machine. In NIPS\u20192010. 23\n\nDahl, G. E., Yu, D., Deng, L., and Acero, A. (2012). Context-dependent pre-trained deep\nneural networks for large vocabulary speech recognition. IEEE Transactions on Audio,\nSpeech, and Language Processing, 20(1), 33-42. 459\n\nDahl, G. E., Sainath, T. N., and Hinton, G. E. (2013). Improving deep neural networks\nfor LVCSR using rectified linear units and dropout. In ICASSP\u20192018. 460\n\nDahl, G. E., Jaitly, N., and Salakhutdinov, R. (2014). Multi-task neural networks for\nQSAR predictions. arXiv:1406.1231. 26\n\nDauphin, Y. and Bengio, Y. (2013). Stochastic ratio matching of RBMs for sparse\nhigh-dimensional inputs. In NIPS26. NIPS Foundation. 619\n\nDauphin, Y., Glorot, X., and Bengio, Y. (2011). Large-scale learning of embeddings with\nreconstruction sampling. In ICML\u20192011. 471\n\nDauphin, Y., Pascanu, R., Gulcehre, C., Cho, K., Ganguli, S., and Bengio, Y. (2014).\nIdentifying and attacking the saddle point problem in high-dimensional non-convex\noptimization. In NIPS\u20192014. 285, 286, 288\n\nDavis, A., Rubinstein, M., Wadhwa, N., Mysore, G., Durand, F., and Freeman, W. T.\n(2014). The visual microphone: Passive recovery of sound from video. ACM Transactions\non Graphics (Proc. SIGGRAPH), 33(4), 79:1-79:10. 452\n\n732\n", "BIBLIOGRAPHY\n\nDayan, P. (1990). Reinforcement comparison. In Connectionist Models: Proceedings of\nthe 1990 Connectionist Summer School, San Mateo, CA. 691\n\nDayan, P. and Hinton, G. E. (1996). Varieties of Helmholtz machine. Neural Networks,\n9(8), 1385-1403. 693\n\nDayan, P., Hinton, G. E., Neal, R. M., and Zemel, R. S. (1995). The Helmholtz machine.\nNeural computation, 7(5), 889-904. 693\n\nDean, J., Corrado, G., Monga, R., Chen, K., Devin, M., Le, Q., Mao, M., Ranzato, M.,\nSenior, A., Tucker, P., Yang, K., and Ng, A. Y. (2012). Large scale distributed deep\nnetworks. In NIPS\u20192012. 25, 447\n\nDean, T. and Kanazawa, K. (1989). A model for reasoning about persistence and causation.\nComputational Intelligence, 5(3), 142-150. 662\n\nDeerwester, S., Dumais, S. T., Furnas, G. W., Landauer, T. K., and Harshman, R. (1990).\nIndexing by latent semantic analysis. Journal of the American Society for Information\nScience, 41(6), 391-407. 477, 482\n\nDelalleau, O. and Bengio, Y. (2011). Shallow vs. deep sum-product networks. In NIPS.\n19, 554\n\nDeng, J., Dong, W., Socher, R., Li, L.-J., Li, K., and Fei-Fei, L. (2009). ImageNet: A\nLarge-Scale Hierarchical Image Database. In CVPRO9. 21\n\nDeng, J., Berg, A. C., Li, K., and Fei-Fei, L. (2010a). What does classifying more than\n10,000 image categories tell us? In Proceedings of the 11th European Conference on\nComputer Vision: Part V, ECCV\u201910, pages 71-84, Berlin, Heidelberg. Springer-Verlag.\n21\n\nDeng, L. and Yu, D. (2014). Deep learning \u2014 methods and applications. Foundations and\nTrends in Signal Processing. 460\n\nDeng, L., Seltzer, M., Yu, D., Acero, A., Mohamed, A., and Hinton, G. (2010b). Binary\ncoding of speech spectrograms using a deep auto-encoder. In Interspeech 2010, Makuhari,\nChiba, Japan. 23\n\nDenil, M., Bazzani, L., Larochelle, H., and de Freitas, N. (2012). Learning where to attend\nwith deep architectures for image tracking. Neural Computation, 24(8), 2151-2184. 367\n\nDenton, E., Chintala, S., Szlam, A., and Fergus, R. (2015). Deep generative image models\nusing a Laplacian pyramid of adversarial networks. NIPS. 702, 719\n\nDesjardins, G. and Bengio, Y. (2008). Empirical evaluation of convolutional RBMs for\nvision. Technical Report 1327, D\u00e9partement d\u2019Informatique et de Recherche Op\u00e9ra-\ntionnelle, Universit\u00e9 de Montr\u00e9al. 683\n\n733\n", "BIBLIOGRAPHY\n\nDesjardins, G., Courville, A. C., Bengio, Y., Vincent, P., and Delalleau, O. (2010).\nTempered Markov chain Monte Carlo for training of restricted Boltzmann machines. In\nInternational Conference on Artificial Intelligence and Statistics, pages 145-152. 603,\n614\n\nDesjardins, G., Courville, A., and Bengio, Y. (2011). On tracking the partition function.\nIn NIPS\u20192011. 629\n\nDesjardins, G., Simonyan, K., Pascanu, R., et al. (2015). Natural neural networks. In\nAdvances in Neural Information Processing Systems, pages 2062-2070. 320\n\nDevlin, J., Zbib, R., Huang, Z., Lamar, T., Schwartz, R., and Makhoul, J. (2014). Fast\nand robust neural network joint models for statistical machine translation. In Proc.\nACL\u20192014. 473\n\nDevroye, L. (2013). Non-Uniform Random Variate Generation. SpringerLink : Biicher.\nSpringer New York. 694\n\nDiCarlo, J. J. (2013). Mechanisms underlying visual object recognition: Humans vs.\nneurons vs. machines. NIPS Tutorial. 26, 366\n\nDinh, L., Krueger, D., and Bengio, Y. (2014). NICE: Non-linear independent components\nestimation. arXiv:1410.8516. 493\n\nDonahue, J., Hendricks, L. A., Guadarrama, S., Rohrbach, M., Venugopalan, S., Saenko,\nK., and Darrell, T. (2014). Long-term recurrent convolutional networks for visual\nrecognition and description. arXiv:1411.4389. 102\n\nDonoho, D. L. and Grimes, C. (2003). Hessian eigenmaps: new locally linear embedding\ntechniques for high-dimensional data. Technical Report 2003-08, Dept. Statistics,\nStanford University. 164, 519\n\nDosovitskiy, A., Springenberg, J. T., and Brox, T. (2015). Learning to generate chairs with\nconvolutional neural networks. In Proceedings of the IEEE Conference on Computer\nVision and Pattern Recognition, pages 1538-1546. 696, 704, 705\n\nDoya, K. (1993). Bifurcations of recurrent neural networks in gradient descent learning.\nIEEE Transactions on Neural Networks, 1, 75-80. 401, 403\n\nDreyfus, 5. E. (1962). The numerical solution of variational problems. Journal of\nMathematical Analysis and Applications, 5(1), 30-45. 225\n\nDreyfus, S. E. (1973). The computational solution of optimal control problems with time\nlag. IEEE Transactions on Automatic Control, 18(4), 383-385. 225\n\nDrucker, H. and LeCun, Y. (1992). Improving generalisation performance using double\nback-propagation. IEEE Transactions on Neural Networks, 3(6), 991-997. 271\n\n734\n", "BIBLIOGRAPHY\n\nDuchi, J., Hazan, E., and Singer, Y. (2011). Adaptive subgradient methods for online\nlearning and stochastic optimization. Journal of Machine Learning Research. 307\n\nDudik, M., Langford, J., and Li, L. (2011). Doubly robust policy evaluation and learning.\nIn Proceedings of the 28th International Conference on Machine learning, ICML \u201911.\n482\n\nDugas, C., Bengio, Y., B\u00e9lisle, F., and Nadeau, C. (2001). Incorporating second-order\nfunctional knowledge for better option pricing. In T. Leen, T. Dietterich, and V. Tresp,\neditors, Advances in Neural Information Processing Systems 13 (NIPS\u201900), pages\n472-478. MIT Press. 68, 197\n\nDziugaite, G. K., Roy, D. M., and Ghahramani, Z. (2015). Training generative neural net-\nworks via maximum mean discrepancy optimization. arXiv preprint arXiv:1505.03906.\n703\n\nEl Hihi, S. and Bengio, Y. (1996). Hierarchical recurrent neural networks for long-term\ndependencies. In NIPS\u20191995. 398, 407, 408\n\nElkahky, A. M., Song, Y., and He, X. (2015). A multi-view deep learning approach for\ncross domain user modeling in recommendation systems. In Proceedings of the 24th\nInternational Conference on World Wide Web, pages 278-288. 480\n\nElman, J. L. (1993). Learning and development in neural networks: The importance of\nstarting small. Cognition, 48, 781-799. 328\n\nErhan, D., Manzagol, P.-A., Bengio, Y., Bengio, S., and Vincent, P. (2009). The difficulty\nof training deep architectures and the effect of unsupervised pre-training. In Proceedings\nof AISTATS\u20192009. 201\n\nErhan, D., Bengio, Y., Courville, A., Manzagol, P., Vincent, P., and Bengio, S. (2010).\nWhy does unsupervised pre-training help deep learning? J. Machine Learning Res.\n529, 533, 534\n\nFahlman, S. E., Hinton, G. E., and Sejnowski, T. J. (1983). Massively parallel architectures\nfor AI: NETL, thistle, and Boltzmann machines. In Proceedings of the National\nConference on Artificial Intelligence AAAI-83. 570, 654\n\nFang, H., Gupta, S., Iandola, F., Srivastava, R., Deng, L., Dollar, P., Gao, J., He, X.,\nMitchell, M., Platt, J. C., Zitnick, C. L., and Zweig, G. (2015). From captions to visual\nconcepts and back. arXiv:1411.4952. 102\n\nFarabet, C., LeCun, Y., Kavukcuoglu, K., Culurciello, E., Martini, B., Akselrod, P., and\nTalay, S. (2011). Large-scale FPGA-based convolutional networks. In R. Bekkerman,\nM. Bilenko, and J. Langford, editors, Scaling up Machine Learning: Parallel and\nDistributed Approaches. Cambridge University Press. 523\n", "BIBLIOGRAPHY\n\nFarabet, C., Couprie, C., Najman, L., and LeCun, Y. (2013). Learning hierarchical features\nfor scene labeling. JEEE Transactions on Pattern Analysis and Machine Intelligence,\n35(8), 1915-1929. 23, 201, 360\n\nFei-Fei, L., Fergus, R., and Perona, P. (2006). One-shot learning of object categories.\nIEEE Transactions on Pattern Analysis and Machine Intelligence, 28(4), 594-611. 538\n\nFinn, C., Tan, X. Y., Duan, Y., Darrell, T., Levine, S., and Abbeel, P. (2015). Learning\nvisual feature spaces for robotic manipulation with deep spatial autoencoders. arXiv\npreprint arXiv:1509.06118. 25\n\nFisher, R. A. (1936). The use of multiple measurements in taxonomic problems. Annals\nof Eugenics, 7, 179-188. 21, 105\n\nFoldiak, P. (1989). Adaptive network for optimal linear feature extraction. In International\nJoint Conference on Neural Networks (IJCNN), volume 1, pages 401-405, Washington\n1989. IEEE, New York. 494\n\nFranzius, M., Sprekeler, H., and Wiskott, L. (2007). Slowness and sparseness lead to place,\nhead-direction, and spatial-view cells. 495\n\nFranzius, M., Wilbert, N., and Wiskott, L. (2008). Invariant object recognition with slow\nfeature analysis. In Artificial Neural Networks-ICANN 2008, pages 961-970. Springer.\n496\n\nFrasconi, P., Gori, M., and Sperduti, A. (1997). On the efficient classification of data\nstructures by neural networks. In Proc. Int. Joint Conf. on Artificial Intelligence. 401\n\nFrasconi, P., Gori, M., and Sperduti, A. (1998). A general framework for adaptive\nprocessing of data structures. [EEE Transactions on Neural Networks, 9(5), 768-786.\n401\n\nFreund, Y. and Schapire, R. E. (1996a). Experiments with a new boosting algorithm. In\nMachine Learning: Proceedings of Thirteenth International Conference, pages 148-156,\nUSA. ACM. 258\n\nFreund, Y. and Schapire, R. E. (1996b). Game theory, on-line prediction and boosting. In\nProceedings of the Ninth Annual Conference on Computational Learning Theory, pages\n325-332. 258\n\nFrey, B. J. (1998). Graphical models for machine learning and digital communication.\nMIT Press. 705, 706\n\nFrey, B. J., Hinton, G. E., and Dayan, P. (1996). Does the wake-sleep algorithm learn good\ndensity estimators? In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances\nin Neural Information Processing Systems 8 (NIPS\u201995), pages 661-670. MIT Press,\nCambridge, MA. 651\n\n736\n", "BIBLIOGRAPHY\n\nFrobenius, G. (1908). Uber matrizen aus positiven elementen, s. B. Preuss. Akad. Wiss.\nBerlin, Germany. 597\n\nFukushima, K. (1975). Cognitron: A self-organizing multilayered neural network. Biological\nCybernetics, 20, 121-136. 16, 226, 528\n\nFukushima, K. (1980). Neocognitron: A self-organizing neural network model for a\nmechanism of pattern recognition unaffected by shift in position. Biological Cybernetics,\n36, 193-202. 16, 24, 27, 226, 367\n\nGal, Y. and Ghahramani, Z. (2015). Bayesian convolutional neural networks with Bernoulli\napproximate variational inference. arXiv preprint arXiv:1506.02158. 264\n\nGallinari, P., LeCun, Y., Thiria, $., and Fogelman-Soulie, F. (1987). Memoires associatives\ndistribuees. In Proceedings of COGNITIVA 87, Paris, La Villette. 515\n\nGarcia-Duran, A., Bordes, A., Usunier, N., and Grandvalet, Y. (2015). Combining two\nand three-way embeddings models for link prediction in knowledge bases. arXiv preprint\narXiv:1506.00999. 484\n\nGarofolo, J. S., Lamel, L. F., Fisher, W. M., Fiscus, J. G., and Pallett, D. S. (1993).\nDarpa timit acoustic-phonetic continous speech corpus cd-rom. nist speech disc 1-1.1.\nNASA STI/Recon Technical Report N, 93, 27403. 459\n\nGarson, J. (1900). The metric system of identification of criminals, as used in Great\nBritain and Ireland. The Journal of the Anthropological Institute of Great Britain and\nIreland, (2), 177-227. 21\n\nGers, F. A., Schmidhuber, J., and Cummins, F. (2000). Learning to forget: Continual\nprediction with LSTM. Neural computation, 12(10), 2451-2471. 410, 412\n\nGhahramani, Z. and Hinton, G. E. (1996). The EM algorithm for mixtures of factor\nanalyzers. Technical Report CRG-TR-96-1, Dpt. of Comp. Sci., Univ. of Toronto. 489\n\nGillick, D., Brunk, C., Vinyals, O., and Subramanya, A. (2015). Multilingual language\nprocessing from bytes. arXiv preprint arXiv:1512.00108. 477\n\nGirshick, R., Donahue, J., Darrell, T., and Malik, J. (2015). Region-based convolutional\nnetworks for accurate object detection and segmentation. 426\n\nGiudice, M. D., Manera, V., and Keysers, C. (2009). Programmed to learn? The ontogeny\nof mirror neurons. Dev. Sci., 12(2), 350\u2014363. 656\n\nGlorot, X. and Bengio, Y. (2010). Understanding the difficulty of training deep feedforward\nneural networks. In AISTATS\u20192010. 303\n\nGlorot, X., Bordes, A., and Bengio, Y. (2011a). Deep sparse rectifier neural networks. In\nAISTATS\u20192011. 16, 174, 197, 226, 227\n\n737\n", "BIBLIOGRAPHY\n\nGlorot, X., Bordes, A., and Bengio, Y. (2011b). Domain adaptation for large-scale\nsentiment classification: A deep learning approach. In ICML\u20192011. 507, 537\n\nGoldberger, J., Roweis, $., Hinton, G. E., and Salakhutdinov, R. (2005). Neighbourhood\ncomponents analysis. In L. Saul, Y. Weiss, and L. Bottou, editors, Advances in Neural\nInformation Processing Systems 17 (NIPS\u201904). MIT Press. 115\n\nGong, S., McKenna, S., and Psarrou, A. (2000). Dynamic Vision: From Images to Face\nRecognition. Imperial College Press. 165, 519\n\nGoodfellow, IL, Le, Q., Saxe, A., and Ng, A. (2009). Measuring invariances in deep\nnetworks. In NIPS\u20192009, pages 646-654. 255\n\nGoodfellow, I., Koenig, N., Muja, M., Pantofaru, C., Sorokin, A., and Takayama, L. (2010).\nHelp me help you: Interfaces for personal robots. In Proc. of Human Robot Interaction\n(HRI), Osaka, Japan. ACM Press, ACM Press. 100\n\nGoodfellow, I. J. (2010). Technical report: Multidimensional, downsampled convolution\nfor autoencoders. Technical report, Universit\u00e9 de Montr\u00e9al. 357\n\nGoodfellow, I. J. (2014). On distinguishability criteria for estimating generative models.\nIn International Conference on Learning Representations, Workshops Track. 622, 700,\n701\n\nGoodfellow, I. J., Courville, A., and Bengio, Y. (2011). Spike-and-slab sparse coding\nfor unsupervised feature discovery. In NIPS Workshop on Challenges in Learning\nHierarchical Models. 532, 538\n\nGoodfellow, I. J., Warde-Farley, D., Mirza, M., Courville, A., and Bengio, Y. (2013a).\nMaxout networks. In S. Dasgupta and D. McAllester, editors, ICML\u201913, pages 1319-\n1327. 193, 264, 344, 365, 455\n\nGoodfellow, I. J., Mirza, M., Courville, A., and Bengio, Y. (2013b). Multi-prediction deep\nBoltzmann machines. In NJPS26. NIPS Foundation. 100, 617, 671, 672, 673, 674, 675,\n698\n\nGoodfellow, I. J., Warde-Farley, D., Lamblin, P., Dumoulin, V., Mirza, M., Pascanu, R.,\nBergstra, J., Bastien, F., and Bengio, Y. (2013c). Pylearn2: a machine learning research\nlibrary. arXiv preprint arXiv:13808.4214. 25, 446\n\nGoodfellow, I. J., Courville, A., and Bengio, Y. (2013d). Scaling up spike-and-slab models\nfor unsupervised feature learning. IEEE Transactions on Pattern Analysis and Machine\nIntelligence, 35(8), 1902-1914. 497, 498, 499, 650, 683\n\nGoodfellow, I. J., Mirza, M., Xiao, D., Courville, A., and Bengio, Y. (2014a). An empirical\ninvestigation of catastrophic forgeting in gradient-based neural networks. In ICLR\u20192014.\n194\n\n738\n", "BIBLIOGRAPHY\n\nGoodfellow, I. J., Shlens, J., and Szegedy, C. (2014b). Explaining and harnessing adver-\nsarial examples. CoRR, abs/1412.6572. 268, 269, 271, 555, 556\n\nGoodfellow, I. J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S.,\nCourville, A., and Bengio, Y. (2014c). Generative adversarial networks. In NIPS\u20192014.\n544, 689, 699, 701, 704\n\nGoodfellow, I. J., Bulatov, Y., Ibarz, J., Arnoud, S., and Shet, V. (2014d). Multi-digit\nnumber recognition from Street View imagery using deep convolutional neural networks.\nIn International Conference on Learning Representations. 25, 101, 201, 202, 203, 391,\n422, 449\n\nGoodfellow, I. J., Vinyals, O., and Saxe, A. M. (2015). Qualitatively characterizing neural\nnetwork optimization problems. In International Conference on Learning Representa-\ntions. 285, 286, 287, 291\n\nGoodman, J. (2001). Classes for fast maximum entropy training. In International\nConference on Acoustics, Speech and Signal Processing (ICASSP), Utah. 467\n\nGori, M. and Tesi, A. (1992). On the problem of local minima in backpropagation. [EEE\nTransactions on Pattern Analysis and Machine Intelligence, PAMI-14(1), 76-86. 284\n\nGosset, W. 8. (1908). The probable error of a mean. Biometrika, 6(1), 1-25. Originally\npublished under the pseudonym \u201cStudent\u201d. 21\n\nGouws, S., Bengio, Y., and Corrado, G. (2014). BilBOWA: Fast bilingual distributed\nrepresentations without word alignments. Technical report, arXiv:1410.2455. 476, 539\n\nGraf, H. P. and Jackel, L. D. (1989). Analog electronic neural network circuits. Circuits\nand Devices Magazine, IEEE, 5(4), 44-49. 451\n\nGraves, A. (2011). Practical variational inference for neural networks. In NIPS\u20192011. 242\n\nGraves, A. (2012). Supervised Sequence Labelling with Recurrent Neural Networks. Studies\nin Computational Intelligence. Springer. 374, 395, 411, 460\n\nGraves, A. (2013). Generating sequences with recurrent neural networks. Technical report,\narXiv:1308.0850. 190, 410, 415, 420\n\nGraves, A. and Jaitly, N. (2014). Towards end-to-end speech recognition with recurrent\nneural networks. In ICML\u20192014. 410\n\nGraves, A. and Schmidhuber, J. (2005). Framewise phoneme classification with bidirec-\ntional LSTM and other neural network architectures. Neural Networks, 18(5), 602-610.\n395\n\nGraves, A. and Schmidhuber, J. (2009). Offline handwriting recognition with multidi-\nmensional recurrent neural networks. In D. Koller, D. Schuurmans, Y. Bengio, and\nL. Bottou, editors, NIPS\u20192008, pages 545-552. 395\n\n739\n", "BIBLIOGRAPHY\n\nGraves, A., Fernandez, $., Gomez, F., and Schmidhuber, J. (2006). Connectionist temporal\nclassification: Labelling unsegmented sequence data with recurrent neural networks. In\nICML\u20192006, pages 369-376, Pittsburgh, USA. 460\n\nGraves, A., Liwicki, M., Bunke, H., Schmidhuber, J., and Fernandez, S. (2008). Uncon-\nstrained on-line handwriting recognition with recurrent neural networks. In J. Platt,\n\nD. Koller, Y. Singer, and S. Roweis, editors, NIPS\u20192007, pages 577-584. 395\n\nGraves, A., Liwicki, M., Ferndndez, S., Bertolami, R., Bunke, H., and Schmidhuber, J.\n(2009). A novel connectionist system for unconstrained handwriting recognition. Pattern\nAnalysis and Machine Intelligence, IEEE Transactions on, 31(5), 855-868. 410\n\nGraves, A., Mohamed, A., and Hinton, G. (2013). Speech recognition with deep recurrent\nneural networks. In ICASSP\u20192013, pages 6645-6649. 395, 398, 410, 411, 460\n\nGraves, A., Wayne, G., and Danihelka, I. (2014a). Neural Turing machines.\narXiv:1410.5401. 25\n\nGraves, A., Wayne, G., and Danihelka, I. (2014b). Neural Turing machines. arXiv preprint\narXiv:1410.5401. 418\n\nGrefenstette, E., Hermann, K. M., Suleyman, M., and Blunsom, P. (2015). Learning to\ntransduce with unbounded memory. In NIPS\u20192015. 418\n\nGreff, K., Srivastava, R. K., Koutnik, J., Steunebrink, B. R., and Schmidhuber, J. (2015).\nLSTM: a search space odyssey. arXiv preprint arXiv:1508.04069. 412\n\nGregor, K. and LeCun, Y. (2010a). Emergence of complex-like cells in a temporal product\nnetwork with local receptive fields. Technical report, arXiv:1006.0448. 352\n\nGregor, K. and LeCun, Y. (2010b). Learning fast approximations of sparse coding. In\nL. Bottou and M. Littman, editors, Proceedings of the Twenty-seventh International\nConference on Machine Learning (ICML-10). ACM. 652\n\nGregor, K., Danihelka, I., Mnih, A., Blundell, C., and Wierstra, D. (2014). Deep\nautoregressive networks. In International Conference on Machine Learning (ICML\u20192014).\n693\n\nGregor, K., Danihelka, I., Graves, A., and Wierstra, D. (2015). DRAW: A recurrent neural\nnetwork for image generation. arXiv preprint arXiv:1502.04623. 698\n\nGretton, A., Borgwardt, K. M., Rasch, M. J., Sch\u00e9lkopf, B., and Smola, A. (2012). A\nkernel two-sample test. The Journal of Machine Learning Research, 13(1), 723-773.\n704\n\nGiilcehre, G. and Bengio, Y. (2013). Knowledge matters: Importance of prior information\nfor optimization. In International Conference on Learning Representations (ICLR\u20192013).\n25\n\n740\n", "BIBLIOGRAPHY\n\nGuo, H. and Gelfand, 5. B. (1992). Classification trees with neural network feature\nextraction. Neural Networks, IEEE Transactions on, 3(6), 923-933. 450\n\nGupta, S., Agrawal, A., Gopalakrishnan, K., and Narayanan, P. (2015). Deep learning\nwith limited numerical precision. CoRR, abs/1502.02551. 452\n\nGutmann, M. and Hyvarinen, A. (2010). Noise-contrastive estimation: A new estima-\ntion principle for unnormalized statistical models. In Proceedings of The Thirteenth\nInternational Conference on Artificial Intelligence and Statistics (AISTATS\u201910). 620\n\nHadsell, R., Sermanet, P., Ben, J., Erkan, A., Han, J., Muller, U., and LeCun, Y.\n(2007). Online learning for offroad robots: Spatial label propagation to learn long-range\ntraversability. In Proceedings of Robotics: Science and Systems, Atlanta, GA, USA. 453\n\nHajnal, A., Maass, W., Pudlak, P., Szegedy, M., and Turan, G. (1993). Threshold circuits\nof bounded depth. J. Comput. System. Sci., 46, 129-154. 199\n\nHastad, J. (1986). Almost optimal lower bounds for small depth circuits. In Proceedings\nof the 18th annual ACM Symposium on Theory of Computing, pages 6-20, Berkeley,\nCalifornia. ACM Press. 199\n\nHAstad, J. and Goldmann, M. (1991). On the power of small-depth threshold circuits.\nComputational Complexity, 1, 113-129. 199\n\nHastie, T., Tibshirani, R., and Friedman, J. (2001). The elements of statistical learning:\ndata mining, inference and prediction. Springer Series in Statistics. Springer Verlag.\n146\n\nHe, K., Zhang, X., Ren, S., and Sun, J. (2015). Delving deep into rectifiers: Surpassing\nhuman-level performance on ImageNet classification. arXiv preprint arXiv:1502.01852.\n28, 193\n\nHebb, D. O. (1949). The Organization of Behavior. Wiley, New York. 14, 17, 656\n\nHenaff, M., Jarrett, K., Kavukcuoglu, K., and LeCun, Y. (2011). Unsupervised learning\nof sparse features for scalable audio classification. In ISMIR\u201911. 523\n\nHenderson, J. (2003). Inducing history representations for broad coverage statistical\nparsing. In HLT-NAACL, pages 103-110. 477\n\nHenderson, J. (2004). Discriminative training of a neural network statistical parser. In\nProceedings of the 42nd Annual Meeting on Association for Computational Linguistics,\npage 95. 477\n\nHenniges, M., Puertas, G., Bornschein, J., Eggert, J., and Liicke, J. (2010). Binary sparse\n\ncoding. In Latent Variable Analysis and Signal Separation, pages 450-457. Springer.\n640\n\n741\n", "BIBLIOGRAPHY\n\nHerault, J. and Ans, B. (1984). Circuits neuronaux a synapses modifiables: D\u00e9codage de\nmessages composites par apprentissage non supervis\u00e9. Comptes Rendus de l\u2019Acad\u00e9mie\ndes Sciences, 299(III-13), 525\u2014528. 491\n\nHinton, G. (2012). Neural networks for machine learning. Coursera, video lectures. 307\n\nHinton, G., Deng, L., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V.,\nNguyen, P., Sainath, T., and Kingsbury, B. (2012a). Deep neural networks for acoustic\nmodeling in speech recognition. JEEE Signal Processing Magazine, 29(6), 82-97. 23,\n460\n\nHinton, G., Vinyals, O., and Dean, J. (2015). Distilling the knowledge in a neural network.\narXiv preprint arXtv:1503.02531. 448\n\nHinton, G. E. (1989). Connectionist learning procedures. Artificial Intelligence, 40,\n185-234. 494\n\nHinton, G. E. (1990). Mapping part-whole hierarchies into connectionist networks. Artificial\nIntelligence, 46(1), 47-75. 418\n\nHinton, G. E. (1999). Products of experts. In JCANN\u20191999. 571\n\nHinton, G. E. (2000). Training products of experts by minimizing contrastive divergence.\nTechnical Report GCNU TR 2000-004, Gatsby Unit, University College London. 610,\n676\n\nHinton, G. E. (2006). To recognize shapes, first learn to generate images. Technical Report\nUTML TR 2006-003, University of Toronto. 528, 595\n\nHinton, G. E. (2007a). How to do backpropagation in a brain. Invited talk at the\nNIPS\u20192007 Deep Learning Workshop. 656\n\nHinton, G. E. (2007b). Learning multiple layers of representation. Trends in cognitive\nsciences, 11(10), 428-434. 660\n\nHinton, G. E. (2010). A practical guide to training restricted Boltzmann machines.\nTechnical Report UTML TR 2010-003, Department of Computer Science, University of\nToronto. 610\n\nHinton, G. E. and Ghahramani, Z. (1997). Generative models for discovering sparse\ndistributed representations. Philosophical Transactions of the Royal Society of London.\n147\n\nHinton, G. E. and McClelland, J. L. (1988). Learning representations by recirculation. In\nNIPS\u20191987, pages 358-366. 502\n\nHinton, G. E. and Roweis, 5. (2003). Stochastic neighbor embedding. In NIPS\u20192002. 519\n\n742\n", "BIBLIOGRAPHY\n\nHinton, G. E. and Salakhutdinov, R. (2006). Reducing the dimensionality of data with\nneural networks. Science, 313(5786), 504-507. 509, 524, 528, 529, 534\n\nHinton, G. E. and Sejnowski, T. J. (1986). Learning and relearning in Boltzmann machines.\nIn D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing,\nvolume 1, chapter 7, pages 282-317. MIT Press, Cambridge. 570, 654\n\nHinton, G. E. and Sejnowski, T. J. (1999). Unsupervised learning: foundations of neural\ncomputation. MIT press. 541\n\nHinton, G. E. and Shallice, T. (1991). Lesioning an attractor network: investigations of\nacquired dyslexia. Psychological review, 98(1), 74. 13\n\nHinton, G. E. and Zemel, R. S. (1994). Autoencoders, minimum description length, and\nHelmholtz free energy. In NIPS\u20191993. 502\n\nHinton, G. E., Sejnowski, T. J., and Ackley, D. H. (1984). Boltzmann machines: Constraint\nsatisfaction networks that learn. Technical Report TR-CMU-CS-84-119, Carnegie-Mellon\nUniversity, Dept. of Computer Science. 570, 654\n\nHinton, G. E., McClelland, J., and Rumelhart, D. (1986). Distributed representations.\nIn D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing:\nExplorations in the Microstructure of Cognition, volume 1, pages 77-109. MIT Press,\nCambridge. 17, 225, 526\n\nHinton, G. E., Revow, M., and Dayan, P. (1995a). Recognizing handwritten digits using\nmixtures of linear models. In G. Tesauro, D. Touretzky, and T. Leen, editors, Advances\nin Neural Information Processing Systems 7 (NIPS\u201994), pages 1015-1022. MIT Press,\nCambridge, MA. 489\n\nHinton, G. E., Dayan, P., Frey, B. J., and Neal, R. M. (1995b). The wake-sleep algorithm\nfor unsupervised neural networks. Science, 268, 1558-1161. 504, 651\n\nHinton, G. E., Dayan, P., and Revow, M. (1997). Modelling the manifolds of images of\nhandwritten digits. IEEE Transactions on Neural Networks, 8, 65-74. 499\n\nHinton, G. E., Welling, M., Teh, Y. W., and Osindero, S. (2001). A new view of ICA. In\nProceedings of 3rd International Conference on Independent Component Analysis and\nBlind Signal Separation (ICA\u201901), pages 746-751, San Diego, CA. 491\n\nHinton, G. E., Osindero, S., and Teh, Y. (2006). A fast learning algorithm for deep belief\nnets. Neural Computation, 18, 1527-1554. 14, 19, 27, 143, 528, 529, 660, 661\n\nHinton, G. E., Deng, L., Yu, D., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A.,\nVanhoucke, V., Nguyen, P., Sainath, T. N., and Kingsbury, B. (2012b). Deep neural\nnetworks for acoustic modeling in speech recognition: The shared views of four research\ngroups. IEEE Signal Process. Mag., 29(6), 82-97. 101\n\n743\n", "BIBLIOGRAPHY\n\nHinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2012c).\nImproving neural networks by preventing co-adaptation of feature detectors. Technical\nreport, arXiv:1207.0580. 238, 263, 267\n\nHinton, G. E., Vinyals, O., and Dean, J. (2014). Dark knowledge. Invited talk at the\nBayLearn Bay Area Machine Learning Symposium. 448\n\nHochreiter, $. (1991). Untersuchungen zu dynamischen neuronalen Netzen. Diploma\nthesis, T.U. Miinchen. 18, 401, 403\n\nHochreiter, S. and Schmidhuber, J. (1995). Simplifying neural nets by discovering flat\nminima. In Advances in Neural Information Processing Systems 7, pages 529-536. MIT\nPress. 243\n\nHochreiter, 5. and Schmidhuber, J. (1997). Long short-term memory. Neural Computation,\n9(8), 1735-1780. 18, 410, 411\n\nHochreiter, S., Bengio, Y., and Frasconi, P. (2001). Gradient flow in recurrent nets: the\ndifficulty of learning long-term dependencies. In J. Kolen and \u00a7. Kremer, editors, Field\nGuide to Dynamical Recurrent Networks. IEEE Press. 411\n\nHoli, J. L. and Hwang, J.-N. (1993). Finite precision error analysis of neural network\nhardware implementations. Computers, IEEE Transactions on, 42(3), 281-290. 451\n\nHolt, J. L. and Baker, T. E. (1991). Back propagation simulations using limited preci-\nsion calculations. In Neural Networks, 1991., IJCNN-91-Seattle International Joint\nConference on, volume 2, pages 121-126. IEEE. 451\n\nHornik, K., Stinchcombe, M., and White, H. (1989). Multilayer feedforward networks are\nuniversal approximators. Neural Networks, 2, 359-366. 198\n\nHornik, K., Stinchcombe, M., and White, H. (1990). Universal approximation of an\nunknown mapping and its derivatives using multilayer feedforward networks. Neural\nnetworks, 3(5), 551-560. 198\n\nHsu, F.-H. (2002). Behind Deep Blue: Building the Computer That Defeated the World\nChess Champion. Princeton University Press, Princeton, NJ, USA. 2\n\nHuang, F\u2019. and Ogata, Y. (2002). Generalized pseudo-likelihood estimates for Markov\nrandom fields on lattice. Annals of the Institute of Statistical Mathematics, 54(1), 1-18.\n616\n\nHuang, P.-S., He, X., Gao, J., Deng, L., Acero, A., and Heck, L. (2013). Learning deep\nstructured semantic models for web search using clickthrough data. In Proceedings of\nthe 22nd ACM international conference on Conference on information & knowledge\nmanagement, pages 2333-2338. ACM. 480\n\nHubel, D. and Wiesel, T. (1968). Receptive fields and functional architecture of monkey\nstriate cortex. Journal of Physiology (London), 195, 215-243. 364\n\n744\n", "BIBLIOGRAPHY\n\nHubel, D. H. and Wiesel, T. N. (1959). Receptive fields of single neurons in the cat\u2019s\nstriate cortex. Journal of Physiology, 148, 574-591. 364\n\nHubel, D. H. and Wiesel, T. N. (1962). Receptive fields, binocular interaction, and\nfunctional architecture in the cat\u2019s visual cortex. Journal of Physiology (London), 160,\n106-154. 364\n\nHuszar, F. (2015). How (not) to train your generative model: schedule sampling, likelihood,\nadversary? arXiv:1511.05101. 698\n\nHutter, F., Hoos, H., and Leyton-Brown, K. (2011). Sequential model-based optimization\nfor general algorithm configuration. In LION-5. Extended version as UBC Tech report\nTR-2010-10. 436\n\nHyotyniemi, H. (1996). Turing machines are recurrent neural networks. In STeP\u201996, pages\n13-24. 379\n\nHyvarinen, A. (1999). Survey on independent component analysis. Neural Computing\nSurveys, 2, 94-128. 491\n\nHyvarinen, A. (2005). Estimation of non-normalized statistical models using score matching.\nJournal of Machine Learning Research, 6, 695-709. 513, 617\n\nHyvarinen, A. (2007a). Connections between score matching, contrastive divergence,\nand pseudolikelihood for continuous-valued variables. IEEE Transactions on Neural\nNetworks, 18, 1529-1531. 618\n\nHyvarinen, A. (2007b). Some extensions of score matching. Computational Statistics and\nData Analysis, 51, 2499-2512. 618\n\nHyvarinen, A. and Hoyer, P. O. (1999). Emergence of topography and complex cell\nproperties from natural images using extensions of ica. In NIPS, pages 827-833. 493\n\nHyvarinen, A. and Pajunen, P. (1999). Nonlinear independent component analysis:\nExistence and uniqueness results. Neural Networks, 12(3), 429-439. 493\n\nHyvarinen, A., Karhunen, J., and Oja, E. (2001la). Independent Component Analysis.\nWiley-Interscience. 491\n\nHyvarinen, A., Hoyer, P. O., and Inki, M. O. (2001b). Topographic independent component\nanalysis. Neural Computation, 13(7), 1527-1558. 493\n\nHyvarinen, A., Hurri, J., and Hoyer, P. O. (2009). Natural Image Statistics: A probabilistic\napproach to early computational vision. Springer-Verlag. 370\n\nIba, Y. (2001). Extended ensemble Monte Carlo. International Journal of Modern Physics,\nC12, 623-656. 603\n", "BIBLIOGRAPHY\n\nInayoshi, H. and Kurita, T. (2005). Improved generalization by adding both auto-\nassociation and hidden-layer noise to neural-network-based-classifiers. [EEE Workshop\non Machine Learning for Signal Processing, pages 141\u2014-146. 515\n\nloffe, S. and Szegedy, C. (2015). Batch normalization: Accelerating deep network training\nby reducing internal covariate shift. 100, 317, 320\n\nJacobs, R. A. (1988). Increased rates of convergence through learning rate adaptation.\nNeural networks, 1(4), 295-307. 307\n\nJacobs, R. A., Jordan, M. L., Nowlan, S. J., and Hinton, G. E. (1991). Adaptive mixtures\nof local experts. Neural Computation, 3, 79-87. 189, 450\n\nJaeger, H. (2003). Adaptive nonlinear system identification with echo state networks. In\nAdvances in Neural Information Processing Systems 15. 404\n\nJaeger, H. (2007a). Discovering multiscale dynamical features with hierarchical echo state\nnetworks. Technical report, Jacobs University. 398\n\nJaeger, H. (2007b). Echo state network. Scholarpedia, 2(9), 2330. 404\n\nJaeger, H. (2012). Long short-term memory in echo state networks: Details of a simulation\nstudy. Technical report, Technical report, Jacobs University Bremen. 405\n\nJaeger, H. and Haas, H. (2004). Harnessing nonlinearity: Predicting chaotic systems and\nsaving energy in wireless communication. Science, 304(5667), 78-80. 27, 404\n\nJaeger, H., Lukosevicius, M., Popovici, D., and Siewert, U. (2007). Optimization and\napplications of echo state networks with leaky- integrator neurons. Neural Networks,\n20(3), 335-352. 407\n\nJain, V., Murray, J. F., Roth, F., Turaga, S., Zhigulin, V., Briggman, K. L., Helmstaedter,\nM. N., Denk, W., and Seung, H. S. (2007). Supervised learning of image restoration\nwith convolutional networks. In Computer Vision, 2007. ICCV 2007. IEEE 11th\nInternational Conference on, pages 1-8. IEEE. 359\n\nJaitly, N. and Hinton, G. (2011). Learning a better representation of speech soundwaves\nusing restricted Boltzmann machines. In Acoustics, Speech and Signal Processing\n(ICASSP), 2011 IEEE International Conference on, pages 5884-5887. IEEE. 458\n\nJaitly, N. and Hinton, G. E. (2013). Vocal tract length perturbation (VTLP) improves\nspeech recognition. In ICML\u20192013. 241\n\nJarrett, K., Kavukcuoglu, K., Ranzato, M., and LeCun, Y. (2009). What is the best\nmulti-stage architecture for object recognition? In ICCV\u201909. 16, 24, 27, 174, 193, 226,\n363, 364, 523\n\nJarzynski, C. (1997). Nonequilibrium equality for free energy differences. Phys. Rev. Lett.,\n78, 2690-2693. 625, 628\n\n746\n", "BIBLIOGRAPHY\n\nJaynes, E. T. (2003). Probability Theory: The Logic of Science. Cambridge University\nPress. 53\n\nJean, S., Cho, K., Memisevic, R., and Bengio, Y. (2014). On using very large target\nvocabulary for neural machine translation. arXiv:1412.2007. 474, 475\n\nJelinek, F. and Mercer, R. L. (1980). Interpolated estimation of Markov source parameters\nfrom sparse data. In E. S. Gelsema and L. N. Kanal, editors, Pattern Recognition in\nPractice. North-Holland, Amsterdam. 462, 473\n\nJia, Y. (2013). Caffe: An open source convolutional architecture for fast feature embedding.\nhttp://caffe.berkeleyvision.org/. 25, 214\n\nJia, Y., Huang, C., and Darrell, T. (2012). Beyond spatial pyramids: Receptive field\nlearning for pooled image features. In Computer Vision and Pattern Recognition\n(CVPR), 2012 IEEE Conference on, pages 3370-3377. IEEE. 345\n\nJim, K.-C., Giles, C. L., and Horne, B. G. (1996). An analysis of noise in recurrent neural\nnetworks: convergence and generalization. IEEE Transactions on Neural Networks,\n7(6), 1424-1438. 242\n\nJordan, M. I. (1998). Learning in Graphical Models. Kluwer, Dordrecht, Netherlands. 18\n\nJoulin, A. and Mikolov, T. (2015). Inferring algorithmic patterns with stack-augmented\nrecurrent nets. arXiv preprint arXiv:1503.01007. 418\n\nJozefowicz, R., Zaremba, W., and Sutskever, I. (2015). An empirical evaluation of recurrent\nnetwork architectures. In ICML\u20192015. 306, 412\n\nJudd, J. S. (1989). Neural Network Design and the Complexity of Learning. MIT press.\n293\n\nJutten, C. and Herault, J. (1991). Blind separation of sources, part I: an adaptive\nalgorithm based on neuromimetic architecture. Signal Processing, 24, 1-10. 491\n\nKahou, S. E., Pal, C., Bouthillier, X., Froumenty, P., Gtilgehre, c., Memisevic, R., Vincent,\nP., Courville, A., Bengio, Y., Ferrari, R. C., Mirza, M., Jean, S., Carrier, P. L., Dauphin,\nY., Boulanger-Lewandowski, N., Aggarwal, A., Zumer, J., Lamblin, P., Raymond,\nJ.-P., Desjardins, G., Pascanu, R., Warde-Farley, D., Torabi, A., Sharma, A., Bengio,\nE., Cot\u00e9, M., Konda, K. R., and Wu, Z. (2013). Combining modality specific deep\nneural networks for emotion recognition in video. In Proceedings of the 15th ACM on\nInternational Conference on Multimodal Interaction. 201\n\nKalchbrenner, N. and Blunsom, P. (2013). Recurrent continuous translation models. In\nEMNLP\u20192018. 474, 475\n\nKalchbrenner, N., Danihelka, I., and Graves, A. (2015). Grid long short-term memory.\narXiv preprint arXtv:1507.01526. 395\n\nTAT\n", "BIBLIOGRAPHY\n\nKamyshanska, H. and Memisevic, R. (2015). The potential energy of an autoencoder.\nIEEE Transactions on Pattern Analysis and Machine Intelligence. 515\n\nKarpathy, A. and Li, F.-F. (2015). Deep visual-semantic alignments for generating image\ndescriptions. In CVPR\u20192015. arXiv:1412.2306. 102\n\nKarpathy, A., Toderici, G., Shetty, S., Leung, T., Sukthankar, R., and Fei-Fei, L. (2014).\nLarge-scale video classification with convolutional neural networks. In CVPR. 21\n\nKarush, W. (1939). Minima of Functions of Several Variables with Inequalities as Side\nConstraints. Master\u2019s thesis, Dept. of Mathematics, Univ. of Chicago. 95\n\nKatz, S. M. (1987). Estimation of probabilities from sparse data for the language model\ncomponent of a speech recognizer. IEEE Transactions on Acoustics, Speech, and Signal\nProcessing, ASSP-35(3), 400-401. 462, 473\n\nKavukcuoglu, K., Ranzato, M., and LeCun, Y. (2008). Fast inference in sparse coding\nalgorithms with applications to object recognition. Technical report, Computational and\nBiological Learning Lab, Courant Institute, NYU. Tech Report CBLL-TR-2008-12-01.\n523\n\nKavukcuoglu, K., Ranzato, M.-A., Fergus, R., and LeCun, Y. (2009). Learning invariant\nfeatures through topographic filter maps. In CVPR\u20192009. 523\n\nKavukcuoglu, K., Sermanet, P., Boureau, Y.-L., Gregor, K., Mathieu, M., and LeCun, Y.\n(2010). Learning convolutional feature hierarchies for visual recognition. In NIPS\u20192010.\n364, 523\n\nKelley, H. J. (1960). Gradient theory of optimal flight paths. ARS Journal, 30(10),\n947-954. 225\n\nKhan, F., Zhu, X., and Mutlu, B. (2011). How do humans teach: On curriculum learning\nand teaching dimension. In Advances in Neural Information Processing Systems 24\n(NIPS\u201911), pages 1449-1457. 328\n\nKim, S. K., McAfee, L. C., McMahon, P. L., and Olukotun, K. (2009). A highly scalable\nrestricted Boltzmann machine FPGA implementation. In Field Programmable Logic\nand Applications, 2009. FPL 2009. International Conference on, pages 367-372. IEEE.\n451\n\nKindermann, R. (1980). Markov Random Fields and Their Applications (Contemporary\nMathematics ; V. 1). American Mathematical Society. 566\n\nKingma, D. and Ba, J. (2014). Adam: A method for stochastic optimization. arXiv\npreprint arXiv:1412.6980. 308\n\nKingma, D. and LeCun, Y. (2010). Regularized estimation of image statistics by score\nmatching. In NIPS\u20192010. 513, 620\n\n748\n", "BIBLIOGRAPHY\n\nKingma, D., Rezende, D., Mohamed, S., and Welling, M. (2014). Semi-supervised learning\nwith deep generative models. In NIPS\u20192014. 426\n\nKingma, D. P. (2013). Fast gradient-based inference with continuous latent variable\nmodels in auxiliary form. Technical report, arxiv:1306.0733. 652, 689, 696\n\nKingma, D. P. and Welling, M. (2014a). Auto-encoding variational bayes. In Proceedings\nof the International Conference on Learning Representations (ICLR). 689, 700\n\nKingma, D. P. and Welling, M. (2014b). Efficient gradient-based inference through\ntransformations between bayes nets and neural nets. Technical report, arxiv:1402.0480.\n689\n\nKirkpatrick, S., Jr., C. D. G., , and Vecchi, M. P. (1983). Optimization by simulated\nannealing. Science, 220, 671-680. 327\n\nKiros, R., Salakhutdinov, R., and Zemel, R. (2014a). Multimodal neural language models.\nIn ICML\u20192014. 102\n\nKiros, R., Salakhutdinov, R., and Zemel, R. (2014b). Unifying visual-semantic embeddings\nwith multimodal neural language models. arXiv:1411.2539 [cs.LG]. 102, 410\n\nKlementiev, A., Titov, L, and Bhattarai, B. (2012). Inducing crosslingual distributed\nrepresentations of words. In Proceedings of COLING 2012. 476, 539\n\nKnowles-Barley, S., Jones, T. R., Morgan, J., Lee, D., Kasthuri, N., Lichtman, J. W., and\nPfister, H. (2014). Deep learning for the connectome. GPU Technology Conference. 26\n\nKoller, D. and Friedman, N. (2009). Probabilistic Graphical Models: Principles and\nTechniques. MIT Press. 583, 595, 645\n\nKonig, Y., Bourlard, H., and Morgan, N. (1996). REMAP: Recursive estimation and\nmaximization of a posteriori probabilities \u2014 application to transition-based connectionist\nspeech recognition. In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in\nNeural Information Processing Systems 8 (NIPS\u201995). MIT Press, Cambridge, MA. 459\n\nKoren, Y. (2009). The BellKor solution to the Netflix grand prize. 258, 480\n\nKotzias, D., Denil, M., de Freitas, N., and Smyth, P. (2015). From group to individual\nlabels using deep features. In ACM SIGKDD. 106\n\nKoutnik, J., Greff, K., Gomez, F., and Schmidhuber, J. (2014). A clockwork RNN. In\nICML\u20192014. 408\n\nKo\u00e9isky, T., Hermann, K. M., and Blunsom, P. (2014). Learning Bilingual Word Repre-\nsentations by Marginalizing Alignments. In Proceedings of ACL. 476\n\nKrause, O., Fischer, A., Glasmachers, T., and Igel, C. (2013). Approximation properties\nof DBNs with binary hidden units and real-valued visible units. In ICML\u20192013. 553\n\n749\n", "BIBLIOGRAPHY\n\nKrizhevsky, A. (2010). Convolutional deep belief networks on CIFAR-10. Technical report,\nUniversity of Toronto. Unpublished Manuscript: http://www.cs.utoronto.ca/ kriz/conv-\ncifar10-aug2010.pdf. 446\n\nKrizhevsky, A. and Hinton, G. (2009). Learning multiple layers of features from tiny\nimages. Technical report, University of Toronto. 21, 561\n\nKrizhevsky, A. and Hinton, G. E. (2011). Using very deep autoencoders for content-based\nimage retrieval. In ESANN. 525\n\nKrizhevsky, A., Sutskever, I., and Hinton, G. (2012). ImageNet classification with deep\nconvolutional neural networks. In NIPS\u20192012. 23, 24, 27, 100, 201, 371, 454, 458\n\nKrueger, K. A. and Dayan, P. (2009). Flexible shaping: how learning in small steps helps.\nCognition, 110, 380-394. 328\n\nKuhn, H. W. and Tucker, A. W. (1951). Nonlinear programming. In Proceedings of the\nSecond Berkeley Symposium on Mathematical Statistics and Probability, pages 481-492,\nBerkeley, Calif. University of California Press. 95\n\nKumar, A., Irsoy, O., Su, J., Bradbury, J., English, R., Pierce, B., Ondruska, P., Iyyer,\nM., Gulrajani, L., and Socher, R. (2015). Ask me anything: Dynamic memory networks\nfor natural language processing. arXiv:1506.07285. 418, 485\n\nKumar, M. P., Packer, B., and Koller, D. (2010). Self-paced learning for latent variable\nmodels. In NIPS\u20192010. 328\n\nLang, K. J. and Hinton, G. E. (1988). The development of the time-delay neural network\narchitecture for speech recognition. Technical Report CMU-CS-88-152, Carnegie-Mellon\nUniversity. 367, 374, 407\n\nLang, K. J., Waibel, A. H., and Hinton, G. E. (1990). A time-delay neural network\narchitecture for isolated word recognition. Neural networks, 3(1), 23-43. 374\n\nLangford, J. and Zhang, T. (2008). The epoch-greedy algorithm for contextual multi-armed\nbandits. In NIPS\u20192008, pages 1096\u20141103. 480\n\nLappalainen, H., Giannakopoulos, X., Honkela, A., and Karhunen, J. (2000). Nonlinear\nindependent component analysis using ensemble learning: Experiments and discussion.\n\nIn Proc. ICA. Citeseer. 493\n\nLarochelle, H. and Bengio, Y. (2008). Classification using discriminative restricted\nBoltzmann machines. In ICML\u20192008. 244, 255, 530, 686, 716\n\nLarochelle, H. and Hinton, G. E. (2010). Learning to combine foveal glimpses with a\n\nthird-order Boltzmann machine. In Advances in Neural Information Processing Systems\n28, pages 1243-1251. 367\n", "BIBLIOGRAPHY\n\nLarochelle, H. and Murray, I. (2011). The Neural Autoregressive Distribution Estimator.\nIn AISTATS\u20192011. 705, 708, 709\n\nLarochelle, H., Erhan, D., and Bengio, Y. (2008). Zero-data learning of new tasks. In\nAAAI Conference on Artificial Intelligence. 539\n\nLarochelle, H., Bengio, Y., Louradour, J., and Lamblin, P. (2009). Exploring strategies for\ntraining deep neural networks. Journal of Machine Learning Research, 10, 1-40. 535\n\nLasserre, J. A., Bishop, C. M., and Minka, T. P. (2006). Principled hybrids of generative and\ndiscriminative models. In Proceedings of the Computer Vision and Pattern Recognition\nConference (CVPR\u201906), pages 87-94, Washington, DC, USA. IEEE Computer Society.\n244, 253\n\nLe, Q., Ngiam, J., Chen, Z., hao Chia, D. J., Koh, P. W., and Ng, A. (2010). Tiled\nconvolutional neural networks. In J. Lafferty, C. K. I. Williams, J. Shawe-Taylor,\nR. Zemel, and A. Culotta, editors, Advances in Neural Information Processing Systems\n28 (NIPS\u201910), pages 1279-1287. 352\n\nLe, Q., Ngiam, J., Coates, A., Lahiri, A., Prochnow, B., and Ng, A. (2011). On optimization\nmethods for deep learning. In Proc. ICML\u20192011. ACM. 316\n\nLe, Q., Ranzato, M., Monga, R., Devin, M., Corrado, G., Chen, K., Dean, J., and Ng,\nA. (2012). Building high-level features using large scale unsupervised learning. In\nICML\u20192012. 24, 27\n\nLe Roux, N. and Bengio, Y. (2008). Representational power of restricted Boltzmann\nmachines and deep belief networks. Neural Computation, 20(6), 1631-1649. 553, 655\n\nLe Roux, N. and Bengio, Y. (2010). Deep belief networks are compact universal approxi-\nmators. Neural Computation, 22(8), 2192-2207. 553\n\nLeCun, Y. (1985). Une proc\u00e9dure d\u2019apprentissage pour R\u00e9seau a seuil assym\u00e9trique. In\nCognitiva 85: A la Fronti\u00e9re de l\u2019Intelligence Artificielle, des Sciences de la Connaissance\net des Neurosciences, pages 599-604, Paris 1985. CESTA, Paris. 225\n\nLeCun, Y. (1986). Learning processes in an asymmetric threshold network. In F. Fogelman-\nSouli\u00e9, E. Bienenstock, and G. Weisbuch, editors, Disordered Systems and Biological\nOrganization, pages 233-240. Springer-Verlag, Les Houches, France. 352\n\nLeCun, Y. (1987). Mod\u00e9les connexionistes de V\u2019apprentissage. Ph.D. thesis, Universit\u00e9 de\nParis VI. 18, 502, 515\n\nLeCun, Y. (1989). Generalization and network design strategies. Technical Report\nCRG-TR-89-4, University of Toronto. 330, 352\n", "BIBLIOGRAPHY\n\nLeCun, Y., Jackel, L. D., Boser, B., Denker, J. S., Graf, H. P., Guyon, I., Henderson, D.,\nHoward, R. E., and Hubbard, W. (1989). Handwritten digit recognition: Applications\n\nof neural network chips and automatic learning. IEEE Communications Magazine,\n27(11), 41-46. 368\n\nLeCun, Y., Bottou, L., Orr, G. B., and Miiller, K.-R. (1998a). Efficient backprop. In\nNeural Networks, Tricks of the Trade, Lecture Notes in Computer Science LNCS 1524.\nSpringer Verlag. 310, 429\n\nLeCun, Y., Bottou, L., Bengio, Y., and Haffner, P. (1998b). Gradient based learning\napplied to document recognition. Proc. IEEE. 16, 18, 21, 27, 371, 458, 460\n\nLeCun, Y., Kavukcuoglu, K., and Farabet, C. (2010). Convolutional networks and\napplications in vision. In Circuits and Systems (ISCAS), Proceedings of 2010 IEEE\nInternational Symposium on, pages 253-256. IEEE. 371\n\nL\u2019Ecuyer, P. (1994). Efficiency improvement and variance reduction. In Proceedings of\nthe 1994 Winter Simulation Conference, pages 122\u2014132. 690\n\nLee, C.-Y., Xie, S., Gallagher, P., Zhang, Z., and Tu, Z. (2014). Deeply-supervised nets.\narXiv preprint arXiw:1409.5185. 326\n\nLee, H., Battle, A., Raina, R., and Ng, A. (2007). Efficient sparse coding algorithms.\nIn B. Sch\u00e9lkopf, J. Platt, and T. Hoffman, editors, Advances in Neural Information\nProcessing Systems 19 (NIPS\u201906), pages 801-808. MIT Press. 637\n\nLee, H., Ekanadham, C., and Ng, A. (2008). Sparse deep belief net model for visual area\nV2. In NIPS\u201907. 255\n\nLee, H., Grosse, R., Ranganath, R., and Ng, A. Y. (2009). Convolutional deep belief\nnetworks for scalable unsupervised learning of hierarchical representations. In L. Bottou\nand M. Littman, editors, Proceedings of the Twenty-sixth International Conference on\nMachine Learning (ICML\u201909). ACM, Montreal, Canada. 363, 683, 684\n\nLee, Y. J. and Grauman, K. (2011). Learning the easy things first: self-paced visual\ncategory discovery. In CVPR\u20192011. 328\n\nLeibniz, G. W. (1676). Memoir using the chain rule. (Cited in TMME 7:2&3 p 321-332,\n2010). 225\n\nLenat, D. B. and Guha, R. V. (1989). Building large knowledge-based systems; representa-\ntion and inference in the Cyc project. Addison-Wesley Longman Publishing Co., Inc.\n2\n\nLeshno, M., Lin, V. Y., Pinkus, A., and Schocken, S. (1993). Multilayer feedforward\nnetworks with a nonpolynomial activation function can approximate any function.\n\nNeural Networks, 6, 861\u2014867. 198, 199\n", "BIBLIOGRAPHY\n\nLevenberg, K. (1944). A method for the solution of certain non-linear problems in least\nsquares. Quarterly Journal of Applied Mathematics, II(2), 164-168. 312\n\nL\u2019H6pital, G. F. A. (1696). Analyse des infiniment petits, pour Vintelligence des lignes\ncourbes. Paris: L\u2019Imprimerie Royale. 225\n\nLi, Y., Swersky, K., and Zemel, R. S. (2015). Generative moment matching networks.\nCoRR, abs/1502.02761. 703\n\nLin, T., Horne, B. G., Tino, P., and Giles, C. L. (1996). Learning long-term dependencies\nis not as difficult with NARX recurrent neural networks. [EEE Transactions on Neural\nNetworks, 7(6), 1329-1338. 407\n\nLin, Y., Liu, Z., Sun, M., Liu, Y., and Zhu, X. (2015). Learning entity and relation\nembeddings for knowledge graph completion. In Proc. AAAI\u201915. 484\n\nLinde, N. (1992). The machine that changed the world, episode 3. Documentary miniseries.\n2\n\nLindsey, C. and Lindblad, T. (1994). Review of hardware neural networks: a user\u2019s\nperspective. In Proc. Third Workshop on Neural Networks: From Biology to High\nEnergy Physics, pages 195\u2014202, Isola d\u2019Elba, Italy. 451\n\nLinnainmaa, S. (1976). Taylor expansion of the accumulated rounding error. BIT\nNumerical Mathematics, 16(2), 146-160. 225\n\nLISA (2008). Deep learning tutorials: Restricted Boltzmann machines. Technical report,\nLISA Lab, Universit\u00e9 de Montr\u00e9al. 589\n\nLong, P. M. and Servedio, R. A. (2010). Restricted Boltzmann machines are hard to\napproximately evaluate or simulate. In Proceedings of the 27th International Conference\non Machine Learning (ICML\u201910). 658\n\nLotter, W., Kreiman, G., and Cox, D. (2015). Unsupervised learning of visual structure\nusing predictive generative networks. arXiv preprint arXiv:1511.06380. 544, 545\n\nLovelace, A. (1842). Notes upon L. F. Menabrea\u2019s \u201cSketch of the Analytical Engine\ninvented by Charles Babbage\u201d. 1\n\nLu, L., Zhang, X., Cho, K., and Renals, S. (2015). A study of the recurrent neural network\nencoder-decoder for large vocabulary speech recognition. In Proc. Interspeech. 461\n\nLu, T., Pal, D., and Pal, M. (2010). Contextual multi-armed bandits. In International\nConference on Artificial Intelligence and Statistics, pages 485-492. 480\n\nLuenberger, D. G. (1984). Linear and Nonlinear Programming. Addison Wesley. 316\n\nLukoSevicius, M. and Jaeger, H. (2009). Reservoir computing approaches to recurrent\nneural network training. Computer Science Review, 3(3), 127-149. 404\n\n753\n", "BIBLIOGRAPHY\n\nLuo, H., Shen, R., Niu, C., and Ullrich, C. (2011). Learning class-relevant features and\nclass-irrelevant features via a hybrid third-order RBM. In International Conference on\nArtificial Intelligence and Statistics, pages 470-478. 686\n\nLuo, H., Carrier, P. L., Courville, A., and Bengio, Y. (2013). Texture modeling with\nconvolutional spike-and-slab RBMs and deep extensions. In AISTATS\u20192013. 102\n\nLyu, S. (2009). Interpretation and generalization of score matching. In Proceedings of the\nTwenty-fifth Conference in Uncertainty in Artificial Intelligence (UAI\u201909). 618\n\nfa, J., Sheridan, R. P., Liaw, A., Dahl, G. E., and Svetnik, V. (2015). Deep neural nets\nas a method for quantitative structure \u2014 activity relationships. J. Chemical information\nand modeling. 530\n\nMaas, A. L., Hannun, A. Y., and Ng, A. Y. (2013). Rectifier nonlinearities improve neural\nnetwork acoustic models. In ICML Workshop on Deep Learning for Audio, Speech, and\nLanguage Processing. 193\n\nMaass, W. (1992). Bounds for the computational power and learning complexity of analog\nneural nets (extended abstract). In Proc. of the 25th ACM Symp. Theory of Computing,\npages 335-344. 199\n\nfaass, W., Schnitger, G., and Sontag, E. D. (1994). A comparison of the computational\npower of sigmoid and Boolean threshold circuits. Theoretical Advances in Neural\nComputation and Learning, pages 127-151. 199\n\nJaass, W., Natschlaeger, T., and Markram, H. (2002). Real-time computing without\nstable states: A new framework for neural computation based on perturbations. Neural\nComputation, 14(11), 2531-2560. 404\n\nMacKay, D. (2003). Information Theory, Inference and Learning Algorithms. Cambridge\nUniversity Press. 73\n\nfaclaurin, D., Duvenaud, D., and Adams, R. P. (2015). Gradient-based hyperparameter\noptimization through reversible learning. arXiv preprint arXiv:1502.038492. 435\n\nMao, J., Xu, W., Yang, Y., Wang, J., Huang, Z., and Yuille, A. L. (2015). Deep captioning\nwith multimodal recurrent neural networks. In ICLR\u20192015. arXiv:1410.1090. 102\n\nMarcotte, P. and Savard, G. (1992). Novel approaches to the discrimination problem.\nZeitschrift fiir Operations Research (Theory), 36, 517-545. 276\n\nMarlin, B. and de Freitas, N. (2011). Asymptotic efficiency of deterministic estimators for\ndiscrete energy-based models: Ratio matching and pseudolikelihood. In UAI\u20192011. 617,\n619\n", "BIBLIOGRAPHY\n\nMarlin, B., Swersky, K., Chen, B., and de Freitas, N. (2010). Inductive principles for\nrestricted Boltzmann machine learning. In Proceedings of The Thirteenth International\nConference on Artificial Intelligence and Statistics (AISTATS\u201910), volume 9, pages\n509-516. 613, 618, 619\n\nMarquardt, D. W. (1963). An algorithm for least-squares estimation of non-linear param-\neters. Journal of the Society of Industrial and Applied Mathematics, 11(2), 431-441.\n312\n\narr, D. and Poggio, T. (1976). Cooperative computation of stereo disparity. Science,\n194. 367\n\nartens, J. (2010). Deep learning via Hessian-free optimization. In L. Bottou and\nM. Littman, editors, Proceedings of the Twenty-seventh International Conference on\nMachine Learning (ICML-10), pages 735-742. ACM. 304\n\nartens, J. and Medabalimi, V. (2014). On the expressive efficiency of sum product\nnetworks. arXiv:1411.7717. 554\n\niS\n\nartens, J. and Sutskever, I. (2011). Learning recurrent neural networks with Hessian-free\noptimization. In Proc. ICML\u20192011. ACM. 413\n\nase, S. (1995). Consistency of the maximum pseudo-likelihood estimator of continuous\nstate space Gibbsian processes. The Annals of Applied Probability, 5(3), pp. 603-612.\n616\n\nMcClelland, J., Rumelhart, D., and Hinton, G. (1995). The appeal of parallel distributed\nprocessing. In Computation & intelligence, pages 305-341. American Association for\nArtificial Intelligence. 17\n\nicCulloch, W. S. and Pitts, W. (1943). A logical calculus of ideas immanent in nervous\nactivity. Bulletin of Mathematical Biophysics, 5, 115-133. 14, 15\n\nMead, C. and Ismail, M. (2012). Analog VLSI implementation of neural systems, volume 80.\nSpringer Science & Business Media. 451\n\nMelchior, J., Fischer, A., and Wiskott, L. (2013). How to center binary deep Boltzmann\nmachines. arXiv preprint arXiv:1811.1354. 674\n\nMemisevic, R. and Hinton, G. E. (2007). Unsupervised learning of image transformations.\nIn Proceedings of the Computer Vision and Pattern Recognition Conference (CVPR\u201907).\n686\n\n{emisevic, R. and Hinton, G. E. (2010). Learning to represent spatial transformations\nwith factored higher-order Boltzmann machines. Neural Computation, 22(6), 1473-1492.\n686\n", "BIBLIOGRAPHY\n\nMesnil, G., Dauphin, Y., Glorot, X., Rifai, S., Bengio, Y., Goodfellow, I., Lavoie, E.,\nMuller, X., Desjardins, G., Warde-Farley, D., Vincent, P., Courville, A., and Bergstra,\nJ. (2011). Unsupervised and transfer learning challenge: a deep learning approach. In\nJMLR W&CP: Proc. Unsupervised and Transfer Learning, volume 7. 201, 532, 538\n\nMesnil, G., Rifai, S., Dauphin, Y., Bengio, Y., and Vincent, P. (2012). Surfing on the\nmanifold. Learning Workshop, Snowbird. 711\n\nMiikkulainen, R. and Dyer, M. G. (1991). Natural language processing with modular\nPDP networks and distributed lexicon. Cognitive Science, 15, 343-399. 477\n\nfikolov, T. (2012). Statistical Language Models based on Neural Networks. Ph.D. thesis,\nBrno University of Technology. 414\n\nAikolov, T., Deoras, A., Kombrink, S., Burget, L., and Cernocky, J. (2011la). Empirical\nevaluation and combination of advanced language modeling techniques. In Proc. 12th an-\nnual conference of the international speech communication association (INTERSPEECH\n2011). 472\n\n=)\n\nikolov, T., Deoras, A., Povey, D., Burget, L., and Cernocky, J. (2011b). Strategies for\nraining large scale neural network language models. In Proc. ASRU\u20192011. 328, 472\n\nM\n\n&\n\nikolov, T., Chen, K., Corrado, G., and Dean, J. (2013a). Efficient estimation of word rep-\nresentations in vector space. In International Conference on Learning Representations:\nWorkshops Track. 536\n\nN\n\nLikolov, T., Le, Q. V., and Sutskever, I. (2013b). Exploiting similarities among languages\nor machine translation. Technical report, arXiv:1309.4168. 539\n\nMinka, T. (2005). Divergence measures and message passing. Microsoft Research Cambridge\nUK Tech Rep MSRTR2005173 , 72(TR-2005-173). 625\n\nMinsky, M. L. and Papert, S. A. (1969). Perceptrons. MIT Press, Cambridge. 15\n\nMirza, M. and Osindero, S. (2014). Conditional generative adversarial nets. arXiv preprint\narXiv:1411.1784. 702\n\nMishkin, D. and Matas, J. (2015). All you need is a good init. arXiv preprint\narXiv:1511.06422. 305\n\nMisra, J. and Saha, I. (2010). Artificial neural networks in hardware: A survey of two\ndecades of progress. Neurocomputing, 74(1), 239-255. 451\n\nMitchell, T. M. (1997). Machine Learning. McGraw-Hill, New York. 99\n\nJiyato, T., Maeda, S., Koyama, M., Nakae, K., and Ishii, S. (2015). Distributional\nsmoothing with virtual adversarial training. In JCLR. Preprint: arXiv:1507.00677. 269\n", "BIBLIOGRAPHY\n\n(nih, A. and Gregor, K. (2014). Neural variational inference and learning in belief\nnetworks. In ICML\u20192014. 691, 692, 693\n\nMnih, A. and Hinton, G. E. (2007). Three new graphical models for statistical language\nmodelling. In Z. Ghahramani, editor, Proceedings of the Twenty-fourth International\nConference on Machine Learning (ICML\u201907), pages 641-648. ACM. 465\n\n(nih, A. and Hinton, G. E. (2009). A scalable hierarchical distributed language model.\nIn D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, Advances in Neural\nInformation Processing Systems 21 (NIPS\u201908), pages 1081-1088. 467\n\n(nih, A. and Kavukcuoglu, K. (2013). Learning word embeddings efficiently with noise-\ncontrastive estimation. In C. Burges, L. Bottou, M. Welling, Z. Ghahramani, and\nK. Weinberger, editors, Advances in Neural Information Processing Systems 26, pages\n2265-2273. Curran Associates, Inc. 472, 622\n\nnih, A. and Teh, Y. W. (2012). A fast and simple algorithm for training neural\nprobabilistic language models. In ICML\u20192012, pages 1751-1758. 472\n\nMnih, V. and Hinton, G. (2010). Learning to detect roads in high-resolution aerial images.\nIn Proceedings of the 11th European Conference on Computer Vision (ECCV). 102\n\nnih, V., Larochelle, H., and Hinton, G. (2011). Conditional restricted Boltzmann\nmachines for structure output prediction. In Proc. Conf. on Uncertainty in Artificial\nIntelligence (UAI). 685\n\niS\n\nMnih, V., Kavukcuoglo, K., Silver, D., Graves, A., Antonoglou, I, and Wierstra, D. (2013).\nPlaying Atari with deep reinforcement learning. Technical report, arXiv:1312.5602. 106\n\nMnih, V., Heess, N., Graves, A., and Kavukcuoglu, K. (2014). Recurrent models of visual\nattention. In Z. Ghahramani, M. Welling, C. Cortes, N. Lawrence, and K. Weinberger,\neditors, NIPS\u20192014, pages 2204-2212. 691\n\n=\n\n(nih, V., Kavukcuoglo, K., Silver, D., Rusu, A. A., Veness, J., Bellemare, M. G., Graves,\nA., Riedmiller, M., Fidgeland, A. K., Ostrovski, G., Petersen, S., Beattie, C., Sadik, A.,\nAntonoglou, L, King, H., Kumaran, D., Wierstra, D., Legg, S., and Hassabis, D. (2015).\nHuman-level control through deep reinforcement learning. Nature, 518, 529-533. 25\n\nMobahi, H. and Fisher, IH, J. W. (2015). A theoretical analysis of optimization by\nGaussian continuation. In AAAI\u20192015. 327\n\nMobahi, H., Collobert, R., and Weston, J. (2009). Deep learning from temporal coherence\nin video. In L. Bottou and M. Littman, editors, Proceedings of the 26th International\nConference on Machine Learning, pages 737-744, Montreal. Omnipress. 494\n\nMohamed, A., Dahl, G., and Hinton, G. (2009). Deep belief networks for phone recognition.\n459\n", "BIBLIOGRAPHY\n\nMohamed, A., Sainath, T. N., Dahl, G., Ramabhadran, B., Hinton, G. E., and Picheny,\nM. A. (2011). Deep belief networks using discriminative features for phone recognition. In\nAcoustics, Speech and Signal Processing (ICASSP), 2011 IEEE International Conference\non, pages 5060-5063. IEEE. 459\n\nMohamed, A., Dahl, G., and Hinton, G. (2012a). Acoustic modeling using deep belief\nnetworks. [EEE Trans. on Audio, Speech and Language Processing, 20(1), 14-22. 459\n\nMohamed, A., Hinton, G., and Penn, G. (2012b). Understanding how deep belief networks\nperform acoustic modelling. In Acoustics, Speech and Signal Processing (ICASSP),\n2012 IEEE International Conference on, pages 4273-4276. IEEE. 459\n\nMoller, M. F. (1993). A scaled conjugate gradient algorithm for fast supervised learning.\nNeural Networks, 6, 525-533. 316\n\nMontavon, G. and Muller, K.-R. (2012). Deep Boltzmann machines and the centering\ntrick. In G. Montavon, G. Orr, and K.-R. Miiller, editors, Neural Networks: Tricks of\nthe Trade, volume 7700 of Lecture Notes in Computer Science, pages 621-637. Preprint:\nhttp://arxiv.org/abs/1203.3783. 673\n\nMonttfar, G. (2014). Universal approximation depth and errors of narrow belief networks\nwith discrete units. Neural Computation, 26. 553\n\nMontifar, G. and Ay, N. (2011). Refinements of universal approximation results for\ndeep belief networks and restricted Boltzmann machines. Neural Computation, 23(5),\n1306-1319. 553\n\nJontufar, G. F., Pascanu, R., Cho, K., and Bengio, Y. (2014). On the number of linear\nregions of deep neural networks. In NJPS\u20192014. 19, 199, 200\n\niS\n\nor-Yosef, S., Samueloff, A., Modan, B., Navot, D., and Schenker, J. G. (1990). Ranking\nthe risk factors for cesarean: logistic regression analysis of a nationwide study. Obstet\nGynecol, 75(6), 944-7. 3\n\norin, F. and Bengio, Y. (2005). Hierarchical probabilistic neural network language\nmodel. In AISTATS\u20192005. 467, 469\n\n=\n\nozer, M. C. (1992). The induction of multiscale temporal structure. In J. M. S. Hanson\nand R. Lippmann, editors, Advances in Neural Information Processing Systems 4\n(NIPS\u201991), pages 275-282, San Mateo, CA. Morgan Kaufmann. 407, 408\n\nurphy, K. P. (2012). Machine Learning: a Probabilistic Perspective. MIT Press,\nCambridge, MA, USA. 62, 98, 146\n\nAurray, B. U. I. and Larochelle, H. (2014). A deep and tractable density estimator. In\nICML\u20192014. 190, 710\n\nNair, V. and Hinton, G. (2010). Rectified linear units improve restricted Boltzmann\nmachines. In ICML\u20192010. 16, 174, 197\n", "BIBLIOGRAPHY\n\nNair, V. and Hinton, G. E. (2009). 3d object recognition with deep belief nets. In Y. Bengio,\nD. Schuurmans, J. D. Lafferty, C. K. I. Williams, and A. Culotta, editors, Advances in\nNeural Information Processing Systems 22, pages 1339-1347. Curran Associates, Inc.\n686\n\nNarayanan, H. and Mitter, S. (2010). Sample complexity of testing the manifold hypothesis.\nIn NIPS\u20192010. 164\n\nNaumann, U. (2008). Optimal Jacobian accumulation is NP-complete. Mathematical\nProgramming, 112(2), 427-441. 222\n\nNavigli, R. and Velardi, P. (2005). Structural semantic interconnections: a knowledge-\nbased approach to word sense disambiguation. IEEE Trans. Pattern Analysis and\nMachine Intelligence, 27(7), 1075\u20141086. 485\n\nNeal, R. and Hinton, G. (1999). A view of the EM algorithm that justifies incremental,\nsparse, and other variants. In M. I. Jordan, editor, Learning in Graphical Models. MIT\nPress, Cambridge, MA. 634\n\nNeal, R. M. (1990). Learning stochastic feedforward networks. Technical report. 692\n\nNeal, R. M. (1993). Probabilistic inference using Markov chain Monte-Carlo methods.\nTechnical Report CRG-TR-93-1, Dept. of Computer Science, University of Toronto. 680\n\nNeal, R. M. (1994). Sampling from multimodal distributions using tempered transitions.\nTechnical Report 9421, Dept. of Statistics, University of Toronto. 603\n\nNeal, R. M. (1996). Bayesian Learning for Neural Networks. Lecture Notes in Statistics.\nSpringer. 265\n\nNeal, R. M. (2001). Annealed importance sampling. Statistics and Computing, 11(2),\n125-139. 625, 627, 628\n\nNeal, R. M. (2005). Estimating ratios of normalizing constants using linked importance\nsampling. 629\n\nNesterov, Y. (1983). A method of solving a convex programming problem with convergence\nrate O(1/k?). Soviet Mathematics Doklady, 27, 372-376. 300\n\nNesterov, Y. (2004). Introductory lectures on convex optimization : a basic course. Applied\noptimization. Kluwer Academic Publ., Boston, Dordrecht, London. 300\nNetzer, Y., Wang, T., Coates, A., Bissacco, A., Wu, B., and Ng, A. Y. (2011). Reading\n\ndigits in natural images with unsupervised feature learning. Deep Learning and\nUnsupervised Feature Learning Workshop, NIPS. 21\n\nNey, H. and Kneser, R. (1993). Improved clustering techniques for class-based statistical\nlanguage modelling. In European Conference on Speech Communication and Technology\n(Eurospeech), pages 973-976, Berlin. 463\n\n759\n", "BIBLIOGRAPHY\n\nNg, A. (2015). Advice for applying machine learning.\nhttps://see.stanford.edu/materials/aimlcs229/ML-advice.pdf. 421\n\nNiesler, T. R., Whittaker, E. W. D., and Woodland, P. C. (1998). Comparison of part-of\nspeech and automatically derived category-based language models for speech recognition.\nIn International Conference on Acoustics, Speech and Signal Processing (ICASSP),\npages 177-180. 463\n\nNing, F., Delhomme, D., LeCun, Y., Piano, F., Bottou, L., and Barbano, P. E. (2005).\nToward automatic phenotyping of developing embryos from videos. Image Processing,\nIEEE Transactions on, 14(9), 1360-1371. 360\n\nNocedal, J. and Wright, S. (2006). Numerical Optimization. Springer. 92, 96\n\nNorouzi, M. and Fleet, D. J. (2011). Minimal loss hashing for compact binary codes. In\nICML\u20192011. 525\n\nNowlan, S. J. (1990). Competing experts: An experimental investigation of associative\nmixture models. Technical Report CRG-TR-90-5, University of Toronto. 450\n\nNowlan, S. J. and Hinton, G. E. (1992). Simplifying neural networks by soft weight-sharing.\nNeural Computation, 4(4), 473-493. 139\n\nOlshausen, B. and Field, D. J. (2005). How close are we to understanding V1? Neural\nComputation, 17, 1665-1699. 16\n\nOlshausen, B. A. and Field, D. J. (1996). Emergence of simple-cell receptive field properties\nby learning a sparse code for natural images. Nature, 381, 607-609. 147, 255, 370, 496\n\nOlshausen, B. A., Anderson, C. H., and Van Essen, D. C. (1993). A neurobiological\nmodel of visual attention and invariant pattern recognition based on dynamic routing\nof information. J. Neurosci., 13(11), 4700-4719. 450\n\nOpper, M. and Archambeau, C. (2009). The variational Gaussian approximation revisited.\nNeural computation, 21(3), 786-792. 689\n\nOquab, M., Bottou, L., Laptev, I., and Sivic, J. (2014). Learning and transferring mid-level\nimage representations using convolutional neural networks. In Computer Vision and\n\nPattern Recognition (CVPR), 2014 IEEE Conference on, pages 1717-1724. IEEE. 536\n\nOsindero, S$. and Hinton, G. E. (2008). Modeling image patches with a directed hierarchy\nof Markov random fields. In J. Platt, D. Koller, Y. Singer, and S. Roweis, editors,\nAdvances in Neural Information Processing Systems 20 (NIPS\u201907), pages 1121-1128,\nCambridge, MA. MIT Press. 632\n\nOvid and Martin, C. (2004). Metamorphoses. W.W. Norton. 1\n\n760\n", "BIBLIOGRAPHY\n\nPaccanaro, A. and Hinton, G. E. (2000). Extracting distributed representations of concepts\nand relations from positive and negative propositions. In International Joint Conference\non Neural Networks (IJCNN), Como, Italy. IEEE, New York. 484\n\nPaine, T. L., Khorrami, P., Han, W., and Huang, T. S. (2014). An analysis of unsupervised\npre-training in light of recent advances. arXiv preprint arXiv:1412.6597. 532\n\nPalatucci, M., Pomerleau, D., Hinton, G. E., and Mitchell, T. M. (2009). Zero-shot\nlearning with semantic output codes. In Y. Bengio, D. Schuurmans, J. D. Lafferty,\nC. K. I. Williams, and A. Culotta, editors, Advances in Neural Information Processing\nSystems 22, pages 1410-1418. Curran Associates, Inc. 539\n\nParker, D. B. (1985). Learning-logic. Technical Report TR-47, Center for Comp. Research\nin Economics and Management Sci., MIT. 225\n\nPascanu, R., Mikolov, T., and Bengio, Y. (2013). On the difficulty of training recurrent\nneural networks. In ICML\u20192013. 289, 402, 403, 408, 414, 416\n\nPascanu, R., Giilcehre, C., Cho, K., and Bengio, Y. (2014a). How to construct deep\nrecurrent neural networks. In ICLR\u20192014. 19, 265, 398, 399, 410, 460\n\nPascanu, R., Montufar, G., and Bengio, Y. (2014b). On the number of inference regions\nof deep feed forward networks with piece-wise linear activations. In ICLR\u20192014. 550\n\nPati, Y., Rezaiifar, R., and Krishnaprasad, P. (1993). Orthogonal matching pursuit:\nRecursive function approximation with applications to wavelet decomposition. In Pro-\nceedings of the 27 th Annual Asilomar Conference on Signals, Systems, and Computers,\npages 40-44. 255\n\nPearl, J. (1985). Bayesian networks: A model of self-activated memory for evidential\nreasoning. In Proceedings of the 7th Conference of the Cognitive Science Society,\nUniversity of California, Irvine, pages 329-334. 563\n\nPearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible\nInference. Morgan Kaufmann. 54\n\nPerron, O. (1907). Zur theorie der matrices. Mathematische Annalen, 64(2), 248-263. 597\nPetersen, K. B. and Pedersen, M. 8. (2006). The matrix cookbook. Version 20051003. 31\n\nPeterson, G. B. (2004). A day of great illumination: B. F. Skinner\u2019s discovery of shaping.\nJournal of the Experimental Analysis of Behavior, 82(3), 317-328. 328\n\nPham, D.-T., Garat, P., and Jutten, C. (1992). Separation of a mixture of independent\nsources through a maximum likelihood approach. In EUSIPCO, pages 771-774. 491\n\n761\n", "BIBLIOGRAPHY\n\nPham, P.-H., Jelaca, D., Farabet, C., Martini, B., LeCun, Y., and Culurciello, E. (2012).\nNeuF low: dataflow vision processing system-on-a-chip. In Circuits and Systems (MWS-\nCAS), 2012 IEEE 55th International Midwest Symposium on, pages 1044-1047. IEEE.\n451\n\nPinheiro, P. H. O. and Collobert, R. (2014). Recurrent convolutional neural networks for\nscene labeling. In [CML\u20192014. 359\n\nPinheiro, P. H. O. and Collobert, R. (2015). From image-level to pixel-level labeling with\nconvolutional networks. In Conference on Computer Vision and Pattern Recognition\n(CVPR). 359\n\nPinto, N., Cox, D. D., and DiCarlo, J. J. (2008). Why is real-world visual object recognition\nhard? PLoS Comput Biol, 4. 456\n\nPinto, N., Stone, Z., Zickler, T., and Cox, D. (2011). Scaling up biologically-inspired\ncomputer vision: A case study in unconstrained face recognition on facebook. In\nComputer Vision and Pattern Recognition Workshops (CVPRW), 2011 IEEE Computer\nSociety Conference on, pages 35-42. IEEE. 363\n\nPollack, J. B. (1990). Recursive distributed representations. Artificial Intelligence, 46(1),\n77-105. 401\n\nPolyak, B. and Juditsky, A. (1992). Acceleration of stochastic approximation by averaging.\nSIAM J. Control and Optimization, 30(4), 838-855. 322\n\nPolyak, B. T. (1964). Some methods of speeding up the convergence of iteration methods.\nUSSR Computational Mathematics and Mathematical Physics, 4(5), 1-17. 296\n\nPoole, B., Sohl-Dickstein, J., and Ganguli, S. (2014). Analyzing noise in autoencoders\nand deep networks. CoRR, abs/1406.1831. 241\n\nPoon, H. and Domingos, P. (2011). Sum-product networks: A new deep architecture. In\nProceedings of the Twenty-seventh Conference in Uncertainty in Artificial Intelligence\n(UAT), Barcelona, Spain. 554\n\nPresley, R. K. and Haggard, R. L. (1994). A fixed point implementation of the backpropa-\ngation learning algorithm. In Southeastcon\u201994. Creative Technology Transfer-A Global\nAffair., Proceedings of the 1994 IEEE, pages 136-138. IEEE. 451\n\nPrice, R. (1958). A useful theorem for nonlinear devices having Gaussian inputs. JEEE\nTransactions on Information Theory, 4(2), 69-72. 689\n\nQuiroga, R. Q., Reddy, L., Kreiman, G., Koch, C., and Fried, I. (2005). Invariant visual\nrepresentation by single neurons in the human brain. Nature, 435(7045), 1102-1107.\n366\n\n762\n", "BIBLIOGRAPHY\n\nRadford, A., Metz, L., and Chintala, S. (2015). Unsupervised representation learning with\ndeep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434.\n552, 701, 702\n\nRaiko, T., Yao, L., Cho, K., and Bengio, Y. (2014). Iterative neural autoregressive\ndistribution estimator (NADE-k). Technical report, arXiv:1406.1485. 676, 709\n\nRaina, R., Madhavan, A., and Ng, A. Y. (2009). Large-scale deep unsupervised learning\nusing graphics processors. In L. Bottou and M. Littman, editors, Proceedings of the\nTwenty-sixth International Conference on Machine Learning (ICML\u201909), pages 873-880,\nNew York, NY, USA. ACM. 27, 446\n\nRamsey, F\u2019. P. (1926). Truth and probability. In R. B. Braithwaite, editor, The Foundations\nof Mathematics and other Logical Essays, chapter 7, pages 156-198. McMaster University\nArchive for the History of Economic Thought. 56\n\nRanzato, M. and Hinton, G. H. (2010). Modeling pixel means and covariances using\nfactorized third-order Boltzmann machines. In CVPR\u20192010, pages 2551-2558. 680\n\nRanzato, M., Poultney, C., Chopra, S., and LeCun, Y. (2007a). Efficient learning of sparse\nrepresentations with an energy-based model. In NJPS\u20192006. 14, 19, 507, 528, 530\n\nRanzato, M., Huang, F., Boureau, Y., and LeCun, Y. (2007b). Unsupervised learning of\ninvariant feature hierarchies with applications to object recognition. In Proceedings of\nthe Computer Vision and Pattern Recognition Conference (CVPR\u201907). IEEE Press. 364\n\nRanzato, M., Boureau, Y., and LeCun, Y. (2008). Sparse feature learning for deep belief\nnetworks. In NIPS\u20192007. 507\n\nRanzato, M., Krizhevsky, A., and Hinton, G. E. (2010a). Factored 3-way restricted\nBoltzmann machines for modeling natural images. In Proceedings of AISTATS 2010.\n678, 679\n\nRanzato, M., Mnih, V., and Hinton, G. (2010b). Generating more realistic images using\ngated MRFs. In NIPS\u20192010. 680\n\nRao, C. (1945). Information and the accuracy attainable in the estimation of statistical\nparameters. Bulletin of the Calcutta Mathematical Society, 37, 81-89. 135, 295\n\nRasmus, A., Valpola, H., Honkala, M., Berglund, M., and Raiko, T. (2015). Semi-supervised\nearning with ladder network. arXiv preprint arXiv:1507.02672. 426, 530\n\nRecht, B., Re, C., Wright, S., and Niu, F. (2011). Hogwild: A lock-free approach to\nparallelizing stochastic gradient descent. In NIPS\u20192011. 447\n\nReichert, D. P., Seri\u00e9s, P., and Storkey, A. J. (2011). Neuronal adaptation for sampling-\nbased probabilistic inference in perceptual bistability. In Advances in Neural Information\nProcessing Systems, pages 2357-2365. 666\n\n763\n", "BIBLIOGRAPHY\n\nRezende, D. J., Mohamed, S., and Wierstra, D. (2014). Stochastic backpropagation\nand approximate inference in deep generative models. In [CML\u20192014. Preprint:\narXiv:1401.4082. 652, 689, 696\n\nRifai, S., Vincent, P., Muller, X., Glorot, X., and Bengio, Y. (201la). Contractive\nauto-encoders: Explicit invariance during feature extraction. In ICML\u20192011. 521, 522,\n523\n\nRifai, S., Mesnil, G., Vincent, P., Muller, X., Bengio, Y., Dauphin, Y., and Glorot, X.\n(2011b). Higher order contractive auto-encoder. In ECML PKDD. 521, 522\n\nRifai, S., Dauphin, Y., Vincent, P., Bengio, Y., and Muller, X. (2011c). The manifold\nangent classifier. In NIPS\u20192011. 271, 272, 523\n\nRifai, S., Bengio, Y., Dauphin, Y., and Vincent, P. (2012). A generative process for\nsampling contractive auto-encoders. In ICML\u20192012. 711\n\nRingach, D. and Shapley, R. (2004). Reverse correlation in neurophysiology. Cognitive\nScience, 28(2), 147-166. 368\n\nRoberts, S. and Everson, R. (2001). Independent component analysis: principles and\npractice. Cambridge University Press. 493\n\nRobinson, A. J. and Fallside, F. (1991). A recurrent error propagation network speech\nrecognition system. Computer Speech and Language, 5(3), 259-274. 27, 459\n\nRockafellar, R. T. (1997). Convex analysis. princeton landmarks in mathematics. 93\n\nRomero, A., Ballas, N., Ebrahimi Kahou, S., Chassang, A., Gatta, C., and Bengio, Y.\n(2015). Fitnets: Hints for thin deep nets. In ICLR\u20192015, arXiv:1412.6550. 325\n\nRosen, J. B. (1960). The gradient projection method for nonlinear programming. part i.\nlinear constraints. Journal of the Society for Industrial and Applied Mathematics, 8(1),\npp. 181-217. 93\n\nRosenblatt, F. (1958). The perceptron: A probabilistic model for information storage and\norganization in the brain. Psychological Review, 65, 386-408. 14, 15, 27\n\nRosenblatt, F. (1962). Principles of Neurodynamics. Spartan, New York. 15, 27\n\nRoweis, S. and Saul, L. K. (2000). Nonlinear dimensionality reduction by locally linear\nembedding. Science, 290(5500). 164, 518\n\nRoweis, S., Saul, L., and Hinton, G. (2002). Global coordination of local linear models. In\nT. Dietterich, 5. Becker, and Z. Ghahramani, editors, Advances in Neural Information\nProcessing Systems 14 (NIPS\u201901), Cambridge, MA. MIT Press. 489\n\nRubin, D. B. et al. (1984). Bayesianly justifiable and relevant frequency calculations for\nthe applied statistician. The Annals of Statistics, 12(4), 1151-1172. 717\n\n764\n", "BIBLIOGRAPHY\n\nRumelhart, D., Hinton, G., and Williams, R. (1986a). Learning representations by\nback-propagating errors. Nature, 323, 533-536. 14, 18, 23, 204, 225, 373, 476, 482\n\nRumelhart, D. E., Hinton, G. E., and Williams, R. J. (1986b). Learning internal represen-\ntations by error propagation. In D. E. Rumelhart and J. L. McClelland, editors, Parallel\nDistributed Processing, volume 1, chapter 8, pages 318-362. MIT Press, Cambridge. 21,\n27, 225\n\nRumelhart, D. E., McClelland, J. L., and the PDP Research Group (1986c). Parallel\nDistributed Processing: Explorations in the Microstructure of Cognition. MIT Press,\nCambridge. 17\n\nRussakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Karpathy,\nA., Khosla, A., Bernstein, M., Berg, A. C., and Fei-Fei, L. (2014a). ImageNet Large\nScale Visual Recognition Challenge. 21\n\nRussakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Karpathy,\nA., Khosla, A., Bernstein, M., et al. (2014b). Imagenet large scale visual recognition\nchallenge. arXiv preprint arXtv:1409.0575. 28\n\nRussel, S. J. and Norvig, P. (2003). Artificial Intelligence: a Modern Approach. Prentice\nHall. 86\n\nRust, N., Schwartz, O., Movshon, J. A., and Simoncelli, E. (2005). Spatiotemporal\nelements of macaque V1 receptive fields. Neuron, 46(6), 945-956. 367\n\nSainath, T., Mohamed, A., Kingsbury, B., and Ramabhadran, B. (2013). Deep convolu-\ntional neural networks for LVCSR. In ICASSP 2013. 460\n\nSalakhutdinov, R. (2010). Learning in Markov random fields using tempered transitions. In\nY. Bengio, D. Schuurmans, C. Williams, J. Lafferty, and A. Culotta, editors, Advances\nin Neural Information Processing Systems 22 (NIPS\u201909). 603\n\nSalakhutdinov, R. and Hinton, G. (2009a). Deep Boltzmann machines. In Proceedings of\nthe International Conference on Artificial Intelligence and Statistics, volume 5, pages\n448-455. 24, 27, 529, 663, 666, 671, 672\n\nSalakhutdinov, R. and Hinton, G. (2009b). Semantic hashing. In International Journal of\nApproximate Reasoning. 525\n\nSalakhutdinov, R. and Hinton, G. E. (2007a). Learning a nonlinear embedding by\npreserving class neighbourhood structure. In Proceedings of the Eleventh International\nConference on Artificial Intelligence and Statistics (AISTATS\u201907), San Juan, Porto\nRico. Omnipress. 527\n\nSalakhutdinov, R. and Hinton, G. E. (2007b). Semantic hashing. In SIGIR\u20192007. 525\n", "BIBLIOGRAPHY\n\nSalakhutdinov, R. and Hinton, G. E. (2008). Using deep belief nets to learn covariance\nkernels for Gaussian processes. In J. Platt, D. Koller, Y. Singer, and S. Roweis, editors,\nAdvances in Neural Information Processing Systems 20 (NIPS\u201907), pages 1249-1256,\nCambridge, MA. MIT Press. 244\n\nSalakhutdinov, R. and Larochelle, H. (2010). Efficient learning of deep Boltzmann machines.\nIn Proceedings of the Thirteenth International Conference on Artificial Intelligence and\nStatistics (AISTATS 2010), JMLR W&CP, volume 9, pages 693-700. 652\n\nSalakhutdinov, R. and Mnih, A. (2008). Probabilistic matrix factorization. In NIPS\u20192008.\n480\n\nSalakhutdinov, R. and Murray, I. (2008). On the quantitative analysis of deep belief\nnetworks. In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, Proceedings of\nthe Twenty-fifth International Conference on Machine Learning (ICML\u201908), volume 25,\npages 872-879. ACM. 628, 662\n\nSalakhutdinov, R., Mnih, A., and Hinton, G. (2007). Restricted Boltzmann machines for\ncollaborative filtering. In ICML. 480\n\nSanger, T. D. (1994). Neural network learning control of robot manipulators using\ngradually increasing task difficulty. IEEE Transactions on Robotics and Automation,\n10(3). 328\n\nSaul, L. K. and Jordan, M. I. (1996). Exploiting tractable substructures in intractable\nnetworks. In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in Neural\nInformation Processing Systems 8 (NIPS\u201995). MIT Press, Cambridge, MA. 638\n\nSaul, L. K., Jaakkola, T., and Jordan, M. I. (1996). Mean field theory for sigmoid belief\nnetworks. Journal of Artificial Intelligence Research, 4, 61-76. 27, 693\n\nSavich, A. W., Moussa, M., and Areibi, S. (2007). The impact of arithmetic representation\non implementing mlp-bp on fpgas: A study. Neural Networks, IEEE Transactions on,\n18(1), 240-252. 451\n\nSaxe, A. M., Koh, P. W., Chen, Z., Bhand, M., Suresh, B., and Ng, A. (2011). On random\nweights and unsupervised feature learning. In Proc. ICML\u20192011. ACM. 363\n\nSaxe, A. M., McClelland, J. L., and Ganguli, S. (2013). Exact solutions to the nonlinear\ndynamics of learning in deep linear neural networks. In ICLDR. 285, 286, 303\n\nSchaul, T., Antonoglou, I., and Silver, D. (2014). Unit tests for stochastic optimization.\nIn International Conference on Learning Representations. 309\n\nSchmidhuber, J. (1992). Learning complex, extended sequences using the principle of\nhistory compression. Neural Computation, 4(2), 234-242. 398\n\nSchmidhuber, J. (1996). Sequential neural text compression. [EEE Transactions on Neural\nNetworks, 7(1), 142-146. 477\n\n766\n", "BIBLIOGRAPHY\n\nSchmidhuber, J. (2012). Selfdelimiting neural networks. arXiv preprint arXiv:1210.0118.\n390\n\nSch\u00e9lkopf, B. and Smola, A. J. (2002). Learning with kernels: Support vector machines,\nregularization, optimization, and beyond. MIT press. 704\n\nSch\u00e9lkopf, B., Smola, A., and Miiller, K.-R. (1998). Nonlinear component analysis as a\nkernel eigenvalue problem. Neural Computation, 10, 1299-1319. 164, 518\n\nSch\u00e9lkopf, B., Burges, C. J. C., and Smola, A. J. (1999). Advances in Kernel Methods \u2014\nSupport Vector Learning. MIT Press, Cambridge, MA. 18, 142\n\nSch\u00e9lkopf, B., Janzing, D., Peters, J., Sgouritsa, E., Zhang, K., and Mooij, J. (2012). On\ncausal and anticausal learning. In ICML\u20192012, pages 1255-1262. 545\n\nSchuster, M. (1999). On supervised learning from sequential data with applications for\nspeech recognition. 190\n\nSchuster, M. and Paliwal, K. (1997). Bidirectional recurrent neural networks. [EEE\nTransactions on Signal Processing, 45(11), 2673-2681. 395\n\nSchwenk, H. (2007). Continuous space language models. Computer speech and language,\n21, 492-518. 466\n\nSchwenk, H. (2010). Continuous space language models for statistical machine translation.\nThe Prague Bulletin of Mathematical Linguistics, 93, 137-146. 473\n\nSchwenk, H. (2014). Cleaned subset of WMT \u201914 dataset. 21\n\nSchwenk, H. and Bengio, Y. (1998). Training methods for adaptive boosting of neural net-\nworks. In M. Jordan, M. Kearns, and S. Solla, editors, Advances in Neural Information\nProcessing Systems 10 (NIPS\u201997), pages 647-653. MIT Press. 258\n\nSchwenk, H. and Gauvain, J.-L. (2002). Connectionist language modeling for large\nvocabulary continuous speech recognition. In International Conference on Acoustics,\nSpeech and Signal Processing (ICASSP), pages 765-768, Orlando, Florida. 466\n\nSchwenk, H., Costa-jussa, M. R., and Fonollosa, J. A. R. (2006). Continuous space\nlanguage models for the IWSLT 2006 task. In International Workshop on Spoken\nLanguage Translation, pages 166-173. 473\n\nSeide, F., Li, G., and Yu, D. (2011). Conversational speech transcription using context-\ndependent deep neural networks. In Interspeech 2011, pages 437-440. 23\n\nSejnowski, T. (1987). Higher-order Boltzmann machines. In AIP Conference Proceedings\n151 on Neural Networks for Computing, pages 398-403. American Institute of Physics\nInc. 686\n\n767\n", "BIBLIOGRAPHY\n\nSeries, P., Reichert, D. P., and Storkey, A. J. (2010). Hallucinations in Charles Bonnet\nsyndrome induced by homeostasis: a deep Boltzmann machine model. In Advances in\nNeural Information Processing Systems, pages 2020-2028. 666\n\nSermanet, P., Chintala, S., and LeCun, Y. (2012). Convolutional neural networks applied\nto house numbers digit classification. CoRR, abs/1204.3968. 457\n\nSermanet, P., Kavukcuoglu, K., Chintala, $., and LeCun, Y. (2013). Pedestrian detection\nwith unsupervised multi-stage feature learning. In Proc. International Conference on\nComputer Vision and Pattern Recognition (CVPR\u201913). IEEE. 23, 201\n\nShilov, G. (1977). Linear Algebra. Dover Books on Mathematics Series. Dover Publications.\n31\n\nSiegelmann, H. (1995). Computation beyond the Turing limit. Science, 268(5210),\n545-548. 379\n\nSiegelmann, H. and Sontag, E. (1991). Turing computability with neural nets. Applied\nMathematics Letters, 4(6), 77-80. 379\n\nSiegelmann, H. T. and Sontag, E. D. (1995). On the computational power of neural nets.\nJournal of Computer and Systems Sciences, 50(1), 132-150. 379, 403\n\nSietsma, J. and Dow, R. (1991). Creating artificial neural networks that generalize. Neural\nNetworks, 4(1), 67-79. 241\n\nSimard, D., Steinkraus, P. Y., and Platt, J. C. (2003). Best practices for convolutional\nneural networks. In ICDAR\u20192003. 371\n\nSimard, P. and Graf, H. P. (1994). Backpropagation without multiplication. In Advances\nin Neural Information Processing Systems, pages 232-239. 451\n\nSimard, P., Victorri, B., LeCun, Y., and Denker, J. (1992). Tangent prop - A formalism\nfor specifying selected invariances in an adaptive network. In NIPS\u20191991. 270, 271, 272,\n356\n\nSimard, P. Y., LeCun, Y., and Denker, J. (1993). Efficient pattern recognition using a\nnew transformation distance. In NIPS\u201992. 270\n\nSimard, P. Y., LeCun, Y. A., Denker, J. S., and Victorri, B. (1998). Transformation\ninvariance in pattern recognition \u2014 tangent distance and tangent propagation. Lecture\nNotes in Computer Science, 1524. 270\n\nSimons, D. J. and Levin, D. T. (1998). Failure to detect changes to people during a\nreal-world interaction. Psychonomic Bulletin & Review, 5(4), 644-649. 543\n\nSimonyan, K. and Zisserman, A. (2015). Very deep convolutional networks for large-scale\nimage recognition. In ICLR. 323\n\n768\n", "BIBLIOGRAPHY\n\nSjoberg, J. and Ljung, L. (1995). Overtraining, regularization and searching for a minimum,\nwith application to neural networks. International Journal of Control, 62(6), 1391-1407.\n250\n\nSkinner, B. F. (1958). Reinforcement today. American Psychologist, 13, 94-99. 328\n\nSmolensky, P. (1986). Information processing in dynamical systems: Foundations of\nharmony theory. In D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed\nProcessing, volume 1, chapter 6, pages 194-281. MIT Press, Cambridge. 571, 587, 656\n\nSnoek, J., Larochelle, H., and Adams, R. P. (2012). Practical Bayesian optimization of\nmachine learning algorithms. In NIPS\u20192012. 436\n\nSocher, R., Huang, E. H., Pennington, J., Ng, A. Y., and Manning, C. D. (2011a). Dynamic\npooling and unfolding recursive autoencoders for paraphrase detection. In NIPS\u20192011.\n401\n\nSocher, R., Manning, C., and Ng, A. Y. (2011b). Parsing natural scenes and natural lan-\nguage with recursive neural networks. In Proceedings of the Twenty-Eighth International\nConference on Machine Learning (ICML\u20192011). 401\n\nSocher, R., Pennington, J., Huang, E. H., Ng, A. Y., and Manning, C. D. (2011c).\nSemi-supervised recursive autoencoders for predicting sentiment distributions. In\nEMNLP\u20192011. 401\n\nSocher, R., Perelygin, A., Wu, J. Y., Chuang, J., Manning, C. D., Ng, A. Y., and Potts,\nC. (2013a). Recursive deep models for semantic compositionality over a sentiment\ntreebank. In EMNLP\u20192013. 401\n\nSocher, R., Ganjoo, M., Manning, C. D., and Ng, A. Y. (2013b). Zero-shot learning through\ncross-modal transfer. In 27th Annual Conference on Neural Information Processing\nSystems (NIPS 2013). 539\n\nSohl-Dickstein, J., Weiss, E. A., Maheswaranathan, N., and Ganguli, S. (2015). Deep\nunsupervised learning using nonequilibrium thermodynamics. 716\n\nSohn, K., Zhou, G., and Lee, H. (2013). Learning and selecting features jointly with\npoint-wise gated Boltzmann machines. In [CML\u20192013. 687\n\nSolomonoff, R. J. (1989). A system for incremental learning based on algorithmic proba-\nbility. 328\n\nSontag, E. D. (1998). VC dimension of neural networks. NATO ASI Series F Computer\nand Systems Sciences, 168, 69-96. 547, 551\n\nSontag, E. D. and Sussman, H. J. (1989). Backpropagation can give rise to spurious local\nminima even for networks without hidden layers. Complex Systems, 3, 91-106. 284\n\n769\n", "BIBLIOGRAPHY\n\nSparkes, B. (1996). The Red and the Black: Studies in Greek Pottery. Routledge. 1\n\nSpitkovsky, V. L, Alshawi, H., and Jurafsky, D. (2010). From baby steps to leapfrog: how\n\u201cless is more\u201d in unsupervised dependency parsing. In HLT\u201910. 328\n\nSquire, W. and Trapp, G. (1998). Using complex variables to estimate derivatives of real\nfunctions. STAM Rev., 40(1), 110\u2014112. 439\n\nSrebro, N. and Shraibman, A. (2005). Rank, trace-norm and max-norm. In Proceedings of\nthe 18th Annual Conference on Learning Theory, pages 545-560. Springer-Verlag. 238\n\nSrivastava, N. (2013). Improving Neural Networks With Dropout. Master\u2019s thesis, U.\nToronto. 535\n\nSrivastava, N. and Salakhutdinov, R. (2012). Multimodal learning with deep Boltzmann\nmachines. In NJPS\u20192012. 541\n\nSrivastava, N., Salakhutdinov, R. R., and Hinton, G. E. (2013). Modeling documents with\ndeep Boltzmann machines. arXiv preprint arXiv:1309.6865. 663\n\nSrivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2014).\nDropout: A simple way to prevent neural networks from overfitting. Journal of Machine\nLearning Research, 15, 1929-1958. 258, 265, 267, 672\n\nSrivastava, R. K., Greff, K., and Schmidhuber, J. (2015). Highway networks.\narXiv:1505.00387. 326\n\nSteinkrau, D., Simard, P. Y., and Buck, I. (2005). Using GPUs for machine learning\nalgorithms. 2013 12th International Conference on Document Analysis and Recognition,\n0, 1115-1119. 445\n\nStoyanov, V., Ropson, A., and Eisner, J. (2011). Empirical risk minimization of graphical\nmodel parameters given approximate inference, decoding, and model structure. In\nProceedings of the 14th International Conference on Artificial Intelligence and Statistics\n(AISTATS), volume 15 of JMLR Workshop and Conference Proceedings, pages 725-733,\nFort Lauderdale. Supplementary material (4 pages) also available. 674, 698\n\nSukhbaatar, S., Szlam, A., Weston, J., and Fergus, R. (2015). Weakly supervised memory\nnetworks. arXiv preprint arXiv:1503.08895. 418\n\nSupancic, J. and Ramanan, D. (2013). Self-paced learning for long-term tracking. In\nCVPR\u20192018. 328\n\nSussillo, D. (2014). Random walks: Training very deep nonlinear feed-forward networks\nwith smart initialization. CoRR, abs/1412.6558. 290, 303, 305, 403\n\nSutskever, I. (2012). Training Recurrent Neural Networks. Ph.D. thesis, Department of\ncomputer science, University of Toronto. 406, 413\n\n770\n", "BIBLIOGRAPHY\n\nSutskever, I. and Hinton, G. E. (2008). Deep narrow sigmoid belief networks are universal\napproximators. Neural Computation, 20(11), 2629-2636. 693\n\nSutskever, I. and Tieleman, T. (2010). On the Convergence Properties of Contrastive\nDivergence. In Y. W. Teh and M. Titterington, editors, Proc. of the International\nConference on Artificial Intelligence and Statistics (AISTATS), volume 9, pages 789-795.\n612\n\nSutskever, I., Hinton, G., and Taylor, G. (2009). The recurrent temporal restricted\nBoltzmann machine. In NIPS\u20192008. 685\n\nSutskever, I., Martens, J., and Hinton, G. E. (2011). Generating text with recurrent\nneural networks. In [CML \u20192011, pages 1017-1024. 477\n\nSutskever, I., Martens, J., Dahl, G., and Hinton, G. (2013). On the importance of\ninitialization and momentum in deep learning. In ICML. 300, 406, 413\n\nSutskever, I., Vinyals, O., and Le, Q. V. (2014). Sequence to sequence learning with\nneural networks. In NIPS\u20192014, arXiv:1409.8215. 25, 101, 397, 410, 411, 474, 475\n\nSutton, R. and Barto, A. (1998). Reinforcement Learning: An Introduction. MIT Press.\n06\n\nSutton, R. S., Mcallester, D., Singh, S., and Mansour, Y. (2000). Policy gradient methods\nfor reinforcement learning with function approximation. In NIPS\u20191999, pages 1057\u2014\n1063. MIT Press. 691\n\nSwersky, K., Ranzato, M., Buchman, D., Marlin, B., and de Freitas, N. (2011). On\nautoencoders and score matching for energy based models. In [CML\u20192011. ACM. 513\n\nSwersky, K., Snoek, J., and Adams, R. P. (2014). Freeze-thaw Bayesian optimization.\narXiv preprint arXiw:1406.38896. 436\n\nSzegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D., Vanhoucke,\nV., and Rabinovich, A. (2014a). Going deeper with convolutions. Technical report,\narXiv:1409.4842. 24, 27, 201, 258, 269, 326, 347\n\nSzegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I. J., and\nFergus, R. (2014b). Intriguing properties of neural networks. CLR, abs/1312.6199.\n268, 271\n\nSzegedy, C., Vanhoucke, V., Ioffe, S., Shlens, J., and Wojna, Z. (2015). Rethinking the\nInception Architecture for Computer Vision. ArXiv e-prints. 243, 322\n\nTaigman, Y., Yang, M., Ranzato, M., and Wolf, L. (2014). DeepFace: Closing the gap to\nhuman-level performance in face verification. In CVPR\u20192014. 100\n\nTandy, D. W. (1997). Works and Days: A Translation and Commentary for the Social\nSciences. University of California Press. 1\n\n771\n", "BIBLIOGRAPHY\n\nTang, Y. and Eliasmith, C. (2010). Deep networks for robust visual recognition. In\nProceedings of the 27th International Conference on Machine Learning, June 21-24,\n2010, Haifa, Israel. 241\n\nTang, Y., Salakhutdinov, R., and Hinton, G. (2012). Deep mixtures of factor analysers.\narXiv preprint arXiw:1206.4685. 489\n\nTaylor, G. and Hinton, G. (2009). Factored conditional restricted Boltzmann machines\nfor modeling motion style. In L. Bottou and M. Littman, editors, Proceedings of\nthe Twenty-sitth International Conference on Machine Learning (ICML\u201909), pages\n1025-1032, Montreal, Quebec, Canada. ACM. 685\n\nTaylor, G., Hinton, G. E., and Roweis, S. (2007). Modeling human motion using binary\nlatent variables. In B. Sch\u00e9lkopf, J. Platt, and T. Hoffman, editors, Advances in Neural\nInformation Processing Systems 19 (NIPS\u201906), pages 1345-1352. MIT Press, Cambridge,\nMA. 685\n\nTeh, Y., Welling, M., Osindero, S., and Hinton, G. E. (2003). Energy-based models\nfor sparse overcomplete representations. Journal of Machine Learning Research, 4,\n1235-1260. 491\n\nTenenbaum, J., de Silva, V., and Langford, J. C. (2000). A global geometric framework\nfor nonlinear dimensionality reduction. Science, 290(5500), 2319-2323. 164, 518, 533\n\nTheis, L., van den Oord, A., and Bethge, M. (2015). A note on the evaluation of generative\nmodels. arXiv:1511.01844. 698, 719\n\nThompson, J., Jain, A., LeCun, Y., and Bregler, C. (2014). Joint training of a convolutional\nnetwork and a graphical model for human pose estimation. In NIPS\u20192014. 360\n\nThrun, S. (1995). Learning to play the game of chess. In NIPS\u20191994. 271\n\nTibshirani, R. J. (1995). Regression shrinkage and selection via the lasso. Journal of the\nRoyal Statistical Society B, 58, 267-288. 236\n\nTieleman, T. (2008). Training restricted Boltzmann machines using approximations to\nthe likelihood gradient. In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, Pro-\nceedings of the Twenty-fifth International Conference on Machine Learning (ICML\u201908),\npages 1064-1071. ACM. 612\n\nTieleman, T. and Hinton, G. (2009). Using fast weights to improve persistent contrastive\ndivergence. In L. Bottou and M. Littman, editors, Proceedings of the Twenty-sixth\nInternational Conference on Machine Learning (ICML\u201909), pages 1033-1040. ACM.\n614\n\nTipping, M. E. and Bishop, C. M. (1999). Probabilistic principal components analysis.\nJournal of the Royal Statistical Society B, 61(3), 611-622. 491\n\n772\n", "BIBLIOGRAPHY\n\nTorralba, A., Fergus, R., and Weiss, Y. (2008). Small codes and large databases for\nrecognition. In Proceedings of the Computer Vision and Pattern Recognition Conference\n(CVPR\u201908), pages 1-8. 525\n\nTouretzky, D. S. and Minton, G. E. (1985). Symbols among the neurons: Details of\na connectionist inference architecture. In Proceedings of the 9th International Joint\nConference on Artificial Intelligence - Volume 1, IJCAI\u201985, pages 238-243, San Francisco,\nCA, USA. Morgan Kaufmann Publishers Inc. 17\n\nTu, K. and Honavar, V. (2011). On the utility of curricula in unsupervised learning of\nprobabilistic grammars. In IJCAI\u20192011. 328\n\nTuraga, S. C., Murray, J. F., Jain, V., Roth, F., Helmstaedter, M., Briggman, K., Denk,\nW., and Seung, H. S. (2010). Convolutional networks can learn to generate affinity\ngraphs for image segmentation. Neural Computation, 22(2), 511-538. 360\n\nTurian, J., Ratinov, L., and Bengio, Y. (2010). Word representations: A simple and\ngeneral method for semi-supervised learning. In Proc. AC'L\u20192010, pages 384-394. 535\n\nTo\u00e9scher, A., Jahrer, M., and Bell, R. M. (2009). The BigChaos solution to the Netflix\ngrand prize. 480\n\nUria, B., Murray, I., and Larochelle, H. (2013). Rnade: The real-valued neural autoregres-\nsive density-estimator. In NJPS\u20192013. 709, 710\n\nvan den Oo\u00e9rd, A., Dieleman, S., and Schrauwen, B. (2013). Deep content-based music\nrecommendation. In NIPS\u20192013. 480\n\nvan der Maaten, L. and Hinton, G. E. (2008). Visualizing data using t-SNE. J. Machine\nLearning Res., 9. 477, 519\n\nVanhoucke, V., Senior, A., and Mao, M. Z. (2011). Improving the speed of neural networks\non CPUs. In Proc. Deep Learning and Unsupervised Feature Learning NIPS Workshop.\n444, 452\n\nVapnik, V. N. (1982). Estimation of Dependences Based on Empirical Data. Springer-\nVerlag, Berlin. 114\n\nVapnik, V. N. (1995). The Nature of Statistical Learning Theory. Springer, New York.\n114\n\nVapnik, V. N. and Chervonenkis, A. Y. (1971). On the uniform convergence of relative\nfrequencies of events to their probabilities. Theory of Probability and Its Applications,\n16, 264-280. 114\n\nVincent, P. (2011). A connection between score matching and denoising autoencoders.\n\nNeural Computation, 23(7). 513, 515, 712\n\n773\n", "BIBLIOGRAPHY\n\nVincent, P. and Bengio, Y. (2003). Manifold Parzen windows. In NIPS\u20192002. MIT Press.\n520\n\nVincent, P., Larochelle, H., Bengio, Y., and Manzagol, P.-A. (2008). Extracting and\ncomposing robust features with denoising autoencoders. In ICML 2008. 241, 515\n\nVincent, P., Larochelle, H., Lajoie, I., Bengio, Y., and Manzagol, P.-A. (2010). Stacked\ndenoising autoencoders: Learning useful representations in a deep network with a local\ndenoising criterion. J. Machine Learning Res., 11. 515\n\nVincent, P., de Br\u00e9bisson, A., and Bouthillier, X. (2015). Efficient exact gradient update\nfor training deep networks with very large sparse targets. In C. Cortes, N. D. Lawrence,\nD. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in Neural Information\nProcessing Systems 28, pages 1108-1116. Curran Associates, Inc. 466\n\nVinyals, O., Kaiser, L., Koo, T., Petrov, $., Sutskever, I., and Hinton, G. (2014a).\nGrammar as a foreign language. Technical report, arXiv:1412.7449. 410\n\nVinyals, O., Toshev, A., Bengio, S., and Erhan, D. (2014b). Show and tell: a neural image\ncaption generator. arXiv 1411.4555. 410\n\nVinyals, O., Fortunato, M., and Jaitly, N. (2015a). Pointer networks. arXiv preprint\narXiv:1506.03134. 418\n\nVinyals, O., Toshev, A., Bengio, S., and Erhan, D. (2015b). Show and tell: a neural image\ncaption generator. In CVPR\u20192015. arXiv:1411.4555. 102\n\nViola, P. and Jones, M. (2001). Robust real-time object detection. In International\nJournal of Computer Vision. 449\n\nVisin, F., Kastner, K., Cho, K., Matteucci, M., Courville, A., and Bengio, Y. (2015).\nReNet: A recurrent neural network based alternative to convolutional networks. arXiv\npreprint arXiv:1505.00393. 395\n\nVon Melchner, L., Pallas, S. L., and Sur, M. (2000). Visual behaviour mediated by retinal\nprojections directed to the auditory pathway. Nature, 404(6780), 871-876. 16\n\nWager, S., Wang, S., and Liang, P. (2013). Dropout training as adaptive regularization.\nIn Advances in Neural Information Processing Systems 26, pages 351-359. 265\n\nWaibel, A., Hanazawa, T., Hinton, G. E., Shikano, K., and Lang, K. (1989). Phoneme\nrecognition using time-delay neural networks. [EEE Transactions on Acoustics, Speech,\nand Signal Processing, 37, 328-339. 374, 453, 459\n\nWan, L., Zeiler, M., Zhang, $., LeCun, Y., and Fergus, R. (2013). Regularization of neural\nnetworks using dropconnect. In [CML\u20192013. 266\n\nWang, S. and Manning, C. (2013). Fast dropout training. In ICML\u20192013. 266\n\n774\n", "BIBLIOGRAPHY\n\nWang, Z., Zhang, J., Feng, J., and Chen, Z. (2014a). Knowledge graph and text jointly\nembedding. In Proc. EMNLP\u20192014. 484\n\nWang, Z., Zhang, J., Feng, J., and Chen, Z. (2014b). Knowledge graph embedding by\ntranslating on hyperplanes. In Proc. AAAI\u20192014. 484\n\nWarde-Farley, D., Goodfellow, I. J., Courville, A., and Bengio, Y. (2014). An empirical\nanalysis of dropout in piecewise linear networks. In ICLR\u20192014. 262, 266, 267\n\nWawrzynek, J., Asanovic, K., Kingsbury, B., Johnson, D., Beck, J., and Morgan, N.\n(1996). Spert-II: A vector microprocessor system. Computer, 29(3), 79-86. 451\n\nWeaver, L. and Tao, N. (2001). The optimal reward baseline for gradient-based reinforce-\nment learning. In Proc. UAI\u20192001, pages 538-545. 691\n\nWeinberger, K. Q. and Saul, L. K. (2004). Unsupervised learning of image manifolds by\nsemidefinite programming. In CVPR\u20192004, pages 988-995. 164, 519\n\nWeiss, Y., Torralba, A., and Fergus, R. (2008). Spectral hashing. In NIPS, pages\n1753-1760. 525\n\nWelling, M., Zemel, R. S., and Hinton, G. E. (2002). Self supervised boosting. In Advances\nin Neural Information Processing Systems, pages 665-672. 703\n\nWelling, M., Hinton, G. E., and Osindero, S. (2003a). Learning sparse topographic\nrepresentations with products of Student-t distributions. In NIPS\u20192002. 680\n\nWelling, M., Zemel, R., and Hinton, G. E. (2003b). Self-supervised boosting. In S. Becker,\nS. Thrun, and K. Obermayer, editors, Advances in Neural Information Processing\nSystems 15 (NIPS\u201902), pages 665-672. MIT Press. 622\n\nWelling, M., Rosen-Zvi, M., and Hinton, G. E. (2005). Exponential family harmoniums\nwith an application to information retrieval. In L. Saul, Y. Weiss, and L. Bottou,\neditors, Advances in Neural Information Processing Systems 17 (NIPS\u201904), volume 17,\nCambridge, MA. MIT Press. 676\n\nWerbos, P. J. (1981). Applications of advances in nonlinear sensitivity analysis. In\nProceedings of the 10th IFIP Conference, 31.8 - 4.9, NYC, pages 762-770. 225\n\nWeston, J., Bengio, S., and Usunier, N. (2010). Large scale image annotation: learning to\nrank with joint word-image embeddings. Machine Learning, 81(1), 21-35. 401\n\nWeston, J., Chopra, S., and Bordes, A. (2014). Memory networks. arXiv preprint\narXiv:1410.8916. 418, 485\n\nWidrow, B. and Hoff, M. E. (1960). Adaptive switching circuits. In 1960 IRE WESCON\nConvention Record, volume 4, pages 96-104. IRE, New York. 15, 21, 24, 27\n\n775\n", "BIBLIOGRAPHY\n\nWikipedia (2015). List of animals by number of neurons \u2014 Wikipedia, the free encyclopedia.\n[Online; accessed 4-March-2015]. 24, 27\n\nWilliams, C. K. I. and Agakov, F. V. (2002). Products of Gaussians and Probabilistic\nMinor Component Analysis. Neural Computation, 14(5), 1169-1182. 682\n\na\n\nWilliams, C. K. I. and Rasmussen, C. E. (1996). Gaussian processes for regression. In\nD. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in Neural Information\nProcessing Systems 8 (NIPS\u201995), pages 514-520. MIT Press, Cambridge, MA. 142\n\nWi\n\na\n\niams, R. J. (1992). Simple statistical gradient-following algorithms connectionist\neinforcement learning. Machine Learning, 8, 229-256. 688, 689\n\nK\n\nWilliams, R. J. and Zipser, D. (1989). A learning algorithm for continually running fully\nrecurrent neural networks. Neural Computation, 1, 270-280. 223\n\nWilson, D. R. and Martinez, T. R. (2003). The general inefficiency of batch training for\ngradient descent learning. Neural Networks, 16(10), 1429-1451. 279\n\nWilson, J. R. (1984). Variance reduction techniques for digital simulation. American\nJournal of Mathematical and Management Sciences, 4(3), 277\u2014312. 690\n\nWiskott, L. and Sejnowski, T. J. (2002). Slow feature analysis: Unsupervised learning of\ninvariances. Neural Computation, 14(4), 715-770. 494\n\nWolpert, D. and MacReady, W. (1997). No free lunch theorems for optimization. [EEE\nTransactions on Evolutionary Computation, 1, 67-82. 293\n\nWolpert, D. H. (1996). The lack of a priori distinction between learning algorithms. Neural\nComputation, 8(7), 1341-1390. 116\n\nWu, R., Yan, S., Shan, Y., Dang, Q., and Sun, G. (2015). Deep image: Scaling up image\nrecognition. arXiv:1501.02876. 447\n\nWu, Z. (1997). Global continuation for distance geometry problems. SIAM Journal of\nOptimization, 7, 814-836. 327\n\nXiong, H. Y., Barash, Y., and Frey, B. J. (2011). Bayesian prediction of tissue-regulated\nsplicing using RNA sequence and cellular context. Bioinformatics, 2'7(18), 2554-2562.\n265\n\nXu, K., Ba, J. L., Kiros, R., Cho, K., Courville, A., Salakhutdinov, R., Zemel, R. S., and\nBengio, Y. (2015). Show, attend and tell: Neural image caption generation with visual\nattention. In ICML\u20192015, arXiv:1502.03044. 102, 410, 691\n\nYildiz, I. B., Jaeger, H., and Kiebel, S. J. (2012). Re-visiting the echo state property.\nNeural networks, 35, 1-9. 405\n\n776\n", "BIBLIOGRAPHY\n\nYosinski, J., Clune, J., Bengio, Y., and Lipson, H. (2014). How transferable are features\nin deep neural networks? In NIPS\u20192014. 325, 536\n\nYounes, L. (1998). On the convergence of Markovian stochastic algorithms with rapidly\ndecreasing ergodicity rates. In Stochastics and Stochastics Models, pages 177-228. 612\n\nYu, D., Wang, S., and Deng, L. (2010). Sequential labeling using deep-structured\nconditional random fields. IEEE Journal of Selected Topics in Signal Processing. 323\n\nZaremba, W. and Sutskever, I. (2014). Learning to execute. arXiv 1410.4615. 329\n\nZaremba, W. and Sutskever, I. (2015). Reinforcement learning neural Turing machines.\narXiv:1505.00521. 419\n\nZaslavsky, T. (1975). Facing Up to Arrangements: Face-Count Formulas for Partitions\nof Space by Hyperplanes. Number no. 154 in Memoirs of the American Mathematical\nSociety. American Mathematical Society. 550\n\nZeiler, M. D. and Fergus, R. (2014). Visualizing and understanding convolutional networks.\nIn ECCV\u201914. 6\n\nZeiler, M. D., Ranzato, M., Monga, R., Mao, M., Yang, K., Le, Q., Nguyen, P., Senior,\nA., Vanhoucke, V., Dean, J., and Hinton, G. E. (2013). On rectified linear units for\nspeech processing. In ICASSP 2018. 460\n\nZhou, B., Khosla, A., Lapedriza, A., Oliva, A., and Torralba, A. (2015). Object detectors\nemerge in deep scene CNNs. ICLR\u20192015, arXiv:1412.6856. 551\n\nZhou, J. and Troyanskaya, O. G. (2014). Deep supervised and convolutional generative\nstochastic network for protein secondary structure prediction. In ICML\u20192014. 715\n\nZhou, Y. and Chellappa, R. (1988). Computation of optical flow using a neural network.\nIn Neural Networks, 1988., IEEE International Conference on, pages 71-78. IEEE. 339\n\nZohrer, M. and Pernkopf, F. (2014). General stochastic networks for classification. In\nNIPS\u20192014. 716\n\n777\n", "Index\n\n0-1 loss, 102, 274\n\nAbsolute value rectification, 191\n\nAccuracy, 420\n\nActivation function, 169\n\nActive constraint, 94\n\nAdaGrad, 305\n\nADALINE, see adaptive linear element\n\nAdam, 307, 422\n\nAdaptive linear element, 15, 23, 26\n\nAdversarial example, 265\n\nAdversarial training, 266, 268, 526\n\nAffine, 109\n\nAIS, see annealed importance sampling\n\nAlmost everywhere, 70\n\nAlmost sure convergence, 128\n\nAncestral sampling, 576, 591\n\nANN, see Artificial neural network\n\nAnnealed importance sampling, 621, 662,\n711\n\nApproximate Bayesian computation, 710\n\nApproximate inference, 579\n\nArtificial intelligence, 1\n\nArtificial neural network, see Neural net-\nwork\n\nASR, see automatic speech recognition\n\nAsymptotically unbiased, 123\n\nAudio, 101, 357, 455\n\nAutoencoder, 4, 353, 498\n\nAutomatic speech recognition, 455\n\nBack-propagation, 201\nBack-propagation through time, 381\nBackprop, see back-propagation\n\nBag of words, 467\n\nBagging, 252\n\nBatch normalization, 264, 422\n\nBayes error, 116\n\nBayes\u2019 rule, 69\n\nBayesian hyperparameter optimization, 433\n\nBayesian network, see directed graphical\nmodel\n\nBayesian probability, 54\n\nBayesian statistics, 134\n\nBelief network, see directed graphical model\n\nBernoulli distribution, 61\n\nBFGS, 314\n\nBias, 123, 227\n\nBias parameter, 109\n\nBiased importance sampling, 589\n\nBigram, 458\n\nBinary relation, 478\n\nBlock Gibbs sampling, 595\n\nBoltzmann distribution, 566\n\nBoltzmann machine, 566, 648\n\nBPTT, see back-propagation through time\n\nBroadcasting, 33\n\nBurn-in, 593\n\nCAE, see contractive autoencoder\n\nCalculus of variations, 178\n\nCategorical distribution, see multinoulli dis-\ntribution\n\nCD, see contrastive divergence\n\nCentering trick (DBM), 667\n\nCentral limit theorem, 63\n\nChain rule (calculus), 203\n\nChain rule of probability, 58\n\n778\n", "INDEX\n\nChess, 2\n\nChord, 575\n\nChordal graph, 575\n\nClass-based language models, 460\n\nClassical dynamical system, 372\n\nClassification, 99\n\nClique potential, see factor (graphical model)\n\nCNN, see convolutional neural network\n\nCollaborative Filtering, 474\n\nCollider, see explaining away\n\nColor images, 357\n\nComplex cell, 362\n\nComputational graph, 202\n\nComputer vision, 449\n\nConcept drift, 533\n\nCondition number, 277\n\nConditional computation, see dynamic struc-\nture\n\nConditional independence, xiii, 59\n\nConditional probability, 58\n\nConditional RBM, 679\n\nConnectionism, 17, 440\n\nConnectionist temporal classification, 457\n\nConsistency, 128, 509\n\nConstrained optimization, 92, 235\n\nContent-based addressing, 416\n\nContent-based recommender systems, 475\n\nContext-specific independence, 569\n\nContextual bandits, 476\n\nContinuation methods, 324\n\nContractive autoencoder, 516\n\nContrast, 451\n\nContrastive divergence, 289, 606, 666\n\nConvex optimization, 140\n\nConvolution, 327, 677\n\nConvolutional network, 16\n\nConvolutional neural network, 250, 327, 422,\n456\n\nCoordinate descent, 319, 665\n\nCorrelation, 60\n\nCost function, see objective function\n\nCovariance, xiii, 60\n\nCovariance matrix, 61\n\nCoverage, 421\n\nCritical temperature, 599\n\nCross-correlation, 329\n\nCross-entropy, 74, 131\n\nCross-validation, 121\n\nCTC, see connectionist temporal classifica-\ntion\n\nCurriculum learning, 326\n\nCurse of dimensionality, 153\n\nCyc, 2\n\nD-separation, 568\n\nDAE, see denoising autoencoder\n\nData generating distribution, 110, 130\n\nData generating process, 110\n\nData parallelism, 444\n\nDataset, 103\n\nDataset augmentation, 268, 454\n\nDBM, see deep Boltzmann machine\n\nDCGAN, 547, 548, 695\n\nDecision tree, 144, 544\n\nDecoder, 4\n\nDeep belief network, 26, 525, 626, 651, 654,\n678, 686\n\nDeep Blue, 2\n\nDeep Boltzmann machine, 23, 26, 525, 626,\n647, 651, 657, 666, 678\n\nDeep feedforward network, 166, 422\n\nDeep learning, 2, 5\n\nDenoising autoencoder, 506, 683\n\nDenoising score matching, 615\n\nDensity estimation, 102\n\nDerivative, xiii, 82\n\nDesign matrix, 105\n\nDetector layer, 336\n\nDeterminant, xii\n\nDiagonal matrix, 40\n\nDifferential entropy, 73, 641\n\nDirac delta function, 64\n\nDirected graphical model, 76, 503, 559, 685\n\nDirectional derivative, 84\n\nDiscriminative fine-tuning, see supervised\nfine-tuning\n\nDiscriminative RBM, 680\n\nDistributed representation, 17, 149, 542\n\nDomain adaptation, 532\n\n779\n", "INDEX\n\nDot product, 33, 139\n\nDouble backprop, 268\n\nDoubly block circulant matrix, 330\nDream sleep, 605, 647\n\nDropConnect, 263\n\nDropout, 255, 422, 427, 428, 666, 683\nDynamic structure, 445\n\nE-step, 629\n\nEarly stopping, 244, 246, 270, 271, 422\n\nEBM, see energy-based model\n\nEcho state network, 23, 26, 401\n\nEffective capacity, 113\n\nEigendecomposition, 41\n\nEigenvalue, 41\n\nEigenvector, 41\n\nELBO, see evidence lower bound\n\nElement-wise product, see Hadamard prod-\nuct, see Hadamard product\n\nEM, see expectation maximization\n\nEmbedding, 512\n\nEmpirical distribution, 65\n\nEmpirical risk, 274\n\nEmpirical risk minimization, 274\n\nEncoder, 4\n\nEnergy function, 565\n\nEnergy-based model, 565, 591, 648, 657\n\nEnsemble methods, 252\n\nEpoch, 244\n\nEquality constraint, 93\n\nEquivariance, 335\n\nError function, see objective function\n\nESN, see echo state network\n\nEuclidean norm, 38\n\nEuler-Lagrange equation, 641\n\nEvidence lower bound, 628, 655\n\nExample, 98\n\nExpectation, 59\n\nExpectation maximization, 629\n\nExpected value, see expectation\n\nExplaining away, 570, 626, 639\n\nExploitation, 477\n\nExploration, 477\n\nExponential distribution, 64\n\nF-score, 420\n\nFactor (graphical model), 563\nFactor analysis, 486\n\nFactor graph, 575\n\nFactors of variation, 4\n\nFeature, 98\n\nFeature selection, 234\nFeedforward neural network, 166\nFine-tuning, 321\n\nFinite differences, 436\n\nForget gate, 304\n\nForward propagation, 201\nFourier transform, 357, 359\nFovea, 363\n\nFPCD, 610\n\nFree energy, 567, 674\nFreebase, 479\n\nFrequentist probability, 54\nFrequentist statistics, 134\nFrobenius norm, 45\nFully-visible Bayes network, 699\nFunctional derivatives, 640\nFVBN, see fully-visible Bayes network\n\nGabor function, 365\n\nGANs, see generative adversarial networks\n\nGated recurrent unit, 422\n\nGaussian distribution, see normal distribu-\ntion\n\nGaussian kernel, 140\n\nGaussian mixture, 66, 187\n\nGCN, see global contrast normalization\n\nGeneOntology, 479\n\nGeneralization, 109\n\nGeneralized Lagrange function, see general-\nized Lagrangian\n\nGeneralized Lagrangian, 93\n\nGenerative adversarial networks, 683, 693\n\nGenerative moment matching networks, 696\n\nGenerator network, 687\n\nGibbs distribution, 564\n\nGibbs sampling, 577, 595\n\nGlobal contrast normalization, 451\n\nGPU, see graphics processing unit\n\nGradient, 83\n\n780\n", "INDEX\n\nGradient clipping, 287, 411\n\nGradient descent, 82, 84\n\nGraph, xii\n\nGraphical model, see structured probabilis-\ntic model\n\nGraphics processing unit, 441\n\nGreedy algorithm, 321\n\nGreedy layer-wise unsupervised pretraining,\n524\n\nGreedy supervised pretraining, 321\n\nGrid search, 429\n\nHadamard product, xii, 33\n\nHard tanh, 195\n\nHarmonium, see restricted Boltzmann ma-\nchine\n\nHarmony theory, 567\n\nHelmholtz free energy, see evidence lower\n\nbound\n\nHessian, 221\n\nHessian matrix, xiii, 86\n\nHeteroscedastic, 186\n\nHidden layer, 6, 166\n\nHill climbing, 85\n\nHyperparameter optimization, 429\n\nHyperparameters, 119, 427\n\nHypothesis space, 111, 117\n\niid. assumptions, 110, 121, 265\n\nIdentity matrix, 35\n\nILSVRC, see ImageNet Large Scale Visual\nRecognition Challenge\n\nImageNet Large Scale Visual Recognition\nChallenge, 22\n\nImmorality, 573\n\nImportance sampling, 588, 620, 691\n\nImportance weighted autoencoder, 691\n\nIndependence, xiii, 59\n\nIndependent and identically distributed, see\niid. assumptions\n\nIndependent component analysis, 487\n\nIndependent subspace analysis, 489\n\nInequality constraint, 93\n\nInference, 558, 579, 626, 628, 630, 633, 643,\n646\n\nInformation retrieval, 520\nInitialization, 298\nIntegral, xiii\n\nInvariance, 339\n\nIsotropic, 64\n\nJacobian matrix, xiii, 71, 85\nJoint probability, 56\n\nk-means, 361, 542\n\nk-nearest neighbors, 141, 544\n\nKarush-Kuhn-Tucker conditions, 94, 235\n\nKarush\u2014Kuhn\u2014Tucker, 93\n\nKernel (convolution), 328, 329\n\nKernel machine, 544\n\nKernel trick, 139\n\nKKT, see Karush\u2014Kuhn\u2014Tucker\n\nKKT conditions, see Karush-Kuhn-Tucker\nconditions\n\nKL divergence, see Kullback-Leibler diver-\ngence\n\nKnowledge base, 2, 479\n\nKrylov methods, 222\n\nKullback-Leibler divergence, xiii, 73\n\nLabel smoothing, 241\n\nLagrange multipliers, 93, 641\nLagrangian, see generalized Lagrangian\nLAPGAN, 695\n\nLaplace distribution, 64, 492\n\nLatent variable, 66\n\nLayer (neural network), 166\n\nLCN, see local contrast normalization\nLeaky ReLU, 191\n\nLeaky units, 404\n\nLearning rate, 84\n\nLine search, 84, 85, 92\n\nLinear combination, 36\n\nLinear dependence, 37\n\nLinear factor models, 485\n\nLinear regression, 106, 109, 138\n\nLink prediction, 480\n\nLipschitz constant, 91\n\nLipschitz continuous, 91\n\nLiquid state machine, 401\n\n781\n", "INDEX\n\nLocal conditional probability distribution,\n560\n\nLocal contrast normalization, 452\n\nLogistic regression, 3, 138, 139\n\nLogistic sigmoid, 7, 66\n\nLong short-term memory, 18, 24, 304, 407,\n422\n\nLoop, 575\n\nLoopy belief propagation, 581\n\nLoss function, see objective function\n\nZL? norm, 38\n\nLSTM, see long short-term memory\n\n[-step, 629\n\nMachine learning, 2\n\nMachine translation, 100\n\nfain diagonal, 32\n\nManifold, 159\n\nManifold hypothesis, 160\n\nManifold learning, 160\n\nManifold tangent classifier, 268\n\nIAP approximation, 137, 501\n\nMarginal probability, 57\n\nMarkov chain, 591\n\nMarkov chain Monte Carlo, 591\n\nMarkov network, see undirected model\n\nMarkov random field, see undirected model\n\nMatrix, xi, xii, 31\n\nMatrix inverse, 35\n\nMatrix product, 33\n\nJax norm, 39\n\nJax pooling, 336\n\nJaximum likelihood, 130\n\nMaxout, 191, 422\n\nCMC, see Markov chain Monte Carlo\n\nlean field, 633, 634, 666\n\nlean squared error, 107\n\nleasure theory, 70\n\nleasure zero, 70\n\nemory network, 413, 415\n\nAethod of steepest descent, see gradient\ndescent\n\nMinibatch, 277\n\nJissing inputs, 99\n\nfixing (Markov chain), 597\n\nJixture density networks, 187\n\nAixture distribution, 65\n\nAixture model, 187, 506\n\nixture of experts, 446, 544\n\nALP, see multilayer perception\n\nANIST, 20, 21, 666\n\nJodel averaging, 252\n\n{odel compression, 444\n\nNodel identifiability, 282\n\nNodel parallelism, 444\n\nJoment matching, 696\n\nJoore-Penrose pseudoinverse, 44, 237\n\nJoralized graph, 573\n\n[P-DBM, see multi-prediction DBM\n\n(MRF (Markov Random Field), see undi-\nrected model\n\nASE, see mean squared error\n\nAulti-modal learning, 535\n\n{ulti-prediction DBM, 668\n\nAulti-task learning, 242, 533\n\nultilayer perception, 5\n\nNultilayer perceptron, 26\n\n{ultinomial distribution, 61\n\n{ultinoulli distribution, 61\n\nn-gram, 458\n\nNADE, 702\n\nNaive Bayes, 3\n\nNat, 72\n\nNatural image, 555\n\nNatural language processing, 457\nNearest neighbor regression, 114\nNegative definite, 88\n\nNegative phase, 466, 602, 604\nNeocognitron, 16, 23, 26, 364\nNesterov momentum, 298\nNetflix Grand Prize, 255, 475\nNeural language model, 460, 472\nNeural network, 13\n\nNeural Turing machine, 415\nNeuroscience, 15\n\nNewton\u2019s method, 88, 309\n\nNLM, see neural language model\nNLP, see natural language processing\nNo free lunch theorem, 115\n\n782\n", "INDEX\n\nNoise-contrastive estimation, 616\n\nNon-parametric model, 113\n\nNorm, xiv, 38\n\nNormal distribution, 62, 63, 124\n\nNormal equations, 108, 108, 111, 232\n\nNormalized initialization, 301\n\nNumerical differentiation, see finite differ-\nences\n\nObject detection, 449\n\nObject recognition, 449\n\nObjective function, 81\n\nOMP-k, see orthogonal matching pursuit\nOne-shot learning, 534\n\nOperation, 202\n\nOptimization, 79, 81\n\nOrthodox statistics, see frequentist statistics\nOrthogonal matching pursuit, 26, 252\nOrthogonal matrix, 41\n\nOrthogonality, 40\n\nOutput layer, 166\n\nParallel distributed processing, 17\n\nParameter initialization, 298, 403\n\nParameter sharing, 249, 332, 370, 372, 386\n\nParameter tying, see Parameter sharing\n\nParametric model, 113\n\nParametric ReLU, 191\n\nPartial derivative, 83\n\nPartition function, 564, 601, 663\n\nPCA, see principal components analysis\n\nPCD, see stochastic maximum likelihood\n\nPerceptron, 15, 26\n\nPersistent contrastive divergence, see stochas-\ntic maximum likelihood\n\nPerturbation analysis, see reparametrization\n\ntrick\nPoint estimator, 121\nPolicy, 476\n\nPooling, 327, 677\n\nPositive definite, 88\n\nPositive phase, 466, 602, 604, 650, 662\nPrecision, 420\n\nPrecision (of a normal distribution), 62, 64\nPredictive sparse decomposition, 519\n\nPreprocessing, 450\n\nPretraining, 320, 524\n\nPrimary visual cortex, 362\n\nPrincipal components analysis, 47, 145, 146,\n486, 626\n\nPrior probability distribution, 134\n\nProbabilistic max pooling, 677\n\nProbabilistic PCA, 486, 487, 627\n\nProbability density function, 57\n\nProbability distribution, 55\n\nProbability mass function, 55\n\nProbability mass function estimation, 102\n\nProduct of experts, 566\n\nProduct rule of probability, see chain rule\nof probability\n\nPSD, see predictive sparse decomposition\n\nPseudolikelihood, 611\n\nQuadrature pair, 366\nQuasi-Newton methods, 314\n\nRadial basis function, 195\n\nRandom search, 431\n\nRandom variable, 55\n\nRatio matching, 614\n\nRBF, 195\n\nRBM, see restricted Boltzmann machine\n\nRecall, 420\n\nReceptive field, 334\n\nRecommender Systems, 474\n\nRectified linear unit, 170, 191, 422, 503\n\nRecurrent network, 26\n\nRecurrent neural network, 375\n\nRegression, 99\n\nRegularization, 119, 119, 176, 226, 427\n\nRegularizer, 118\n\nREINFORCE, 683\n\nReinforcement learning, 24, 105, 476, 683\n\nRelational database, 479\n\nRelations, 478\n\nReparametrization trick, 682\n\nRepresentation learning, 3\n\nRepresentational capacity, 113\n\nRestricted Boltzmann machine, 353, 456,\n475, 583, 626, 650, 651, 666, 670,\n\n783\n", "INDEX\n\n672, 674, 677\nRidge regression, see weight decay\nRisk, 273\nRNN-RBM, 679\n\nSaddle points, 283\n\nSample mean, 124\n\nScalar, xi, xii, 30\n\nScore matching, 509, 613\n\nSecond derivative, 85\n\nSecond derivative test, 88\n\nSelf-information, 72\n\nSemantic hashing, 521\n\nSemi-supervised learning, 241\n\nSeparable convolution, 359\n\nSeparation (probabilistic modeling), 568\n\nSet, xii\n\nSGD, see stochastic gradient descent\n\nShannon entropy, xiii, 73\n\nShortlist, 462\n\nSigmoid, xiv, see logistic sigmoid\n\nSigmoid belief network, 26\n\nSimple cell, 362\n\nSingular value, see singular value decompo-\nsition\n\nSingular value decomposition, 43, 146, 475\n\nSingular vector, see singular value decom-\nposition\n\nSlow feature analysis, 489\n\nSML, see stochastic maximum likelihood\n\nSoftmax, 182, 415, 446\n\nSoftplus, xiv, 67, 195\n\nSpam detection, 3\n\nSparse coding, 319, 353, 492, 626, 686\n\nSparse initialization, 302, 403\n\nSparse representation, 145, 224, 251, 501,\n552\n\nSpearmint, 433\n\nSpectral radius, 401\n\nSpeech recognition, see automatic speech\nrecognition\n\nSphering, see whitening\n\nSpike and slab restricted Boltzmann ma-\nchine, 674\n\nSPN, see sum-product network\n\nSquare matrix, 37\n\nssRBM, see spike and slab restricted Boltz-\nmann machine\n\nStandard deviation, 60\n\nStandard error, 126\n\nStandard error of the mean, 126, 276\n\nStatistic, 121\n\nStatistical learning theory, 109\n\nSteepest descent, see gradient descent\n\nStochastic back-propagation, see reparametriza-\ntion trick\n\nStochastic gradient descent, 15, 149, 277,\n292, 666\n\nStochastic maximum likelihood, 608, 666\n\nStochastic pooling, 263\n\nStructure learning, 578\n\nStructured output, 100, 679\n\nStructured probabilistic model, 76, 554\n\nSum rule of probability, 57\n\nSum-product network, 549\n\nSupervised fine-tuning, 525, 656\n\nSupervised learning, 104\n\nSupport vector machine, 139\n\nSurrogate loss function, 274\n\nSVD, see singular value decomposition\n\nSymmetric matrix, 40, 42\n\nTangent distance, 267\n\nTangent plane, 511\n\nTangent prop, 267\n\nTDNN, see time-delay neural network\nTeacher forcing, 379, 380\n\nTempering, 599\n\nTemplate matching, 140\n\nTensor, xi, xii, 32\n\nTest set, 109\n\nTikhonov regularization, see weight decay\nTiled convolution, 349\n\nTime-delay neural network, 364, 371\nToeplitz matrix, 330\n\nTopographic ICA, 489\n\nTrace operator, 45\n\nTraining error, 109\n\nTranscription, 100\n\nTransfer learning, 532\n\n784\n", "INDEX\n\nTranspose, xii, 32 Zero-data learning, see zero-shot learning\nTriangle inequality, 38 Zero-shot learning, 534\n\nTriangulated graph, see chordal graph\n\nTrigram, 458\n\nnbiased, 123\n\nndirected graphical model, 76, 503\nndirected model, 562\n\nniform distribution, 56\n\nnigram, 458\n\nnit norm, 40\n\nnit vector, 40\n\nniversal approximation theorem, 196\nniversal approximator, 549\nnnormalized probability distribution, 563\nnsupervised learning, 104, 144\nnsupervised pretraining, 456, 524\n\nGdqddddddddadadaad\n\nV-structure, see explaining away\n\nV1, 362\n\nVAE, see variational autoencoder\n\nVapnik-Chervonenkis dimension, 113\n\nVariance, xiii, 60, 227\n\nVariational autoencoder, 683, 690\n\nVariational derivatives, see functional deriva-\ntives\n\nVariational free energy, see evidence lower\nbound\n\nVC dimension, see Vapnik-Chervonenkis di-\nmension\n\nVector, xi, xii, 31\n\nVirtual adversarial examples, 266\n\nVisible layer, 6\n\nVolumetric data, 357\n\nWake-sleep, 646, 655\n\nWeight decay, 117, 176, 229, 428\nWeight space symmetry, 282\nWeights, 15, 106\n\nWhitening, 452\n\nWikibase, 479\n\nWikibase, 479\n\nWord embedding, 460\nWord-sense disambiguation, 480\nWordNet, 479\n\n"]