{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/query_engine/SQLRouterQueryEngine.html",
        "title": "SQL Router Query Engine - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## SQL Router Query Engine[\uf0c1](#sql-router-query-engine \"Permalink to this heading\")\n\nIn this tutorial, we define a custom router query engine that can route to either a SQL database or a vector database.\n\n## Setup[\uf0c1](#setup \"Permalink to this heading\")\n\n\\# NOTE: This is ONLY necessary in jupyter notebook.\n\\# Details: Jupyter runs an event-loop behind the scenes.\n\\#          This results in nested event-loops when we start an event-loop to make async queries.\n\\#          This is normally not allowed, we use nest\\_asyncio to allow it for convenience.\nimport nest\\_asyncio\n\nnest\\_asyncio.apply()\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    StorageContext,\n    SQLDatabase,\n    WikipediaReader,\n)\n\nINFO:numexpr.utils:Note: NumExpr detected 12 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nNote: NumExpr detected 12 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nINFO:numexpr.utils:NumExpr defaulting to 8 threads.\nNumExpr defaulting to 8 threads.\n\n/Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user\\_install.html\n  from .autonotebook import tqdm as notebook\\_tqdm\n\n## Create Database Schema + Test Data[\uf0c1](#create-database-schema-test-data \"Permalink to this heading\")\n\nHere we introduce a toy scenario where there are 100 tables (too big to fit into the prompt)\n\nfrom sqlalchemy import (\n    create\\_engine,\n    MetaData,\n    Table,\n    Column,\n    String,\n    Integer,\n    select,\n    column,\n)\n\nengine \\= create\\_engine(\"sqlite:///:memory:\", future\\=True)\nmetadata\\_obj \\= MetaData()\n\n\\# create city SQL table\ntable\\_name \\= \"city\\_stats\"\ncity\\_stats\\_table \\= Table(\n    table\\_name,\n    metadata\\_obj,\n    Column(\"city\\_name\", String(16), primary\\_key\\=True),\n    Column(\"population\", Integer),\n    Column(\"country\", String(16), nullable\\=False),\n)\n\nmetadata\\_obj.create\\_all(engine)\n\n\\# print tables\nmetadata\\_obj.tables.keys()\n\ndict\\_keys(\\['city\\_stats'\\])\n\nWe introduce some test data into the `city_stats` table\n\nfrom sqlalchemy import insert\n\nrows \\= \\[\n    {\"city\\_name\": \"Toronto\", \"population\": 2930000, \"country\": \"Canada\"},\n    {\"city\\_name\": \"Tokyo\", \"population\": 13960000, \"country\": \"Japan\"},\n    {\"city\\_name\": \"Berlin\", \"population\": 3645000, \"country\": \"Germany\"},\n\\]\nfor row in rows:\n    stmt \\= insert(city\\_stats\\_table).values(\\*\\*row)\n    with engine.begin() as connection:\n        cursor \\= connection.execute(stmt)\n\nwith engine.connect() as connection:\n    cursor \\= connection.exec\\_driver\\_sql(\"SELECT \\* FROM city\\_stats\")\n    print(cursor.fetchall())\n\n\\[('Toronto', 2930000, 'Canada'), ('Tokyo', 13960000, 'Japan'), ('Berlin', 3645000, 'Germany')\\]\n\n## Load Data[\uf0c1](#load-data \"Permalink to this heading\")\n\nWe first show how to convert a Document into a set of Nodes, and insert into a DocumentStore.\n\n\\# install wikipedia python package\n!pip install wikipedia\n\nRequirement already satisfied: wikipedia in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (1.4.0)\nRequirement already satisfied: requests<3.0.0,>=2.0.0 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from wikipedia) (2.28.2)\nRequirement already satisfied: beautifulsoup4 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from wikipedia) (4.12.2)\nRequirement already satisfied: idna<4,>=2.5 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.4)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.1.0)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2022.12.7)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (1.26.15)\nRequirement already satisfied: soupsieve>1.2 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from beautifulsoup4->wikipedia) (2.4.1)\n\n\\[notice\\] A new release of pip available: 22.3.1 -> 23.1.2\n\\[notice\\] To update, run: pip install --upgrade pip\n\ncities \\= \\[\"Toronto\", \"Berlin\", \"Tokyo\"\\]\nwiki\\_docs \\= WikipediaReader().load\\_data(pages\\=cities)\n\n## Build SQL Index[\uf0c1](#build-sql-index \"Permalink to this heading\")\n\nsql\\_database \\= SQLDatabase(engine, include\\_tables\\=\\[\"city\\_stats\"\\])\n\nfrom llama\\_index.indices.struct\\_store.sql\\_query import NLSQLTableQueryEngine\n\nsql\\_query\\_engine \\= NLSQLTableQueryEngine(\n    sql\\_database\\=sql\\_database,\n    tables\\=\\[\"city\\_stats\"\\],\n)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 0 tokens\n\n/Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages/langchain/sql\\_database.py:227: UserWarning: This method is deprecated - please use \\`get\\_usable\\_table\\_names\\`.\n  warnings.warn(\n\n## Build Vector Index[\uf0c1](#build-vector-index \"Permalink to this heading\")\n\n\\# build a separate vector index per city\n\\# You could also choose to define a single vector index across all docs, and annotate each chunk by metadata\nvector\\_indices \\= \\[\\]\nfor wiki\\_doc in wiki\\_docs:\n    vector\\_index \\= VectorStoreIndex.from\\_documents(\\[wiki\\_doc\\])\n    vector\\_indices.append(vector\\_index)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 20744 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 20744 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 21947 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 21947 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 12786 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 12786 tokens\n\n## Define Router Query Engine[\uf0c1](#define-router-query-engine \"Permalink to this heading\")\n\nfrom llama\\_index.query\\_engine.router\\_query\\_engine import RouterQueryEngine\nfrom llama\\_index.selectors.llm\\_selectors import LLMSingleSelector\n\nquery\\_engine \\= RouterQueryEngine(\n    selector\\=LLMSingleSelector.from\\_defaults(),\n    query\\_engine\\_tools\\=(\\[sql\\_tool\\] + vector\\_tools),\n)\n\nresponse \\= query\\_engine.query(\"Which city has the highest population?\")\nprint(str(response))\n\nINFO:llama\\_index.query\\_engine.router\\_query\\_engine:Selecting query engine 0: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city.\nSelecting query engine 0: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city.\nINFO:llama\\_index.indices.struct\\_store.sql\\_query:> Table desc str: Schema of table city\\_stats:\nTable 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\n\n> Table desc str: Schema of table city\\_stats:\nTable 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total LLM token usage: 347 tokens\n> \\[query\\] Total LLM token usage: 347 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total embedding token usage: 0 tokens\n> \\[query\\] Total embedding token usage: 0 tokens\n Tokyo has the highest population, with 13,960,000 people.\n\nresponse \\= query\\_engine.query(\"Tell me about the historical museums in Berlin\")\nprint(str(response))\n\nINFO:llama\\_index.query\\_engine.router\\_query\\_engine:Selecting query engine 2: Useful for answering semantic questions about Berlin.\nSelecting query engine 2: Useful for answering semantic questions about Berlin.\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 8 tokens\n> \\[retrieve\\] Total embedding token usage: 8 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total LLM token usage: 2031 tokens\n> \\[get\\_response\\] Total LLM token usage: 2031 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total embedding token usage: 0 tokens\n> \\[get\\_response\\] Total embedding token usage: 0 tokens\n\nBerlin is home to many historical museums, including the Altes Museum, Neues Museum, Alte Nationalgalerie, Pergamon Museum, and Bode Museum, which are all located on Museum Island. The Gem\u00e4ldegalerie (Painting Gallery) focuses on the paintings of the \"old masters\" from the 13th to the 18th centuries, while the Neue Nationalgalerie (New National Gallery, built by Ludwig Mies van der Rohe) specializes in 20th-century European painting. The Hamburger Bahnhof, in Moabit, exhibits a major collection of modern and contemporary art. The expanded Deutsches Historisches Museum reopened in the Zeughaus with an overview of German history spanning more than a millennium. The Bauhaus Archive is a museum of 20th-century design from the famous Bauhaus school. Museum Berggruen houses the collection of noted 20th century collector Heinz Berggruen, and features an extensive assortment of works by Picasso, Matisse, C\u00e9zanne, and Giacometti, among others. The Kupferstichkabinett Berlin (Museum of Prints and Drawings) is part of the Staatlichen Museen z\n\nresponse \\= query\\_engine.query(\"Which countries are each city from?\")\nprint(str(response))\n\nINFO:llama\\_index.query\\_engine.router\\_query\\_engine:Selecting query engine 0: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city.\nSelecting query engine 0: Useful for translating a natural language query into a SQL query over a table containing: city\\_stats, containing the population/country of each city.\nINFO:llama\\_index.indices.struct\\_store.sql\\_query:> Table desc str: Schema of table city\\_stats:\nTable 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\n\n> Table desc str: Schema of table city\\_stats:\nTable 'city\\_stats' has columns: city\\_name (VARCHAR(16)), population (INTEGER), country (VARCHAR(16)) and foreign keys: .\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total LLM token usage: 334 tokens\n> \\[query\\] Total LLM token usage: 334 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[query\\] Total embedding token usage: 0 tokens\n> \\[query\\] Total embedding token usage: 0 tokens\n Toronto is from Canada, Tokyo is from Japan, and Berlin is from Germany."
}