{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/api_reference/storage/vector_store.html",
        "title": "Vector Store - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "Represents a `SELECT` statement.\n\nThe `_sql.Select` object is normally constructed using the `_sql.select()` function. See that function for details.\n\nSee also\n\n`_sql.select()`\n\ntutorial\\_selecting\\_data - in the 2.0 tutorial\n\nadd\\_columns(_\\*entities: \\_ColumnsClauseArgument\\[Any\\]_) \u2192 [Select](#llama_index.vector_stores.PGVectorStore.Select \"llama_index.vector_stores.PGVectorStore.Select\")\\[Any\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.add_columns \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with the given entities appended to its columns clause.\n\nE.g.:\n\nmy\\_select \\= my\\_select.add\\_columns(table.c.new\\_column)\n\nThe original expressions in the columns clause remain in place. To replace the original expressions with new ones, see the method `_expression.Select.with_only_columns()`.\n\nParameters\n\n**\\*entities** \u2013 column, table, or other entity expressions to be added to the columns clause\n\nSee also\n\n`_expression.Select.with_only_columns()` - replaces existing expressions rather than appending.\n\norm\\_queryguide\\_select\\_multiple\\_entities - ORM-centric example\n\nadd\\_cte(_\\*ctes: CTE_, _nest\\_here: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.add_cte \"Permalink to this definition\")\n\nAdd one or more `_sql.CTE` constructs to this statement.\n\nThis method will associate the given `_sql.CTE` constructs with the parent statement such that they will each be unconditionally rendered in the WITH clause of the final statement, even if not referenced elsewhere within the statement or any sub-selects.\n\nThe optional [:paramref:\\`.HasCTE.add\\_cte.nest\\_here\\`](#id1) parameter when set to True will have the effect that each given `_sql.CTE` will render in a WITH clause rendered directly along with this statement, rather than being moved to the top of the ultimate rendered statement, even if this statement is rendered as a subquery within a larger statement.\n\nThis method has two general uses. One is to embed CTE statements that serve some purpose without being referenced explicitly, such as the use case of embedding a DML statement such as an INSERT or UPDATE as a CTE inline with a primary statement that may draw from its results indirectly. The other is to provide control over the exact placement of a particular series of CTE constructs that should remain rendered directly in terms of a particular statement that may be nested in a larger statement.\n\nE.g.:\n\nfrom sqlalchemy import table, column, select\nt \\= table('t', column('c1'), column('c2'))\n\nins \\= t.insert().values({\"c1\": \"x\", \"c2\": \"y\"}).cte()\n\nstmt \\= select(t).add\\_cte(ins)\n\nWould render:\n\nWITH anon\\_1 AS\n(INSERT INTO t (c1, c2) VALUES (:param\\_1, :param\\_2))\nSELECT t.c1, t.c2\nFROM t\n\nAbove, the \u201canon\\_1\u201d CTE is not referenced in the SELECT statement, however still accomplishes the task of running an INSERT statement.\n\nSimilarly in a DML-related context, using the PostgreSQL `_postgresql.Insert` construct to generate an \u201cupsert\u201d:\n\nfrom sqlalchemy import table, column\nfrom sqlalchemy.dialects.postgresql import insert\n\nt \\= table(\"t\", column(\"c1\"), column(\"c2\"))\n\ndelete\\_statement\\_cte \\= (\n    t.delete().where(t.c.c1 < 1).cte(\"deletions\")\n)\n\ninsert\\_stmt \\= insert(t).values({\"c1\": 1, \"c2\": 2})\nupdate\\_statement \\= insert\\_stmt.on\\_conflict\\_do\\_update(\n    index\\_elements\\=\\[t.c.c1\\],\n    set\\_\\={\n        \"c1\": insert\\_stmt.excluded.c1,\n        \"c2\": insert\\_stmt.excluded.c2,\n    },\n).add\\_cte(delete\\_statement\\_cte)\n\nprint(update\\_statement)\n\nThe above statement renders as:\n\nWITH deletions AS\n(DELETE FROM t WHERE t.c1 < %(c1\\_1)s)\nINSERT INTO t (c1, c2) VALUES (%(c1)s, %(c2)s)\nON CONFLICT (c1) DO UPDATE SET c1 \\= excluded.c1, c2 \\= excluded.c2\n\nNew in version 1.4.21.\n\nParameters\n\n*   **\\*ctes** \u2013\n    \n    zero or more `CTE` constructs.\n    \n    Changed in version 2.0: Multiple CTE instances are accepted\n    \n*   **nest\\_here** \u2013\n    \n    if True, the given CTE or CTEs will be rendered as though they specified the [:paramref:\\`.HasCTE.cte.nesting\\`](#id3) flag to `True` when they were added to this `HasCTE`. Assuming the given CTEs are not referenced in an outer-enclosing statement as well, the CTEs given should render at the level of this statement when this flag is given.\n    \n    New in version 2.0.\n    \n\nalias(_name: Optional\\[str\\] \\= None_, _flat: bool \\= False_) \u2192 Subquery[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.alias \"Permalink to this definition\")\n\nReturn a named subquery against this `_expression.SelectBase`.\n\nFor a `_expression.SelectBase` (as opposed to a `_expression.FromClause`), this returns a `Subquery` object which behaves mostly the same as the `_expression.Alias` object that is used with a `_expression.FromClause`.\n\nChanged in version 1.4: The `_expression.SelectBase.alias()` method is now a synonym for the `_expression.SelectBase.subquery()` method.\n\nas\\_scalar() \u2192 ScalarSelect\\[Any\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.as_scalar \"Permalink to this definition\")\n\nDeprecated since version 1.4: The `_expression.SelectBase.as_scalar()` method is deprecated and will be removed in a future release. Please refer to `_expression.SelectBase.scalar_subquery()`.\n\n_property_ c_: ReadOnlyColumnCollection\\[str, KeyedColumnElement\\[Any\\]\\]_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.c \"Permalink to this definition\")\n\nDeprecated since version 1.4: The `_expression.SelectBase.c` and `_expression.SelectBase.columns` attributes are deprecated and will be removed in a future release; these attributes implicitly create a subquery that should be explicit. Please call `_expression.SelectBase.subquery()` first in order to create a subquery, which then contains this attribute. To access the columns that this SELECT object SELECTs from, use the `_expression.SelectBase.selected_columns` attribute.\n\ncolumn(_column: \\_ColumnsClauseArgument\\[Any\\]_) \u2192 [Select](#llama_index.vector_stores.PGVectorStore.Select \"llama_index.vector_stores.PGVectorStore.Select\")\\[Any\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.column \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with the given column expression added to its columns clause.\n\nDeprecated since version 1.4: The `_expression.Select.column()` method is deprecated and will be removed in a future release. Please use `_expression.Select.add_columns()`\n\nE.g.:\n\nmy\\_select \\= my\\_select.column(table.c.new\\_column)\n\nSee the documentation for `_expression.Select.with_only_columns()` for guidelines on adding /replacing the columns of a `_expression.Select` object.\n\n_property_ column\\_descriptions_: Any_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.column_descriptions \"Permalink to this definition\")\n\nReturn a plugin-enabled \u2018column descriptions\u2019 structure referring to the columns which are SELECTed by this statement.\n\nThis attribute is generally useful when using the ORM, as an extended structure which includes information about mapped entities is returned. The section queryguide\\_inspection contains more background.\n\nFor a Core-only statement, the structure returned by this accessor is derived from the same objects that are returned by the [`Select.selected_columns`](#llama_index.vector_stores.PGVectorStore.Select.selected_columns \"llama_index.vector_stores.PGVectorStore.Select.selected_columns\") accessor, formatted as a list of dictionaries which contain the keys `name`, `type` and `expr`, which indicate the column expressions to be selected:\n\n\\>>> stmt \\= select(user\\_table)\n\\>>> stmt.column\\_descriptions\n\\[\n    {\n        'name': 'id',\n        'type': Integer(),\n        'expr': Column('id', Integer(), ...)},\n    {\n        'name': 'name',\n        'type': String(length=30),\n        'expr': Column('name', String(length=30), ...)}\n\\]\n\nChanged in version 1.4.33: The [`Select.column_descriptions`](#llama_index.vector_stores.PGVectorStore.Select.column_descriptions \"llama_index.vector_stores.PGVectorStore.Select.column_descriptions\") attribute returns a structure for a Core-only set of entities, not just ORM-only entities.\n\nSee also\n\n`UpdateBase.entity_description` - entity information for an `insert()`, `update()`, or `delete()`\n\nqueryguide\\_inspection - ORM background\n\n_property_ columns\\_clause\\_froms_: List\\[FromClause\\]_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.columns_clause_froms \"Permalink to this definition\")\n\nReturn the set of `_expression.FromClause` objects implied by the columns clause of this SELECT statement.\n\nNew in version 1.4.23.\n\nSee also\n\n`_sql.Select.froms` - \u201cfinal\u201d FROM list taking the full statement into account\n\n`_sql.Select.with_only_columns()` - makes use of this collection to set up a new FROM list\n\ncompare(_other: ClauseElement_, _\\*\\*kw: Any_) \u2192 bool[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.compare \"Permalink to this definition\")\n\nCompare this `_expression.ClauseElement` to the given `_expression.ClauseElement`.\n\nSubclasses should override the default behavior, which is a straight identity comparison.\n\n\\*\\*kw are arguments consumed by subclass `compare()` methods and may be used to modify the criteria for comparison (see `_expression.ColumnElement`).\n\ncompile(_bind: Optional\\[Union\\[Engine, Connection\\]\\] \\= None_, _dialect: Optional\\[Dialect\\] \\= None_, _\\*\\*kw: Any_) \u2192 Compiled[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.compile \"Permalink to this definition\")\n\nCompile this SQL expression.\n\nThe return value is a `Compiled` object. Calling `str()` or `unicode()` on the returned value will yield a string representation of the result. The `Compiled` object also can return a dictionary of bind parameter names and values using the `params` accessor.\n\nParameters\n\n*   **bind** \u2013 An `Connection` or `Engine` which can provide a `Dialect` in order to generate a `Compiled` object. If the `bind` and `dialect` parameters are both omitted, a default SQL compiler is used.\n    \n*   **column\\_keys** \u2013 Used for INSERT and UPDATE statements, a list of column names which should be present in the VALUES clause of the compiled statement. If `None`, all columns from the target table object are rendered.\n    \n*   **dialect** \u2013 A `Dialect` instance which can generate a `Compiled` object. This argument takes precedence over the `bind` argument.\n    \n*   **compile\\_kwargs** \u2013\n    \n    optional dictionary of additional parameters that will be passed through to the compiler within all \u201cvisit\u201d methods. This allows any custom flag to be passed through to a custom compilation construct, for example. It is also used for the case of passing the `literal_binds` flag through:\n    \n    from sqlalchemy.sql import table, column, select\n    \n    t \\= table('t', column('x'))\n    \n    s \\= select(t).where(t.c.x \\== 5)\n    \n    print(s.compile(compile\\_kwargs\\={\"literal\\_binds\": True}))\n    \n\nSee also\n\nfaq\\_sql\\_expression\\_string\n\ncorrelate(_\\*fromclauses: Union\\[Literal\\[None, False\\], \\_FromClauseArgument\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.correlate \"Permalink to this definition\")\n\nReturn a new `_expression.Select` which will correlate the given FROM clauses to that of an enclosing `_expression.Select`.\n\nCalling this method turns off the `_expression.Select` object\u2019s default behavior of \u201cauto-correlation\u201d. Normally, FROM elements which appear in a `_expression.Select` that encloses this one via its WHERE clause, ORDER BY, HAVING or columns clause will be omitted from this `_expression.Select` object\u2019s FROM clause. Setting an explicit correlation collection using the `_expression.Select.correlate()` method provides a fixed list of FROM objects that can potentially take place in this process.\n\nWhen `_expression.Select.correlate()` is used to apply specific FROM clauses for correlation, the FROM elements become candidates for correlation regardless of how deeply nested this `_expression.Select` object is, relative to an enclosing `_expression.Select` which refers to the same FROM object. This is in contrast to the behavior of \u201cauto-correlation\u201d which only correlates to an immediate enclosing `_expression.Select`. Multi-level correlation ensures that the link between enclosed and enclosing `_expression.Select` is always via at least one WHERE/ORDER BY/HAVING/columns clause in order for correlation to take place.\n\nIf `None` is passed, the `_expression.Select` object will correlate none of its FROM entries, and all will render unconditionally in the local FROM clause.\n\nParameters\n\n**\\*fromclauses** \u2013 one or more `FromClause` or other FROM-compatible construct such as an ORM mapped entity to become part of the correlate collection; alternatively pass a single value `None` to remove all existing correlations.\n\nSee also\n\n`_expression.Select.correlate_except()`\n\ntutorial\\_scalar\\_subquery\n\ncorrelate\\_except(_\\*fromclauses: Union\\[Literal\\[None, False\\], \\_FromClauseArgument\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.correlate_except \"Permalink to this definition\")\n\nReturn a new `_expression.Select` which will omit the given FROM clauses from the auto-correlation process.\n\nCalling `_expression.Select.correlate_except()` turns off the `_expression.Select` object\u2019s default behavior of \u201cauto-correlation\u201d for the given FROM elements. An element specified here will unconditionally appear in the FROM list, while all other FROM elements remain subject to normal auto-correlation behaviors.\n\nIf `None` is passed, or no arguments are passed, the `_expression.Select` object will correlate all of its FROM entries.\n\nParameters\n\n**\\*fromclauses** \u2013 a list of one or more `_expression.FromClause` constructs, or other compatible constructs (i.e. ORM-mapped classes) to become part of the correlate-exception collection.\n\nSee also\n\n`_expression.Select.correlate()`\n\ntutorial\\_scalar\\_subquery\n\ncorresponding\\_column(_column: KeyedColumnElement\\[Any\\]_, _require\\_embedded: bool \\= False_) \u2192 Optional\\[KeyedColumnElement\\[Any\\]\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.corresponding_column \"Permalink to this definition\")\n\nGiven a `_expression.ColumnElement`, return the exported `_expression.ColumnElement` object from the `_expression.Selectable.exported_columns` collection of this `_expression.Selectable` which corresponds to that original `_expression.ColumnElement` via a common ancestor column.\n\nParameters\n\n*   **column** \u2013 the target `_expression.ColumnElement` to be matched.\n    \n*   **require\\_embedded** \u2013 only return corresponding columns for the given `_expression.ColumnElement`, if the given `_expression.ColumnElement` is actually present within a sub-element of this `_expression.Selectable`. Normally the column will match if it merely shares a common ancestor with one of the exported columns of this `_expression.Selectable`.\n    \n\nSee also\n\n`_expression.Selectable.exported_columns` - the `_expression.ColumnCollection` that is used for the operation.\n\n`_expression.ColumnCollection.corresponding_column()` - implementation method.\n\ncte(_name: Optional\\[str\\] \\= None_, _recursive: bool \\= False_, _nesting: bool \\= False_) \u2192 CTE[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.cte \"Permalink to this definition\")\n\nReturn a new `_expression.CTE`, or Common Table Expression instance.\n\nCommon table expressions are a SQL standard whereby SELECT statements can draw upon secondary statements specified along with the primary statement, using a clause called \u201cWITH\u201d. Special semantics regarding UNION can also be employed to allow \u201crecursive\u201d queries, where a SELECT statement can draw upon the set of rows that have previously been selected.\n\nCTEs can also be applied to DML constructs UPDATE, INSERT and DELETE on some databases, both as a source of CTE rows when combined with RETURNING, as well as a consumer of CTE rows.\n\nSQLAlchemy detects `_expression.CTE` objects, which are treated similarly to `_expression.Alias` objects, as special elements to be delivered to the FROM clause of the statement as well as to a WITH clause at the top of the statement.\n\nFor special prefixes such as PostgreSQL \u201cMATERIALIZED\u201d and \u201cNOT MATERIALIZED\u201d, the `_expression.CTE.prefix_with()` method may be used to establish these.\n\nChanged in version 1.3.13: Added support for prefixes. In particular - MATERIALIZED and NOT MATERIALIZED.\n\nParameters\n\n*   **name** \u2013 name given to the common table expression. Like `_expression.FromClause.alias()`, the name can be left as `None` in which case an anonymous symbol will be used at query compile time.\n    \n*   **recursive** \u2013 if `True`, will render `WITH RECURSIVE`. A recursive common table expression is intended to be used in conjunction with UNION ALL in order to derive rows from those already selected.\n    \n*   **nesting** \u2013\n    \n    if `True`, will render the CTE locally to the statement in which it is referenced. For more complex scenarios, the `HasCTE.add_cte()` method using the [:paramref:\\`.HasCTE.add\\_cte.nest\\_here\\`](#id7) parameter may also be used to more carefully control the exact placement of a particular CTE.\n    \n    New in version 1.4.24.\n    \n    See also\n    \n    `HasCTE.add_cte()`\n    \n\nThe following examples include two from PostgreSQL\u2019s documentation at [https://www.postgresql.org/docs/current/static/queries-with.html](https://www.postgresql.org/docs/current/static/queries-with.html), as well as additional examples.\n\nExample 1, non recursive:\n\nfrom sqlalchemy import (Table, Column, String, Integer,\n                        MetaData, select, func)\n\nmetadata \\= MetaData()\n\norders \\= Table('orders', metadata,\n    Column('region', String),\n    Column('amount', Integer),\n    Column('product', String),\n    Column('quantity', Integer)\n)\n\nregional\\_sales \\= select(\n                    orders.c.region,\n                    func.sum(orders.c.amount).label('total\\_sales')\n                ).group\\_by(orders.c.region).cte(\"regional\\_sales\")\n\ntop\\_regions \\= select(regional\\_sales.c.region).\\\\\n        where(\n            regional\\_sales.c.total\\_sales \\>\n            select(\n                func.sum(regional\\_sales.c.total\\_sales) / 10\n            )\n        ).cte(\"top\\_regions\")\n\nstatement \\= select(\n            orders.c.region,\n            orders.c.product,\n            func.sum(orders.c.quantity).label(\"product\\_units\"),\n            func.sum(orders.c.amount).label(\"product\\_sales\")\n    ).where(orders.c.region.in\\_(\n        select(top\\_regions.c.region)\n    )).group\\_by(orders.c.region, orders.c.product)\n\nresult \\= conn.execute(statement).fetchall()\n\nExample 2, WITH RECURSIVE:\n\nfrom sqlalchemy import (Table, Column, String, Integer,\n                        MetaData, select, func)\n\nmetadata \\= MetaData()\n\nparts \\= Table('parts', metadata,\n    Column('part', String),\n    Column('sub\\_part', String),\n    Column('quantity', Integer),\n)\n\nincluded\\_parts \\= select(\\\\\n    parts.c.sub\\_part, parts.c.part, parts.c.quantity\\\\\n    ).\\\\\n    where(parts.c.part\\=='our part').\\\\\n    cte(recursive\\=True)\n\nincl\\_alias \\= included\\_parts.alias()\nparts\\_alias \\= parts.alias()\nincluded\\_parts \\= included\\_parts.union\\_all(\n    select(\n        parts\\_alias.c.sub\\_part,\n        parts\\_alias.c.part,\n        parts\\_alias.c.quantity\n    ).\\\\\n    where(parts\\_alias.c.part\\==incl\\_alias.c.sub\\_part)\n)\n\nstatement \\= select(\n            included\\_parts.c.sub\\_part,\n            func.sum(included\\_parts.c.quantity).\n              label('total\\_quantity')\n        ).\\\\\n        group\\_by(included\\_parts.c.sub\\_part)\n\nresult \\= conn.execute(statement).fetchall()\n\nExample 3, an upsert using UPDATE and INSERT with CTEs:\n\nfrom datetime import date\nfrom sqlalchemy import (MetaData, Table, Column, Integer,\n                        Date, select, literal, and\\_, exists)\n\nmetadata \\= MetaData()\n\nvisitors \\= Table('visitors', metadata,\n    Column('product\\_id', Integer, primary\\_key\\=True),\n    Column('date', Date, primary\\_key\\=True),\n    Column('count', Integer),\n)\n\n\\# add 5 visitors for the product\\_id == 1\nproduct\\_id \\= 1\nday \\= date.today()\ncount \\= 5\n\nupdate\\_cte \\= (\n    visitors.update()\n    .where(and\\_(visitors.c.product\\_id \\== product\\_id,\n                visitors.c.date \\== day))\n    .values(count\\=visitors.c.count + count)\n    .returning(literal(1))\n    .cte('update\\_cte')\n)\n\nupsert \\= visitors.insert().from\\_select(\n    \\[visitors.c.product\\_id, visitors.c.date, visitors.c.count\\],\n    select(literal(product\\_id), literal(day), literal(count))\n        .where(~exists(update\\_cte.select()))\n)\n\nconnection.execute(upsert)\n\nExample 4, Nesting CTE (SQLAlchemy 1.4.24 and above):\n\nvalue\\_a \\= select(\n    literal(\"root\").label(\"n\")\n).cte(\"value\\_a\")\n\n\\# A nested CTE with the same name as the root one\nvalue\\_a\\_nested \\= select(\n    literal(\"nesting\").label(\"n\")\n).cte(\"value\\_a\", nesting\\=True)\n\n\\# Nesting CTEs takes ascendency locally\n\\# over the CTEs at a higher level\nvalue\\_b \\= select(value\\_a\\_nested.c.n).cte(\"value\\_b\")\n\nvalue\\_ab \\= select(value\\_a.c.n.label(\"a\"), value\\_b.c.n.label(\"b\"))\n\nThe above query will render the second CTE nested inside the first, shown with inline parameters below as:\n\nWITH\n    value\\_a AS\n        (SELECT 'root' AS n),\n    value\\_b AS\n        (WITH value\\_a AS\n            (SELECT 'nesting' AS n)\n        SELECT value\\_a.n AS n FROM value\\_a)\nSELECT value\\_a.n AS a, value\\_b.n AS b\nFROM value\\_a, value\\_b\n\nThe same CTE can be set up using the `HasCTE.add_cte()` method as follows (SQLAlchemy 2.0 and above):\n\nvalue\\_a \\= select(\n    literal(\"root\").label(\"n\")\n).cte(\"value\\_a\")\n\n\\# A nested CTE with the same name as the root one\nvalue\\_a\\_nested \\= select(\n    literal(\"nesting\").label(\"n\")\n).cte(\"value\\_a\")\n\n\\# Nesting CTEs takes ascendency locally\n\\# over the CTEs at a higher level\nvalue\\_b \\= (\n    select(value\\_a\\_nested.c.n).\n    add\\_cte(value\\_a\\_nested, nest\\_here\\=True).\n    cte(\"value\\_b\")\n)\n\nvalue\\_ab \\= select(value\\_a.c.n.label(\"a\"), value\\_b.c.n.label(\"b\"))\n\nExample 5, Non-Linear CTE (SQLAlchemy 1.4.28 and above):\n\nedge \\= Table(\n    \"edge\",\n    metadata,\n    Column(\"id\", Integer, primary\\_key\\=True),\n    Column(\"left\", Integer),\n    Column(\"right\", Integer),\n)\n\nroot\\_node \\= select(literal(1).label(\"node\")).cte(\n    \"nodes\", recursive\\=True\n)\n\nleft\\_edge \\= select(edge.c.left).join(\n    root\\_node, edge.c.right \\== root\\_node.c.node\n)\nright\\_edge \\= select(edge.c.right).join(\n    root\\_node, edge.c.left \\== root\\_node.c.node\n)\n\nsubgraph\\_cte \\= root\\_node.union(left\\_edge, right\\_edge)\n\nsubgraph \\= select(subgraph\\_cte)\n\nThe above query will render 2 UNIONs inside the recursive CTE:\n\nWITH RECURSIVE nodes(node) AS (\n        SELECT 1 AS node\n    UNION\n        SELECT edge.\"left\" AS \"left\"\n        FROM edge JOIN nodes ON edge.\"right\" \\= nodes.node\n    UNION\n        SELECT edge.\"right\" AS \"right\"\n        FROM edge JOIN nodes ON edge.\"left\" \\= nodes.node\n)\nSELECT nodes.node FROM nodes\n\nSee also\n\n`_orm.Query.cte()` - ORM version of `_expression.HasCTE.cte()`.\n\ndistinct(_\\*expr: \\_ColumnExpressionArgument\\[Any\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.distinct \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct which will apply DISTINCT to its columns clause.\n\nParameters\n\n**\\*expr** \u2013\n\noptional column expressions. When present, the PostgreSQL dialect will render a `DISTINCT ON (<expressions>>)` construct.\n\nDeprecated since version 1.4: Using \\*expr in other dialects is deprecated and will raise `_exc.CompileError` in a future version.\n\nexcept\\_(_\\*other: \\_SelectStatementForCompoundArgument_) \u2192 CompoundSelect[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.except_ \"Permalink to this definition\")\n\nReturn a SQL `EXCEPT` of this select() construct against the given selectable provided as positional arguments.\n\nParameters\n\n**\\*other** \u2013\n\none or more elements with which to create a UNION.\n\nChanged in version 1.4.28: multiple elements are now accepted.\n\nexcept\\_all(_\\*other: \\_SelectStatementForCompoundArgument_) \u2192 CompoundSelect[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.except_all \"Permalink to this definition\")\n\nReturn a SQL `EXCEPT ALL` of this select() construct against the given selectables provided as positional arguments.\n\nParameters\n\n**\\*other** \u2013\n\none or more elements with which to create a UNION.\n\nChanged in version 1.4.28: multiple elements are now accepted.\n\nexecution\\_options(_\\*\\*kw: Any_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.execution_options \"Permalink to this definition\")\n\nSet non-SQL options for the statement which take effect during execution.\n\nExecution options can be set at many scopes, including per-statement, per-connection, or per execution, using methods such as `_engine.Connection.execution_options()` and parameters which accept a dictionary of options such as [:paramref:\\`\\_engine.Connection.execute.execution\\_options\\`](#id9) and [:paramref:\\`\\_orm.Session.execute.execution\\_options\\`](#id11).\n\nThe primary characteristic of an execution option, as opposed to other kinds of options such as ORM loader options, is that **execution options never affect the compiled SQL of a query, only things that affect how the SQL statement itself is invoked or how results are fetched**. That is, execution options are not part of what\u2019s accommodated by SQL compilation nor are they considered part of the cached state of a statement.\n\nThe `_sql.Executable.execution_options()` method is generative, as is the case for the method as applied to the `_engine.Engine` and `_orm.Query` objects, which means when the method is called, a copy of the object is returned, which applies the given parameters to that new copy, but leaves the original unchanged:\n\nstatement \\= select(table.c.x, table.c.y)\nnew\\_statement \\= statement.execution\\_options(my\\_option\\=True)\n\nAn exception to this behavior is the `_engine.Connection` object, where the `_engine.Connection.execution_options()` method is explicitly **not** generative.\n\nThe kinds of options that may be passed to `_sql.Executable.execution_options()` and other related methods and parameter dictionaries include parameters that are explicitly consumed by SQLAlchemy Core or ORM, as well as arbitrary keyword arguments not defined by SQLAlchemy, which means the methods and/or parameter dictionaries may be used for user-defined parameters that interact with custom code, which may access the parameters using methods such as `_sql.Executable.get_execution_options()` and `_engine.Connection.get_execution_options()`, or within selected event hooks using a dedicated `execution_options` event parameter such as [:paramref:\\`\\_events.ConnectionEvents.before\\_execute.execution\\_options\\`](#id13) or `_orm.ORMExecuteState.execution_options`, e.g.:\n\nfrom sqlalchemy import event\n\n@event.listens\\_for(some\\_engine, \"before\\_execute\")\ndef \\_process\\_opt(conn, statement, multiparams, params, execution\\_options):\n    \"run a SQL function before invoking a statement\"\n\n    if execution\\_options.get(\"do\\_special\\_thing\", False):\n        conn.exec\\_driver\\_sql(\"run\\_special\\_function()\")\n\nWithin the scope of options that are explicitly recognized by SQLAlchemy, most apply to specific classes of objects and not others. The most common execution options include:\n\n*   [:paramref:\\`\\_engine.Connection.execution\\_options.isolation\\_level\\`](#id15) - sets the isolation level for a connection or a class of connections via an `_engine.Engine`. This option is accepted only by `_engine.Connection` or `_engine.Engine`.\n    \n*   [:paramref:\\`\\_engine.Connection.execution\\_options.stream\\_results\\`](#id17) - indicates results should be fetched using a server side cursor; this option is accepted by `_engine.Connection`, by the [:paramref:\\`\\_engine.Connection.execute.execution\\_options\\`](#id19) parameter on `_engine.Connection.execute()`, and additionally by `_sql.Executable.execution_options()` on a SQL statement object, as well as by ORM constructs like `_orm.Session.execute()`.\n    \n*   [:paramref:\\`\\_engine.Connection.execution\\_options.compiled\\_cache\\`](#id21) - indicates a dictionary that will serve as the SQL compilation cache for a `_engine.Connection` or `_engine.Engine`, as well as for ORM methods like `_orm.Session.execute()`. Can be passed as `None` to disable caching for statements. This option is not accepted by `_sql.Executable.execution_options()` as it is inadvisable to carry along a compilation cache within a statement object.\n    \n*   [:paramref:\\`\\_engine.Connection.execution\\_options.schema\\_translate\\_map\\`](#id23) - a mapping of schema names used by the Schema Translate Map feature, accepted by `_engine.Connection`, `_engine.Engine`, `_sql.Executable`, as well as by ORM constructs like `_orm.Session.execute()`.\n    \n\nSee also\n\n`_engine.Connection.execution_options()`\n\n[:paramref:\\`\\_engine.Connection.execute.execution\\_options\\`](#id25)\n\n[:paramref:\\`\\_orm.Session.execute.execution\\_options\\`](#id27)\n\norm\\_queryguide\\_execution\\_options - documentation on all ORM-specific execution options\n\nexists() \u2192 Exists[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.exists \"Permalink to this definition\")\n\nReturn an `_sql.Exists` representation of this selectable, which can be used as a column expression.\n\nThe returned object is an instance of `_sql.Exists`.\n\nSee also\n\n`_sql.exists()`\n\ntutorial\\_exists - in the 2.0 style tutorial.\n\nNew in version 1.4.\n\n_property_ exported\\_columns_: ReadOnlyColumnCollection\\[str, ColumnElement\\[Any\\]\\]_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.exported_columns \"Permalink to this definition\")\n\nA `_expression.ColumnCollection` that represents the \u201cexported\u201d columns of this `_expression.Selectable`, not including `_sql.TextClause` constructs.\n\nThe \u201cexported\u201d columns for a `_expression.SelectBase` object are synonymous with the `_expression.SelectBase.selected_columns` collection.\n\nNew in version 1.4.\n\nSee also\n\n`_expression.Select.exported_columns`\n\n`_expression.Selectable.exported_columns`\n\n`_expression.FromClause.exported_columns`\n\nfetch(_count: \\_LimitOffsetType_, _with\\_ties: bool \\= False_, _percent: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.fetch \"Permalink to this definition\")\n\nReturn a new selectable with the given FETCH FIRST criterion applied.\n\nThis is a numeric value which usually renders as `FETCH {FIRST | NEXT} [ count ] {ROW | ROWS} {ONLY | WITH TIES}` expression in the resulting select. This functionality is is currently implemented for Oracle, PostgreSQL, MSSQL.\n\nUse `_sql.GenerativeSelect.offset()` to specify the offset.\n\nNote\n\nThe `_sql.GenerativeSelect.fetch()` method will replace any clause applied with `_sql.GenerativeSelect.limit()`.\n\nNew in version 1.4.\n\nParameters\n\n*   **count** \u2013 an integer COUNT parameter, or a SQL expression that provides an integer result. When `percent=True` this will represent the percentage of rows to return, not the absolute value. Pass `None` to reset it.\n    \n*   **with\\_ties** \u2013 When `True`, the WITH TIES option is used to return any additional rows that tie for the last place in the result set according to the `ORDER BY` clause. The `ORDER BY` may be mandatory in this case. Defaults to `False`\n    \n*   **percent** \u2013 When `True`, `count` represents the percentage of the total number of selected rows to return. Defaults to `False`\n    \n\nSee also\n\n`_sql.GenerativeSelect.limit()`\n\n`_sql.GenerativeSelect.offset()`\n\nfilter(_\\*criteria: \\_ColumnExpressionArgument\\[bool\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.filter \"Permalink to this definition\")\n\nA synonym for the `_sql.Select.where()` method.\n\nfilter\\_by(_\\*\\*kwargs: Any_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.filter_by \"Permalink to this definition\")\n\napply the given filtering criterion as a WHERE clause to this select.\n\nfrom\\_statement(_statement: ReturnsRowsRole_) \u2192 ExecutableReturnsRows[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.from_statement \"Permalink to this definition\")\n\nApply the columns which this [`Select`](#llama_index.vector_stores.PGVectorStore.Select \"llama_index.vector_stores.PGVectorStore.Select\") would select onto another statement.\n\nThis operation is plugin-specific and will raise a not supported exception if this `_sql.Select` does not select from plugin-enabled entities.\n\nThe statement is typically either a `_expression.text()` or `_expression.select()` construct, and should return the set of columns appropriate to the entities represented by this [`Select`](#llama_index.vector_stores.PGVectorStore.Select \"llama_index.vector_stores.PGVectorStore.Select\").\n\nSee also\n\norm\\_queryguide\\_selecting\\_text - usage examples in the ORM Querying Guide\n\n_property_ froms_: Sequence\\[FromClause\\]_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.froms \"Permalink to this definition\")\n\nReturn the displayed list of `_expression.FromClause` elements.\n\nDeprecated since version 1.4.23: The `_expression.Select.froms` attribute is moved to the `_expression.Select.get_final_froms()` method.\n\nget\\_children(_\\*\\*kw: Any_) \u2192 Iterable\\[ClauseElement\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.get_children \"Permalink to this definition\")\n\nReturn immediate child `visitors.HasTraverseInternals` elements of this `visitors.HasTraverseInternals`.\n\nThis is used for visit traversal.\n\n\\*\\*kw may contain flags that change the collection that is returned, for example to return a subset of items in order to cut down on larger traversals, or to return child items from a different context (such as schema-level collections instead of clause-level).\n\nget\\_execution\\_options() \u2192 \\_ExecuteOptions[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.get_execution_options \"Permalink to this definition\")\n\nGet the non-SQL options which will take effect during execution.\n\nNew in version 1.3.\n\nSee also\n\n`Executable.execution_options()`\n\nget\\_final\\_froms() \u2192 Sequence\\[FromClause\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.get_final_froms \"Permalink to this definition\")\n\nCompute the final displayed list of `_expression.FromClause` elements.\n\nThis method will run through the full computation required to determine what FROM elements will be displayed in the resulting SELECT statement, including shadowing individual tables with JOIN objects, as well as full computation for ORM use cases including eager loading clauses.\n\nFor ORM use, this accessor returns the **post compilation** list of FROM objects; this collection will include elements such as eagerly loaded tables and joins. The objects will **not** be ORM enabled and not work as a replacement for the `_sql.Select.select_froms()` collection; additionally, the method is not well performing for an ORM enabled statement as it will incur the full ORM construction process.\n\nTo retrieve the FROM list that\u2019s implied by the \u201ccolumns\u201d collection passed to the `_sql.Select` originally, use the `_sql.Select.columns_clause_froms` accessor.\n\nTo select from an alternative set of columns while maintaining the FROM list, use the `_sql.Select.with_only_columns()` method and pass the [:paramref:\\`\\_sql.Select.with\\_only\\_columns.maintain\\_column\\_froms\\`](#id29) parameter.\n\nNew in version 1.4.23: \\- the `_sql.Select.get_final_froms()` method replaces the previous `_sql.Select.froms` accessor, which is deprecated.\n\nSee also\n\n`_sql.Select.columns_clause_froms`\n\nget\\_label\\_style() \u2192 SelectLabelStyle[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.get_label_style \"Permalink to this definition\")\n\nRetrieve the current label style.\n\nNew in version 1.4.\n\ngroup\\_by(_\\_GenerativeSelect\\_\\_first: Union\\[Literal\\[None, \\_NoArg.NO\\_ARG\\], \\_ColumnExpressionOrStrLabelArgument\\[Any\\]\\] \\= \\_NoArg.NO\\_ARG_, _\\*clauses: \\_ColumnExpressionOrStrLabelArgument\\[Any\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.group_by \"Permalink to this definition\")\n\nReturn a new selectable with the given list of GROUP BY criterion applied.\n\nAll existing GROUP BY settings can be suppressed by passing `None`.\n\ne.g.:\n\nstmt \\= select(table.c.name, func.max(table.c.stat)).\\\\\ngroup\\_by(table.c.name)\n\nParameters\n\n**\\*clauses** \u2013 a series of `_expression.ColumnElement` constructs which will be used to generate an GROUP BY clause.\n\nSee also\n\ntutorial\\_group\\_by\\_w\\_aggregates - in the unified\\_tutorial\n\ntutorial\\_order\\_by\\_label - in the unified\\_tutorial\n\nhaving(_\\*having: \\_ColumnExpressionArgument\\[bool\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.having \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with the given expression added to its HAVING clause, joined to the existing clause via AND, if any.\n\ninherit\\_cache_: Optional\\[bool\\]_ _\\= None_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.inherit_cache \"Permalink to this definition\")\n\nIndicate if this `HasCacheKey` instance should make use of the cache key generation scheme used by its immediate superclass.\n\nThe attribute defaults to `None`, which indicates that a construct has not yet taken into account whether or not its appropriate for it to participate in caching; this is functionally equivalent to setting the value to `False`, except that a warning is also emitted.\n\nThis flag can be set to `True` on a particular class, if the SQL that corresponds to the object does not change based on attributes which are local to this class, and not its superclass.\n\nSee also\n\ncompilerext\\_caching - General guideslines for setting the `HasCacheKey.inherit_cache` attribute for third-party or user defined SQL constructs.\n\n_property_ inner\\_columns_: \\_SelectIterable_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.inner_columns \"Permalink to this definition\")\n\nAn iterator of all `_expression.ColumnElement` expressions which would be rendered into the columns clause of the resulting SELECT statement.\n\nThis method is legacy as of 1.4 and is superseded by the `_expression.Select.exported_columns` collection.\n\nintersect(_\\*other: \\_SelectStatementForCompoundArgument_) \u2192 CompoundSelect[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.intersect \"Permalink to this definition\")\n\nReturn a SQL `INTERSECT` of this select() construct against the given selectables provided as positional arguments.\n\nParameters\n\n*   **\\*other** \u2013\n    \n    one or more elements with which to create a UNION.\n    \n    Changed in version 1.4.28: multiple elements are now accepted.\n    \n*   **\\*\\*kwargs** \u2013 keyword arguments are forwarded to the constructor for the newly created `_sql.CompoundSelect` object.\n    \n\nintersect\\_all(_\\*other: \\_SelectStatementForCompoundArgument_) \u2192 CompoundSelect[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.intersect_all \"Permalink to this definition\")\n\nReturn a SQL `INTERSECT ALL` of this select() construct against the given selectables provided as positional arguments.\n\nParameters\n\n*   **\\*other** \u2013\n    \n    one or more elements with which to create a UNION.\n    \n    Changed in version 1.4.28: multiple elements are now accepted.\n    \n*   **\\*\\*kwargs** \u2013 keyword arguments are forwarded to the constructor for the newly created `_sql.CompoundSelect` object.\n    \n\nis\\_derived\\_from(_fromclause: Optional\\[FromClause\\]_) \u2192 bool[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.is_derived_from \"Permalink to this definition\")\n\nReturn `True` if this `ReturnsRows` is \u2018derived\u2019 from the given `FromClause`.\n\nAn example would be an Alias of a Table is derived from that Table.\n\njoin(_target: \\_JoinTargetArgument_, _onclause: Optional\\[\\_OnClauseArgument\\] \\= None_, _\\*_, _isouter: bool \\= False_, _full: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.join \"Permalink to this definition\")\n\nCreate a SQL JOIN against this `_expression.Select` object\u2019s criterion and apply generatively, returning the newly resulting `_expression.Select`.\n\nE.g.:\n\nstmt \\= select(user\\_table).join(address\\_table, user\\_table.c.id \\== address\\_table.c.user\\_id)\n\nThe above statement generates SQL similar to:\n\nSELECT user.id, user.name FROM user JOIN address ON user.id \\= address.user\\_id\n\nChanged in version 1.4: `_expression.Select.join()` now creates a `_sql.Join` object between a `_sql.FromClause` source that is within the FROM clause of the existing SELECT, and a given target `_sql.FromClause`, and then adds this `_sql.Join` to the FROM clause of the newly generated SELECT statement. This is completely reworked from the behavior in 1.3, which would instead create a subquery of the entire `_expression.Select` and then join that subquery to the target.\n\nThis is a **backwards incompatible change** as the previous behavior was mostly useless, producing an unnamed subquery rejected by most databases in any case. The new behavior is modeled after that of the very successful `_orm.Query.join()` method in the ORM, in order to support the functionality of `_orm.Query` being available by using a `_sql.Select` object with an `_orm.Session`.\n\nSee the notes for this change at change\\_select\\_join.\n\nParameters\n\n*   **target** \u2013 target table to join towards\n    \n*   **onclause** \u2013 ON clause of the join. If omitted, an ON clause is generated automatically based on the `_schema.ForeignKey` linkages between the two tables, if one can be unambiguously determined, otherwise an error is raised.\n    \n*   **isouter** \u2013 if True, generate LEFT OUTER join. Same as `_expression.Select.outerjoin()`.\n    \n*   **full** \u2013 if True, generate FULL OUTER join.\n    \n\nSee also\n\ntutorial\\_select\\_join - in the /tutorial/index\n\norm\\_queryguide\\_joins - in the queryguide\\_toplevel\n\n`_expression.Select.join_from()`\n\n`_expression.Select.outerjoin()`\n\njoin\\_from(_from\\_: \\_FromClauseArgument_, _target: \\_JoinTargetArgument_, _onclause: Optional\\[\\_OnClauseArgument\\] \\= None_, _\\*_, _isouter: bool \\= False_, _full: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.join_from \"Permalink to this definition\")\n\nCreate a SQL JOIN against this `_expression.Select` object\u2019s criterion and apply generatively, returning the newly resulting `_expression.Select`.\n\nE.g.:\n\nstmt \\= select(user\\_table, address\\_table).join\\_from(\n    user\\_table, address\\_table, user\\_table.c.id \\== address\\_table.c.user\\_id\n)\n\nThe above statement generates SQL similar to:\n\nSELECT user.id, user.name, address.id, address.email, address.user\\_id\nFROM user JOIN address ON user.id \\= address.user\\_id\n\nNew in version 1.4.\n\nParameters\n\n*   **from\\_** \u2013 the left side of the join, will be rendered in the FROM clause and is roughly equivalent to using the [`Select.select_from()`](#llama_index.vector_stores.PGVectorStore.Select.select_from \"llama_index.vector_stores.PGVectorStore.Select.select_from\") method.\n    \n*   **target** \u2013 target table to join towards\n    \n*   **onclause** \u2013 ON clause of the join.\n    \n*   **isouter** \u2013 if True, generate LEFT OUTER join. Same as `_expression.Select.outerjoin()`.\n    \n*   **full** \u2013 if True, generate FULL OUTER join.\n    \n\nSee also\n\ntutorial\\_select\\_join - in the /tutorial/index\n\norm\\_queryguide\\_joins - in the queryguide\\_toplevel\n\n`_expression.Select.join()`\n\nlabel(_name: Optional\\[str\\]_) \u2192 Label\\[Any\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.label \"Permalink to this definition\")\n\nReturn a \u2018scalar\u2019 representation of this selectable, embedded as a subquery with a label.\n\nSee also\n\n`_expression.SelectBase.scalar_subquery()`.\n\nlateral(_name: Optional\\[str\\] \\= None_) \u2192 LateralFromClause[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.lateral \"Permalink to this definition\")\n\nReturn a LATERAL alias of this `_expression.Selectable`.\n\nThe return value is the `_expression.Lateral` construct also provided by the top-level `_expression.lateral()` function.\n\nSee also\n\ntutorial\\_lateral\\_correlation - overview of usage.\n\nlimit(_limit: \\_LimitOffsetType_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.limit \"Permalink to this definition\")\n\nReturn a new selectable with the given LIMIT criterion applied.\n\nThis is a numerical value which usually renders as a `LIMIT` expression in the resulting select. Backends that don\u2019t support `LIMIT` will attempt to provide similar functionality.\n\nNote\n\nThe `_sql.GenerativeSelect.limit()` method will replace any clause applied with `_sql.GenerativeSelect.fetch()`.\n\nParameters\n\n**limit** \u2013 an integer LIMIT parameter, or a SQL expression that provides an integer result. Pass `None` to reset it.\n\nSee also\n\n`_sql.GenerativeSelect.fetch()`\n\n`_sql.GenerativeSelect.offset()`\n\noffset(_offset: \\_LimitOffsetType_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.offset \"Permalink to this definition\")\n\nReturn a new selectable with the given OFFSET criterion applied.\n\nThis is a numeric value which usually renders as an `OFFSET` expression in the resulting select. Backends that don\u2019t support `OFFSET` will attempt to provide similar functionality.\n\nParameters\n\n**offset** \u2013 an integer OFFSET parameter, or a SQL expression that provides an integer result. Pass `None` to reset it.\n\nSee also\n\n`_sql.GenerativeSelect.limit()`\n\n`_sql.GenerativeSelect.fetch()`\n\noptions(_\\*options: ExecutableOption_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.options \"Permalink to this definition\")\n\nApply options to this statement.\n\nIn the general sense, options are any kind of Python object that can be interpreted by the SQL compiler for the statement. These options can be consumed by specific dialects or specific kinds of compilers.\n\nThe most commonly known kind of option are the ORM level options that apply \u201ceager load\u201d and other loading behaviors to an ORM query. However, options can theoretically be used for many other purposes.\n\nFor background on specific kinds of options for specific kinds of statements, refer to the documentation for those option objects.\n\nChanged in version 1.4: \\- added `Executable.options()` to Core statement objects towards the goal of allowing unified Core / ORM querying capabilities.\n\nSee also\n\nloading\\_columns - refers to options specific to the usage of ORM queries\n\nrelationship\\_loader\\_options - refers to options specific to the usage of ORM queries\n\norder\\_by(_\\_GenerativeSelect\\_\\_first: Union\\[Literal\\[None, \\_NoArg.NO\\_ARG\\], \\_ColumnExpressionOrStrLabelArgument\\[Any\\]\\] \\= \\_NoArg.NO\\_ARG_, _\\*clauses: \\_ColumnExpressionOrStrLabelArgument\\[Any\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.order_by \"Permalink to this definition\")\n\nReturn a new selectable with the given list of ORDER BY criteria applied.\n\ne.g.:\n\nstmt \\= select(table).order\\_by(table.c.id, table.c.name)\n\nCalling this method multiple times is equivalent to calling it once with all the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing `None` by itself. New ORDER BY criteria may then be added by invoking `_orm.Query.order_by()` again, e.g.:\n\n\\# will erase all ORDER BY and ORDER BY new\\_col alone\nstmt \\= stmt.order\\_by(None).order\\_by(new\\_col)\n\nParameters\n\n**\\*clauses** \u2013 a series of `_expression.ColumnElement` constructs which will be used to generate an ORDER BY clause.\n\nSee also\n\ntutorial\\_order\\_by - in the unified\\_tutorial\n\ntutorial\\_order\\_by\\_label - in the unified\\_tutorial\n\nouterjoin(_target: \\_JoinTargetArgument_, _onclause: Optional\\[\\_OnClauseArgument\\] \\= None_, _\\*_, _full: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.outerjoin \"Permalink to this definition\")\n\nCreate a left outer join.\n\nParameters are the same as that of `_expression.Select.join()`.\n\nChanged in version 1.4: `_expression.Select.outerjoin()` now creates a `_sql.Join` object between a `_sql.FromClause` source that is within the FROM clause of the existing SELECT, and a given target `_sql.FromClause`, and then adds this `_sql.Join` to the FROM clause of the newly generated SELECT statement. This is completely reworked from the behavior in 1.3, which would instead create a subquery of the entire `_expression.Select` and then join that subquery to the target.\n\nThis is a **backwards incompatible change** as the previous behavior was mostly useless, producing an unnamed subquery rejected by most databases in any case. The new behavior is modeled after that of the very successful `_orm.Query.join()` method in the ORM, in order to support the functionality of `_orm.Query` being available by using a `_sql.Select` object with an `_orm.Session`.\n\nSee the notes for this change at change\\_select\\_join.\n\nSee also\n\ntutorial\\_select\\_join - in the /tutorial/index\n\norm\\_queryguide\\_joins - in the queryguide\\_toplevel\n\n`_expression.Select.join()`\n\nouterjoin\\_from(_from\\_: \\_FromClauseArgument_, _target: \\_JoinTargetArgument_, _onclause: Optional\\[\\_OnClauseArgument\\] \\= None_, _\\*_, _full: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.outerjoin_from \"Permalink to this definition\")\n\nCreate a SQL LEFT OUTER JOIN against this `_expression.Select` object\u2019s criterion and apply generatively, returning the newly resulting `_expression.Select`.\n\nUsage is the same as that of `_selectable.Select.join_from()`.\n\nparams(_\\_ClauseElement\\_\\_optionaldict: Optional\\[Mapping\\[str, Any\\]\\] \\= None_, _\\*\\*kwargs: Any_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.params \"Permalink to this definition\")\n\nReturn a copy with `_expression.bindparam()` elements replaced.\n\nReturns a copy of this ClauseElement with `_expression.bindparam()` elements replaced with values taken from the given dictionary:\n\n\\>>> clause \\= column('x') + bindparam('foo')\n\\>>> print(clause.compile().params)\n{'foo':None}\n\\>>> print(clause.params({'foo':7}).compile().params)\n{'foo':7}\n\nprefix\\_with(_\\*prefixes: \\_TextCoercedExpressionArgument\\[Any\\]_, _dialect: str \\= '\\*'_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.prefix_with \"Permalink to this definition\")\n\nAdd one or more expressions following the statement keyword, i.e. SELECT, INSERT, UPDATE, or DELETE. Generative.\n\nThis is used to support backend-specific prefix keywords such as those provided by MySQL.\n\nE.g.:\n\nstmt \\= table.insert().prefix\\_with(\"LOW\\_PRIORITY\", dialect\\=\"mysql\")\n\n\\# MySQL 5.7 optimizer hints\nstmt \\= select(table).prefix\\_with(\n    \"/\\*+ BKA(t1) \\*/\", dialect\\=\"mysql\")\n\nMultiple prefixes can be specified by multiple calls to `_expression.HasPrefixes.prefix_with()`.\n\nParameters\n\n*   **\\*prefixes** \u2013 textual or `_expression.ClauseElement` construct which will be rendered following the INSERT, UPDATE, or DELETE keyword.\n    \n*   **dialect** \u2013 optional string dialect name which will limit rendering of this prefix to only that dialect.\n    \n\nreduce\\_columns(_only\\_synonyms: bool \\= True_) \u2192 [Select](#llama_index.vector_stores.PGVectorStore.Select \"sqlalchemy.sql.selectable.Select\")[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.reduce_columns \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with redundantly named, equivalently-valued columns removed from the columns clause.\n\n\u201cRedundant\u201d here means two columns where one refers to the other either based on foreign key, or via a simple equality comparison in the WHERE clause of the statement. The primary purpose of this method is to automatically construct a select statement with all uniquely-named columns, without the need to use table-qualified labels as `_expression.Select.set_label_style()` does.\n\nWhen columns are omitted based on foreign key, the referred-to column is the one that\u2019s kept. When columns are omitted based on WHERE equivalence, the first column in the columns clause is the one that\u2019s kept.\n\nParameters\n\n**only\\_synonyms** \u2013 when True, limit the removal of columns to those which have the same name as the equivalent. Otherwise, all columns that are equivalent to another are removed.\n\nreplace\\_selectable(_old: FromClause_, _alias: Alias_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.replace_selectable \"Permalink to this definition\")\n\nReplace all occurrences of `_expression.FromClause` \u2018old\u2019 with the given `_expression.Alias` object, returning a copy of this `_expression.FromClause`.\n\nDeprecated since version 1.4: The `Selectable.replace_selectable()` method is deprecated, and will be removed in a future release. Similar functionality is available via the sqlalchemy.sql.visitors module.\n\nscalar\\_subquery() \u2192 ScalarSelect\\[Any\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.scalar_subquery \"Permalink to this definition\")\n\nReturn a \u2018scalar\u2019 representation of this selectable, which can be used as a column expression.\n\nThe returned object is an instance of `_sql.ScalarSelect`.\n\nTypically, a select statement which has only one column in its columns clause is eligible to be used as a scalar expression. The scalar subquery can then be used in the WHERE clause or columns clause of an enclosing SELECT.\n\nNote that the scalar subquery differentiates from the FROM-level subquery that can be produced using the `_expression.SelectBase.subquery()` method.\n\nSee also\n\ntutorial\\_scalar\\_subquery - in the 2.0 tutorial\n\nselect(_\\*arg: Any_, _\\*\\*kw: Any_) \u2192 [Select](#llama_index.vector_stores.PGVectorStore.Select \"sqlalchemy.sql.selectable.Select\")[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.select \"Permalink to this definition\")\n\nDeprecated since version 1.4: The `_expression.SelectBase.select()` method is deprecated and will be removed in a future release; this method implicitly creates a subquery that should be explicit. Please call `_expression.SelectBase.subquery()` first in order to create a subquery, which then can be selected.\n\nselect\\_from(_\\*froms: \\_FromClauseArgument_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.select_from \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with the given FROM expression(s) merged into its list of FROM objects.\n\nE.g.:\n\ntable1 \\= table('t1', column('a'))\ntable2 \\= table('t2', column('b'))\ns \\= select(table1.c.a).\\\\\n    select\\_from(\n        table1.join(table2, table1.c.a\\==table2.c.b)\n    )\n\nThe \u201cfrom\u201d list is a unique set on the identity of each element, so adding an already present `_schema.Table` or other selectable will have no effect. Passing a `_expression.Join` that refers to an already present `_schema.Table` or other selectable will have the effect of concealing the presence of that selectable as an individual element in the rendered FROM list, instead rendering it into a JOIN clause.\n\nWhile the typical purpose of `_expression.Select.select_from()` is to replace the default, derived FROM clause with a join, it can also be called with individual table elements, multiple times if desired, in the case that the FROM clause cannot be fully derived from the columns clause:\n\nselect(func.count('\\*')).select\\_from(table1)\n\nselected\\_columns[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.selected_columns \"Permalink to this definition\")\n\nA `_expression.ColumnCollection` representing the columns that this SELECT statement or similar construct returns in its result set, not including `_sql.TextClause` constructs.\n\nThis collection differs from the `_expression.FromClause.columns` collection of a `_expression.FromClause` in that the columns within this collection cannot be directly nested inside another SELECT statement; a subquery must be applied first which provides for the necessary parenthesization required by SQL.\n\nFor a `_expression.select()` construct, the collection here is exactly what would be rendered inside the \u201cSELECT\u201d statement, and the `_expression.ColumnElement` objects are directly present as they were given, e.g.:\n\ncol1 \\= column('q', Integer)\ncol2 \\= column('p', Integer)\nstmt \\= select(col1, col2)\n\nAbove, `stmt.selected_columns` would be a collection that contains the `col1` and `col2` objects directly. For a statement that is against a `_schema.Table` or other `_expression.FromClause`, the collection will use the `_expression.ColumnElement` objects that are in the `_expression.FromClause.c` collection of the from element.\n\nA use case for the `_sql.Select.selected_columns` collection is to allow the existing columns to be referenced when adding additional criteria, e.g.:\n\ndef filter\\_on\\_id(my\\_select, id):\n    return my\\_select.where(my\\_select.selected\\_columns\\['id'\\] \\== id)\n\nstmt \\= select(MyModel)\n\n\\# adds \"WHERE id=:param\" to the statement\nstmt \\= filter\\_on\\_id(stmt, 42)\n\nNote\n\nThe `_sql.Select.selected_columns` collection does not include expressions established in the columns clause using the `_sql.text()` construct; these are silently omitted from the collection. To use plain textual column expressions inside of a `_sql.Select` construct, use the `_sql.literal_column()` construct.\n\nNew in version 1.4.\n\nself\\_group(_against: Optional\\[OperatorType\\] \\= None_) \u2192 Union\\[SelectStatementGrouping, Self\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.self_group \"Permalink to this definition\")\n\nApply a \u2018grouping\u2019 to this `_expression.ClauseElement`.\n\nThis method is overridden by subclasses to return a \u201cgrouping\u201d construct, i.e. parenthesis. In particular it\u2019s used by \u201cbinary\u201d expressions to provide a grouping around themselves when placed into a larger expression, as well as by `_expression.select()` constructs when placed into the FROM clause of another `_expression.select()`. (Note that subqueries should be normally created using the `_expression.Select.alias()` method, as many platforms require nested SELECT statements to be named).\n\nAs expressions are composed together, the application of [`self_group()`](#llama_index.vector_stores.PGVectorStore.Select.self_group \"llama_index.vector_stores.PGVectorStore.Select.self_group\") is automatic - end-user code should never need to use this method directly. Note that SQLAlchemy\u2019s clause constructs take operator precedence into account - so parenthesis might not be needed, for example, in an expression like `x OR (y AND z)` - AND takes precedence over OR.\n\nThe base [`self_group()`](#llama_index.vector_stores.PGVectorStore.Select.self_group \"llama_index.vector_stores.PGVectorStore.Select.self_group\") method of `_expression.ClauseElement` just returns self.\n\nset\\_label\\_style(_style: SelectLabelStyle_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.set_label_style \"Permalink to this definition\")\n\nReturn a new selectable with the specified label style.\n\nThere are three \u201clabel styles\u201d available, `_sql.SelectLabelStyle.LABEL_STYLE_DISAMBIGUATE_ONLY`, `_sql.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`, and `_sql.SelectLabelStyle.LABEL_STYLE_NONE`. The default style is `_sql.SelectLabelStyle.LABEL_STYLE_TABLENAME_PLUS_COL`.\n\nIn modern SQLAlchemy, there is not generally a need to change the labeling style, as per-expression labels are more effectively used by making use of the `_sql.ColumnElement.label()` method. In past versions, `_sql.LABEL_STYLE_TABLENAME_PLUS_COL` was used to disambiguate same-named columns from different tables, aliases, or subqueries; the newer `_sql.LABEL_STYLE_DISAMBIGUATE_ONLY` now applies labels only to names that conflict with an existing name so that the impact of this labeling is minimal.\n\nThe rationale for disambiguation is mostly so that all column expressions are available from a given `_sql.FromClause.c` collection when a subquery is created.\n\nNew in version 1.4: \\- the `_sql.GenerativeSelect.set_label_style()` method replaces the previous combination of `.apply_labels()`, `.with_labels()` and `use_labels=True` methods and/or parameters.\n\nSee also\n\n`_sql.LABEL_STYLE_DISAMBIGUATE_ONLY`\n\n`_sql.LABEL_STYLE_TABLENAME_PLUS_COL`\n\n`_sql.LABEL_STYLE_NONE`\n\n`_sql.LABEL_STYLE_DEFAULT`\n\nslice(_start: int_, _stop: int_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.slice \"Permalink to this definition\")\n\nApply LIMIT / OFFSET to this statement based on a slice.\n\nThe start and stop indices behave like the argument to Python\u2019s built-in `range()` function. This method provides an alternative to using `LIMIT`/`OFFSET` to get a slice of the query.\n\nFor example,\n\nstmt \\= select(User).order\\_by(User).id.slice(1, 3)\n\nrenders as\n\nSELECT users.id AS users\\_id,\n       users.name AS users\\_name\nFROM users ORDER BY users.id\nLIMIT ? OFFSET ?\n(2, 1)\n\nNote\n\nThe `_sql.GenerativeSelect.slice()` method will replace any clause applied with `_sql.GenerativeSelect.fetch()`.\n\nNew in version 1.4: Added the `_sql.GenerativeSelect.slice()` method generalized from the ORM.\n\nSee also\n\n`_sql.GenerativeSelect.limit()`\n\n`_sql.GenerativeSelect.offset()`\n\n`_sql.GenerativeSelect.fetch()`\n\nsubquery(_name: Optional\\[str\\] \\= None_) \u2192 Subquery[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.subquery \"Permalink to this definition\")\n\nReturn a subquery of this `_expression.SelectBase`.\n\nA subquery is from a SQL perspective a parenthesized, named construct that can be placed in the FROM clause of another SELECT statement.\n\nGiven a SELECT statement such as:\n\nstmt \\= select(table.c.id, table.c.name)\n\nThe above statement might look like:\n\nSELECT table.id, table.name FROM table\n\nThe subquery form by itself renders the same way, however when embedded into the FROM clause of another SELECT statement, it becomes a named sub-element:\n\nsubq \\= stmt.subquery()\nnew\\_stmt \\= select(subq)\n\nThe above renders as:\n\nSELECT anon\\_1.id, anon\\_1.name\nFROM (SELECT table.id, table.name FROM table) AS anon\\_1\n\nHistorically, `_expression.SelectBase.subquery()` is equivalent to calling the `_expression.FromClause.alias()` method on a FROM object; however, as a `_expression.SelectBase` object is not directly FROM object, the `_expression.SelectBase.subquery()` method provides clearer semantics.\n\nNew in version 1.4.\n\nsuffix\\_with(_\\*suffixes: \\_TextCoercedExpressionArgument\\[Any\\]_, _dialect: str \\= '\\*'_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.suffix_with \"Permalink to this definition\")\n\nAdd one or more expressions following the statement as a whole.\n\nThis is used to support backend-specific suffix keywords on certain constructs.\n\nE.g.:\n\nstmt \\= select(col1, col2).cte().suffix\\_with(\n    \"cycle empno set y\\_cycle to 1 default 0\", dialect\\=\"oracle\")\n\nMultiple suffixes can be specified by multiple calls to `_expression.HasSuffixes.suffix_with()`.\n\nParameters\n\n*   **\\*suffixes** \u2013 textual or `_expression.ClauseElement` construct which will be rendered following the target clause.\n    \n*   **dialect** \u2013 Optional string dialect name which will limit rendering of this suffix to only that dialect.\n    \n\nunion(_\\*other: \\_SelectStatementForCompoundArgument_) \u2192 CompoundSelect[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.union \"Permalink to this definition\")\n\nReturn a SQL `UNION` of this select() construct against the given selectables provided as positional arguments.\n\nParameters\n\n*   **\\*other** \u2013\n    \n    one or more elements with which to create a UNION.\n    \n    Changed in version 1.4.28: multiple elements are now accepted.\n    \n*   **\\*\\*kwargs** \u2013 keyword arguments are forwarded to the constructor for the newly created `_sql.CompoundSelect` object.\n    \n\nunion\\_all(_\\*other: \\_SelectStatementForCompoundArgument_) \u2192 CompoundSelect[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.union_all \"Permalink to this definition\")\n\nReturn a SQL `UNION ALL` of this select() construct against the given selectables provided as positional arguments.\n\nParameters\n\n*   **\\*other** \u2013\n    \n    one or more elements with which to create a UNION.\n    \n    Changed in version 1.4.28: multiple elements are now accepted.\n    \n*   **\\*\\*kwargs** \u2013 keyword arguments are forwarded to the constructor for the newly created `_sql.CompoundSelect` object.\n    \n\nunique\\_params(_\\_ClauseElement\\_\\_optionaldict: Optional\\[Dict\\[str, Any\\]\\] \\= None_, _\\*\\*kwargs: Any_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.unique_params \"Permalink to this definition\")\n\nReturn a copy with `_expression.bindparam()` elements replaced.\n\nSame functionality as `_expression.ClauseElement.params()`, except adds unique=True to affected bind parameters so that multiple statements can be used.\n\nwhere(_\\*whereclause: \\_ColumnExpressionArgument\\[bool\\]_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.where \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with the given expression added to its WHERE clause, joined to the existing clause via AND, if any.\n\n_property_ whereclause_: Optional\\[ColumnElement\\[Any\\]\\]_[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.whereclause \"Permalink to this definition\")\n\nReturn the completed WHERE clause for this `_expression.Select` statement.\n\nThis assembles the current collection of WHERE criteria into a single `_expression.BooleanClauseList` construct.\n\nNew in version 1.4.\n\nwith\\_for\\_update(_\\*_, _nowait: bool \\= False_, _read: bool \\= False_, _of: Optional\\[\\_ForUpdateOfArgument\\] \\= None_, _skip\\_locked: bool \\= False_, _key\\_share: bool \\= False_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.with_for_update \"Permalink to this definition\")\n\nSpecify a `FOR UPDATE` clause for this `_expression.GenerativeSelect`.\n\nE.g.:\n\nstmt \\= select(table).with\\_for\\_update(nowait\\=True)\n\nOn a database like PostgreSQL or Oracle, the above would render a statement like:\n\nSELECT table.a, table.b FROM table FOR UPDATE NOWAIT\n\non other backends, the `nowait` option is ignored and instead would produce:\n\nSELECT table.a, table.b FROM table FOR UPDATE\n\nWhen called with no arguments, the statement will render with the suffix `FOR UPDATE`. Additional arguments can then be provided which allow for common database-specific variants.\n\nParameters\n\n*   **nowait** \u2013 boolean; will render `FOR UPDATE NOWAIT` on Oracle and PostgreSQL dialects.\n    \n*   **read** \u2013 boolean; will render `LOCK IN SHARE MODE` on MySQL, `FOR SHARE` on PostgreSQL. On PostgreSQL, when combined with `nowait`, will render `FOR SHARE NOWAIT`.\n    \n*   **of** \u2013 SQL expression or list of SQL expression elements, (typically `_schema.Column` objects or a compatible expression, for some backends may also be a table expression) which will render into a `FOR UPDATE OF` clause; supported by PostgreSQL, Oracle, some MySQL versions and possibly others. May render as a table or as a column depending on backend.\n    \n*   **skip\\_locked** \u2013 boolean, will render `FOR UPDATE SKIP LOCKED` on Oracle and PostgreSQL dialects or `FOR SHARE SKIP LOCKED` if `read=True` is also specified.\n    \n*   **key\\_share** \u2013 boolean, will render `FOR NO KEY UPDATE`, or if combined with `read=True` will render `FOR KEY SHARE`, on the PostgreSQL dialect.\n    \n\nwith\\_hint(_selectable: \\_FromClauseArgument_, _text: str_, _dialect\\_name: str \\= '\\*'_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.with_hint \"Permalink to this definition\")\n\nAdd an indexing or other executional context hint for the given selectable to this `_expression.Select` or other selectable object.\n\nThe text of the hint is rendered in the appropriate location for the database backend in use, relative to the given `_schema.Table` or `_expression.Alias` passed as the `selectable` argument. The dialect implementation typically uses Python string substitution syntax with the token `%(name)s` to render the name of the table or alias. E.g. when using Oracle, the following:\n\nselect(mytable).\\\\\n    with\\_hint(mytable, \"index(%(name)s ix\\_mytable)\")\n\nWould render SQL as:\n\nselect /\\*+ index(mytable ix\\_mytable) \\*/ ... from mytable\n\nThe `dialect_name` option will limit the rendering of a particular hint to a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:\n\nselect(mytable).\\\\\n    with\\_hint(mytable, \"index(%(name)s ix\\_mytable)\", 'oracle').\\\\\n    with\\_hint(mytable, \"WITH INDEX ix\\_mytable\", 'mssql')\n\nSee also\n\n`_expression.Select.with_statement_hint()`\n\nwith\\_only\\_columns(_\\*entities: \\_ColumnsClauseArgument\\[Any\\]_, _maintain\\_column\\_froms: bool \\= False_, _\\*\\*\\_Select\\_\\_kw: Any_) \u2192 [Select](#llama_index.vector_stores.PGVectorStore.Select \"llama_index.vector_stores.PGVectorStore.Select\")\\[Any\\][\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.with_only_columns \"Permalink to this definition\")\n\nReturn a new `_expression.select()` construct with its columns clause replaced with the given entities.\n\nBy default, this method is exactly equivalent to as if the original `_expression.select()` had been called with the given entities. E.g. a statement:\n\ns \\= select(table1.c.a, table1.c.b)\ns \\= s.with\\_only\\_columns(table1.c.b)\n\nshould be exactly equivalent to:\n\nIn this mode of operation, `_sql.Select.with_only_columns()` will also dynamically alter the FROM clause of the statement if it is not explicitly stated. To maintain the existing set of FROMs including those implied by the current columns clause, add the [:paramref:\\`\\_sql.Select.with\\_only\\_columns.maintain\\_column\\_froms\\`](#id31) parameter:\n\ns \\= select(table1.c.a, table2.c.b)\ns \\= s.with\\_only\\_columns(table1.c.a, maintain\\_column\\_froms\\=True)\n\nThe above parameter performs a transfer of the effective FROMs in the columns collection to the `_sql.Select.select_from()` method, as though the following were invoked:\n\ns \\= select(table1.c.a, table2.c.b)\ns \\= s.select\\_from(table1, table2).with\\_only\\_columns(table1.c.a)\n\nThe [:paramref:\\`\\_sql.Select.with\\_only\\_columns.maintain\\_column\\_froms\\`](#id33) parameter makes use of the `_sql.Select.columns_clause_froms` collection and performs an operation equivalent to the following:\n\ns \\= select(table1.c.a, table2.c.b)\ns \\= s.select\\_from(\\*s.columns\\_clause\\_froms).with\\_only\\_columns(table1.c.a)\n\nParameters\n\n*   **\\*entities** \u2013 column expressions to be used.\n    \n*   **maintain\\_column\\_froms** \u2013\n    \n    boolean parameter that will ensure the FROM list implied from the current columns clause will be transferred to the `_sql.Select.select_from()` method first.\n    \n    New in version 1.4.23.\n    \n\nwith\\_statement\\_hint(_text: str_, _dialect\\_name: str \\= '\\*'_) \u2192 Self[\uf0c1](#llama_index.vector_stores.PGVectorStore.Select.with_statement_hint \"Permalink to this definition\")\n\nAdd a statement hint to this `_expression.Select` or other selectable object.\n\nThis method is similar to `_expression.Select.with_hint()` except that it does not require an individual table, and instead applies to the statement as a whole.\n\nHints here are specific to the backend database and may include directives such as isolation levels, file directives, fetch directives, etc.\n\nSee also\n\n`_expression.Select.with_hint()`\n\n`_expression.Select.prefix_with()` - generic SELECT prefixing which also can suit some database-specific HINT syntaxes such as MySQL optimizer hints"
}