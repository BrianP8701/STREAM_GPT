{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/data_connectors/DiscordDemo.html",
        "title": "Discord Reader - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## Discord Reader[\uf0c1](#discord-reader \"Permalink to this heading\")\n\nDemonstrates our Discord data connector\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\n\\# This is due to the fact that we use asyncio.loop\\_until\\_complete in\n\\# the DiscordReader. Since the Jupyter kernel itself runs on\n\\# an event loop, we need to add some help with nesting\n!pip install nest\\_asyncio\nimport nest\\_asyncio\n\nnest\\_asyncio.apply()\n\nfrom llama\\_index import SummaryIndex, DiscordReader\nfrom IPython.display import Markdown, display\nimport os\n\ndiscord\\_token \\= os.getenv(\"DISCORD\\_TOKEN\")\nchannel\\_ids \\= \\[1057178784895348746\\]  \\# Replace with your channel\\_id\ndocuments \\= DiscordReader(discord\\_token\\=discord\\_token).load\\_data(\n    channel\\_ids\\=channel\\_ids\n)\n\nindex \\= SummaryIndex.from\\_documents(documents)\n\n\\# set Logging to DEBUG for more detailed outputs\nquery\\_engine \\= index.as\\_query\\_engine()\nresponse \\= query\\_engine.query(\"<query\\_text>\")\n\ndisplay(Markdown(f\"<b>{response}</b>\"))"
}