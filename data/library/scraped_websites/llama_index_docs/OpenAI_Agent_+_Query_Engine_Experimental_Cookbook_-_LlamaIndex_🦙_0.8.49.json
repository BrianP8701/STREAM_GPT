{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/agent/openai_agent_query_cookbook.html",
        "title": "OpenAI Agent + Query Engine Experimental Cookbook - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\nIn this notebook, we try out the OpenAIAgent across a variety of query engine tools and datasets. We explore how OpenAIAgent can compare/replace existing workflows solved by our retrievers/query engines.\n\n*   Auto retrieval\n    \n*   Joint SQL and vector search\n    \n\n## AutoRetrieval from a Vector Database[\uf0c1](#autoretrieval-from-a-vector-database \"Permalink to this heading\")\n\nOur existing \u201cauto-retrieval\u201d capabilities (in `VectorIndexAutoRetriever`) allow an LLM to infer the right query parameters for a vector database - including both the query string and metadata filter.\n\nSince the OpenAI Function API can infer function parameters, we explore its capabilities in performing auto-retrieval here.\n\nimport pinecone\nimport os\n\napi\\_key \\= os.environ\\[\"PINECONE\\_API\\_KEY\"\\]\npinecone.init(api\\_key\\=api\\_key, environment\\=\"us-west1-gcp\")\n\n\\# dimensions are for text-embedding-ada-002\ntry:\n    pinecone.create\\_index(\n        \"quickstart\", dimension\\=1536, metric\\=\"euclidean\", pod\\_type\\=\"p1\"\n    )\nexcept Exception:\n    \\# most likely index already exists\n    pass\n\npinecone\\_index \\= pinecone.Index(\"quickstart\")\n\n\\# Optional: delete data in your pinecone index\npinecone\\_index.delete(deleteAll\\=True, namespace\\=\"test\")\n\nfrom llama\\_index import VectorStoreIndex, StorageContext\nfrom llama\\_index.vector\\_stores import PineconeVectorStore\n\nfrom llama\\_index.schema import TextNode\n\nnodes \\= \\[\n    TextNode(\n        text\\=(\n            \"Michael Jordan is a retired professional basketball player,\"\n            \" widely regarded as one of the greatest basketball players of all\"\n            \" time.\"\n        ),\n        metadata\\={\n            \"category\": \"Sports\",\n            \"country\": \"United States\",\n        },\n    ),\n    TextNode(\n        text\\=(\n            \"Angelina Jolie is an American actress, filmmaker, and\"\n            \" humanitarian. She has received numerous awards for her acting\"\n            \" and is known for her philanthropic work.\"\n        ),\n        metadata\\={\n            \"category\": \"Entertainment\",\n            \"country\": \"United States\",\n        },\n    ),\n    TextNode(\n        text\\=(\n            \"Elon Musk is a business magnate, industrial designer, and\"\n            \" engineer. He is the founder, CEO, and lead designer of SpaceX,\"\n            \" Tesla, Inc., Neuralink, and The Boring Company.\"\n        ),\n        metadata\\={\n            \"category\": \"Business\",\n            \"country\": \"United States\",\n        },\n    ),\n    TextNode(\n        text\\=(\n            \"Rihanna is a Barbadian singer, actress, and businesswoman. She\"\n            \" has achieved significant success in the music industry and is\"\n            \" known for her versatile musical style.\"\n        ),\n        metadata\\={\n            \"category\": \"Music\",\n            \"country\": \"Barbados\",\n        },\n    ),\n    TextNode(\n        text\\=(\n            \"Cristiano Ronaldo is a Portuguese professional footballer who is\"\n            \" considered one of the greatest football players of all time. He\"\n            \" has won numerous awards and set multiple records during his\"\n            \" career.\"\n        ),\n        metadata\\={\n            \"category\": \"Sports\",\n            \"country\": \"Portugal\",\n        },\n    ),\n\\]\n\nvector\\_store \\= PineconeVectorStore(\n    pinecone\\_index\\=pinecone\\_index, namespace\\=\"test\"\n)\nstorage\\_context \\= StorageContext.from\\_defaults(vector\\_store\\=vector\\_store)\n\nindex \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\n\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 \\[00:00<00:00,  9.61it/s\\]\n\n### Initialize Agent[\uf0c1](#initialize-agent \"Permalink to this heading\")\n\nfrom llama\\_index.agent import OpenAIAgent\nfrom llama\\_index.llms import OpenAI\n\nagent \\= OpenAIAgent.from\\_tools(\n    \\[auto\\_retrieve\\_tool\\],\n    llm\\=OpenAI(temperature\\=0, model\\=\"gpt-4-0613\"),\n    verbose\\=True,\n)\n\nresponse \\= agent.chat(\"Tell me about two celebrities from the United States. \")\nprint(str(response))\n\n\\=== Calling Function ===\nCalling function: celebrity\\_bios with args: {\n  \"query\": \"celebrities\",\n  \"filter\\_key\\_list\": \\[\"country\"\\],\n  \"filter\\_value\\_list\": \\[\"United States\"\\]\n}\nGot output: \nCelebrities in the United States who are associated with Entertainment and Sports include Angelina Jolie and Michael Jordan.\n========================\nAngelina Jolie is an American actress, filmmaker, and humanitarian. She has received an Academy Award and three Golden Globe Awards, and has been cited as Hollywood's highest-paid actress. Jolie made her screen debut as a child alongside her father, Jon Voight, in Lookin' to Get Out (1982), and her film career began in earnest a decade later with the low-budget production Cyborg 2 (1993), followed by her first leading role in a major film, Hackers (1995).\n\nMichael Jordan is a retired professional basketball player from the United States. He is widely regarded as one of the greatest basketball players in history. Jordan was one of the most effectively marketed athletes of his generation and was instrumental in popularizing the NBA around the world in the 1980s and 1990s. He played 15 seasons in the NBA, winning six championships with the Chicago Bulls.\n\n## Joint Text-to-SQL and Semantic Search[\uf0c1](#joint-text-to-sql-and-semantic-search \"Permalink to this heading\")\n\nThis is currenty handled by our `SQLAutoVectorQueryEngine`.\n\nLet\u2019s try implementing this by giving our `OpenAIAgent` access to two query tools: SQL and Vector\n\n### Load and Index Structured Data[\uf0c1](#load-and-index-structured-data \"Permalink to this heading\")\n\nWe load sample structured datapoints into a SQL db and index it.\n\nfrom sqlalchemy import (\n    create\\_engine,\n    MetaData,\n    Table,\n    Column,\n    String,\n    Integer,\n    select,\n    column,\n)\nfrom llama\\_index import SQLDatabase, SQLStructStoreIndex\n\nengine \\= create\\_engine(\"sqlite:///:memory:\", future\\=True)\nmetadata\\_obj \\= MetaData()\n\n\\# create city SQL table\ntable\\_name \\= \"city\\_stats\"\ncity\\_stats\\_table \\= Table(\n    table\\_name,\n    metadata\\_obj,\n    Column(\"city\\_name\", String(16), primary\\_key\\=True),\n    Column(\"population\", Integer),\n    Column(\"country\", String(16), nullable\\=False),\n)\n\nmetadata\\_obj.create\\_all(engine)\n\n\\# print tables\nmetadata\\_obj.tables.keys()\n\ndict\\_keys(\\['city\\_stats'\\])\n\nfrom sqlalchemy import insert\n\nrows \\= \\[\n    {\"city\\_name\": \"Toronto\", \"population\": 2930000, \"country\": \"Canada\"},\n    {\"city\\_name\": \"Tokyo\", \"population\": 13960000, \"country\": \"Japan\"},\n    {\"city\\_name\": \"Berlin\", \"population\": 3645000, \"country\": \"Germany\"},\n\\]\nfor row in rows:\n    stmt \\= insert(city\\_stats\\_table).values(\\*\\*row)\n    with engine.begin() as connection:\n        cursor \\= connection.execute(stmt)\n\nwith engine.connect() as connection:\n    cursor \\= connection.exec\\_driver\\_sql(\"SELECT \\* FROM city\\_stats\")\n    print(cursor.fetchall())\n\n\\[('Toronto', 2930000, 'Canada'), ('Tokyo', 13960000, 'Japan'), ('Berlin', 3645000, 'Germany')\\]\n\nsql\\_database \\= SQLDatabase(engine, include\\_tables\\=\\[\"city\\_stats\"\\])\n\nfrom llama\\_index.indices.struct\\_store.sql\\_query import NLSQLTableQueryEngine\n\nquery\\_engine \\= NLSQLTableQueryEngine(\n    sql\\_database\\=sql\\_database,\n    tables\\=\\[\"city\\_stats\"\\],\n)\n\n### Load and Index Unstructured Data[\uf0c1](#load-and-index-unstructured-data \"Permalink to this heading\")\n\nWe load unstructured data into a vector index backed by Pinecone\n\n\\# install wikipedia python package\n!pip install wikipedia\n\nRequirement already satisfied: wikipedia in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (1.4.0)\nRequirement already satisfied: requests<3.0.0,>=2.0.0 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from wikipedia) (2.28.2)\nRequirement already satisfied: beautifulsoup4 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from wikipedia) (4.12.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.1.0)\nRequirement already satisfied: idna<4,>=2.5 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.4)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2022.12.7)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (1.26.15)\nRequirement already satisfied: soupsieve>1.2 in /Users/jerryliu/Programming/gpt\\_index/.venv/lib/python3.10/site-packages (from beautifulsoup4->wikipedia) (2.4.1)\n\n\\[notice\\] A new release of pip available: 22.3.1 -> 23.1.2\n\\[notice\\] To update, run: pip install --upgrade pip\n\nfrom llama\\_index import (\n    WikipediaReader,\n    SimpleDirectoryReader,\n    VectorStoreIndex,\n)\n\ncities \\= \\[\"Toronto\", \"Berlin\", \"Tokyo\"\\]\nwiki\\_docs \\= WikipediaReader().load\\_data(pages\\=cities)\n\n\\# define pinecone index\nimport pinecone\nimport os\n\napi\\_key \\= os.environ\\[\"PINECONE\\_API\\_KEY\"\\]\npinecone.init(api\\_key\\=api\\_key, environment\\=\"us-west1-gcp\")\n\n\\# dimensions are for text-embedding-ada-002\n\\# pinecone.create\\_index(\"quickstart\", dimension=1536, metric=\"euclidean\", pod\\_type=\"p1\")\npinecone\\_index \\= pinecone.Index(\"quickstart\")\n\n\\# OPTIONAL: delete all\npinecone\\_index.delete(deleteAll\\=True)\n\nfrom llama\\_index.node\\_parser import SimpleNodeParser\nfrom llama\\_index import ServiceContext\nfrom llama\\_index.storage import StorageContext\nfrom llama\\_index.vector\\_stores import PineconeVectorStore\nfrom llama\\_index.text\\_splitter import TokenTextSplitter\nfrom llama\\_index.llms import OpenAI\n\n\\# define node parser and LLM\nchunk\\_size \\= 1024\nllm \\= OpenAI(temperature\\=0, model\\=\"gpt-4\")\nservice\\_context \\= ServiceContext.from\\_defaults(chunk\\_size\\=chunk\\_size, llm\\=llm)\ntext\\_splitter \\= TokenTextSplitter(chunk\\_size\\=chunk\\_size)\nnode\\_parser \\= SimpleNodeParser.from\\_defaults(text\\_splitter\\=text\\_splitter)\n\n\\# define pinecone vector index\nvector\\_store \\= PineconeVectorStore(\n    pinecone\\_index\\=pinecone\\_index, namespace\\=\"wiki\\_cities\"\n)\nstorage\\_context \\= StorageContext.from\\_defaults(vector\\_store\\=vector\\_store)\nvector\\_index \\= VectorStoreIndex(\\[\\], storage\\_context\\=storage\\_context)\n\n\\# Insert documents into vector index\n\\# Each document has metadata of the city attached\nfor city, wiki\\_doc in zip(cities, wiki\\_docs):\n    nodes \\= node\\_parser.get\\_nodes\\_from\\_documents(\\[wiki\\_doc\\])\n    \\# add metadata to each node\n    for node in nodes:\n        node.metadata \\= {\"title\": city}\n    vector\\_index.insert\\_nodes(nodes)\n\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 \\[00:00<00:00, 38.13it/s\\]\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 \\[00:00<00:00, 101.89it/s\\]\nUpserted vectors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 \\[00:00<00:00, 97.91it/s\\]\n\n### Initialize Agent[\uf0c1](#id1 \"Permalink to this heading\")\n\nfrom llama\\_index.agent import OpenAIAgent\nfrom llama\\_index.llms import OpenAI\n\nagent \\= OpenAIAgent.from\\_tools(\n    \\[sql\\_tool, vector\\_tool\\],\n    llm\\=OpenAI(temperature\\=0, model\\=\"gpt-4-0613\"),\n    verbose\\=True,\n)\n\n\\# NOTE: gpt-3.5 gives the wrong answer, but gpt-4 is able to reason over both loops\nresponse \\= agent.chat(\n    \"Tell me about the arts and culture of the city with the highest\"\n    \" population\"\n)\nprint(str(response))\n\n\\=== Calling Function ===\nCalling function: sql\\_tool with args: {\n  \"input\": \"SELECT city FROM city\\_stats ORDER BY population DESC LIMIT 1\"\n}\nGot output:  The city with the highest population is Tokyo.\n========================\n=== Calling Function ===\nCalling function: vector\\_tool with args: {\n  \"input\": \"Tell me about the arts and culture of Tokyo\"\n}\nGot output: Tokyo has a rich arts and culture scene, with many theaters for performing arts, including national and private theaters for traditional forms of Japanese drama. Noteworthy theaters are the National Noh Theatre for noh and the Kabuki-za for Kabuki. Symphony orchestras and other musical organizations perform modern and traditional music. The New National Theater Tokyo in Shibuya is the national center for the performing arts, including opera, ballet, contemporary dance, and drama. Tokyo also hosts modern Japanese and international pop and rock music at various venues, ranging from intimate clubs to internationally known areas such as the Nippon Budokan.\n\nMany different festivals occur throughout Tokyo, with major events including the Sann\u014d at Hie Shrine, the Sanja at Asakusa Shrine, and the biennial Kanda Festivals. Annually on the last Saturday of July, a massive fireworks display over the Sumida River attracts over a million viewers. Once cherry blossoms bloom in spring, residents gather in Ueno Park, Inokashira Park, and the Shinjuku Gyoen National Garden for picnics under the blossoms. Harajuku, a neighborhood in Shibuya, is known internationally for its youth style, fashion, and cosplay.\n\nTokyo is also renowned for its fine dining, with Michelin awarding a significant number of stars to the city's restaurants. As of 2017, 227 restaurants in Tokyo have been awarded Michelin stars, surpassing the number awarded in Paris.\n========================\nTokyo, the city with the highest population, has a rich arts and culture scene. It is home to many theaters for performing arts, including national and private theaters for traditional forms of Japanese drama such as Noh and Kabuki. The New National Theater Tokyo in Shibuya is the national center for the performing arts, including opera, ballet, contemporary dance, and drama.\n\nTokyo also hosts modern Japanese and international pop and rock music at various venues, ranging from intimate clubs to internationally known areas such as the Nippon Budokan.\n\nThe city is known for its festivals, with major events including the Sann\u014d at Hie Shrine, the Sanja at Asakusa Shrine, and the biennial Kanda Festivals. Once cherry blossoms bloom in spring, residents gather in Ueno Park, Inokashira Park, and the Shinjuku Gyoen National Garden for picnics under the blossoms.\n\nHarajuku, a neighborhood in Shibuya, is known internationally for its youth style, fashion, and cosplay. Tokyo is also renowned for its fine dining, with Michelin awarding a significant number of stars to the city's restaurants. As of 2017, 227 restaurants in Tokyo have been awarded Michelin stars, surpassing the number awarded in Paris.\n\nresponse \\= agent.chat(\"Tell me about the history of Berlin\")\nprint(str(response))\n\n\\=== Calling Function ===\nCalling function: vector\\_tool with args: {\n  \"input\": \"Tell me about the history of Berlin\"\n}\nGot output: Berlin's history dates back to the 15th century when it was established as the capital of the Margraviate of Brandenburg. The Hohenzollern family ruled Berlin until 1918, first as electors of Brandenburg, then as kings of Prussia, and eventually as German emperors. In 1443, Frederick II Irontooth started the construction of a new royal palace in the twin city Berlin-C\u00f6lln, which later became the permanent residence of the Brandenburg electors of the Hohenzollerns.\n\nThe Thirty Years' War between 1618 and 1648 devastated Berlin, with the city losing half of its population. Frederick William, known as the \"Great Elector\", initiated a policy of promoting immigration and religious tolerance. In 1701, the dual state of the Margraviate of Brandenburg and the Duchy of Prussia formed the Kingdom of Prussia, with Berlin as its capital. Under the rule of Frederick II, Berlin became a center of the Enlightenment.\n\nThe Industrial Revolution in the 19th century transformed Berlin, expanding its economy and population. In 1871, Berlin became the capital of the newly founded German Empire. The early 20th century saw Berlin as a fertile ground for the German Expressionist movement. At the end of the First World War in 1918, a republic was proclaimed, and in 1920, the Greater Berlin Act incorporated dozens of suburban cities, villages, and estates around Berlin.\n========================\n\nResponse(response='Berlin\\\\'s history dates back to the 15th century when it was established as the capital of the Margraviate of Brandenburg. The Hohenzollern family ruled Berlin until 1918, first as electors of Brandenburg, then as kings of Prussia, and eventually as German emperors. In 1443, Frederick II Irontooth started the construction of a new royal palace in the twin city Berlin-C\u00f6lln.\\\\n\\\\nThe Thirty Years\\\\' War between 1618 and 1648 devastated Berlin, with the city losing half of its population. Frederick William, known as the \"Great Elector\", initiated a policy of promoting immigration and religious tolerance. In 1701, the dual state of the Margraviate of Brandenburg and the Duchy of Prussia formed the Kingdom of Prussia, with Berlin as its capital. Under the rule of Frederick II, Berlin became a center of the Enlightenment.\\\\n\\\\nThe Industrial Revolution in the 19th century transformed Berlin, expanding its economy and population. In 1871, Berlin became the capital of the newly founded German Empire. The early 20th century saw Berlin as a fertile ground for the German Expressionist movement. At the end of the First World War in 1918, a republic was proclaimed, and in 1920, the Greater Berlin Act incorporated dozens of suburban cities, villages, and estates around Berlin.', source\\_nodes=\\[\\], extra\\_info=None)\n\nresponse \\= agent.chat(\n    \"Can you give me the country corresponding to each city?\"\n)\nprint(str(response))\n\n\\=== Calling Function ===\nCalling function: sql\\_tool with args: {\n  \"input\": \"SELECT city, country FROM city\\_stats\"\n}\nGot output:  The cities Toronto, Tokyo, and Berlin are located in the countries Canada, Japan, and Germany respectively.\n========================\n\nResponse(response='Sure, here are the countries corresponding to each city:\\\\n\\\\n- Toronto is in Canada\\\\n- Tokyo is in Japan\\\\n- Berlin is in Germany', source\\_nodes=\\[\\], extra\\_info=None)"
}