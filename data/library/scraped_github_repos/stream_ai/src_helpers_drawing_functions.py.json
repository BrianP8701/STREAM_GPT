{
    "metadata": {
        "type": "repo",
        "path": "src/helpers/drawing_functions.py"
    },
    "text": "\"\"\"\nThis module provides functionality for basic drawing operations.\n\"\"\"\nimport cv2\nimport math\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n\ndef draw(img, x, y, a, b):\n    if isinstance(img, str):\n        img = cv2.imread(img)\n    cv2.rectangle(img, (x, y), (a, b), (255, 0, 0), 1)\n    cv2.imshow('', img)\n    cv2.waitKey(0)\n    return img\n\ndef show(img_path):\n    # Load the image\n    img = mpimg.imread('/Users/brianprzezdziecki/Research/Mechatronics/My_code/VIDEO/2104/frame11.jpg')\n\n    # Display the image\n    plt.imshow(img)\n    plt.show()\n    \ndef draw_return(image, x, y, a, b, color=(255, 0, 0), thickness=1):\n    cv2.rectangle(image, (x, y), (a, b), color, thickness)\n    return image\n\n\ndef tip_line(img, theta, tip):\n    # Theta is passed in degrees\n    angle_vector = [math.cos((theta*math.pi)/180)*50, math.sin((theta*math.pi)/180)*50] \n    angle_vector = [int(i) for i in angle_vector]\n    img = cv2.line(img, [int(tip[0]), int(tip[1])], [int(tip[0])+angle_vector[0], int(tip[1])-angle_vector[1]], (255, 0, 0), 3)\n    return img\n\ndef write_text_on_image(image_np, text, position=(50, 50), font=cv2.FONT_HERSHEY_SIMPLEX, font_scale=1, color=(255, 0, 0), thickness=2):\n    \"\"\"\n    Write text on the given image.\n    \n    Args:\n    - image_np (numpy array): The image to write text on.\n    - text (str): The text to write.\n    - position (tuple): The position (x, y) where the text should start.\n    - font (cv2 font): Font type. Default is Hershey Simplex.\n    - font_scale (float): Font scale factor that is multiplied by the font-specific base size.\n    - color (tuple): Color of the text in the format (B, G, R). Default is blue.\n    - thickness (int): Thickness of the text stroke.\n\n    Returns:\n    - numpy array: The image with text written on it.\n    \"\"\"\n    cv2.putText(image_np, text, position, font, font_scale, color, thickness)\n\ndef plot_points(points_list, destination_path, plot_title='Scatter Plot of Points', x_label='X values', y_label='Y values'):\n    \"\"\"\n    Plots a scatter plot of the points provided in the points_list.\n    \n    Parameters:\n    - points_list: List of [x,y] coordinates.\n    - destination_path: Path to save the generated plot.\n    - plot_title: Optional title for the plot.\n    - x_label: Optional label for the x-axis.\n    - y_label: Optional label for the y-axis.\n    \"\"\"\n    \n    # Extract x and y values from the list of lists\n    x_values = [point[0] for point in points_list]\n    y_values = [point[1] for point in points_list]\n\n    # Plot the points\n    plt.scatter(x_values, y_values, color='blue', marker='o')\n\n    if len(points_list) > 0:\n        # Setting the axis limits\n        plt.xlim(min(x_values), max(x_values))\n        plt.ylim(min(y_values), max(y_values))\n\n    # Setting the title and labels using the provided arguments\n    plt.title(plot_title)\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n\n    # Saving the plot to the given destination path\n    plt.savefig(destination_path)\n    plt.close()\n    \ndef draw_line(img, line):\n    cv2.line(img, (line[0], line[1]), (line[2], line[3]), (255, 0, 0), 1)\n    return img\n    "
}