{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/finetuning/cross_encoder_finetuning/cross_encoder_finetuning.html",
        "title": "How to Finetune a cross-encoder using LLamaIndex - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n\\# Download Requirements\n!pip install datasets \\--quiet\n!pip install sentence-transformers \\--quiet\n!pip install openai \\--quiet\n\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 519.6/519.6 kB 7.7 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 115.3/115.3 kB 11.6 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 194.1/194.1 kB 19.2 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 134.8/134.8 kB 13.0 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 302.0/302.0 kB 25.5 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 86.0/86.0 kB 1.9 MB/s eta 0:00:00\n?25h  Preparing metadata (setup.py) ... ?25l?25hdone\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 7.7/7.7 MB 42.3 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.3/1.3 MB 43.9 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.8/3.8 MB 52.1 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.3/1.3 MB 58.6 MB/s eta 0:00:00\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 295.0/295.0 kB 27.1 MB/s eta 0:00:00\n?25h  Building wheel for sentence-transformers (setup.py) ... ?25l?25hdone\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 77.0/77.0 kB 1.8 MB/s eta 0:00:00\n?25h\n\n## Process[\uf0c1](#process \"Permalink to this heading\")\n\n*   Download the QASPER Dataset from HuggingFace Hub using Datasets Library (https://huggingface.co/datasets/allenai/qasper)\n    \n*   From the train and test splits of the dataset extract 800 and 80 samples respectively\n    \n*   Use the 800 samples collected from train data which have the respective questions framed on a research paper to generate a dataset in the respective format required for CrossEncoder finetuning. Currently the format we use is that a single sample of fine tune data consists of two sentences(question and context) and a score either 0 or 1 where 1 shows that the question and context are relevant to each other and 0 shows they are not relevant to each other.\n    \n*   Use the 100 samples of test set to extract two kinds of evaluation datasets\n    \n    *   Rag Eval Dataset:-One dataset consists of samples where a single sample consists of a research paper content, list of questions on the research paper, answers of the list of questions on the research paper. While forming this dataset we keep only questions which have long answers/ free-form answers for better comparision with RAG generated answers.\n        \n    *   Reranking Eval Dataset:- The other datasets consists of samples where a single sample consists of the research paper content, list of questions on the research paper, list of contexts from the research paper contents relevant to each question\n        \n*   We finetuned the cross-encoder using helper utilities written in llamaindex and push it to HuggingFace Hub using the huggingface cli tokens login which can be found here:- https://huggingface.co/settings/tokens\n    \n*   We evaluate on both datasets using two metrics and three cases\n    \n    1.  Just OpenAI embeddings without any reranker\n        \n    2.  OpenAI embeddings combined with cross-encoder/ms-marco-MiniLM-L-12-v2 as reranker\n        \n    3.  OpenAI embeddings combined with our fine-tuned cross encoder model as reranker\n        \n\n*   Evaluation Criteria for each Eval Dataset\n    \n    *   Hits metric:- For evaluating the Reranking Eval Dataset we just simply use the retriever+ post-processor functionalities of LLamaIndex to see in the different cases how many times does the relevant context gets retrieved and call it the hits metric.\n        \n    *   Pairwise Comparision Evaluator:- We use the Pairwise Comparision Evaluator provided by LLamaIndex (https://github.com/run-llama/llama\\_index/blob/main/llama\\_index/evaluation/pairwise.py) to compare the responses of the respective query engines created in each case with the reference free-form answers provided.\n        \n\n## Load the Dataset[\uf0c1](#load-the-dataset \"Permalink to this heading\")\n\nfrom datasets import load\\_dataset\nimport random\n\n\\# Download QASPER dataset from HuggingFace https://huggingface.co/datasets/allenai/qasper\ndataset \\= load\\_dataset(\"allenai/qasper\")\n\n\\# Split the dataset into train, validation, and test splits\ntrain\\_dataset \\= dataset\\[\"train\"\\]\nvalidation\\_dataset \\= dataset\\[\"validation\"\\]\ntest\\_dataset \\= dataset\\[\"test\"\\]\n\nrandom.seed(42)  \\# Set a random seed for reproducibility\n\n\\# Randomly sample 800 rows from the training split\ntrain\\_sampled\\_indices \\= random.sample(range(len(train\\_dataset)), 800)\ntrain\\_samples \\= \\[train\\_dataset\\[i\\] for i in train\\_sampled\\_indices\\]\n\n\\# Randomly sample 100 rows from the test split\ntest\\_sampled\\_indices \\= random.sample(range(len(test\\_dataset)), 80)\ntest\\_samples \\= \\[test\\_dataset\\[i\\] for i in test\\_sampled\\_indices\\]\n\n\\# Now we have 800 research papers for training and 80 research papers to evaluate on\n\n## QASPER Dataset[\uf0c1](#qasper-dataset \"Permalink to this heading\")\n\n*   Each row has the below 6 columns\n    \n    *   id: Unique identifier of the research paper\n        \n    *   title: Title of the Research paper\n        \n    *   abstract: Abstract of the research paper\n        \n    *   full\\_text: full text of the research paper\n        \n    *   qas: Questions and answers pertaining to each research paper\n        \n    *   figures\\_and\\_tables: figures and tables of each research paper\n        \n\n\\# Get full text paper data , questions on the paper from training samples of QASPER to generate training dataset for cross-encoder finetuning\nfrom typing import List\n\n\\# Utility function to get full-text of the research papers from the dataset\ndef get\\_full\\_text(sample: dict) \\-> str:\n    \"\"\"\n    :param dict sample: the row sample from QASPER\n    \"\"\"\n    title \\= sample\\[\"title\"\\]\n    abstract \\= sample\\[\"abstract\"\\]\n    sections\\_list \\= sample\\[\"full\\_text\"\\]\\[\"section\\_name\"\\]\n    paragraph\\_list \\= sample\\[\"full\\_text\"\\]\\[\"paragraphs\"\\]\n    combined\\_sections\\_with\\_paras \\= \"\"\n    if len(sections\\_list) \\== len(paragraph\\_list):\n        combined\\_sections\\_with\\_paras += title + \"\\\\t\"\n        combined\\_sections\\_with\\_paras += abstract + \"\\\\t\"\n        for index in range(0, len(sections\\_list)):\n            combined\\_sections\\_with\\_paras += str(sections\\_list\\[index\\]) + \"\\\\t\"\n            combined\\_sections\\_with\\_paras += \"\".join(paragraph\\_list\\[index\\])\n        return combined\\_sections\\_with\\_paras\n\n    else:\n        print(\"Not the same number of sections as paragraphs list\")\n\n\\# utility function to extract list of questions from the dataset\ndef get\\_questions(sample: dict) \\-> List\\[str\\]:\n    \"\"\"\n    :param dict sample: the row sample from QASPER\n    \"\"\"\n    questions\\_list \\= sample\\[\"qas\"\\]\\[\"question\"\\]\n    return questions\\_list\n\ndoc\\_qa\\_dict\\_list \\= \\[\\]\n\nfor train\\_sample in train\\_samples:\n    full\\_text \\= get\\_full\\_text(train\\_sample)\n    questions\\_list \\= get\\_questions(train\\_sample)\n    local\\_dict \\= {\"paper\": full\\_text, \"questions\": questions\\_list}\n    doc\\_qa\\_dict\\_list.append(local\\_dict)\n\n\\# Save training data as a csv\nimport pandas as pd\n\ndf\\_train \\= pd.DataFrame(doc\\_qa\\_dict\\_list)\ndf\\_train.to\\_csv(\"train.csv\")\n\n### Generate RAG Eval test data[\uf0c1](#generate-rag-eval-test-data \"Permalink to this heading\")\n\n\\# Get evaluation data papers , questions and answers\n\"\"\"\nThe Answers field in the dataset follow the below format:-\nUnanswerable answers have \"unanswerable\" set to true.\n\nThe remaining answers have exactly one of the following fields being non-empty.\n\n\"extractive\\_spans\" are spans in the paper which serve as the answer.\n\"free\\_form\\_answer\" is a written out answer.\n\"yes\\_no\" is true iff the answer is Yes, and false iff the answer is No.\n\nWe accept only free-form answers and for all the other kind of answers we set their value to 'Unacceptable',\nto better evaluate the performance of the query engine using pairwise comparision evaluator as it uses GPT-4 which is biased towards preferring long answers more.\nhttps://www.anyscale.com/blog/a-comprehensive-guide-for-building-rag-based-llm-applications-part-1\n\nSo in the case of 'yes\\_no' answers it can favour Query Engine answers more than reference answers.\nAlso in the case of extracted spans it can favour reference answers more than Query engine generated answers.\n\n\"\"\"\n\neval\\_doc\\_qa\\_answer\\_list \\= \\[\\]\n\n\\# Utility function to extract answers from the dataset\ndef get\\_answers(sample: dict) \\-> List\\[str\\]:\n    \"\"\"\n    :param dict sample: the row sample from the train split of QASPER\n    \"\"\"\n    final\\_answers\\_list \\= \\[\\]\n    answers \\= sample\\[\"qas\"\\]\\[\"answers\"\\]\n    for answer in answers:\n        local\\_answer \\= \"\"\n        types\\_of\\_answers \\= answer\\[\"answer\"\\]\\[0\\]\n        if types\\_of\\_answers\\[\"unanswerable\"\\] \\== False:\n            if types\\_of\\_answers\\[\"free\\_form\\_answer\"\\] != \"\":\n                local\\_answer \\= types\\_of\\_answers\\[\"free\\_form\\_answer\"\\]\n            else:\n                local\\_answer \\= \"Unacceptable\"\n        else:\n            local\\_answer \\= \"Unacceptable\"\n\n        final\\_answers\\_list.append(local\\_answer)\n\n    return final\\_answers\\_list\n\nfor test\\_sample in test\\_samples:\n    full\\_text \\= get\\_full\\_text(test\\_sample)\n    questions\\_list \\= get\\_questions(test\\_sample)\n    answers\\_list \\= get\\_answers(test\\_sample)\n    local\\_dict \\= {\n        \"paper\": full\\_text,\n        \"questions\": questions\\_list,\n        \"answers\": answers\\_list,\n    }\n    eval\\_doc\\_qa\\_answer\\_list.append(local\\_dict)\n\nlen(eval\\_doc\\_qa\\_answer\\_list)\n\n\\# Save eval data as a csv\nimport pandas as pd\n\ndf\\_test \\= pd.DataFrame(eval\\_doc\\_qa\\_answer\\_list)\ndf\\_test.to\\_csv(\"test.csv\")\n\n\\# The Rag Eval test data can be found at the below dropbox link\n\\# https://www.dropbox.com/scl/fi/3lmzn6714oy358mq0vawm/test.csv?rlkey=yz16080te4van7fvnksi9kaed&dl=0\n\n### Generate Finetuning Dataset[\uf0c1](#generate-finetuning-dataset \"Permalink to this heading\")\n\n\\# Download the latest version of llama-index\n!pip install llama-index \\--quiet\n\n\\# Generate the respective training dataset from the intial train data collected from QASPER in the format required by\nimport os\nfrom llama\\_index import SimpleDirectoryReader\nimport openai\nfrom llama\\_index.finetuning.cross\\_encoders.dataset\\_gen import (\n    generate\\_ce\\_fine\\_tuning\\_dataset,\n    generate\\_synthetic\\_queries\\_over\\_documents,\n)\n\nfrom llama\\_index.finetuning.cross\\_encoders.cross\\_encoder import (\n    CrossEncoderFinetuneEngine,\n)\n\nos.environ\\[\"OPENAI\\_API\\_KEY\"\\] \\= \"sk-\"\nopenai.api\\_key \\= os.environ\\[\"OPENAI\\_API\\_KEY\"\\]\n\nfrom llama\\_index import Document\n\nfinal\\_finetuning\\_data\\_list \\= \\[\\]\nfor paper in doc\\_qa\\_dict\\_list:\n    questions\\_list \\= paper\\[\"questions\"\\]\n    documents \\= \\[Document(text\\=paper\\[\"paper\"\\])\\]\n    local\\_finetuning\\_dataset \\= generate\\_ce\\_fine\\_tuning\\_dataset(\n        documents\\=documents,\n        questions\\_list\\=questions\\_list,\n        max\\_chunk\\_length\\=256,\n        top\\_k\\=5,\n    )\n    final\\_finetuning\\_data\\_list.extend(local\\_finetuning\\_dataset)\n\n\\# Total samples in the final fine-tuning dataset\nlen(final\\_finetuning\\_data\\_list)\n\n\\# Save final fine-tuning dataset\nimport pandas as pd\n\ndf\\_finetuning\\_dataset \\= pd.DataFrame(final\\_finetuning\\_data\\_list)\ndf\\_finetuning\\_dataset.to\\_csv(\"fine\\_tuning.csv\")\n\n\\# The finetuning dataset can be found at the below dropbox link:-\n\\# https://www.dropbox.com/scl/fi/zu6vtisp1j3wg2hbje5xv/fine\\_tuning.csv?rlkey=0jr6fud8sqk342agfjbzvwr9x&dl=0\n\n\\# Load fine-tuning dataset\n\nfinetuning\\_dataset \\= final\\_finetuning\\_data\\_list\n\nCrossEncoderFinetuningDatasetSample(query='Do they repot results only on English data?', context='addition to precision, recall, and F1 scores for both tasks, we show the average of the F1 scores across both tasks. On the ADE dataset, we achieve SOTA results for both the NER and RE tasks. On the CoNLL04 dataset, we achieve SOTA results on the NER task, while our performance on the RE task is competitive with other recent models. On both datasets, we achieve SOTA results when considering the average F1 score across both tasks. The largest gain relative to the previous SOTA performance is on the RE task of the ADE dataset, where we see an absolute improvement of 4.5 on the macro-average F1 score.While the model of Eberts and Ulges eberts2019span outperforms our proposed architecture on the CoNLL04 RE task, their results come at the cost of greater model complexity. As mentioned above, Eberts and Ulges fine-tune the BERTBASE model, which has 110 million trainable parameters. In contrast, given the hyperparameters used for final training on the CoNLL04 dataset, our proposed architecture has approximately 6 million trainable parameters.The fact that the optimal number of task-specific layers differed between the two datasets demonstrates the', score=0)\n\n### Generate Reranking Eval test data[\uf0c1](#generate-reranking-eval-test-data \"Permalink to this heading\")\n\n\\# Download RAG Eval test data\n!wget \\-O test.csv https://www.dropbox.com/scl/fi/3lmzn6714oy358mq0vawm/test.csv?rlkey\\=yz16080te4van7fvnksi9kaed&dl\\=0\n\n\\# Generate Reranking Eval Dataset from the Eval data\nimport pandas as pd\nimport ast  \\# Used to safely evaluate the string as a list\n\n\\# Load Eval Data\ndf\\_test \\= pd.read\\_csv(\"/content/test.csv\", index\\_col\\=0)\n\ndf\\_test\\[\"questions\"\\] \\= df\\_test\\[\"questions\"\\].apply(ast.literal\\_eval)\ndf\\_test\\[\"answers\"\\] \\= df\\_test\\[\"answers\"\\].apply(ast.literal\\_eval)\nprint(f\"Number of papers in the test sample:- {len(df\\_test)}\")\n\nNumber of papers in the test sample:- 80\n\nfrom llama\\_index import Document\n\nfinal\\_eval\\_data\\_list \\= \\[\\]\nfor index, row in df\\_test.iterrows():\n    documents \\= \\[Document(text\\=row\\[\"paper\"\\])\\]\n    query\\_list \\= row\\[\"questions\"\\]\n    local\\_eval\\_dataset \\= generate\\_ce\\_fine\\_tuning\\_dataset(\n        documents\\=documents,\n        questions\\_list\\=query\\_list,\n        max\\_chunk\\_length\\=256,\n        top\\_k\\=5,\n    )\n    relevant\\_query\\_list \\= \\[\\]\n    relevant\\_context\\_list \\= \\[\\]\n\n    for item in local\\_eval\\_dataset:\n        if item.score \\== 1:\n            relevant\\_query\\_list.append(item.query)\n            relevant\\_context\\_list.append(item.context)\n\n    if len(relevant\\_query\\_list) \\> 0:\n        final\\_eval\\_data\\_list.append(\n            {\n                \"paper\": row\\[\"paper\"\\],\n                \"questions\": relevant\\_query\\_list,\n                \"context\": relevant\\_context\\_list,\n            }\n        )\n\n\\# Length of Reranking Eval Dataset\nlen(final\\_eval\\_data\\_list)\n\n\\# Save Reranking eval dataset\nimport pandas as pd\n\ndf\\_finetuning\\_dataset \\= pd.DataFrame(final\\_eval\\_data\\_list)\ndf\\_finetuning\\_dataset.to\\_csv(\"reranking\\_test.csv\")\n\n\\# The reranking dataset can be found at the below dropbox link\n\\# https://www.dropbox.com/scl/fi/mruo5rm46k1acm1xnecev/reranking\\_test.csv?rlkey=hkniwowq0xrc3m0ywjhb2gf26&dl=0\n\n## Finetune Cross-Encoder[\uf0c1](#finetune-cross-encoder \"Permalink to this heading\")\n\n!pip install huggingface\\_hub \\--quiet\n\nfrom huggingface\\_hub import notebook\\_login\n\nnotebook\\_login()\n\nfrom sentence\\_transformers import SentenceTransformer\n\n\\# Initialise the cross-encoder fine-tuning engine\nfinetuning\\_engine \\= CrossEncoderFinetuneEngine(\n    dataset\\=finetuning\\_dataset, epochs\\=2, batch\\_size\\=8\n)\n\n\\# Finetune the cross-encoder model\nfinetuning\\_engine.finetune()\n\n\\# Push model to HuggingFace Hub\nfinetuning\\_engine.push\\_to\\_hub(\n    repo\\_id\\=\"bpHigh/Cross-Encoder-LLamaIndex-Demo-v2\"\n)\n\n## Reranking Evaluation[\uf0c1](#reranking-evaluation \"Permalink to this heading\")\n\n!pip install nest-asyncio \\--quiet\n\n\\# attach to the same event-loop\nimport nest\\_asyncio\n\nnest\\_asyncio.apply()\n\n\\# Download Reranking test data\n!wget \\-O reranking\\_test.csv https://www.dropbox.com/scl/fi/mruo5rm46k1acm1xnecev/reranking\\_test.csv?rlkey\\=hkniwowq0xrc3m0ywjhb2gf26&dl\\=0\n\n\\--2023-10-12 04:47:18--  https://www.dropbox.com/scl/fi/mruo5rm46k1acm1xnecev/reranking\\_test.csv?rlkey=hkniwowq0xrc3m0ywjhb2gf26\nResolving www.dropbox.com (www.dropbox.com)... 162.125.85.18, 2620:100:6035:18::a27d:5512\nConnecting to www.dropbox.com (www.dropbox.com)|162.125.85.18|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://uc414efe80c7598407c86166866d.dl.dropboxusercontent.com/cd/0/inline/CFcxAwrNZkpcZLmEipK-DxnJF6BKMu8rKmoRp-FUoqRF83K1t0kG0OzBliY-8E7EmbRqkkRZENO4ayEUPgul8lzY7iyARc7kauQ4iHdGps9\\_Y4jHyuLstzxbVT1TDQyhotVUYWZ9uHNmDHI9UFWAKBVm/file# \\[following\\]\n--2023-10-12 04:47:18--  https://uc414efe80c7598407c86166866d.dl.dropboxusercontent.com/cd/0/inline/CFcxAwrNZkpcZLmEipK-DxnJF6BKMu8rKmoRp-FUoqRF83K1t0kG0OzBliY-8E7EmbRqkkRZENO4ayEUPgul8lzY7iyARc7kauQ4iHdGps9\\_Y4jHyuLstzxbVT1TDQyhotVUYWZ9uHNmDHI9UFWAKBVm/file\nResolving uc414efe80c7598407c86166866d.dl.dropboxusercontent.com (uc414efe80c7598407c86166866d.dl.dropboxusercontent.com)... 162.125.80.15, 2620:100:6035:15::a27d:550f\nConnecting to uc414efe80c7598407c86166866d.dl.dropboxusercontent.com (uc414efe80c7598407c86166866d.dl.dropboxusercontent.com)|162.125.80.15|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 967072 (944K) \\[text/plain\\]\nSaving to: \u2018reranking\\_test.csv\u2019\n\nreranking\\_test.csv  100%\\[===================>\\] 944.41K  3.55MB/s    in 0.3s    \n\n2023-10-12 04:47:19 (3.55 MB/s) - \u2018reranking\\_test.csv\u2019 saved \\[967072/967072\\]\n\n\\# Load Reranking Dataset\nimport pandas as pd\nimport ast\n\ndf\\_reranking \\= pd.read\\_csv(\"/content/reranking\\_test.csv\", index\\_col\\=0)\ndf\\_reranking\\[\"questions\"\\] \\= df\\_reranking\\[\"questions\"\\].apply(ast.literal\\_eval)\ndf\\_reranking\\[\"context\"\\] \\= df\\_reranking\\[\"context\"\\].apply(ast.literal\\_eval)\nprint(f\"Number of papers in the reranking eval dataset:- {len(df\\_reranking)}\")\n\nNumber of papers in the reranking eval dataset:- 38\n\n|     | paper | questions | context |\n| --- | --- | --- | --- |\n| 0   | Identifying Condition-Action Statements in Med... | \\[What supervised machine learning models do th... | \\[Identifying Condition-Action Statements in Me... |\n\n\\# We evaluate by calculating hits for each (question, context) pair,\n\\# we retrieve top-k documents with the question, and\n\\# it\u2019s a hit if the results contain the context\nfrom llama\\_index.indices.postprocessor import SentenceTransformerRerank\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    Response,\n)\nfrom llama\\_index.retrievers import VectorIndexRetriever\nfrom llama\\_index.llms import OpenAI\nfrom llama\\_index import Document\n\nimport os\nimport openai\nimport pandas as pd\n\nos.environ\\[\"OPENAI\\_API\\_KEY\"\\] \\= \"sk-\"\nopenai.api\\_key \\= os.environ\\[\"OPENAI\\_API\\_KEY\"\\]\n\nservice\\_context\\_reranker\\_eval \\= ServiceContext.from\\_defaults(chunk\\_size\\=256)\nrerank\\_base \\= SentenceTransformerRerank(\n    model\\=\"cross-encoder/ms-marco-MiniLM-L-12-v2\", top\\_n\\=3\n)\n\nrerank\\_finetuned \\= SentenceTransformerRerank(\n    model\\=\"bpHigh/Cross-Encoder-LLamaIndex-Demo-v2\", top\\_n\\=3\n)\n\nwithout\\_reranker\\_hits \\= 0\nbase\\_reranker\\_hits \\= 0\nfinetuned\\_reranker\\_hits \\= 0\ntotal\\_number\\_of\\_context \\= 0\nfor index, row in df\\_reranking.iterrows():\n    documents \\= \\[Document(text\\=row\\[\"paper\"\\])\\]\n    query\\_list \\= row\\[\"questions\"\\]\n    context\\_list \\= row\\[\"context\"\\]\n\n    assert len(query\\_list) \\== len(context\\_list)\n    vector\\_index \\= VectorStoreIndex.from\\_documents(\n        documents, service\\_context\\=service\\_context\\_reranker\\_eval\n    )\n\n    retriever\\_without\\_reranker \\= vector\\_index.as\\_query\\_engine(\n        similarity\\_top\\_k\\=3, response\\_mode\\=\"no\\_text\"\n    )\n    retriever\\_with\\_base\\_reranker \\= vector\\_index.as\\_query\\_engine(\n        similarity\\_top\\_k\\=8,\n        response\\_mode\\=\"no\\_text\",\n        node\\_postprocessors\\=\\[rerank\\_base\\],\n    )\n    retriever\\_with\\_finetuned\\_reranker \\= vector\\_index.as\\_query\\_engine(\n        similarity\\_top\\_k\\=8,\n        response\\_mode\\=\"no\\_text\",\n        node\\_postprocessors\\=\\[rerank\\_finetuned\\],\n    )\n\n    for index in range(0, len(query\\_list)):\n        query \\= query\\_list\\[index\\]\n        context \\= context\\_list\\[index\\]\n        total\\_number\\_of\\_context += 1\n\n        response\\_without\\_reranker \\= retriever\\_without\\_reranker.query(query)\n        without\\_reranker\\_nodes \\= response\\_without\\_reranker.source\\_nodes\n\n        for node in without\\_reranker\\_nodes:\n            if context in node.node.text or node.node.text in context:\n                without\\_reranker\\_hits += 1\n\n        response\\_with\\_base\\_reranker \\= retriever\\_with\\_base\\_reranker.query(query)\n        with\\_base\\_reranker\\_nodes \\= response\\_with\\_base\\_reranker.source\\_nodes\n\n        for node in with\\_base\\_reranker\\_nodes:\n            if context in node.node.text or node.node.text in context:\n                base\\_reranker\\_hits += 1\n\n        response\\_with\\_finetuned\\_reranker \\= (\n            retriever\\_with\\_finetuned\\_reranker.query(query)\n        )\n        with\\_finetuned\\_reranker\\_nodes \\= (\n            response\\_with\\_finetuned\\_reranker.source\\_nodes\n        )\n\n        for node in with\\_finetuned\\_reranker\\_nodes:\n            if context in node.node.text or node.node.text in context:\n                finetuned\\_reranker\\_hits += 1\n\n        assert (\n            len(with\\_finetuned\\_reranker\\_nodes)\n            \\== len(with\\_base\\_reranker\\_nodes)\n            \\== len(without\\_reranker\\_nodes)\n            \\== 3\n        )\n\n### Results[\uf0c1](#results \"Permalink to this heading\")\n\nAs we can see below we get more hits with finetuned\\_cross\\_encoder compared to other options.\n\nwithout\\_reranker\\_scores \\= \\[without\\_reranker\\_hits\\]\nbase\\_reranker\\_scores \\= \\[base\\_reranker\\_hits\\]\nfinetuned\\_reranker\\_scores \\= \\[finetuned\\_reranker\\_hits\\]\nreranker\\_eval\\_dict \\= {\n    \"Metric\": \"Hits\",\n    \"OpenAI\\_Embeddings\": without\\_reranker\\_scores,\n    \"Base\\_cross\\_encoder\": base\\_reranker\\_scores,\n    \"Finetuned\\_cross\\_encoder\": finetuned\\_reranker\\_hits,\n    \"Total Relevant Context\": total\\_number\\_of\\_context,\n}\ndf\\_reranker\\_eval\\_results \\= pd.DataFrame(reranker\\_eval\\_dict)\ndisplay(df\\_reranker\\_eval\\_results)\n\n|     | Metric | OpenAI\\_Embeddings | Base\\_cross\\_encoder | Finetuned\\_cross\\_encoder | Total Relevant Context |\n| --- | --- | --- | --- | --- | --- |\n| 0   | Hits | 30  | 34  | 37  | 85  |\n\n## RAG Evaluation[\uf0c1](#rag-evaluation \"Permalink to this heading\")\n\n\\# Download RAG Eval test data\n!wget \\-O test.csv https://www.dropbox.com/scl/fi/3lmzn6714oy358mq0vawm/test.csv?rlkey\\=yz16080te4van7fvnksi9kaed&dl\\=0\n\n\\--2023-10-12 04:47:36--  https://www.dropbox.com/scl/fi/3lmzn6714oy358mq0vawm/test.csv?rlkey=yz16080te4van7fvnksi9kaed\nResolving www.dropbox.com (www.dropbox.com)... 162.125.85.18, 2620:100:6035:18::a27d:5512\nConnecting to www.dropbox.com (www.dropbox.com)|162.125.85.18|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://ucb6087b1b853dad24e8201987fc.dl.dropboxusercontent.com/cd/0/inline/CFfI9UezsVwFpN4CHgYrSFveuNE01DfczDaeFGZO-Ud5VdDRff1LNG7hEhkBZwVljuRde-EZU336ASpnZs32qVePvpQEFnKB2SeplFpMt50G0m5IZepyV6pYPbNAhm0muYE\\_rjhlolHxRUQP\\_iaJBX9z/file# \\[following\\]\n--2023-10-12 04:47:38--  https://ucb6087b1b853dad24e8201987fc.dl.dropboxusercontent.com/cd/0/inline/CFfI9UezsVwFpN4CHgYrSFveuNE01DfczDaeFGZO-Ud5VdDRff1LNG7hEhkBZwVljuRde-EZU336ASpnZs32qVePvpQEFnKB2SeplFpMt50G0m5IZepyV6pYPbNAhm0muYE\\_rjhlolHxRUQP\\_iaJBX9z/file\nResolving ucb6087b1b853dad24e8201987fc.dl.dropboxusercontent.com (ucb6087b1b853dad24e8201987fc.dl.dropboxusercontent.com)... 162.125.80.15, 2620:100:6035:15::a27d:550f\nConnecting to ucb6087b1b853dad24e8201987fc.dl.dropboxusercontent.com (ucb6087b1b853dad24e8201987fc.dl.dropboxusercontent.com)|162.125.80.15|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1821706 (1.7M) \\[text/plain\\]\nSaving to: \u2018test.csv\u2019\n\ntest.csv            100%\\[===================>\\]   1.74M  6.37MB/s    in 0.3s    \n\n2023-10-12 04:47:38 (6.37 MB/s) - \u2018test.csv\u2019 saved \\[1821706/1821706\\]\n\nimport pandas as pd\nimport ast  \\# Used to safely evaluate the string as a list\n\n\\# Load Eval Data\ndf\\_test \\= pd.read\\_csv(\"/content/test.csv\", index\\_col\\=0)\n\ndf\\_test\\[\"questions\"\\] \\= df\\_test\\[\"questions\"\\].apply(ast.literal\\_eval)\ndf\\_test\\[\"answers\"\\] \\= df\\_test\\[\"answers\"\\].apply(ast.literal\\_eval)\nprint(f\"Number of papers in the test sample:- {len(df\\_test)}\")\n\nNumber of papers in the test sample:- 80\n\n\\# Look at one sample of eval data which has a research paper questions on it and the respective reference answers\ndf\\_test.head(1)\n\n|     | paper | questions | answers |\n| --- | --- | --- | --- |\n| 0   | Identifying Condition-Action Statements in Med... | \\[What supervised machine learning models do th... | \\[Unacceptable, Unacceptable, 1470 sentences, U... |\n\n### Baseline Evaluation[\uf0c1](#baseline-evaluation \"Permalink to this heading\")\n\nJust using OpenAI Embeddings for retrieval without any re-ranker\n\n#### Eval Method:-[\uf0c1](#eval-method \"Permalink to this heading\")\n\n1.  Iterate over each row of the test dataset:-\n    \n    1.  For the current row being iterated, create a vector index using the paper document provided in the paper column of the dataset\n        \n    2.  Query the vector index with a top\\_k value of top 3 nodes without any reranker\n        \n    3.  Compare the generated answers with the reference answers of the respective sample using Pairwise Comparison Evaluator and add the scores to a list\n        \n2.  Repeat 1 untill all the rows have been iterated\n    \n3.  Calculate avg scores over all samples/ rows\n    \n\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    Response,\n)\nfrom llama\\_index.llms import OpenAI\nfrom llama\\_index import Document\nfrom llama\\_index.evaluation import PairwiseComparisonEvaluator\nfrom llama\\_index.evaluation.eval\\_utils import get\\_responses, get\\_results\\_df\n\nimport os\nimport openai\nimport pandas as pd\n\nos.environ\\[\"OPENAI\\_API\\_KEY\"\\] \\= \"sk-\"\nopenai.api\\_key \\= os.environ\\[\"OPENAI\\_API\\_KEY\"\\]\n\ngpt4 \\= OpenAI(temperature\\=0, model\\=\"gpt-4\")\nservice\\_context\\_gpt4 \\= ServiceContext.from\\_defaults(llm\\=gpt4)\n\nevaluator\\_gpt4\\_pairwise \\= PairwiseComparisonEvaluator(\n    service\\_context\\=service\\_context\\_gpt4\n)\n\npairwise\\_scores\\_list \\= \\[\\]\n\nno\\_reranker\\_dict\\_list \\= \\[\\]\n\n\\# Iterate over the rows of the dataset\nfor index, row in df\\_test.iterrows():\n    documents \\= \\[Document(text\\=row\\[\"paper\"\\])\\]\n    query\\_list \\= row\\[\"questions\"\\]\n    reference\\_answers\\_list \\= row\\[\"answers\"\\]\n    number\\_of\\_accepted\\_queries \\= 0\n    \\# Create vector index for the current row being iterated\n    vector\\_index \\= VectorStoreIndex.from\\_documents(documents)\n\n    \\# Query the vector index with a top\\_k value of top 3 documents without any reranker\n    query\\_engine \\= vector\\_index.as\\_query\\_engine(similarity\\_top\\_k\\=3)\n\n    assert len(query\\_list) \\== len(reference\\_answers\\_list)\n    pairwise\\_local\\_score \\= 0\n\n    for index in range(0, len(query\\_list)):\n        query \\= query\\_list\\[index\\]\n        reference \\= reference\\_answers\\_list\\[index\\]\n\n        if reference != \"Unacceptable\":\n            number\\_of\\_accepted\\_queries += 1\n\n            response \\= str(query\\_engine.query(query))\n\n            no\\_reranker\\_dict \\= {\n                \"query\": query,\n                \"response\": response,\n                \"reference\": reference,\n            }\n            no\\_reranker\\_dict\\_list.append(no\\_reranker\\_dict)\n\n            \\# Compare the generated answers with the reference answers of the respective sample using\n            \\# Pairwise Comparison Evaluator and add the scores to a list\n\n            pairwise\\_eval\\_result \\= await evaluator\\_gpt4\\_pairwise.aevaluate(\n                query, response\\=response, reference\\=reference\n            )\n\n            pairwise\\_score \\= pairwise\\_eval\\_result.score\n\n            pairwise\\_local\\_score += pairwise\\_score\n\n        else:\n            pass\n\n    if number\\_of\\_accepted\\_queries \\> 0:\n        avg\\_pairwise\\_local\\_score \\= (\n            pairwise\\_local\\_score / number\\_of\\_accepted\\_queries\n        )\n        pairwise\\_scores\\_list.append(avg\\_pairwise\\_local\\_score)\n\noveral\\_pairwise\\_average\\_score \\= sum(pairwise\\_scores\\_list) / len(\n    pairwise\\_scores\\_list\n)\n\ndf\\_responses \\= pd.DataFrame(no\\_reranker\\_dict\\_list)\ndf\\_responses.to\\_csv(\"No\\_Reranker\\_Responses.csv\")\n\nresults\\_dict \\= {\n    \"name\": \\[\"Without Reranker\"\\],\n    \"pairwise score\": \\[overal\\_pairwise\\_average\\_score\\],\n}\nresults\\_df \\= pd.DataFrame(results\\_dict)\ndisplay(results\\_df)\n\n|     | name | pairwise score |\n| --- | --- | --- |\n| 0   | Without Reranker | 0.553788 |\n\n### Evaluate with base reranker[\uf0c1](#evaluate-with-base-reranker \"Permalink to this heading\")\n\nOpenAI Embeddings + `cross-encoder/ms-marco-MiniLM-L-12-v2` as reranker\n\n#### Eval Method:-[\uf0c1](#id1 \"Permalink to this heading\")\n\n1.  Iterate over each row of the test dataset:-\n    \n    1.  For the current row being iterated, create a vector index using the paper document provided in the paper column of the dataset\n        \n    2.  Query the vector index with a top\\_k value of top 5 nodes.\n        \n    3.  Use cross-encoder/ms-marco-MiniLM-L-12-v2 as a reranker as a NodePostprocessor to get top\\_k value of top 3 nodes out of the 8 nodes\n        \n    4.  Compare the generated answers with the reference answers of the respective sample using Pairwise Comparison Evaluator and add the scores to a list\n        \n2.  Repeat 1 untill all the rows have been iterated\n    \n3.  Calculate avg scores over all samples/ rows\n    \n\nfrom llama\\_index.indices.postprocessor import SentenceTransformerRerank\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    Response,\n)\nfrom llama\\_index.llms import OpenAI\nfrom llama\\_index import Document\nfrom llama\\_index.evaluation import PairwiseComparisonEvaluator\nimport os\nimport openai\n\nos.environ\\[\"OPENAI\\_API\\_KEY\"\\] \\= \"sk-\"\nopenai.api\\_key \\= os.environ\\[\"OPENAI\\_API\\_KEY\"\\]\n\nrerank \\= SentenceTransformerRerank(\n    model\\=\"cross-encoder/ms-marco-MiniLM-L-12-v2\", top\\_n\\=3\n)\n\ngpt4 \\= OpenAI(temperature\\=0, model\\=\"gpt-4\")\nservice\\_context\\_gpt4 \\= ServiceContext.from\\_defaults(llm\\=gpt4)\n\nevaluator\\_gpt4\\_pairwise \\= PairwiseComparisonEvaluator(\n    service\\_context\\=service\\_context\\_gpt4\n)\n\npairwise\\_scores\\_list \\= \\[\\]\n\nbase\\_reranker\\_dict\\_list \\= \\[\\]\n\n\\# Iterate over the rows of the dataset\nfor index, row in df\\_test.iterrows():\n    documents \\= \\[Document(text\\=row\\[\"paper\"\\])\\]\n    query\\_list \\= row\\[\"questions\"\\]\n    reference\\_answers\\_list \\= row\\[\"answers\"\\]\n\n    number\\_of\\_accepted\\_queries \\= 0\n    \\# Create vector index for the current row being iterated\n    vector\\_index \\= VectorStoreIndex.from\\_documents(documents)\n\n    \\# Query the vector index with a top\\_k value of top 8 nodes with reranker\n    \\# as cross-encoder/ms-marco-MiniLM-L-12-v2\n    query\\_engine \\= vector\\_index.as\\_query\\_engine(\n        similarity\\_top\\_k\\=8, node\\_postprocessors\\=\\[rerank\\]\n    )\n\n    assert len(query\\_list) \\== len(reference\\_answers\\_list)\n    pairwise\\_local\\_score \\= 0\n\n    for index in range(0, len(query\\_list)):\n        query \\= query\\_list\\[index\\]\n        reference \\= reference\\_answers\\_list\\[index\\]\n\n        if reference != \"Unacceptable\":\n            number\\_of\\_accepted\\_queries += 1\n\n            response \\= str(query\\_engine.query(query))\n\n            base\\_reranker\\_dict \\= {\n                \"query\": query,\n                \"response\": response,\n                \"reference\": reference,\n            }\n            base\\_reranker\\_dict\\_list.append(base\\_reranker\\_dict)\n\n            \\# Compare the generated answers with the reference answers of the respective sample using\n            \\# Pairwise Comparison Evaluator and add the scores to a list\n\n            pairwise\\_eval\\_result \\= await evaluator\\_gpt4\\_pairwise.aevaluate(\n                query\\=query, response\\=response, reference\\=reference\n            )\n\n            pairwise\\_score \\= pairwise\\_eval\\_result.score\n\n            pairwise\\_local\\_score += pairwise\\_score\n\n        else:\n            pass\n\n    if number\\_of\\_accepted\\_queries \\> 0:\n        avg\\_pairwise\\_local\\_score \\= (\n            pairwise\\_local\\_score / number\\_of\\_accepted\\_queries\n        )\n        pairwise\\_scores\\_list.append(avg\\_pairwise\\_local\\_score)\n\noveral\\_pairwise\\_average\\_score \\= sum(pairwise\\_scores\\_list) / len(\n    pairwise\\_scores\\_list\n)\n\ndf\\_responses \\= pd.DataFrame(base\\_reranker\\_dict\\_list)\ndf\\_responses.to\\_csv(\"Base\\_Reranker\\_Responses.csv\")\n\nresults\\_dict \\= {\n    \"name\": \\[\"With base cross-encoder/ms-marco-MiniLM-L-12-v2 as Reranker\"\\],\n    \"pairwise score\": \\[overal\\_pairwise\\_average\\_score\\],\n}\nresults\\_df \\= pd.DataFrame(results\\_dict)\ndisplay(results\\_df)\n\n|     | name | pairwise score |\n| --- | --- | --- |\n| 0   | With base cross-encoder/ms-marco-MiniLM-L-12-v... | 0.556818 |\n\n### Evaluate with Fine-Tuned re-ranker[\uf0c1](#evaluate-with-fine-tuned-re-ranker \"Permalink to this heading\")\n\nOpenAI Embeddings + `bpHigh/Cross-Encoder-LLamaIndex-Demo-v2` as reranker\n\n#### Eval Method:-[\uf0c1](#id2 \"Permalink to this heading\")\n\n1.  Iterate over each row of the test dataset:-\n    \n    1.  For the current row being iterated, create a vector index using the paper document provided in the paper column of the dataset\n        \n    2.  Query the vector index with a top\\_k value of top 5 nodes.\n        \n    3.  Use finetuned version of cross-encoder/ms-marco-MiniLM-L-12-v2 saved as bpHigh/Cross-Encoder-LLamaIndex-Demo as a reranker as a NodePostprocessor to get top\\_k value of top 3 nodes out of the 8 nodes\n        \n    4.  Compare the generated answers with the reference answers of the respective sample using Pairwise Comparison Evaluator and add the scores to a list\n        \n2.  Repeat 1 untill all the rows have been iterated\n    \n3.  Calculate avg scores over all samples/ rows\n    \n\nfrom llama\\_index.indices.postprocessor import SentenceTransformerRerank\nfrom llama\\_index import (\n    VectorStoreIndex,\n    SimpleDirectoryReader,\n    ServiceContext,\n    Response,\n)\nfrom llama\\_index.llms import OpenAI\nfrom llama\\_index import Document\nfrom llama\\_index.evaluation import PairwiseComparisonEvaluator\nimport os\nimport openai\n\nos.environ\\[\"OPENAI\\_API\\_KEY\"\\] \\= \"sk-\"\nopenai.api\\_key \\= os.environ\\[\"OPENAI\\_API\\_KEY\"\\]\n\nrerank \\= SentenceTransformerRerank(\n    model\\=\"bpHigh/Cross-Encoder-LLamaIndex-Demo-v2\", top\\_n\\=3\n)\n\ngpt4 \\= OpenAI(temperature\\=0, model\\=\"gpt-4\")\nservice\\_context\\_gpt4 \\= ServiceContext.from\\_defaults(llm\\=gpt4)\n\nevaluator\\_gpt4\\_pairwise \\= PairwiseComparisonEvaluator(\n    service\\_context\\=service\\_context\\_gpt4\n)\n\npairwise\\_scores\\_list \\= \\[\\]\n\nfinetuned\\_reranker\\_dict\\_list \\= \\[\\]\n\n\\# Iterate over the rows of the dataset\nfor index, row in df\\_test.iterrows():\n    documents \\= \\[Document(text\\=row\\[\"paper\"\\])\\]\n    query\\_list \\= row\\[\"questions\"\\]\n    reference\\_answers\\_list \\= row\\[\"answers\"\\]\n\n    number\\_of\\_accepted\\_queries \\= 0\n    \\# Create vector index for the current row being iterated\n    vector\\_index \\= VectorStoreIndex.from\\_documents(documents)\n\n    \\# Query the vector index with a top\\_k value of top 8 nodes with reranker\n    \\# as cross-encoder/ms-marco-MiniLM-L-12-v2\n    query\\_engine \\= vector\\_index.as\\_query\\_engine(\n        similarity\\_top\\_k\\=8, node\\_postprocessors\\=\\[rerank\\]\n    )\n\n    assert len(query\\_list) \\== len(reference\\_answers\\_list)\n    pairwise\\_local\\_score \\= 0\n\n    for index in range(0, len(query\\_list)):\n        query \\= query\\_list\\[index\\]\n        reference \\= reference\\_answers\\_list\\[index\\]\n\n        if reference != \"Unacceptable\":\n            number\\_of\\_accepted\\_queries += 1\n\n            response \\= str(query\\_engine.query(query))\n\n            finetuned\\_reranker\\_dict \\= {\n                \"query\": query,\n                \"response\": response,\n                \"reference\": reference,\n            }\n            finetuned\\_reranker\\_dict\\_list.append(finetuned\\_reranker\\_dict)\n\n            \\# Compare the generated answers with the reference answers of the respective sample using\n            \\# Pairwise Comparison Evaluator and add the scores to a list\n\n            pairwise\\_eval\\_result \\= await evaluator\\_gpt4\\_pairwise.aevaluate(\n                query, response\\=response, reference\\=reference\n            )\n\n            pairwise\\_score \\= pairwise\\_eval\\_result.score\n\n            pairwise\\_local\\_score += pairwise\\_score\n\n        else:\n            pass\n\n    if number\\_of\\_accepted\\_queries \\> 0:\n        avg\\_pairwise\\_local\\_score \\= (\n            pairwise\\_local\\_score / number\\_of\\_accepted\\_queries\n        )\n        pairwise\\_scores\\_list.append(avg\\_pairwise\\_local\\_score)\n\noveral\\_pairwise\\_average\\_score \\= sum(pairwise\\_scores\\_list) / len(\n    pairwise\\_scores\\_list\n)\ndf\\_responses \\= pd.DataFrame(finetuned\\_reranker\\_dict\\_list)\ndf\\_responses.to\\_csv(\"Finetuned\\_Reranker\\_Responses.csv\")\n\nresults\\_dict \\= {\n    \"name\": \\[\"With fine-tuned cross-encoder/ms-marco-MiniLM-L-12-v2\"\\],\n    \"pairwise score\": \\[overal\\_pairwise\\_average\\_score\\],\n}\nresults\\_df \\= pd.DataFrame(results\\_dict)\ndisplay(results\\_df)\n\n|     | name | pairwise score |\n| --- | --- | --- |\n| 0   | With fine-tuned cross-encoder/ms-marco-MiniLM-... | 0.6 |\n\n### Results[\uf0c1](#id3 \"Permalink to this heading\")\n\nAs we can see we get the highest pairwise score with finetuned cross-encoder.\n\nAlthough I would like to point that the reranking eval based on hits is a more robust metric compared to pairwise comparision evaluator as I have seen inconsistencies with the scores and there are also many inherent biases present when evaluating using GPT-4"
}