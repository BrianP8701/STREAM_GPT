{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/customization/llms/SimpleIndexDemo-Huggingface_camel.html",
        "title": "HuggingFace LLM - Camel-5b - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## HuggingFace LLM - Camel-5b[\uf0c1](#huggingface-llm-camel-5b \"Permalink to this heading\")\n\n## Load documents, build the VectorStoreIndex[\uf0c1](#load-documents-build-the-vectorstoreindex \"Permalink to this heading\")\n\nimport logging\nimport sys\n\nlogging.basicConfig(stream\\=sys.stdout, level\\=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream\\=sys.stdout))\n\nfrom llama\\_index import VectorStoreIndex, SimpleDirectoryReader, ServiceContext\nfrom llama\\_index.llms import HuggingFaceLLM\n\nINFO:numexpr.utils:Note: NumExpr detected 16 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nNote: NumExpr detected 16 cores but \"NUMEXPR\\_MAX\\_THREADS\" not set, so enforcing safe limit of 8.\nINFO:numexpr.utils:NumExpr defaulting to 8 threads.\nNumExpr defaulting to 8 threads.\n\n/home/loganm/miniconda3/envs/gpt\\_index/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user\\_install.html\n  from .autonotebook import tqdm as notebook\\_tqdm\n\n\\# load documents\ndocuments \\= SimpleDirectoryReader(\"../../data/paul\\_graham\").load\\_data()\n\n\\# setup prompts - specific to StableLM\nfrom llama\\_index.prompts import PromptTemplate\n\n\\# This will wrap the default prompts that are internal to llama-index\n\\# taken from https://huggingface.co/Writer/camel-5b-hf\nquery\\_wrapper\\_prompt \\= PromptTemplate(\n    \"Below is an instruction that describes a task. \"\n    \"Write a response that appropriately completes the request.\\\\n\\\\n\"\n    \"### Instruction:\\\\n{query\\_str}\\\\n\\\\n\\### Response:\"\n)\n\nimport torch\n\nllm \\= HuggingFaceLLM(\n    context\\_window\\=2048,\n    max\\_new\\_tokens\\=256,\n    generate\\_kwargs\\={\"temperature\": 0.25, \"do\\_sample\": False},\n    query\\_wrapper\\_prompt\\=query\\_wrapper\\_prompt,\n    tokenizer\\_name\\=\"Writer/camel-5b-hf\",\n    model\\_name\\=\"Writer/camel-5b-hf\",\n    device\\_map\\=\"auto\",\n    tokenizer\\_kwargs\\={\"max\\_length\": 2048},\n    \\# uncomment this if using CUDA to reduce memory usage\n    \\# model\\_kwargs={\"torch\\_dtype\": torch.float16}\n)\nservice\\_context \\= ServiceContext.from\\_defaults(chunk\\_size\\=512, llm\\=llm)\n\nLoading checkpoint shards: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 \\[00:43<00:00, 14.34s/it\\]\n\nindex \\= VectorStoreIndex.from\\_documents(\n    documents, service\\_context\\=service\\_context\n)\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 27212 tokens\n> \\[build\\_index\\_from\\_nodes\\] Total embedding token usage: 27212 tokens\n\n## Query Index[\uf0c1](#query-index \"Permalink to this heading\")\n\n\\# set Logging to DEBUG for more detailed outputs\nquery\\_engine \\= index.as\\_query\\_engine()\nresponse \\= query\\_engine.query(\"What did the author do growing up?\")\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 8 tokens\n> \\[retrieve\\] Total embedding token usage: 8 tokens\n\nToken indices sequence length is longer than the specified maximum sequence length for this model (954 > 512). Running this sequence through the model will result in indexing errors\nSetting \\`pad\\_token\\_id\\` to \\`eos\\_token\\_id\\`:50256 for open-end generation.\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total LLM token usage: 1026 tokens\n> \\[get\\_response\\] Total LLM token usage: 1026 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total embedding token usage: 0 tokens\n> \\[get\\_response\\] Total embedding token usage: 0 tokens\n\nThe author grew up in a small town in England, attended a prestigious private school, and then went to Cambridge University, where he studied computer science. Afterward, he worked on web infrastructure, wrote essays, and then realized he could write about startups. He then started giving talks, wrote a book, and started interviewing founders for a book on startups.\n\n## Query Index - Streaming[\uf0c1](#query-index-streaming \"Permalink to this heading\")\n\nquery\\_engine \\= index.as\\_query\\_engine(streaming\\=True)\n\n\\# set Logging to DEBUG for more detailed outputs\nresponse\\_stream \\= query\\_engine.query(\"What did the author do growing up?\")\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total LLM token usage: 0 tokens\n> \\[retrieve\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[retrieve\\] Total embedding token usage: 8 tokens\n> \\[retrieve\\] Total embedding token usage: 8 tokens\n\nSetting \\`pad\\_token\\_id\\` to \\`eos\\_token\\_id\\`:50256 for open-end generation.\n\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total LLM token usage: 0 tokens\n> \\[get\\_response\\] Total LLM token usage: 0 tokens\nINFO:llama\\_index.token\\_counter.token\\_counter:> \\[get\\_response\\] Total embedding token usage: 0 tokens\n> \\[get\\_response\\] Total embedding token usage: 0 tokens\n\n\\# can be slower to start streaming since llama-index often involves many LLM calls\nresponse\\_stream.print\\_response\\_stream()\n\nThe author grew up in a small town in England, attended a prestigious private school, and then went to Cambridge University, where he studied computer science. Afterward, he worked on web infrastructure, wrote essays, and then realized he could write about startups. He then started giving talks, wrote a book, and started interviewing founders for a book on startups.<|endoftext|>\n\n\\# can also get a normal response object\nresponse \\= response\\_stream.get\\_response()\nprint(response)\n\n\\# can also iterate over the generator yourself\ngenerated\\_text \\= \"\"\nfor text in response.response\\_gen:\n    generated\\_text += text"
}