{
    "metadata": {
        "type": "web",
        "url": "https://platform.openai.com/docs/guides/fine-tuning/when-can-i-fine-tune-gpt-4-or-gpt-3-5-turbo-16k",
        "title": "Fine-tuning - OpenAI API",
        "description": "Explore resources, tutorials, API docs, and dynamic examples to get the most out of OpenAI's developer platform."
    },
    "text": "[](https://platform.openai.com/docs/guides/fine-tuning/fine-tuning)\n\n## [Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning/fine-tuning)\n\nLearn how to customize a model for your application.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/introduction)\n\n## [Introduction](https://platform.openai.com/docs/guides/fine-tuning/introduction)\n\nThis guide is intended for users of the new OpenAI fine-tuning API. If you are a legacy fine-tuning user, please refer to our [legacy fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning).\n\nFine-tuning lets you get more out of the models available through the API by providing:\n\n1.  Higher quality results than prompting\n2.  Ability to train on more examples than can fit in a prompt\n3.  Token savings due to shorter prompts\n4.  Lower latency requests\n\nGPT models have been pre-trained on a vast amount of text. To use the models effectively, we include instructions and sometimes several examples in a prompt. Using demonstrations to show how to perform a task is often called \"few-shot learning.\"\n\nFine-tuning improves on few-shot learning by training on many more examples than can fit in the prompt, letting you achieve better results on a wide number of tasks. **Once a model has been fine-tuned, you won't need to provide as many examples in the prompt.** This saves costs and enables lower-latency requests.\n\nAt a high level, fine-tuning involves the following steps:\n\n1.  Prepare and upload training data\n2.  Train a new fine-tuned model\n3.  Use your fine-tuned model\n\nVisit our [pricing page](https://openai.com/api/pricing) to learn more about how fine-tuned model training and usage are billed.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/what-models-can-be-fine-tuned)\n\n### [What models can be fine-tuned?](https://platform.openai.com/docs/guides/fine-tuning/what-models-can-be-fine-tuned)\n\nWe are working on enabling fine-tuning for GPT-4 and expect this feature to be available later this year.\n\nFine-tuning is currently available for the following models:\n\n*   `gpt-3.5-turbo-0613` (recommended)\n*   `babbage-002`\n*   `davinci-002`\n\nWe expect `gpt-3.5-turbo` to be the right model for most users in terms of results and ease of use, unless you are migrating a legacy fine-tuned model.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/when-to-use-fine-tuning)\n\n## [When to use fine-tuning](https://platform.openai.com/docs/guides/fine-tuning/when-to-use-fine-tuning)\n\nFine-tuning GPT models can make them better for specific applications, but it requires a careful investment of time and effort. We recommend first attempting to get good results with prompt engineering, prompt chaining (breaking complex tasks into multiple prompts), and [function calling](https://platform.openai.com/docs/guides/gpt/function-calling), with the key reasons being:\n\n*   There are many tasks at which our models may not initially appear to perform well, but results can be improved with the right prompts - thus fine-tuning may not be necessary\n*   Iterating over prompts and other tactics has a much faster feedback loop than iterating with fine-tuning, which requires creating datasets and running training jobs\n*   In cases where fine-tuning is still necessary, initial prompt engineering work is not wasted - we typically see best results when using a good prompt in the fine-tuning data (or combining prompt chaining / tool use with fine-tuning)\n\nOur [GPT best practices guide](https://platform.openai.com/docs/guides/gpt-best-practices) provides a background on some of the most effective strategies and tactics for getting better performance without fine-tuning. You may find it helpful to iterate quickly on prompts in our [playground](https://platform.openai.com/playground).\n\n[](https://platform.openai.com/docs/guides/fine-tuning/common-use-cases)\n\n### [Common use cases](https://platform.openai.com/docs/guides/fine-tuning/common-use-cases)\n\nSome common use cases where fine-tuning can improve results:\n\n*   Setting the style, tone, format, or other qualitative aspects\n*   Improving reliability at producing a desired output\n*   Correcting failures to follow complex prompts\n*   Handling many edge cases in specific ways\n*   Performing a new skill or task that\u2019s hard to articulate in a prompt\n\nOne high-level way to think about these cases is when it\u2019s easier to \"show, not tell\". In the sections to come, we will explore how to set up data for fine-tuning and various examples where fine-tuning improves the performance over the baseline model.\n\nAnother scenario where fine-tuning is effective is in reducing costs and / or latency, by replacing GPT-4 or by utilizing shorter prompts, without sacrificing quality. If you can achieve good results with GPT-4, you can often reach similar quality with a fine-tuned `gpt-3.5-turbo` model by fine-tuning on the GPT-4 completions, possibly with a shortened instruction prompt.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset)\n\n## [Preparing your dataset](https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset)\n\nOnce you have determined that fine-tuning is the right solution (i.e. you\u2019ve optimized your prompt as far as it can take you and identified problems that the model still has), you\u2019ll need to prepare data for training the model. You should create a diverse set of demonstration conversations that are similar to the conversations you will ask the model to respond to at inference time in production.\n\nEach example in the dataset should be a conversation in the same format as our [Chat completions API](https://platform.openai.com/docs/api-reference/chat/create), specifically a list of messages where each message has a role, content, and [optional name](https://platform.openai.com/docs/api-reference/chat/create#chat/create-chat/create-messages-name). At least some of the training examples should directly target cases where the prompted model is not behaving as desired, and the provided assistant messages in the data should be the ideal responses you want the model to provide.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/example-format)\n\n### [Example format](https://platform.openai.com/docs/guides/fine-tuning/example-format)\n\nIn this example, our goal is to create a chatbot that occasionally gives sarcastic responses, these are three training examples (conversations) we could create for a dataset:\n\n```\n1\n2\n3\n{\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"What's the capital of France?\"}, {\"role\": \"assistant\", \"content\": \"Paris, as if everyone doesn't know that already.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"Who wrote 'Romeo and Juliet'?\"}, {\"role\": \"assistant\", \"content\": \"Oh, just some guy named William Shakespeare. Ever heard of him?\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"How far is the Moon from Earth?\"}, {\"role\": \"assistant\", \"content\": \"Around 384,400 kilometers. Give or take a few, like that really matters.\"}]}\n```\n\nThe conversational chat format is required to fine-tune `gpt-3.5-turbo`. For `babbage-002` and `davinci-002`, you can follow the prompt completion pair format used for [legacy fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning/prepare-training-data) as shown below.\n\n```\n1\n2\n3\n{\"prompt\": \"<prompt text>\", \"completion\": \"<ideal generated text>\"}\n{\"prompt\": \"<prompt text>\", \"completion\": \"<ideal generated text>\"}\n{\"prompt\": \"<prompt text>\", \"completion\": \"<ideal generated text>\"}\n```\n\n[](https://platform.openai.com/docs/guides/fine-tuning/crafting-prompts)\n\n### [Crafting prompts](https://platform.openai.com/docs/guides/fine-tuning/crafting-prompts)\n\nWe generally recommend taking the set of instructions and prompts that you found worked best for the model prior to fine-tuning, and including them in every training example. This should let you reach the best and most general results, especially if you have relatively few (e.g. under a hundred) training examples.\n\nIf you would like to shorten the instructions or prompts that are repeated in every example to save costs, keep in mind that the model will likely behave as if those instructions were included, and it may be hard to get the model to ignore those \"baked-in\" instructions at inference time.\n\nIt may take more training examples to arrive at good results, as the model has to learn entirely through demonstration and without guided instructions.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/example-count-recommendations)\n\n### [Example count recommendations](https://platform.openai.com/docs/guides/fine-tuning/example-count-recommendations)\n\nTo fine-tune a model, you are required to provide at least 10 examples. We typically see clear improvements from fine-tuning on 50 to 100 training examples with `gpt-3.5-turbo` but the right number varies greatly based on the exact use case.\n\nWe recommend starting with 50 well-crafted demonstrations and seeing if the model shows signs of improvement after fine-tuning. In some cases that may be sufficient, but even if the model is not yet production quality, clear improvements are a good sign that providing more data will continue to improve the model. No improvement suggests that you may need to rethink how to set up the task for the model or restructure the data before scaling beyond a limited example set.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/train-and-test-splits)\n\n### [Train and test splits](https://platform.openai.com/docs/guides/fine-tuning/train-and-test-splits)\n\nAfter collecting the initial dataset, we recommend splitting it into a training and test portion. When submitting a fine-tuning job with both training and test files, we will provide statistics on both during the course of training. These statistics will be your initial signal of how much the model is improving. Additionally, constructing a test set early on will be useful in making sure you are able to evaluate the model after training, by generating samples on the test set.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/token-limits)\n\n### [Token limits](https://platform.openai.com/docs/guides/fine-tuning/token-limits)\n\nEach training example is limited to 4096 tokens. Examples longer than this will be truncated to the first 4096 tokens when training. To be sure that your entire training example fits in context, consider checking that the total token counts in the message contents are under 4,000.\n\nYou can compute token counts using our [counting tokens notebook](https://cookbook.openai.com/examples/How_to_count_tokens_with_tiktoken.ipynb) from the OpenAI cookbook.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/estimate-costs)\n\n### [Estimate costs](https://platform.openai.com/docs/guides/fine-tuning/estimate-costs)\n\nPlease refer to the [pricing page](https://openai.com/pricing) for details on cost per 1k input and output tokens (we do to charge for tokens that are part of the validation data). To estimate the costs for a specific fine-tuning job, use the following formula:\n\n> base cost per 1k tokens \\* number of tokens in the input file \\* number of epochs trained\n\nFor a training file with 100,000 tokens trained over 3 epochs, the expected cost would be ~$2.40 USD.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/check-data-formatting)\n\n### [Check data formatting](https://platform.openai.com/docs/guides/fine-tuning/check-data-formatting)\n\nOnce you have compiled a dataset and before you create a fine-tuning job, it is important to check the data formatting. To do this, we created a simple Python script which you can use to find potential errors, review token counts, and estimate the cost of a fine-tuning job.\n\n[\n\nFine-tuning data format validation\n\nLearn about fine-tuning data formatting\n\n\n\n](https://cookbook.openai.com/examples/chat_finetuning_data_prep)\n\n[](https://platform.openai.com/docs/guides/fine-tuning/upload-a-training-file)\n\n### [Upload a training file](https://platform.openai.com/docs/guides/fine-tuning/upload-a-training-file)\n\nOnce you have the data validated, the file needs to be uploaded using the [Files API](https://platform.openai.com/docs/api-reference/files/create) in order to be used with a fine-tuning jobs:\n\n```\n1\n2\n3\n4\n5\n6\n7\nimport os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.create(\n  file=open(\"mydata.jsonl\", \"rb\"),\n  purpose='fine-tune'\n)\n```\n\nAfter you upload the file, it may take some time to process. While the file is processing, you can still create a fine-tuning job but it will not start until the file processing has completed.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/create-a-fine-tuned-model)\n\n## [Create a fine-tuned model](https://platform.openai.com/docs/guides/fine-tuning/create-a-fine-tuned-model)\n\nAfter ensuring you have the right amount and structure for your dataset, and have uploaded the file, the next step is to create a fine-tuning job.\n\nStart your fine-tuning job using the OpenAI SDK:\n\n```\nopenai.FineTuningJob.create(training_file=\"file-abc123\", model=\"gpt-3.5-turbo\")\n```\n\nIn this example, `model` is the name of the model you want to fine-tune (`gpt-3.5-turbo`, `babbage-002`, `davinci-002`, or an existing fine-tuned model) and `training_file` is the file ID that was returned when the training file was uploaded to the OpenAI API. You can customize your fine-tuned model's name using the [suffix parameter](https://platform.openai.com/docs/api-reference/fine-tuning/create#fine-tuning/create-suffix).\n\nTo set additional fine-tuning parameters like the `validation_file` or `hyperparameters`, please refer to the [API specification for fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning/create).\n\nAfter you've started a fine-tuning job, it may take some time to complete. Your job may be queued behind other jobs in our system, and training a model can take minutes or hours depending on the model and dataset size. After the model training is completed, the user who created the fine-tuning job will receive an email confirmation.\n\nIn addition to creating a fine-tuning job, you can also list existing jobs, retrieve the status of a job, or cancel a job.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n# List 10 fine-tuning jobs\nopenai.FineTuningJob.list(limit=10)\n\n# Retrieve the state of a fine-tune\nopenai.FineTuningJob.retrieve(\"ftjob-abc123\")\n\n# Cancel a job\nopenai.FineTuningJob.cancel(\"ftjob-abc123\")\n\n# List up to 10 events from a fine-tuning job\nopenai.FineTuningJob.list_events(id=\"ftjob-abc123\", limit=10)\n\n# Delete a fine-tuned model (must be an owner of the org the model was created in)\nopenai.Model.delete(\"ft:gpt-3.5-turbo:acemeco:suffix:abc123\")\n```\n\n[](https://platform.openai.com/docs/guides/fine-tuning/use-a-fine-tuned-model)\n\n## [Use a fine-tuned model](https://platform.openai.com/docs/guides/fine-tuning/use-a-fine-tuned-model)\n\nWhen a job has succeeded, you will see the `fine_tuned_model` field populated with the name of the model when you retrieve the job details. You may now specify this model as a parameter to in the [Chat completions](https://platform.openai.com/docs/api-reference/chat) (for `gpt-3.5-turbo`) or [legacy Completions](https://platform.openai.com/docs/api-reference/completions) API (for `babbage-002` and `davinci-002`), and make requests to it using the [Playground](https://platform.openai.com/playground).\n\nAfter your job is completed, the model should be available right away for inference use. In some cases, it may take several minutes for your model to become ready to handle requests. If requests to your model time out or the model name cannot be found, it is likely because your model is still being loaded. If this happens, try again in a few minutes.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\ncompletion = openai.ChatCompletion.create(\n  model=\"ft:gpt-3.5-turbo:my-org:custom_suffix:id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\nprint(completion.choices[0].message)\n```\n\nYou can start making requests by passing the model name as shown above and in our [GPT guide](https://platform.openai.com/docs/guides/gpt/chat-completions-api).\n\n[](https://platform.openai.com/docs/guides/fine-tuning/analyzing-your-fine-tuned-model)\n\n## [Analyzing your fine-tuned model](https://platform.openai.com/docs/guides/fine-tuning/analyzing-your-fine-tuned-model)\n\nWe provide the following training metrics computed over the course of training: training loss, training token accuracy, test loss, and test token accuracy. These statistics are meant to provide a sanity check that training went smoothly (loss should decrease, token accuracy should increase). While an active fine-tuning jobs is running, you can view an event object which contains some useful metrics:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n{\n    \"object\": \"fine_tuning.job.event\",\n    \"id\": \"ftevent-abc-123\",\n    \"created_at\": 1693582679,\n    \"level\": \"info\",\n    \"message\": \"Step 100/100: training loss=0.00\",\n    \"data\": {\n        \"step\": 100,\n        \"train_loss\": 1.805623287509661e-5,\n        \"train_mean_token_accuracy\": 1.0\n    },\n    \"type\": \"metrics\"\n}\n```\n\nAfter a fine-tuning job has finished, you can also see metrics around how the training process went by [querying a fine-tuning job](https://platform.openai.com/docs/api-reference/fine-tuning/retrieve), extracting a file ID from the `result_files`, and then [retrieving that files content](https://platform.openai.com/docs/api-reference/files/retrieve-contents). Each results CSV file has the following columns: `step`, `train_loss`, `train_accuracy`, `valid_loss`, and `valid_mean_token_accuracy`.\n\n```\n1\n2\n3\n4\n5\n6\nstep,train_loss,train_accuracy,valid_loss,valid_mean_token_accuracy\n1,1.52347,0.0,,\n2,0.57719,0.0,,\n3,3.63525,0.0,,\n4,1.72257,0.0,,\n5,1.52379,0.0,,\n```\n\nWhile metrics can he helpful, evaluating samples from the fine-tuned model provides the most relevant sense of model quality. We recommend generating samples from both the base model and the fine-tuned model on a test set, and comparing the samples side by side. The test set should ideally include the full distribution of inputs that you might send to the model in a production use case. If manual evaluation is too time-consuming, consider using our [Evals library](https://github.com/openai/evals) to automate future evaluations.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/iterating-on-data-quality)\n\n### [Iterating on data quality](https://platform.openai.com/docs/guides/fine-tuning/iterating-on-data-quality)\n\nIf the results from a fine-tuning job are not as good as you expected, consider the following ways to adjust the training dataset:\n\n*   Collect examples to target remaining issues\n    *   If the model still isn\u2019t good at certain aspects, add training examples that directly show the model how to do these aspects correctly\n*   Scrutinize existing examples for issues\n    *   If your model has grammar, logic, or style issues, check if your data has any of the same issues. For instance, if the model now says \"I will schedule this meeting for you\" (when it shouldn\u2019t), see if existing examples teach the model to say it can do new things that it can\u2019t do\n*   Consider the balance and diversity of data\n    *   If 60% of the assistant responses in the data says \"I cannot answer this\", but at inference time only 5% of responses should say that, you will likely get an overabundance of refusals\n*   Make sure your training examples contain all of the information needed for the response\n    *   If we want the model to compliment a user based on their personal traits and a training example includes assistant compliments for traits not found in the preceding conversation, the model may learn to hallucinate information\n*   Look at the agreement / consistency in the training examples\n    *   If multiple people created the training data, it\u2019s likely that model performance will be limited by the level of agreement / consistency between people. For instance, in a text extraction task, if people only agreed on 70% of extracted snippets, the model would likely not be able to do better than this\n*   Make sure your all of your training examples are in the same format, as expected for inference\n\n[](https://platform.openai.com/docs/guides/fine-tuning/iterating-on-data-quantity)\n\n### [Iterating on data quantity](https://platform.openai.com/docs/guides/fine-tuning/iterating-on-data-quantity)\n\nOnce you\u2019re satisfied with the quality and distribution of the examples, you can consider scaling up the number of training examples. This tends to help the model learn the task better, especially around possible \"edge cases\". We expect a similar amount of improvement every time you double the number of training examples. You can loosely estimate the expected quality gain from increasing the training data size by:\n\n*   Fine-tuning on your current dataset\n*   Fine-tuning on half of your current dataset\n*   Observing the quality gap between the two\n\nIn general, if you have to make a trade-off, a smaller amount of high-quality data is generally more effective than a larger amount of low-quality data.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/iterating-on-hyperparameters)\n\n### [Iterating on hyperparameters](https://platform.openai.com/docs/guides/fine-tuning/iterating-on-hyperparameters)\n\nWe allow you to specify the number of epochs to fine-tune a model for. We recommend initially training without specifying the number of epochs, allowing us to pick a default for you based on dataset size, then adjusting if you observe the following:\n\n*   If the model does not follow the training data as much as expected increase the number by 1 or 2 epochs\n    *   This is more common for tasks for which there is a single ideal completion (or a small set of ideal completions which are similar). Some examples include classification, entity extraction, or structured parsing. These are often tasks for which you can compute a final accuracy metric against a reference answer.\n*   If the model becomes less diverse than expected decrease the number by 1 or 2 epochs\n    *   This is more common for tasks for which there are a wide range of possible good completions\n\n```\nopenai.FineTuningJob.create(training_file=\"file-abc123\", model=\"gpt-3.5-turbo\", hyperparameters={\"n_epochs\":2})\n```\n\n[](https://platform.openai.com/docs/guides/fine-tuning/fine-tuning-examples)\n\n## [Fine-tuning examples](https://platform.openai.com/docs/guides/fine-tuning/fine-tuning-examples)\n\nNow that we have explored the basics of the fine-tuning API, let\u2019s look at going through the fine-tuning lifecycle for a few different use cases.\n\nIn this example, we will explore how to build a fine-tuned model which gets the model follow specific style and tone guidance beyond what is possible with prompting alone.\n\nTo begin, we create a sample set of messages showing what the model should which in this case is misspelled words.\n\n```\n1\n2\n3\n{\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"What's the capital of France?\"}, {\"role\": \"assistant\", \"content\": \"Paris, as if everyone doesn't know that already.\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"Who wrote 'Romeo and Juliet'?\"}, {\"role\": \"assistant\", \"content\": \"Oh, just some guy named William Shakespeare. Ever heard of him?\"}]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"How far is the Moon from Earth?\"}, {\"role\": \"assistant\", \"content\": \"Around 384,400 kilometers. Give or take a few, like that really matters.\"}]}\n```\n\nIf you want to follow along and create a fine-tuned model yourself, you will need at least 10 examples.\n\nAfter getting the data that will potentially improve the model, the next step is to check if the data meets all the [formatting requirements](https://platform.openai.com/docs/guides/fine-tuning/check-data-formatting).\n\nNow that we have the data formatted and validated, the final training step is to kick off a job to create the fine-tuned model. You can do this via the OpenAI CLI or one of our SDKs as shown below:\n\n```\n1\n2\n3\nopenai.File.create(file=open(\"marv.jsonl\", \"rb\"), purpose='fine-tune')\n\nopenai.FineTuningJob.create(training_file=\"file-abc123\", model=\"gpt-3.5-turbo\")\n```\n\nOnce the training job is done, you will be able to [use your fine-tuned model](https://platform.openai.com/docs/guides/fine-tuning/use-a-fine-tuned-model).\n\nAnother type of use case which works really well with fine-tuning is getting the model to provide structured information, in this case about sports headlines:\n\n```\n1\n2\n3\n4\n{\"messages\": [{\"role\": \"system\", \"content\": \"Given a sports headline, provide the following fields in a JSON dict, where applicable: \"player\" (full name)\", \"team\", \"sport\", and \"gender\".},{\"role\": \"user\", \"content\": \"Sources: Colts grant RB Taylor OK to seek trade\"},\n{\"role\": \"assistant\", \"content\": \"{\"player\": \"Jonathan Taylor\", \"team\": \"Colts\", \"sport\": \"football\", \"gender\": \"male\" }\"},]}\n{\"messages\": [{\"role\": \"system\", \"content\": \"Given a sports headline, provide the following fields in a JSON dict, where applicable: \"player\" (full name)\", \"team\", \"sport\", and \"gender\".},{\"role\": \"user\", \"content\": \"OSU 'split down middle' on starting QB battle\"},\n{\"role\": \"assistant\", \"content\": \"{\"player\": null, \"team\": \"OSU\", \"sport\": \"football\", \"gender\": null }\"},]}\n```\n\nIf you want to follow along and create a fine-tuned model yourself, you will need at least 10 examples.\n\nAfter getting the data that will potentially improve the model, the next step is to check if the data meets all the [formatting requirements](https://platform.openai.com/docs/guides/fine-tuning/check-data-formatting).\n\nNow that we have the data formatted and validated, the final training step is to kick off a job to create the fine-tuned model. You can do this via the OpenAI CLI or one of our SDKs as shown below:\n\n```\n1\n2\n3\nopenai.File.create(file=open(\"sports-context.jsonl\", \"rb\"), purpose='fine-tune')\n\nopenai.FineTuningJob.create(training_file=\"file-abc123\", model=\"gpt-3.5-turbo\")\n```\n\nOnce the training job is done, you will be able to [use your fine-tuned model](https://platform.openai.com/docs/guides/fine-tuning/use-a-fine-tuned-model) and make a request that looks like the following:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\ncompletion = openai.ChatCompletion.create(\n  model=\"ft:gpt-3.5-turbo:my-org:custom_suffix:id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"Given a sports headline, provide the following fields in a JSON dict, where applicable: player (full name), team, sport, and gender\"},\n    {\"role\": \"user\", \"content\": \"Richardson wins 100m at worlds to cap comeback\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n```\n\nBased on the formatted training data, the response should look like the following:\n\n```\n{\"player\": \"Sha'Carri Richardson\", \"team\": null\", \"sport\": \"track and field\", \"gender\": \"female\"}\n```\n\nThe chat completions API supports [function calling](https://platform.openai.com/docs/guides/gpt/function-calling). Including a long list of functions in the completions API can consume a considerable number of prompt tokens and sometimes the model hallucinates or does not provide valid JSON output.\n\nFine-tuning a model with function calling examples can allow you to:\n\n*   Get similarly formatted responses even when the full function definition isn't present\n*   Get more accurate and consistent outputs\n\nFormat your examples as shown, with each line including a list of \"messages\" and an optional list of \"functions\":\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n{\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"What is the weather in San Francisco?\"},\n        {\"role\": \"assistant\", \"function_call\": {\"name\": \"get_current_weather\", \"arguments\": \"{\\\"location\\\": \\\"San Francisco, USA\\\", \\\"format\\\": \\\"celcius\\\"}\"}\n    ],\n    \"functions\": [{\n        \"name\": \"get_current_weather\",\n        \"description\": \"Get the current weather\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\"type\": \"string\", \"description\": \"The city and country, eg. San Francisco, USA\"},\n                \"format\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]}\n            },\n            \"required\": [\"location\", \"format\"]\n        }\n    }]\n}\n```\n\nIf you want to follow along and create a fine-tuned model yourself, you will need at least 10 examples.\n\nIf your goal is to use less tokens, some useful techniques are:\n\n*   Omit function and parameter descriptions: remove the description field from function and parameters\n*   Omit parameters: remove the entire properties field from the parameters object\n*   Omit function entirely: remove the entire function object from the functions array\n\nIf your goal is to maximize the correctness of the function calling output, we recommend using the same function definitions for both training and querying the fine-tuned model.\n\nFine-tuning on function calling can also be used to customize the model's response to function outputs. To do this you can include a function response message and an assistant message interpreting that response:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n{\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"What is the weather in San Francisco?\"},\n        {\"role\": \"assistant\", \"function_call\": {\"name\": \"get_current_weather\", \"arguments\": \"{\\\"location\\\": \\\"San Francisco, USA\\\", \\\"format\\\": \\\"celcius\\\"}\"}}\n        {\"role\": \"function\", \"name\": \"get_current_weather\", \"content\": \"21.0\"},\n        {\"role\": \"assistant\", \"content\": \"It is 21 degrees celsius in San Francisco, CA\"}\n    ],\n    \"functions\": [...] // same as before\n}\n```\n\n[](https://platform.openai.com/docs/guides/fine-tuning/migration-of-legacy-models)\n\n## [Migration of legacy models](https://platform.openai.com/docs/guides/fine-tuning/migration-of-legacy-models)\n\nFor users migrating from `/v1/fine-tunes` to the updated `/v1/fine_tuning/jobs` API and newer models, the main difference you can expect is the updated API. The legacy prompt completion pair data format has been retained for the updated `babbage-002` and `davinci-002` models to ensure a smooth transition. The new models will support fine-tuning with 4k token context and have a knowledge cutoff of September 2021.\n\nFor most tasks, you should expect to get better performance from `gpt-3.5-turbo` than from the GPT base models.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/faq)\n\n## [FAQ](https://platform.openai.com/docs/guides/fine-tuning/faq)\n\n[](https://platform.openai.com/docs/guides/fine-tuning/when-should-i-use-fine-tuning-vs-embeddings-with-retrieval)\n\n### [When should I use fine-tuning vs embeddings with retrieval?](https://platform.openai.com/docs/guides/fine-tuning/when-should-i-use-fine-tuning-vs-embeddings-with-retrieval)\n\nEmbeddings with retrieval is best suited for cases when you need to have a large database of documents with relevant context and information.\n\nBy default OpenAI\u2019s models are trained to be helpful generalist assistants. Fine-tuning can be used to make a model which is narrowly focused, and exhibits specific ingrained behavior patterns. Retrieval strategies can be used to make new information available to a model by providing it with relevant context before generating its response. Retrieval strategies are not an alternative to fine-tuning and can in fact be complementary to it.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/when-can-i-fine-tune-gpt-4-or-gpt-3-5-turbo-16k)\n\n### [When can I fine-tune GPT-4 or GPT-3.5-Turbo-16k?](https://platform.openai.com/docs/guides/fine-tuning/when-can-i-fine-tune-gpt-4-or-gpt-3-5-turbo-16k)\n\nWe plan to release support for fine-tuning both of these models later this year.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/how-do-i-know-if-my-fine-tuned-model-is-actually-better-than-the-base-model)\n\n### [How do I know if my fine-tuned model is actually better than the base model?](https://platform.openai.com/docs/guides/fine-tuning/how-do-i-know-if-my-fine-tuned-model-is-actually-better-than-the-base-model)\n\nWe recommend generating samples from both the base model and the fine-tuned model on a test set of chat conversations, and comparing the samples side by side. For more comprehensive evaluations, consider using the [OpenAI evals framework](https://github.com/openai/evals) to create an eval specific to your use case.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/can-i-continue-fine-tuning-a-model-that-has-already-been-fine-tuned)\n\n### [Can I continue fine-tuning a model that has already been fine-tuned?](https://platform.openai.com/docs/guides/fine-tuning/can-i-continue-fine-tuning-a-model-that-has-already-been-fine-tuned)\n\nYes, you can pass the name of a fine-tuned model into the `model` parameter when creating a fine-tuning job. This will start a new fine-tuning job using the fine-tuned model as the starting point.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/how-can-i-estimate-the-cost-of-fine-tuning-a-model)\n\n### [How can I estimate the cost of fine-tuning a model?](https://platform.openai.com/docs/guides/fine-tuning/how-can-i-estimate-the-cost-of-fine-tuning-a-model)\n\nPlease refer to the [estimate cost](https://platform.openai.com/docs/guides/fine-tuning/estimate-costs) section above.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/does-the-new-fine-tuning-endpoint-still-work-with-weights-biases-for-tracking-metrics)\n\n### [Does the new fine-tuning endpoint still work with Weights & Biases for tracking metrics?](https://platform.openai.com/docs/guides/fine-tuning/does-the-new-fine-tuning-endpoint-still-work-with-weights-biases-for-tracking-metrics)\n\nNo, we do not currently support this integration but are working to enable it in the near future.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/how-many-fine-tuning-jobs-can-i-have-running-at-once)\n\n### [How many fine-tuning jobs can I have running at once?](https://platform.openai.com/docs/guides/fine-tuning/how-many-fine-tuning-jobs-can-i-have-running-at-once)\n\nPlease refer to our [rate limit guide](https://platform.openai.com/docs/guides/rate-limits/what-are-the-rate-limits-for-our-api) for the most up to date information on the limits.\n\n[](https://platform.openai.com/docs/guides/fine-tuning/how-do-rate-limits-work-on-fine-tuned-models)\n\n### [How do rate limits work on fine-tuned models?](https://platform.openai.com/docs/guides/fine-tuning/how-do-rate-limits-work-on-fine-tuned-models)\n\nA fine-tuned model pulls from the same shared rate limit as the model it is based off of. For example, if you use half your TPM rate limit in a given time period with the standard `gpt-3.5-turbo` model, any model(s) you fine-tuned from `gpt-3.5-turbo` would only have the remaining half of the TPM rate limit accessible since the capacity is shared across all models of the same type.\n\nPut another way, having fine-tuned models does not give you more capacity to use our models from a total throughput perspective."
}