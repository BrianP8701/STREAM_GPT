{
    "metadata": {
        "type": "repo",
        "path": "src/helpers/metrics.py"
    },
    "text": "'''\n    This file contains helper functions for saving and analyzing metrics.\n'''\nimport json\nimport matplotlib.pyplot as plt\nimport os\n\ndef update_json_dicts(json_path, data_to_add):\n    \"\"\"\n    Update dictionaries inside a JSON file.\n\n    Parameters:\n    - json_path (str): The path to the JSON file to update.\n    - data_to_add (dict): Dictionary containing data to add to the dictionaries inside the JSON file.\n                          Keys are dictionary names within the JSON file, and values are key-value pairs to add to these dictionaries.\n\n    Behavior:\n    - Reads existing data from the JSON file if it exists, or creates a new empty JSON file if it doesn't.\n    - Updates dictionaries within the JSON file with key-value pairs from data_to_add.\n    - Writes the updated data back to the JSON file.\n\n    Example:\n    >>> update_json_dicts('data.json', {\"list1\": {\"new_key1\": \"new_value1\"}, \"list2\": {\"new_key2\": \"new_value2\"}})\n    \"\"\"\n\n    # Check if the file exists\n    if os.path.exists(json_path):\n        # Read existing JSON data\n        with open(json_path, 'r') as f:\n            json_data = json.load(f)\n    else:\n        # Create an empty dictionary if the file doesn't exist\n        json_data = {}\n\n    # Update dictionaries\n    for dict_name, key_value_pairs in data_to_add.items():\n        if dict_name in json_data:\n            json_data[dict_name].update(key_value_pairs)\n        else:\n            json_data[dict_name] = key_value_pairs\n\n    # Write updated JSON data back to file\n    with open(json_path, 'w') as f:\n        json.dump(json_data, f)\n\n\ndef plot_json_data(json_path, save_path, key, x_label, y_label, graph_title):\n    \"\"\"\n    Plot data from a JSON file with a specific key.\n\n    Parameters:\n    - json_path (str): Path to the JSON file.\n    - key (str): Key in the JSON dictionary containing the data to plot.\n    - x_label (str): Label for the x-axis.\n    - y_label (str): Label for the y-axis.\n    - graph_title (str): Title for the graph.\n\n    Behavior:\n    - Reads data associated with the provided key from the JSON file.\n    - Plots the data on a graph with provided labels and title.\n    \"\"\"\n    \n    # Load data from JSON file\n    with open(json_path, 'r') as f:\n        data = json.load(f)\n    \n    if key not in data:\n        raise ValueError(f\"No data found for key: {key}\")\n\n    # Extract x and y values\n    x_values = [item[0] for item in data[key]]\n    y_values = [item[1] for item in data[key]]\n\n    # Plot the data\n    plt.plot(x_values, y_values, 'o-')  # 'o-' means to use dots for data points and lines to connect them\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.title(graph_title)\n    \n    # Automatically adjust the x and y limits\n    plt.xlim(min(x_values), max(x_values))\n    plt.ylim(min(y_values), max(y_values))\n\n    plt.grid(True)\n    plt.savefig(save_path, format='png', dpi=300)  # Adjust format and dpi as needed\n\n\n"
}