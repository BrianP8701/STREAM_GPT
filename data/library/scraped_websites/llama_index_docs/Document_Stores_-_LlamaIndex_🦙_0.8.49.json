{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/core_modules/data_modules/storage/docstores.html",
        "title": "Document Stores - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## Document Stores[\uf0c1](#document-stores \"Permalink to this heading\")\n\nDocument stores contain ingested document chunks, which we call `Node` objects.\n\nSee the [API Reference](https://docs.llamaindex.ai/en/stable/api_reference/storage/docstore.html) for more details.\n\n## Simple Document Store[\uf0c1](#simple-document-store \"Permalink to this heading\")\n\nBy default, the `SimpleDocumentStore` stores `Node` objects in-memory. They can be persisted to (and loaded from) disk by calling `docstore.persist()` (and `SimpleDocumentStore.from_persist_path(...)` respectively).\n\nA more complete example can be found here\n\n## MongoDB Document Store[\uf0c1](#mongodb-document-store \"Permalink to this heading\")\n\nWe support MongoDB as an alternative document store backend that persists data as `Node` objects are ingested.\n\nfrom llama\\_index.storage.docstore import MongoDocumentStore\nfrom llama\\_index.node\\_parser import SimpleNodeParser\n\n\\# create parser and parse document into nodes\nparser \\= SimpleNodeParser.from\\_defaults()\nnodes \\= parser.get\\_nodes\\_from\\_documents(documents)\n\n\\# create (or load) docstore and add nodes\ndocstore \\= MongoDocumentStore.from\\_uri(uri\\=\"<mongodb+srv://...>\")\ndocstore.add\\_documents(nodes)\n\n\\# create storage context\nstorage\\_context \\= StorageContext.from\\_defaults(docstore\\=docstore)\n\n\\# build index\nindex \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\n\nUnder the hood, `MongoDocumentStore` connects to a fixed MongoDB database and initializes new collections (or loads existing collections) for your nodes.\n\n> Note: You can configure the `db_name` and `namespace` when instantiating `MongoDocumentStore`, otherwise they default to `db_name=\"db_docstore\"` and `namespace=\"docstore\"`.\n\nNote that it\u2019s not necessary to call `storage_context.persist()` (or `docstore.persist()`) when using an `MongoDocumentStore` since data is persisted by default.\n\nYou can easily reconnect to your MongoDB collection and reload the index by re-initializing a `MongoDocumentStore` with an existing `db_name` and `collection_name`.\n\nA more complete example can be found here\n\n## Redis Document Store[\uf0c1](#redis-document-store \"Permalink to this heading\")\n\nWe support Redis as an alternative document store backend that persists data as `Node` objects are ingested.\n\nfrom llama\\_index.storage.docstore import RedisDocumentStore\nfrom llama\\_index.node\\_parser import SimpleNodeParser\n\n\\# create parser and parse document into nodes\nparser \\= SimpleNodeParser.from\\_defaults()\nnodes \\= parser.get\\_nodes\\_from\\_documents(documents)\n\n\\# create (or load) docstore and add nodes\ndocstore \\= RedisDocumentStore.from\\_host\\_and\\_port(\n  host\\=\"127.0.0.1\",\n  port\\=\"6379\",\n  namespace\\='llama\\_index'\n)\ndocstore.add\\_documents(nodes)\n\n\\# create storage context\nstorage\\_context \\= StorageContext.from\\_defaults(docstore\\=docstore)\n\n\\# build index\nindex \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\n\nUnder the hood, `RedisDocumentStore` connects to a redis database and adds your nodes to a namespace stored under `{namespace}/docs`.\n\n> Note: You can configure the `namespace` when instantiating `RedisDocumentStore`, otherwise it defaults `namespace=\"docstore\"`.\n\nYou can easily reconnect to your Redis client and reload the index by re-initializing a `RedisDocumentStore` with an existing `host`, `port`, and `namespace`.\n\nA more complete example can be found here\n\n## Firestore Document Store[\uf0c1](#firestore-document-store \"Permalink to this heading\")\n\nWe support Firestore as an alternative document store backend that persists data as `Node` objects are ingested.\n\nfrom llama\\_index.storage.docstore import FirestoreDocumentStore\nfrom llama\\_index.node\\_parser import SimpleNodeParser\n\n\\# create parser and parse document into nodes\nparser \\= SimpleNodeParser.from\\_defaults()\nnodes \\= parser.get\\_nodes\\_from\\_documents(documents)\n\n\\# create (or load) docstore and add nodes\ndocstore \\= FirestoreDocumentStore.from\\_dataabse(\n  project\\=\"project-id\",\n  database\\=\"(default)\",\n)\ndocstore.add\\_documents(nodes)\n\n\\# create storage context\nstorage\\_context \\= StorageContext.from\\_defaults(docstore\\=docstore)\n\n\\# build index\nindex \\= VectorStoreIndex(nodes, storage\\_context\\=storage\\_context)\n\nUnder the hood, `FirestoreDocumentStore` connects to a firestore database in Google Cloud and adds your nodes to a namespace stored under `{namespace}/docs`.\n\n> Note: You can configure the `namespace` when instantiating `FirestoreDocumentStore`, otherwise it defaults `namespace=\"docstore\"`.\n\nYou can easily reconnect to your Firestore database and reload the index by re-initializing a `FirestoreDocumentStore` with an existing `project`, `database`, and `namespace`.\n\nA more complete example can be found here"
}