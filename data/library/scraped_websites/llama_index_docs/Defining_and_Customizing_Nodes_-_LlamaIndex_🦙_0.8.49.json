{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/core_modules/data_modules/documents_and_nodes/usage_nodes.html",
        "title": "Defining and Customizing Nodes - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## Defining and Customizing Nodes[\uf0c1](#defining-and-customizing-nodes \"Permalink to this heading\")\n\nNodes represent \u201cchunks\u201d of source Documents, whether that is a text chunk, an image, or more. They also contain metadata and relationship information with other nodes and index structures.\n\nNodes are a first-class citizen in LlamaIndex. You can choose to define Nodes and all its attributes directly. You may also choose to \u201cparse\u201d source Documents into Nodes through our `NodeParser` classes.\n\nFor instance, you can do\n\nfrom llama\\_index.node\\_parser import SimpleNodeParser\n\nparser \\= SimpleNodeParser.from\\_defaults()\n\nnodes \\= parser.get\\_nodes\\_from\\_documents(documents)\n\nYou can also choose to construct Node objects manually and skip the first section. For instance,\n\nfrom llama\\_index.schema import TextNode, NodeRelationship, RelatedNodeInfo\n\nnode1 \\= TextNode(text\\=\"<text\\_chunk>\", id\\_\\=\"<node\\_id>\")\nnode2 \\= TextNode(text\\=\"<text\\_chunk>\", id\\_\\=\"<node\\_id>\")\n\\# set relationships\nnode1.relationships\\[NodeRelationship.NEXT\\] \\= RelatedNodeInfo(node\\_id\\=node2.node\\_id)\nnode2.relationships\\[NodeRelationship.PREVIOUS\\] \\= RelatedNodeInfo(node\\_id\\=node1.node\\_id)\nnodes \\= \\[node1, node2\\]\n\nThe `RelatedNodeInfo` class can also store additional `metadata` if needed:\n\nnode2.relationships\\[NodeRelationship.PARENT\\] \\= RelatedNodeInfo(node\\_id\\=node1.node\\_id, metadata\\={\"key\": \"val\"})\n\n## Customizing the ID[\uf0c1](#customizing-the-id \"Permalink to this heading\")\n\nEach node has an `node_id` property that is automatically generated if not manually specified. This ID can be used for a variety of purposes; this includes being able to update nodes in storage, being able to define relationships between nodes (through `IndexNode`), and more.\n\nYou can also get and set the `node_id` of any `TextNode` directly.\n\nprint(node.node\\_id)\nnode.node\\_id \\= \"My new node\\_id!\""
}