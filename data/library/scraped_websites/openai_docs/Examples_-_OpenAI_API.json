{
    "metadata": {
        "type": "web",
        "url": "https://platform.openai.com/docs/plugins/examples/example-plugins",
        "title": "Examples - OpenAI API",
        "description": "Explore resources, tutorials, API docs, and dynamic examples to get the most out of OpenAI's developer platform."
    },
    "text": "[](https://platform.openai.com/docs/plugins/examples/example-plugins)\n\n## [Example plugins](https://platform.openai.com/docs/plugins/examples/example-plugins)\n\nTo get started building, we are making available a set of simple plugins that cover different authentication schemas and use cases. From our simple no authentication todo list plugin to the more [powerful retrieval plugin](https://github.com/openai/chatgpt-retrieval-plugin/), these examples provide a glimpse into what we hope to make possible with plugins.\n\nDuring development, you can run the plugin [locally on your computer](https://platform.openai.com/docs/plugins/getting-started/running-a-plugin) or through a cloud development environment like [GitHub Codespaces](https://github.com/features/codespaces), [Replit](https://replit.com/), or [CodeSandbox](https://codesandbox.io/).\n\nWe created the plugin quickstart as a starting place for developers to get a plugin up and running in less than 5 minutes. If you have not run a plugin yet and want to get acquainted with the minimal steps required to run one, consider beginning with the [plugin quickstart repo](https://github.com/openai/plugins-quickstart).\n\nLearn how to build a simple todo list plugin with no auth\n\nTo start, check out the [no authentication](https://platform.openai.com/docs/plugins/authentication/no-authentication) page, then define an `ai-plugin.json` file with the following fields:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n{\n    \"schema_version\": \"v1\",\n    \"name_for_human\": \"TODO List (No Auth)\",\n    \"name_for_model\": \"todo\",\n    \"description_for_human\": \"Manage your TODO list. You can add, remove and view your TODOs.\",\n    \"description_for_model\": \"Plugin for managing a TODO list, you can add, remove and view your TODOs.\",\n    \"auth\": {\n        \"type\": \"none\"\n    },\n    \"api\": {\n        \"type\": \"openapi\",\n        \"url\": \"PLUGIN_HOSTNAME/openapi.yaml\"\n    },\n    \"logo_url\": \"PLUGIN_HOSTNAME/logo.png\",\n    \"contact_email\": \"support@example.com\",\n    \"legal_info_url\": \"https://example.com/legal\"\n}\n```\n\nNote the `PLUGIN_HOSTNAME` should be the actual hostname of your plugin server.\n\nNext, we can define the API endpoints to create, delete, and fetch todo list items for a specific user.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\nimport json\n\nimport quart\nimport quart_cors\nfrom quart import request\n\n# Note: Setting CORS to allow chat.openapi.com is only required when running a localhost plugin\napp = quart_cors.cors(quart.Quart(__name__), allow_origin=\"https://chat.openai.com\")\n\n_TODOS = {}\n\n\n@app.post(\"/todos/<string:username>\")\nasync def add_todo(username):\n    request = await quart.request.get_json(force=True)\n    if username not in _TODOS:\n        _TODOS[username] = []\n    _TODOS[username].append(request[\"todo\"])\n    return quart.Response(response='OK', status=200)\n\n\n@app.get(\"/todos/<string:username>\")\nasync def get_todos(username):\n    return quart.Response(response=json.dumps(_TODOS.get(username, [])), status=200)\n\n\n@app.delete(\"/todos/<string:username>\")\nasync def delete_todo(username):\n    request = await quart.request.get_json(force=True)\n    todo_idx = request[\"todo_idx\"]\n    if 0 <= todo_idx < len(_TODOS[username]):\n        _TODOS[username].pop(todo_idx)\n    return quart.Response(response='OK', status=200)\n\n\n@app.get(\"/logo.png\")\nasync def plugin_logo():\n    filename = 'logo.png'\n    return await quart.send_file(filename, mimetype='image/png')\n\n\n@app.get(\"/.well-known/ai-plugin.json\")\nasync def plugin_manifest():\n    host = request.headers['Host']\n    with open(\"ai-plugin.json\") as f:\n        text = f.read()\n        # This is a trick we do to populate the PLUGIN_HOSTNAME constant in the manifest\n        text = text.replace(\"PLUGIN_HOSTNAME\", f\"https://{host}\")\n        return quart.Response(text, mimetype=\"text/json\")\n\n\n@app.get(\"/openapi.yaml\")\nasync def openapi_spec():\n    host = request.headers['Host']\n    with open(\"openapi.yaml\") as f:\n        text = f.read()\n        # This is a trick we do to populate the PLUGIN_HOSTNAME constant in the OpenAPI spec\n        text = text.replace(\"PLUGIN_HOSTNAME\", f\"https://{host}\")\n        return quart.Response(text, mimetype=\"text/yaml\")\n\n\ndef main():\n    app.run(debug=True, host=\"0.0.0.0\", port=5002)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLast, we need to set up and define a OpenAPI specification to match the endpoints defined on our local or remote server. You do not need to expose the full functionality of your API via the specification and can instead choose to let ChatGPT have access to only certain functionality.\n\nThere are also many tools that will automatically turn your server definition code into an OpenAPI specification so you don\u2019t need to do it manually. In the case of the Python code above, the OpenAPI specification will look like:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\nopenapi: 3.0.1\ninfo:\n    title: TODO Plugin\n    description: A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username \"global\".\n    version: \"v1\"\nservers:\n    - url: PLUGIN_HOSTNAME\npaths:\n    /todos/{username}:\n        get:\n            operationId: getTodos\n            summary: Get the list of todos\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/getTodosResponse\"\n        post:\n            operationId: addTodo\n            summary: Add a todo to the list\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/addTodoRequest\"\n            responses:\n                \"200\":\n                    description: OK\n        delete:\n            operationId: deleteTodo\n            summary: Delete a todo from the list\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/deleteTodoRequest\"\n            responses:\n                \"200\":\n                    description: OK\n\ncomponents:\n    schemas:\n        getTodosResponse:\n            type: object\n            properties:\n                todos:\n                    type: array\n                    items:\n                        type: string\n                    description: The list of todos.\n        addTodoRequest:\n            type: object\n            required:\n                - todo\n            properties:\n                todo:\n                    type: string\n                    description: The todo to add to the list.\n                    required: true\n        deleteTodoRequest:\n            type: object\n            required:\n                - todo_idx\n            properties:\n                todo_idx:\n                    type: integer\n                    description: The index of the todo to delete.\n                    required: true\n```\n\nLearn how to build a simple todo list plugin with service level auth\n\nTo start, check out the [service level authentication](https://platform.openai.com/docs/plugins/authentication/service-level) page and then define an `ai-plugin.json` file with the following fields:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n{\n    \"schema_version\": \"v1\",\n    \"name_for_human\": \"TODO List (service auth)\",\n    \"name_for_model\": \"todo\",\n    \"description_for_human\": \"Manage your TODO list. You can add, remove and view your TODOs.\",\n    \"description_for_model\": \"Plugin for managing a TODO list, you can add, remove and view your TODOs.\",\n    \"auth\": {\n        \"type\": \"service_http\",\n        \"authorization_type\": \"bearer\",\n        \"verification_tokens\": {\n            \"openai\": \"Replace_this_string_with_the_verification_token_generated_in_the_ChatGPT_UI\"\n        }\n    },\n    \"api\": {\n        \"type\": \"openapi\",\n        \"url\": \"https://example.com/openapi.yaml\"\n    },\n    \"logo_url\": \"https://example.com/logo.png\",\n    \"contact_email\": \"support@example.com\",\n    \"legal_info_url\": \"https://example.com/legal\"\n}\n```\n\nNotice that the verification token is required for service level authentication plugins. The token is generated during the plugin installation process in the ChatGPT web UI after you set the service access token.\n\nYou will also need to update \"Example.com\" to the name of your remote server.\n\nNext, we can define the API endpoints to create, delete, and fetch todo list items for a specific user. The endpoints also check that the user is authenticated.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\nimport json\n\nimport quart\nimport quart_cors\nfrom quart import request\n\napp = quart_cors.cors(quart.Quart(__name__))\n\n# This key can be anything, though you will likely want a randomly generated sequence.\n_SERVICE_AUTH_KEY = \"REPLACE_ME\"\n_TODOS = {}\n\ndef assert_auth_header(req):\n    assert req.headers.get(\n        \"Authorization\", None) == f\"Bearer {_SERVICE_AUTH_KEY}\"\n\n@app.post(\"/todos/<string:username>\")\nasync def add_todo(username):\n    assert_auth_header(quart.request)\n    request = await quart.request.get_json(force=True)\n    if username not in _TODOS:\n        _TODOS[username] = []\n    _TODOS[username].append(request[\"todo\"])\n    return quart.Response(response='OK', status=200)\n\n@app.get(\"/todos/<string:username>\")\nasync def get_todos(username):\n    assert_auth_header(quart.request)\n    return quart.Response(response=json.dumps(_TODOS.get(username, [])), status=200)\n\n@app.delete(\"/todos/<string:username>\")\nasync def delete_todo(username):\n    assert_auth_header(quart.request)\n    request = await quart.request.get_json(force=True)\n    todo_idx = request[\"todo_idx\"]\n    if 0 <= todo_idx < len(_TODOS[username]):\n        _TODOS[username].pop(todo_idx)\n    return quart.Response(response='OK', status=200)\n\n@app.get(\"/logo.png\")\nasync def plugin_logo():\n    filename = 'logo.png'\n    return await quart.send_file(filename, mimetype='image/png')\n\n@app.get(\"/.well-known/ai-plugin.json\")\nasync def plugin_manifest():\n    host = request.headers['Host']\n    with open(\"ai-plugin.json\") as f:\n        text = f.read()\n        return quart.Response(text, mimetype=\"text/json\")\n\n@app.get(\"/openapi.yaml\")\nasync def openapi_spec():\n    host = request.headers['Host']\n    with open(\"openapi.yaml\") as f:\n        text = f.read()\n        return quart.Response(text, mimetype=\"text/yaml\")\n\ndef main():\n    app.run(debug=True, host=\"0.0.0.0\", port=5002)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLast, we need to set up and define a OpenAPI specification to match the endpoints defined on our remote server. In general, the OpenAPI specification would look the same regardless of the authentication method. Using an automatic OpenAPI generator will reduce the chance of errors when creating your OpenAPI specification.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\nopenapi: 3.0.1\ninfo:\n    title: TODO Plugin\n    description: A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username \"global\".\n    version: \"v1\"\nservers:\n    - url: https://example.com\npaths:\n    /todos/{username}:\n        get:\n            operationId: getTodos\n            summary: Get the list of todos\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/getTodosResponse\"\n        post:\n            operationId: addTodo\n            summary: Add a todo to the list\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/addTodoRequest\"\n            responses:\n                \"200\":\n                    description: OK\n        delete:\n            operationId: deleteTodo\n            summary: Delete a todo from the list\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/deleteTodoRequest\"\n            responses:\n                \"200\":\n                    description: OK\n\ncomponents:\n    schemas:\n        getTodosResponse:\n            type: object\n            properties:\n                todos:\n                    type: array\n                    items:\n                        type: string\n                    description: The list of todos.\n        addTodoRequest:\n            type: object\n            required:\n                - todo\n            properties:\n                todo:\n                    type: string\n                    description: The todo to add to the list.\n                    required: true\n        deleteTodoRequest:\n            type: object\n            required:\n                - todo_idx\n            properties:\n                todo_idx:\n                    type: integer\n                    description: The index of the todo to delete.\n                    required: true\n```\n\nLearn how to build a simple sports stats plugin\n\nThis plugin is an example of a simple sports stats API. Please keep in mind our domain policy and usage policies when considering what to build.\n\nTo start, define an `ai-plugin.json` file with the following fields:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n{\n    \"schema_version\": \"v1\",\n    \"name_for_human\": \"Sport Stats\",\n    \"name_for_model\": \"sportStats\",\n    \"description_for_human\": \"Get current and historical stats for sport players and games.\",\n    \"description_for_model\": \"Get current and historical stats for sport players and games. Always display results using markdown tables.\",\n    \"auth\": {\n        \"type\": \"none\"\n    },\n    \"api\": {\n        \"type\": \"openapi\",\n        \"url\": \"PLUGIN_HOSTNAME/openapi.yaml\"\n    },\n    \"logo_url\": \"PLUGIN_HOSTNAME/logo.png\",\n    \"contact_email\": \"support@example.com\",\n    \"legal_info_url\": \"https://example.com/legal\"\n}\n```\n\nNote the `PLUGIN_HOSTNAME` should be the actual hostname of your plugin server.\n\nNext, we define a mock API for a simple sports service plugin.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\nimport json\nimport requests\nimport urllib.parse\n\nimport quart\nimport quart_cors\nfrom quart import request\n\n# Note: Setting CORS to allow chat.openapi.com is only required when running a localhost plugin\napp = quart_cors.cors(quart.Quart(__name__), allow_origin=\"https://chat.openai.com\")\nHOST_URL = \"https://example.com\"\n\n@app.get(\"/players\")\nasync def get_players():\n    query = request.args.get(\"query\")\n    res = requests.get(\n        f\"{HOST_URL}/api/v1/players?search={query}&page=0&per_page=100\")\n    body = res.json()\n    return quart.Response(response=json.dumps(body), status=200)\n\n\n@app.get(\"/teams\")\nasync def get_teams():\n    res = requests.get(\n        \"{HOST_URL}/api/v1/teams?page=0&per_page=100\")\n    body = res.json()\n    return quart.Response(response=json.dumps(body), status=200)\n\n\n@app.get(\"/games\")\nasync def get_games():\n    query_params = [(\"page\", \"0\")]\n    limit = request.args.get(\"limit\")\n    query_params.append((\"per_page\", limit or \"100\"))\n    start_date = request.args.get(\"start_date\")\n    if start_date:\n        query_params.append((\"start_date\", start_date))\n    end_date = request.args.get(\"end_date\")\n\n    if end_date:\n        query_params.append((\"end_date\", end_date))\n    seasons = request.args.getlist(\"seasons\")\n\n    for season in seasons:\n        query_params.append((\"seasons[]\", str(season)))\n    team_ids = request.args.getlist(\"team_ids\")\n\n    for team_id in team_ids:\n        query_params.append((\"team_ids[]\", str(team_id)))\n\n    res = requests.get(\n        f\"{HOST_URL}/api/v1/games?{urllib.parse.urlencode(query_params)}\")\n    body = res.json()\n    return quart.Response(response=json.dumps(body), status=200)\n\n\n@app.get(\"/stats\")\nasync def get_stats():\n    query_params = [(\"page\", \"0\")]\n    limit = request.args.get(\"limit\")\n    query_params.append((\"per_page\", limit or \"100\"))\n    start_date = request.args.get(\"start_date\")\n    if start_date:\n        query_params.append((\"start_date\", start_date))\n    end_date = request.args.get(\"end_date\")\n\n    if end_date:\n        query_params.append((\"end_date\", end_date))\n    player_ids = request.args.getlist(\"player_ids\")\n\n    for player_id in player_ids:\n        query_params.append((\"player_ids[]\", str(player_id)))\n    game_ids = request.args.getlist(\"game_ids\")\n\n    for game_id in game_ids:\n        query_params.append((\"game_ids[]\", str(game_id)))\n    res = requests.get(\n        f\"{HOST_URL}/api/v1/stats?{urllib.parse.urlencode(query_params)}\")\n    body = res.json()\n    return quart.Response(response=json.dumps(body), status=200)\n\n\n@app.get(\"/season_averages\")\nasync def get_season_averages():\n    query_params = []\n    season = request.args.get(\"season\")\n    if season:\n        query_params.append((\"season\", str(season)))\n    player_ids = request.args.getlist(\"player_ids\")\n\n    for player_id in player_ids:\n        query_params.append((\"player_ids[]\", str(player_id)))\n    res = requests.get(\n        f\"{HOST_URL}/api/v1/season_averages?{urllib.parse.urlencode(query_params)}\")\n    body = res.json()\n    return quart.Response(response=json.dumps(body), status=200)\n\n\n@app.get(\"/logo.png\")\nasync def plugin_logo():\n    filename = 'logo.png'\n    return await quart.send_file(filename, mimetype='image/png')\n\n\n@app.get(\"/.well-known/ai-plugin.json\")\nasync def plugin_manifest():\n    host = request.headers['Host']\n    with open(\"ai-plugin.json\") as f:\n        text = f.read()\n        # This is a trick we do to populate the PLUGIN_HOSTNAME constant in the manifest\n        text = text.replace(\"PLUGIN_HOSTNAME\", f\"https://{host}\")\n        return quart.Response(text, mimetype=\"text/json\")\n\n\n@app.get(\"/openapi.yaml\")\nasync def openapi_spec():\n    host = request.headers['Host']\n    with open(\"openapi.yaml\") as f:\n        text = f.read()\n        # This is a trick we do to populate the PLUGIN_HOSTNAME constant in the OpenAPI spec\n        text = text.replace(\"PLUGIN_HOSTNAME\", f\"https://{host}\")\n        return quart.Response(text, mimetype=\"text/yaml\")\n\n\ndef main():\n    app.run(debug=True, host=\"0.0.0.0\", port=5001)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLast, we define our OpenAPI specification:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\nopenapi: 3.0.1\ninfo:\n    title: Sport Stats\n    description: Get current and historical stats for sport players and games.\n    version: \"v1\"\nservers:\n    - url: PLUGIN_HOSTNAME\npaths:\n    /players:\n        get:\n            operationId: getPlayers\n            summary: Retrieves all players from all seasons whose names match the query string.\n            parameters:\n                - in: query\n                  name: query\n                  schema:\n                      type: string\n                  description: Used to filter players based on their name. For example, ?query=davis will return players that have 'davis' in their first or last name.\n            responses:\n                \"200\":\n                    description: OK\n    /teams:\n        get:\n            operationId: getTeams\n            summary: Retrieves all teams for the current season.\n            responses:\n                \"200\":\n                    description: OK\n    /games:\n        get:\n            operationId: getGames\n            summary: Retrieves all games that match the filters specified by the args. Display results using markdown tables.\n            parameters:\n                - in: query\n                  name: limit\n                  schema:\n                      type: string\n                  description: The max number of results to return.\n                - in: query\n                  name: seasons\n                  schema:\n                      type: array\n                      items:\n                          type: string\n                  description: Filter by seasons. Seasons are represented by the year they began. For example, 2018 represents season 2018-2019.\n                - in: query\n                  name: team_ids\n                  schema:\n                      type: array\n                      items:\n                          type: string\n                  description: Filter by team ids. Team ids can be determined using the getTeams function.\n                - in: query\n                  name: start_date\n                  schema:\n                      type: string\n                  description: A single date in 'YYYY-MM-DD' format. This is used to select games that occur on or after this date.\n                - in: query\n                  name: end_date\n                  schema:\n                      type: string\n                  description: A single date in 'YYYY-MM-DD' format. This is used to select games that occur on or before this date.\n            responses:\n                \"200\":\n                    description: OK\n    /stats:\n        get:\n            operationId: getStats\n            summary: Retrieves stats that match the filters specified by the args. Display results using markdown tables.\n            parameters:\n                - in: query\n                  name: limit\n                  schema:\n                      type: string\n                  description: The max number of results to return.\n                - in: query\n                  name: player_ids\n                  schema:\n                      type: array\n                      items:\n                          type: string\n                  description: Filter by player ids. Player ids can be determined using the getPlayers function.\n                - in: query\n                  name: game_ids\n                  schema:\n                      type: array\n                      items:\n                          type: string\n                  description: Filter by game ids. Game ids can be determined using the getGames function.\n                - in: query\n                  name: start_date\n                  schema:\n                      type: string\n                  description: A single date in 'YYYY-MM-DD' format. This is used to select games that occur on or after this date.\n                - in: query\n                  name: end_date\n                  schema:\n                      type: string\n                  description: A single date in 'YYYY-MM-DD' format. This is used to select games that occur on or before this date.\n            responses:\n                \"200\":\n                    description: OK\n    /season_averages:\n        get:\n            operationId: getSeasonAverages\n            summary: Retrieves regular season averages for the given players. Display results using markdown tables.\n            parameters:\n                - in: query\n                  name: season\n                  schema:\n                      type: string\n                  description: Defaults to the current season. A season is represented by the year it began. For example, 2018 represents season 2018-2019.\n                - in: query\n                  name: player_ids\n                  schema:\n                      type: array\n                      items:\n                          type: string\n                  description: Filter by player ids. Player ids can be determined using the getPlayers function.\n            responses:\n                \"200\":\n                    description: OK\n```\n\nLearn how to build a simple OAuth todo list plugin\n\nTo create an OAuth plugin, we start by defining a `ai-plugin.json` file with the auth type set to `oauth`:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n{\n    \"schema_version\": \"v1\",\n    \"name_for_human\": \"TODO List (OAuth)\",\n    \"name_for_model\": \"todo_oauth\",\n    \"description_for_human\": \"Manage your TODO list. You can add, remove and view your TODOs.\",\n    \"description_for_model\": \"Plugin for managing a TODO list, you can add, remove and view your TODOs.\",\n    \"auth\": {\n        \"type\": \"oauth\",\n        \"client_url\": \"PLUGIN_HOSTNAME/oauth\",\n        \"scope\": \"\",\n        \"authorization_url\": \"PLUGIN_HOSTNAME/auth/oauth_exchange\",\n        \"authorization_content_type\": \"application/json\",\n        \"verification_tokens\": {\n            \"openai\": \"Replace_this_string_with_the_verification_token_generated_in_the_ChatGPT_UI\"\n        }\n    },\n    \"api\": {\n        \"type\": \"openapi\",\n        \"url\": \"PLUGIN_HOSTNAME/openapi.yaml\"\n    },\n    \"logo_url\": \"PLUGIN_HOSTNAME/logo.png\",\n    \"contact_email\": \"contact@example.com\",\n    \"legal_info_url\": \"http://www.example.com/legal\"\n}\n```\n\nNext, we need to define our OAuth service. This OAuth example is not intended for production use cases but rather to highlight what a simple OAuth flow will look like so developers can get experience building towards a production solution.\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\nimport json\n\nimport quart\nimport quart_cors\nfrom quart import request\n\napp = quart_cors.cors(quart.Quart(__name__), allow_origin=\"*\")\n\n_TODOS = {}\n\n@app.post(\"/todos/<string:username>\")\nasync def add_todo(username):\n    request = await quart.request.get_json(force=True)\n    if username not in _TODOS:\n        _TODOS[username] = []\n    _TODOS[username].append(request[\"todo\"])\n    return quart.Response(response='OK', status=200)\n\n@app.get(\"/todos/<string:username>\")\nasync def get_todos(username):\n    print(request.headers)\n    return quart.Response(response=json.dumps(_TODOS.get(username, [])), status=200)\n\n@app.delete(\"/todos/<string:username>\")\nasync def delete_todo(username):\n    request = await quart.request.get_json(force=True)\n    todo_idx = request[\"todo_idx\"]\n    # fail silently, it's a simple plugin\n    if 0 <= todo_idx < len(_TODOS[username]):\n        _TODOS[username].pop(todo_idx)\n    return quart.Response(response='OK', status=200)\n\n@app.get(\"/logo.png\")\nasync def plugin_logo():\n    filename = 'logo.png'\n    return await quart.send_file(filename, mimetype='image/png')\n\n@app.get(\"/.well-known/ai-plugin.json\")\nasync def plugin_manifest():\n    host = request.headers['Host']\n    with open(\"manifest.json\") as f:\n        text = f.read()\n        text = text.replace(\"PLUGIN_HOSTNAME\", f\"https://{host}\")\n        return quart.Response(text, mimetype=\"text/json\")\n\n@app.get(\"/openapi.yaml\")\nasync def openapi_spec():\n    host = request.headers['Host']\n    with open(\"openapi.yaml\") as f:\n        text = f.read()\n        text = text.replace(\"PLUGIN_HOSTNAME\", f\"https://{host}\")\n        return quart.Response(text, mimetype=\"text/yaml\")\n\n@app.get(\"/oauth\")\nasync def oauth():\n    query_string = request.query_string.decode('utf-8')\n    parts = query_string.split('&')\n    kvps = {}\n    for part in parts:\n        k, v = part.split('=')\n        v = v.replace(\"%2F\", \"/\").replace(\"%3A\", \":\")\n        kvps[k] = v\n    print(\"OAuth key value pairs from the ChatGPT Request: \", kvps)\n    url = kvps[\"redirect_uri\"] + f\"?code={OPENAI_CODE}\"\n    print(\"URL: \", url)\n    return quart.Response(\n        f'<a href=\"{url}\">Click to authorize</a>'\n    )\n\n# Sample names\nOPENAI_CLIENT_ID = \"id\"\nOPENAI_CLIENT_SECRET = \"secret\"\nOPENAI_CODE = \"abc123\"\nOPENAI_TOKEN = \"def456\"\n\n@app.post(\"/auth/oauth_exchange\")\nasync def oauth_exchange():\n    request = await quart.request.get_json(force=True)\n    print(f\"oauth_exchange {request=}\")\n\n    if request[\"client_id\"] != OPENAI_CLIENT_ID:\n        raise RuntimeError(\"bad client ID\")\n    if request[\"client_secret\"] != OPENAI_CLIENT_SECRET:\n        raise RuntimeError(\"bad client secret\")\n    if request[\"code\"] != OPENAI_CODE:\n        raise RuntimeError(\"bad code\")\n\n    return {\n        \"access_token\": OPENAI_TOKEN,\n        \"token_type\": \"bearer\"\n    }\n\ndef main():\n    app.run(debug=True, host=\"0.0.0.0\", port=5002)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLast, like with our other examples, we define a simple OpenAPI file based on the endpoints:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\nopenapi: 3.0.1\ninfo:\n    title: TODO Plugin\n    description: A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username \"global\".\n    version: \"v1\"\nservers:\n    - url: PLUGIN_HOSTNAME\npaths:\n    /todos/{username}:\n        get:\n            operationId: getTodos\n            summary: Get the list of todos\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/getTodosResponse\"\n        post:\n            operationId: addTodo\n            summary: Add a todo to the list\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/addTodoRequest\"\n            responses:\n                \"200\":\n                    description: OK\n        delete:\n            operationId: deleteTodo\n            summary: Delete a todo from the list\n            parameters:\n                - in: path\n                  name: username\n                  schema:\n                      type: string\n                  required: true\n                  description: The name of the user.\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/deleteTodoRequest\"\n            responses:\n                \"200\":\n                    description: OK\n\ncomponents:\n    schemas:\n        getTodosResponse:\n            type: object\n            properties:\n                todos:\n                    type: array\n                    items:\n                        type: string\n                    description: The list of todos.\n        addTodoRequest:\n            type: object\n            required:\n                - todo\n            properties:\n                todo:\n                    type: string\n                    description: The todo to add to the list.\n                    required: true\n        deleteTodoRequest:\n            type: object\n            required:\n                - todo_idx\n            properties:\n                todo_idx:\n                    type: integer\n                    description: The index of the todo to delete.\n                    required: true\n```\n\nLearn how to build a semantic search and retrieval plugin\n\nThe [ChatGPT retrieval plugin](https://github.com/openai/chatgpt-retrieval-plugin) is a more fully featured code example. The scope of the plugin is large, so we encourage you to read through the code to see what a more advanced plugin looks like.\n\nThe retrieval plugin includes:\n\n*   Support for multiple vector databases providers\n*   All 4 different authentication methods\n*   Multiple different API features"
}