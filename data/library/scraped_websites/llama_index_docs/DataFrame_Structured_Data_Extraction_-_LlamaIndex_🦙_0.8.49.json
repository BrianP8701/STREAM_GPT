{
    "metadata": {
        "type": "web",
        "url": "https://docs.llamaindex.ai/en/stable/examples/output_parsing/df_program.html",
        "title": "DataFrame Structured Data Extraction - LlamaIndex \ud83e\udd99 0.8.49",
        "description": null
    },
    "text": "[Back to top](#)\n\nToggle table of contents sidebar\n\n## DataFrame Structured Data Extraction[\uf0c1](#dataframe-structured-data-extraction \"Permalink to this heading\")\n\nThis demo shows how you can extract tabular DataFrames from raw text.\n\nThis was directly inspired by jxnl\u2019s dataframe example here: https://github.com/jxnl/openai\\_function\\_call/blob/main/auto\\_dataframe.py.\n\nWe show this with different levels of complexity, all backed by the OpenAI Function API:\n\n*   (more code) How to build an extractor yourself using our OpenAIPydanticProgram\n    \n*   (less code) Using our out-of-the-box `DFFullProgram` and `DFRowsProgram` objects\n    \n\n## Build a DF Extractor Yourself (Using OpenAIPydanticProgram)[\uf0c1](#build-a-df-extractor-yourself-using-openaipydanticprogram \"Permalink to this heading\")\n\nOur OpenAIPydanticProgram is a wrapper around an OpenAI LLM that supports function calling - it will return structured outputs in the form of a Pydantic object.\n\nWe import our `DataFrame` and `DataFrameRowsOnly` objects.\n\nTo create an output extractor, you just need to 1) specify the relevant Pydantic object, and 2) Add the right prompt\n\nfrom llama\\_index.program import (\n    OpenAIPydanticProgram,\n    DFFullProgram,\n    DataFrame,\n    DataFrameRowsOnly,\n)\nfrom llama\\_index.llms import OpenAI\n\nprogram \\= OpenAIPydanticProgram.from\\_defaults(\n    output\\_cls\\=DataFrame,\n    llm\\=OpenAI(temperature\\=0, model\\=\"gpt-4-0613\"),\n    prompt\\_template\\_str\\=(\n        \"Please extract the following query into a structured data according\"\n        \" to: {input\\_str}.Please extract both the set of column names and a\"\n        \" set of rows.\"\n    ),\n    verbose\\=True,\n)\n\n\\# NOTE: the test example is taken from jxnl's repo\n\nresponse\\_obj \\= program(\n    input\\_str\\=\"\"\"My name is John and I am 25 years old. I live in \n        New York and I like to play basketball. His name is \n        Mike and he is 30 years old. He lives in San Francisco \n        and he likes to play baseball. Sarah is 20 years old \n        and she lives in Los Angeles. She likes to play tennis.\n        Her name is Mary and she is 35 years old. \n        She lives in Chicago.\"\"\"\n)\nresponse\\_obj\n\nFunction call: DataFrame with args: {\n  \"columns\": \\[\n    {\n      \"column\\_name\": \"Name\",\n      \"column\\_desc\": \"Name of the person\"\n    },\n    {\n      \"column\\_name\": \"Age\",\n      \"column\\_desc\": \"Age of the person\"\n    },\n    {\n      \"column\\_name\": \"City\",\n      \"column\\_desc\": \"City where the person lives\"\n    },\n    {\n      \"column\\_name\": \"Hobby\",\n      \"column\\_desc\": \"What the person likes to do\"\n    }\n  \\],\n  \"rows\": \\[\n    {\n      \"row\\_values\": \\[\"John\", 25, \"New York\", \"play basketball\"\\]\n    },\n    {\n      \"row\\_values\": \\[\"Mike\", 30, \"San Francisco\", \"play baseball\"\\]\n    },\n    {\n      \"row\\_values\": \\[\"Sarah\", 20, \"Los Angeles\", \"play tennis\"\\]\n    },\n    {\n      \"row\\_values\": \\[\"Mary\", 35, \"Chicago\", \"play tennis\"\\]\n    }\n  \\]\n}\n\nDataFrame(description=None, columns=\\[DataFrameColumn(column\\_name='Name', column\\_desc='Name of the person'), DataFrameColumn(column\\_name='Age', column\\_desc='Age of the person'), DataFrameColumn(column\\_name='City', column\\_desc='City where the person lives'), DataFrameColumn(column\\_name='Hobby', column\\_desc='What the person likes to do')\\], rows=\\[DataFrameRow(row\\_values=\\['John', 25, 'New York', 'play basketball'\\]), DataFrameRow(row\\_values=\\['Mike', 30, 'San Francisco', 'play baseball'\\]), DataFrameRow(row\\_values=\\['Sarah', 20, 'Los Angeles', 'play tennis'\\]), DataFrameRow(row\\_values=\\['Mary', 35, 'Chicago', 'play tennis'\\])\\])\n\nprogram \\= OpenAIPydanticProgram.from\\_defaults(\n    output\\_cls\\=DataFrameRowsOnly,\n    llm\\=OpenAI(temperature\\=0, model\\=\"gpt-4-0613\"),\n    prompt\\_template\\_str\\=(\n        \"Please extract the following text into a structured data:\"\n        \" {input\\_str}. The column names are the following: \\['Name', 'Age',\"\n        \" 'City', 'Favorite Sport'\\]. Do not specify additional parameters that\"\n        \" are not in the function schema. \"\n    ),\n    verbose\\=True,\n)\n\nprogram(\n    input\\_str\\=\"\"\"My name is John and I am 25 years old. I live in \n        New York and I like to play basketball. His name is \n        Mike and he is 30 years old. He lives in San Francisco \n        and he likes to play baseball. Sarah is 20 years old \n        and she lives in Los Angeles. She likes to play tennis.\n        Her name is Mary and she is 35 years old. \n        She lives in Chicago.\"\"\"\n)\n\nFunction call: DataFrameRowsOnly with args: {\n  \"rows\": \\[\n    {\n      \"row\\_values\": \\[\"John\", 25, \"New York\", \"basketball\"\\]\n    },\n    {\n      \"row\\_values\": \\[\"Mike\", 30, \"San Francisco\", \"baseball\"\\]\n    },\n    {\n      \"row\\_values\": \\[\"Sarah\", 20, \"Los Angeles\", \"tennis\"\\]\n    },\n    {\n      \"row\\_values\": \\[\"Mary\", 35, \"Chicago\", \"\"\\]\n    }\n  \\]\n}\n\nDataFrameRowsOnly(rows=\\[DataFrameRow(row\\_values=\\['John', 25, 'New York', 'basketball'\\]), DataFrameRow(row\\_values=\\['Mike', 30, 'San Francisco', 'baseball'\\]), DataFrameRow(row\\_values=\\['Sarah', 20, 'Los Angeles', 'tennis'\\]), DataFrameRow(row\\_values=\\['Mary', 35, 'Chicago', ''\\])\\])\n\n## Use our DataFrame Programs[\uf0c1](#use-our-dataframe-programs \"Permalink to this heading\")\n\nWe provide convenience wrappers for `DFFullProgram` and `DFRowsProgram`. This allows a simpler object creation interface than specifying all details through the `OpenAIPydanticProgram`.\n\nfrom llama\\_index.program import (\n    OpenAIPydanticProgram,\n    DFFullProgram,\n    DFRowsProgram,\n)\nimport pandas as pd\n\n\\# initialize empty df\ndf \\= pd.DataFrame(\n    {\n        \"Name\": pd.Series(dtype\\=\"str\"),\n        \"Age\": pd.Series(dtype\\=\"int\"),\n        \"City\": pd.Series(dtype\\=\"str\"),\n        \"Favorite Sport\": pd.Series(dtype\\=\"str\"),\n    }\n)\n\n\\# initialize program, using existing df as schema\ndf\\_rows\\_program \\= DFRowsProgram.from\\_defaults(\n    pydantic\\_program\\_cls\\=OpenAIPydanticProgram, df\\=df\n)\n\n\\# parse text, using existing df as schema\nresult\\_obj \\= df\\_rows\\_program(\n    input\\_str\\=\"\"\"My name is John and I am 25 years old. I live in \n        New York and I like to play basketball. His name is \n        Mike and he is 30 years old. He lives in San Francisco \n        and he likes to play baseball. Sarah is 20 years old \n        and she lives in Los Angeles. She likes to play tennis.\n        Her name is Mary and she is 35 years old. \n        She lives in Chicago.\"\"\"\n)\n\nresult\\_obj.to\\_df(existing\\_df\\=df)\n\n/Users/jerryliu/Programming/gpt\\_index/llama\\_index/program/predefined/df.py:65: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  return existing\\_df.append(new\\_df, ignore\\_index=True)\n\n|     | Name | Age | City | Favorite Sport |\n| --- | --- | --- | --- | --- |\n| 0   | John | 25  | New York | Basketball |\n| 1   | Mike | 30  | San Francisco | Baseball |\n| 2   | Sarah | 20  | Los Angeles | Tennis |\n| 3   | Mary | 35  | Chicago |     |\n\n\\# initialize program that can do joint schema extraction and structured data extraction\ndf\\_full\\_program \\= DFFullProgram.from\\_defaults(\n    pydantic\\_program\\_cls\\=OpenAIPydanticProgram,\n)\n\nresult\\_obj \\= df\\_full\\_program(\n    input\\_str\\=\"\"\"My name is John and I am 25 years old. I live in \n        New York and I like to play basketball. His name is \n        Mike and he is 30 years old. He lives in San Francisco \n        and he likes to play baseball. Sarah is 20 years old \n        and she lives in Los Angeles. She likes to play tennis.\n        Her name is Mary and she is 35 years old. \n        She lives in Chicago.\"\"\"\n)\n\n|     | Name | Age | Location | Hobby |\n| --- | --- | --- | --- | --- |\n| 0   | John | 25  | New York | Basketball |\n| 1   | Mike | 30  | San Francisco | Baseball |\n| 2   | Sarah | 20  | Los Angeles | Tennis |\n| 3   | Mary | 35  | Chicago |     |\n\n\\# initialize empty df\ndf \\= pd.DataFrame(\n    {\n        \"City\": pd.Series(dtype\\=\"str\"),\n        \"State\": pd.Series(dtype\\=\"str\"),\n        \"Population\": pd.Series(dtype\\=\"int\"),\n    }\n)\n\n\\# initialize program, using existing df as schema\ndf\\_rows\\_program \\= DFRowsProgram.from\\_defaults(\n    pydantic\\_program\\_cls\\=OpenAIPydanticProgram, df\\=df\n)\n\ninput\\_text \\= \"\"\"San Francisco is in California, has a population of 800,000. \nNew York City is the most populous city in the United States. \\\\\nWith a 2020 population of 8,804,190 distributed over 300.46 square miles (778.2 km2), \\\\\nNew York City is the most densely populated major city in the United States.\nNew York City is in New York State.\nBoston (US: /\u02c8b\u0254\u02d0st\u0259n/),\\[8\\] officially the City of Boston, is the capital and largest city of the Commonwealth of Massachusetts \\\\\nand the cultural and financial center of the New England region of the Northeastern United States. \\\\\nThe city boundaries encompass an area of about 48.4 sq mi (125 km2)\\[9\\] and a population of 675,647 as of 2020.\\[4\\]\n\"\"\"\n\n\\# parse text, using existing df as schema\nresult\\_obj \\= df\\_rows\\_program(input\\_str\\=input\\_text)\n\nnew\\_df \\= result\\_obj.to\\_df(existing\\_df\\=df)\nnew\\_df\n\n/Users/jerryliu/Programming/gpt\\_index/llama\\_index/program/predefined/df.py:65: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  return existing\\_df.append(new\\_df, ignore\\_index=True)\n\n|     | City | State | Population |\n| --- | --- | --- | --- |\n| 0   | San Francisco | California | 800000 |\n| 1   | New York City | New York | 8804190 |\n| 2   | Boston | Massachusetts | 675647 |"
}